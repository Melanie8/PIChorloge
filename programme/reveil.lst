gplink-0.13.7 beta
Copyright (c) 1998-2005 gputils project
Listing File Generated: 10-26-2013  20:25:26
 
 
Address  Value    Disassembly              Source
-------  -----    -----------              ------
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Oct 15 2013) (Mac OS X ppc)
                                           ; This file was generated Sat Oct 26 20:25:25 2013
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _time
                                           	global _refresh_lcd
                                           	global _alarm
                                           	global _button
                                           	global _inc_ahour
                                           	global _inc_amin
                                           	global _DisplayString
                                           	global _strlcpy
                                           	global _chandelle
                                           	global _button1
                                           	global _button2
                                           	global _overflows
                                           	global _sec
                                           	global _decisec
                                           	global _ds
                                           	global _h
                                           	global _m
                                           	global _s
                                           	global _thour
                                           	global _tmin
                                           	global _tsec
                                           	global _ahour
                                           	global _amin
                                           	global _ahour_o
                                           	global _amin_o
                                           	global _alarm_set
                                           	global _snooze
                                           	global _stop_ringing
                                           	global _whereami
                                           	global _on
                                           	global _display
                                           	global _high_isr
                                           	global _low_isr
                                           	global _main
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern __divuchar
                                           	extern __gptrget1
                                           	extern __gptrput1
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _LCDText
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _sprintf
                                           	extern _strlen
                                           	extern _LCDInit
                                           	extern _LCDUpdate
                                           	extern ___ulong2fs
                                           	extern ___fsdiv
                                           	extern ___fs2ulong
                                           	extern __mullong
                                           	extern __modulong
                                           	extern __divulong
                                           	extern ___fsadd
                                           	extern ___fssub
                                           	extern ___uchar2fs
                                           	extern ___fsmul
                                           	extern __modsint
                                           	extern __divsint
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           PCL	equ	0xff9
                                           PCLATH	equ	0xffa
                                           PCLATU	equ	0xffb
                                           WREG	equ	0xfe8
                                           BSR	equ	0xfe0
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           	idata
                                           _button1	db	0x00
                                           _button2	db	0x00
                                           _overflows	db	0x00, 0x00, 0x00, 0x00
                                           _thour	db	0x00
                                           _tmin	db	0x00
                                           _tsec	db	0x00
                                           _ahour	db	0x00
                                           _amin	db	0x00
                                           _ahour_o	db	0x00
                                           _amin_o	db	0x00
                                           _alarm_set	db	0x00
                                           _snooze	db	0x00
                                           _stop_ringing	db	0x00
                                           _whereami	db	0x00
                                           _on	db	0x00
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           r0x0a	res	1
                                           r0x0b	res	1
                                           r0x0c	res	1
                                           r0x0d	res	1
                                           r0x0e	res	1
                                           r0x0f	res	1
                                           r0x10	res	1
                                           r0x11	res	1
                                           r0x12	res	1
                                           r0x13	res	1
                                           r0x14	res	1
                                           r0x15	res	1
                                           
                                           udata_reveil_0	udata
                                           _chandelle	res	1
                                           
                                           udata_reveil_1	udata
                                           _sec	res	4
                                           
                                           udata_reveil_2	udata
                                           _decisec	res	4
                                           
                                           udata_reveil_3	udata
                                           _ds	res	1
                                           
                                           udata_reveil_4	udata
                                           _h	res	1
                                           
                                           udata_reveil_5	udata
                                           _m	res	1
                                           
                                           udata_reveil_6	udata
                                           _s	res	1
                                           
                                           udata_reveil_7	udata
                                           _display	res	32
                                           
                                           ;--------------------------------------------------------
                                           ; interrupt vector 
                                           ;--------------------------------------------------------
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; ; Starting pCode block for absolute section
                                           ; ;-----------------------------------------
                                           S_reveil_ivec_0x1_high_isr	code	0X000008
                                           ivec_0x1_high_isr:
000008   efea     goto	0x21d4              	GOTO	_high_isr
00000a   f010
                                           
                                           ; ; Starting pCode block for absolute section
                                           ; ;-----------------------------------------
                                           S_reveil_ivec_0x2_low_isr	code	0X000018
                                           ivec_0x2_low_isr:
000018   efca     goto	0x3f94              	GOTO	_low_isr
00001a   f01f
                                           
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_reveil__main	code
                                           _main:
                                           ;	.line	154; reveil.c	RCONbits.IPEN       = 1; //enable interrupts priority levels
00419e   8ed0     bsf	0xd0, 0x7, 0         	BSF	_RCONbits, 7
                                           ;	.line	155; reveil.c	INTCONbits.GIE      = 1; //enables all high-priority interrupts
0041a0   8ef2     bsf	0xf2, 0x7, 0         	BSF	_INTCONbits, 7
                                           ;	.line	156; reveil.c	INTCONbits.PEIE     = 1; //enables all low-priority peripheral interrupts
0041a2   8cf2     bsf	0xf2, 0x6, 0         	BSF	_INTCONbits, 6
                                           ;	.line	159; reveil.c	T0CONbits.TMR0ON    = 1; //enables Timer0
0041a4   8ed5     bsf	0xd5, 0x7, 0         	BSF	_T0CONbits, 7
                                           ;	.line	160; reveil.c	INTCONbits.TMR0IE   = 1; //enables the TMR0 overflow interrupt
0041a6   8af2     bsf	0xf2, 0x5, 0         	BSF	_INTCONbits, 5
                                           ;	.line	161; reveil.c	INTCONbits.TMR0IF   = 0; //clear Timer0 overflow bit
0041a8   94f2     bcf	0xf2, 0x2, 0         	BCF	_INTCONbits, 2
                                           ;	.line	162; reveil.c	INTCON2bits.TMR0IP  = 1; //high priority
0041aa   84f1     bsf	0xf1, 0x2, 0         	BSF	_INTCON2bits, 2
                                           ;	.line	163; reveil.c	T0CONbits.T08BIT    = 0; //timer0 is configured as a 16-bit timer/counter
0041ac   9cd5     bcf	0xd5, 0x6, 0         	BCF	_T0CONbits, 6
                                           ;	.line	164; reveil.c	T0CONbits.T0CS      = 0; //internal instruction cycle clock (CLKO)
0041ae   9ad5     bcf	0xd5, 0x5, 0         	BCF	_T0CONbits, 5
                                           ;	.line	165; reveil.c	T0CONbits.PSA       = 1; //timer0 prescaler is not assigned
0041b0   86d5     bsf	0xd5, 0x3, 0         	BSF	_T0CONbits, 3
                                           ;	.line	166; reveil.c	TMR0L = 0;    TMR0H = 0;
0041b2   6ad6     clrf	0xd6, 0             	CLRF	_TMR0L
0041b4   6ad7     clrf	0xd7, 0             	CLRF	_TMR0H
                                           ;	.line	169; reveil.c	LED0_TRIS = 0; //configure 1st led pin as output (yellow)
0041b6   909a     bcf	0x9a, 0, 0           	BCF	_TRISJbits, 0
                                           ;	.line	170; reveil.c	LED1_TRIS = 0; //configure 2nd led pin as output (red)
0041b8   929a     bcf	0x9a, 0x1, 0         	BCF	_TRISJbits, 1
                                           ;	.line	171; reveil.c	LED2_TRIS = 0; //configure 3rd led pin as output (red)
0041ba   949a     bcf	0x9a, 0x2, 0         	BCF	_TRISJbits, 2
                                           ;	.line	172; reveil.c	LATJbits.LATJ0 = 0; // switch LED 1 off
0041bc   9091     bcf	0x91, 0, 0           	BCF	_LATJbits, 0
                                           ;	.line	173; reveil.c	LATJbits.LATJ1 = 0; // switch LED 2 off
0041be   9291     bcf	0x91, 0x1, 0         	BCF	_LATJbits, 1
                                           ;	.line	174; reveil.c	LATJbits.LATJ2 = 0; // switch LED 3 off
0041c0   9491     bcf	0x91, 0x2, 0         	BCF	_LATJbits, 2
                                           ;	.line	177; reveil.c	BUTTON0_TRIS        = 1; //configure 1st button as input
0041c2   8693     bsf	0x93, 0x3, 0         	BSF	_TRISBbits, 3
                                           ;	.line	178; reveil.c	BUTTON1_TRIS        = 1; //configure 2nd button as input
0041c4   8293     bsf	0x93, 0x1, 0         	BSF	_TRISBbits, 1
                                           ;	.line	179; reveil.c	INTCON3bits.INT3E   = 1; //enable INT3 interrupt (button 1)
0041c6   8af0     bsf	0xf0, 0x5, 0         	BSF	_INTCON3bits, 5
                                           ;	.line	180; reveil.c	INTCON3bits.INT3F   = 0; //clear INT3 flag
0041c8   94f0     bcf	0xf0, 0x2, 0         	BCF	_INTCON3bits, 2
                                           ;	.line	181; reveil.c	INTCON3bits.INT1E   = 1; //enable INT1 interrupt (button 2)
0041ca   86f0     bsf	0xf0, 0x3, 0         	BSF	_INTCON3bits, 3
                                           ;	.line	182; reveil.c	INTCON3bits.INT1F   = 0; //clear INT1 flag
0041cc   90f0     bcf	0xf0, 0, 0           	BCF	_INTCON3bits, 0
                                           ;	.line	183; reveil.c	INTCON3bits.INT1IP  = 0; //low priority
0041ce   9cf0     bcf	0xf0, 0x6, 0         	BCF	_INTCON3bits, 6
                                           ;	.line	184; reveil.c	INTCON2bits.INT3IP  = 0; //low priority
0041d0   92f1     bcf	0xf1, 0x1, 0         	BCF	_INTCON2bits, 1
                                           ;	.line	186; reveil.c	LCDInit();
0041d2   ec79     call	0x26f2, 0           	CALL	_LCDInit
0041d4   f013
                                           ;	.line	187; reveil.c	whereami = TIME_MENU;
0041d6   0e01     movlw	0x1                	MOVLW	0x01
0041d8   010f     movlb	0xf                	BANKSEL	_whereami
0041da   6f51     movwf	0x51, 0x1          	MOVWF	_whereami, B
0041dc   010e     movlb	0xe                	BANKSEL	_chandelle
                                           ;	.line	189; reveil.c	chandelle++; // ##### BIZARRE ####
0041de   2b68     incf	0x68, 0x1, 0x1      	INCF	_chandelle, F, B
                                           ;	.line	191; reveil.c	T0CONbits.TMR0ON = 1; // start timer0
0041e0   8ed5     bsf	0xd5, 0x7, 0         	BSF	_T0CONbits, 7
                                           _00123_DS_:
                                           ;	.line	194; reveil.c	time();
0041e2   ec91     call	0x1b22, 0           	CALL	_time
0041e4   f00d
                                           ;	.line	195; reveil.c	refresh_lcd();
0041e6   ec29     call	0x852, 0            	CALL	_refresh_lcd
0041e8   f004
                                           ;	.line	196; reveil.c	alarm();
0041ea   ec45     call	0x3e8a, 0           	CALL	_alarm
0041ec   f01f
                                           ;	.line	197; reveil.c	button();
0041ee   ec1f     call	0xe3e, 0            	CALL	_button
0041f0   f007
0041f2   d7f7     bra	0x41e2               	BRA	_00123_DS_
0041f4   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_reveil__strlcpy	code
                                           _strlcpy:
                                           ;	.line	540; reveil.c	strlcpy(char *dst, const char *src, size_t siz)
002b62   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002b64   ffe5
002b66   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002b68   ffd9
002b6a   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002b6c   ffe5
002b6e   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002b70   ffe5
002b72   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
002b74   ffe5
002b76   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002b78   ffe5
002b7a   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
002b7c   ffe5
002b7e   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
002b80   ffe5
002b82   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
002b84   ffe5
002b86   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
002b88   ffe5
002b8a   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
002b8c   ffe5
002b8e   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
002b90   ffe5
002b92   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
002b94   ffe5
002b96   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
002b98   ffe5
002b9a   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
002b9c   ffe5
002b9e   c00d     movff	0xd, 0xfe5         	MOVFF	r0x0d, POSTDEC1
002ba0   ffe5
002ba2   c00e     movff	0xe, 0xfe5         	MOVFF	r0x0e, POSTDEC1
002ba4   ffe5
002ba6   c00f     movff	0xf, 0xfe5         	MOVFF	r0x0f, POSTDEC1
002ba8   ffe5
002baa   c010     movff	0x10, 0xfe5        	MOVFF	r0x10, POSTDEC1
002bac   ffe5
002bae   c011     movff	0x11, 0xfe5        	MOVFF	r0x11, POSTDEC1
002bb0   ffe5
002bb2   c012     movff	0x12, 0xfe5        	MOVFF	r0x12, POSTDEC1
002bb4   ffe5
002bb6   c013     movff	0x13, 0xfe5        	MOVFF	r0x13, POSTDEC1
002bb8   ffe5
002bba   c014     movff	0x14, 0xfe5        	MOVFF	r0x14, POSTDEC1
002bbc   ffe5
002bbe   c015     movff	0x15, 0xfe5        	MOVFF	r0x15, POSTDEC1
002bc0   ffe5
002bc2   0e02     movlw	0x2                	MOVLW	0x02
002bc4   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
002bc6   f000
002bc8   0e03     movlw	0x3                	MOVLW	0x03
002bca   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
002bcc   f001
002bce   0e04     movlw	0x4                	MOVLW	0x04
002bd0   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
002bd2   f002
002bd4   0e05     movlw	0x5                	MOVLW	0x05
002bd6   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
002bd8   f003
002bda   0e06     movlw	0x6                	MOVLW	0x06
002bdc   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
002bde   f004
002be0   0e07     movlw	0x7                	MOVLW	0x07
002be2   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
002be4   f005
002be6   0e08     movlw	0x8                	MOVLW	0x08
002be8   cfdb     movff	0xfdb, 0x6         	MOVFF	PLUSW2, r0x06
002bea   f006
002bec   0e09     movlw	0x9                	MOVLW	0x09
002bee   cfdb     movff	0xfdb, 0x7         	MOVFF	PLUSW2, r0x07
002bf0   f007
                                           ;	.line	542; reveil.c	char       *d = dst;
002bf2   c000     movff	0, 0x8             	MOVFF	r0x00, r0x08
002bf4   f008
002bf6   c001     movff	0x1, 0x9           	MOVFF	r0x01, r0x09
002bf8   f009
002bfa   c002     movff	0x2, 0xa           	MOVFF	r0x02, r0x0a
002bfc   f00a
                                           ;	.line	543; reveil.c	const char *s = src;
002bfe   c003     movff	0x3, 0xb           	MOVFF	r0x03, r0x0b
002c00   f00b
002c02   c004     movff	0x4, 0xc           	MOVFF	r0x04, r0x0c
002c04   f00c
002c06   c005     movff	0x5, 0xd           	MOVFF	r0x05, r0x0d
002c08   f00d
                                           ;	.line	544; reveil.c	size_t      n = siz;
002c0a   c006     movff	0x6, 0xe           	MOVFF	r0x06, r0x0e
002c0c   f00e
002c0e   c007     movff	0x7, 0xf           	MOVFF	r0x07, r0x0f
002c10   f00f
                                           ;	.line	547; reveil.c	if (n != 0)
002c12   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
002c14   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
002c16   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
002c18   d03e     bra	0x2c96               	BRA	_00359_DS_
                                           ;	.line	549; reveil.c	while (--n != 0)
002c1a   c003     movff	0x3, 0x10          	MOVFF	r0x03, r0x10
002c1c   f010
002c1e   c004     movff	0x4, 0x11          	MOVFF	r0x04, r0x11
002c20   f011
002c22   c005     movff	0x5, 0x12          	MOVFF	r0x05, r0x12
002c24   f012
002c26   c006     movff	0x6, 0x13          	MOVFF	r0x06, r0x13
002c28   f013
002c2a   c007     movff	0x7, 0x14          	MOVFF	r0x07, r0x14
002c2c   f014
                                           _00355_DS_:
002c2e   0eff     movlw	0xff               	MOVLW	0xff
002c30   2613     addwf	0x13, 0x1, 0       	ADDWF	r0x13, F
002c32   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
002c34   0614     decf	0x14, 0x1, 0        	DECF	r0x14, F
002c36   5013     movf	0x13, 0, 0          	MOVF	r0x13, W
002c38   1014     iorwf	0x14, 0, 0         	IORWF	r0x14, W
002c3a   e01d     bz	0x2c76                	BZ	_00374_DS_
                                           ;	.line	551; reveil.c	if ((*d++ = *s++) == '\0')
002c3c   c010     movff	0x10, 0xfe9        	MOVFF	r0x10, FSR0L
002c3e   ffe9
002c40   c011     movff	0x11, 0xff3        	MOVFF	r0x11, PRODL
002c42   fff3
002c44   5012     movf	0x12, 0, 0          	MOVF	r0x12, W
002c46   ec63     call	0x42c6, 0           	CALL	__gptrget1
002c48   f021
002c4a   6e15     movwf	0x15, 0            	MOVWF	r0x15
002c4c   2a10     incf	0x10, 0x1, 0        	INCF	r0x10, F
002c4e   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
002c50   2a11     incf	0x11, 0x1, 0        	INCF	r0x11, F
002c52   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
002c54   2a12     incf	0x12, 0x1, 0        	INCF	r0x12, F
002c56   c015     movff	0x15, 0xfe5        	MOVFF	r0x15, POSTDEC1
002c58   ffe5
002c5a   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
002c5c   ffe9
002c5e   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
002c60   fff3
002c62   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002c64   ec98     call	0x4330, 0           	CALL	__gptrput1
002c66   f021
002c68   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
002c6a   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
002c6c   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
002c6e   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
002c70   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
002c72   5015     movf	0x15, 0, 0          	MOVF	r0x15, W
002c74   e1dc     bnz	0x2c2e               	BNZ	_00355_DS_
                                           _00374_DS_:
                                           ;	.line	552; reveil.c	break;
002c76   c010     movff	0x10, 0xb          	MOVFF	r0x10, r0x0b
002c78   f00b
002c7a   c011     movff	0x11, 0xc          	MOVFF	r0x11, r0x0c
002c7c   f00c
002c7e   c012     movff	0x12, 0xd          	MOVFF	r0x12, r0x0d
002c80   f00d
002c82   c000     movff	0, 0x8             	MOVFF	r0x00, r0x08
002c84   f008
002c86   c001     movff	0x1, 0x9           	MOVFF	r0x01, r0x09
002c88   f009
002c8a   c002     movff	0x2, 0xa           	MOVFF	r0x02, r0x0a
002c8c   f00a
002c8e   c013     movff	0x13, 0xe          	MOVFF	r0x13, r0x0e
002c90   f00e
002c92   c014     movff	0x14, 0xf          	MOVFF	r0x14, r0x0f
002c94   f00f
                                           _00359_DS_:
                                           ;	.line	557; reveil.c	if (n == 0)
002c96   500e     movf	0xe, 0, 0           	MOVF	r0x0e, W
002c98   100f     iorwf	0xf, 0, 0          	IORWF	r0x0f, W
002c9a   e127     bnz	0x2cea               	BNZ	_00366_DS_
                                           ;	.line	559; reveil.c	if (siz != 0)
002c9c   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
002c9e   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
002ca0   e009     bz	0x2cb4                	BZ	_00373_DS_
                                           ;	.line	560; reveil.c	*d = '\0';          /* NUL-terminate dst */
002ca2   0e00     movlw	0                  	MOVLW	0x00
002ca4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002ca6   c008     movff	0x8, 0xfe9         	MOVFF	r0x08, FSR0L
002ca8   ffe9
002caa   c009     movff	0x9, 0xff3         	MOVFF	r0x09, PRODL
002cac   fff3
002cae   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
002cb0   ec98     call	0x4330, 0           	CALL	__gptrput1
002cb2   f021
                                           _00373_DS_:
                                           ;	.line	561; reveil.c	while (*s++)
002cb4   c00b     movff	0xb, 0             	MOVFF	r0x0b, r0x00
002cb6   f000
002cb8   c00c     movff	0xc, 0x1           	MOVFF	r0x0c, r0x01
002cba   f001
002cbc   c00d     movff	0xd, 0x2           	MOVFF	r0x0d, r0x02
002cbe   f002
                                           _00362_DS_:
002cc0   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
002cc2   ffe9
002cc4   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
002cc6   fff3
002cc8   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002cca   ec63     call	0x42c6, 0           	CALL	__gptrget1
002ccc   f021
002cce   6e06     movwf	0x6, 0             	MOVWF	r0x06
002cd0   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
002cd2   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
002cd4   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
002cd6   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
002cd8   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
002cda   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
002cdc   e1f1     bnz	0x2cc0               	BNZ	_00362_DS_
002cde   c000     movff	0, 0xb             	MOVFF	r0x00, r0x0b
002ce0   f00b
002ce2   c001     movff	0x1, 0xc           	MOVFF	r0x01, r0x0c
002ce4   f00c
002ce6   c002     movff	0x2, 0xd           	MOVFF	r0x02, r0x0d
002ce8   f00d
                                           _00366_DS_:
                                           ;	.line	567; reveil.c	return (s - src - 1);       /* count does not include NUL */
002cea   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002cec   5c0b     subwf	0xb, 0, 0          	SUBWF	r0x0b, W
002cee   6e03     movwf	0x3, 0             	MOVWF	r0x03
002cf0   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002cf2   580c     subwfb	0xc, 0, 0         	SUBWFB	r0x0c, W
002cf4   6e04     movwf	0x4, 0             	MOVWF	r0x04
002cf6   0eff     movlw	0xff               	MOVLW	0xff
002cf8   2603     addwf	0x3, 0x1, 0        	ADDWF	r0x03, F
002cfa   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
002cfc   0604     decf	0x4, 0x1, 0         	DECF	r0x04, F
002cfe   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
002d00   fff3
002d02   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002d04   cfe4     movff	0xfe4, 0x15        	MOVFF	PREINC1, r0x15
002d06   f015
002d08   cfe4     movff	0xfe4, 0x14        	MOVFF	PREINC1, r0x14
002d0a   f014
002d0c   cfe4     movff	0xfe4, 0x13        	MOVFF	PREINC1, r0x13
002d0e   f013
002d10   cfe4     movff	0xfe4, 0x12        	MOVFF	PREINC1, r0x12
002d12   f012
002d14   cfe4     movff	0xfe4, 0x11        	MOVFF	PREINC1, r0x11
002d16   f011
002d18   cfe4     movff	0xfe4, 0x10        	MOVFF	PREINC1, r0x10
002d1a   f010
002d1c   cfe4     movff	0xfe4, 0xf         	MOVFF	PREINC1, r0x0f
002d1e   f00f
002d20   cfe4     movff	0xfe4, 0xe         	MOVFF	PREINC1, r0x0e
002d22   f00e
002d24   cfe4     movff	0xfe4, 0xd         	MOVFF	PREINC1, r0x0d
002d26   f00d
002d28   cfe4     movff	0xfe4, 0xc         	MOVFF	PREINC1, r0x0c
002d2a   f00c
002d2c   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
002d2e   f00b
002d30   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
002d32   f00a
002d34   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
002d36   f009
002d38   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
002d3a   f008
002d3c   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
002d3e   f007
002d40   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
002d42   f006
002d44   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
002d46   f005
002d48   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
002d4a   f004
002d4c   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
002d4e   f003
002d50   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
002d52   f002
002d54   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
002d56   f001
002d58   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002d5a   f000
002d5c   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002d5e   ffd9
002d60   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_reveil__DisplayString	code
                                           _DisplayString:
                                           ;	.line	495; reveil.c	void DisplayString(BYTE pos, char* text)
0038d6   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0038d8   ffe5
0038da   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0038dc   ffd9
0038de   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0038e0   ffe5
0038e2   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0038e4   ffe5
0038e6   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0038e8   ffe5
0038ea   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0038ec   ffe5
0038ee   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0038f0   ffe5
0038f2   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0038f4   ffe5
0038f6   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0038f8   ffe5
0038fa   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
0038fc   ffe5
0038fe   0e02     movlw	0x2                	MOVLW	0x02
003900   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
003902   f000
003904   0e03     movlw	0x3                	MOVLW	0x03
003906   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
003908   f001
00390a   0e04     movlw	0x4                	MOVLW	0x04
00390c   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
00390e   f002
003910   0e05     movlw	0x5                	MOVLW	0x05
003912   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
003914   f003
                                           ;	.line	497; reveil.c	BYTE l= strlen(text)+1;
003916   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
003918   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00391a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00391c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00391e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
003920   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003922   ec8a     call	0x3f14, 0           	CALL	_strlen
003924   f01f
003926   6e04     movwf	0x4, 0             	MOVWF	r0x04
003928   cff3     movff	0xff3, 0x5         	MOVFF	PRODL, r0x05
00392a   f005
00392c   0e03     movlw	0x3                	MOVLW	0x03
00392e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
003930   2a04     incf	0x4, 0x1, 0         	INCF	r0x04, F
                                           ;	.line	498; reveil.c	BYTE max= 32-pos;
003932   5000     movf	0, 0, 0             	MOVF	r0x00, W
003934   0820     sublw	0x20               	SUBLW	0x20
003936   6e05     movwf	0x5, 0             	MOVWF	r0x05
                                           ;	.line	499; reveil.c	strlcpy((char*)&LCDText[pos], text,(l<max)?l:max );
003938   6a06     clrf	0x6, 0              	CLRF	r0x06
00393a   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
00393c   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
00393e   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
003940   2206     addwfc	0x6, 0x1, 0       	ADDWFC	r0x06, F
003942   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
003944   6e06     movwf	0x6, 0             	MOVWF	r0x06
003946   5000     movf	0, 0, 0             	MOVF	r0x00, W
003948   6e00     movwf	0, 0               	MOVWF	r0x00
00394a   0e80     movlw	0x80               	MOVLW	0x80
00394c   6e07     movwf	0x7, 0             	MOVWF	r0x07
00394e   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
003950   5c04     subwf	0x4, 0, 0          	SUBWF	r0x04, W
003952   e302     bnc	0x3958               	BNC	_00346_DS_
003954   c005     movff	0x5, 0x4           	MOVFF	r0x05, r0x04
003956   f004
                                           _00346_DS_:
003958   6a05     clrf	0x5, 0              	CLRF	r0x05
00395a   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00395c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00395e   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
003960   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003962   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
003964   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003966   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
003968   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00396a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00396c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00396e   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
003970   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003972   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
003974   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003976   5000     movf	0, 0, 0             	MOVF	r0x00, W
003978   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00397a   ecb1     call	0x2b62, 0           	CALL	_strlcpy
00397c   f015
00397e   0e08     movlw	0x8                	MOVLW	0x08
003980   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	500; reveil.c	LCDUpdate();
003982   ec44     call	0x2488, 0           	CALL	_LCDUpdate
003984   f012
003986   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
003988   f007
00398a   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
00398c   f006
00398e   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
003990   f005
003992   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
003994   f004
003996   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
003998   f003
00399a   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00399c   f002
00399e   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0039a0   f001
0039a2   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0039a4   f000
0039a6   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0039a8   ffd9
0039aa   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_reveil__inc_amin	code
                                           _inc_amin:
                                           ;	.line	476; reveil.c	void inc_amin(BYTE val)
003d50   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
003d52   ffe5
003d54   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
003d56   ffd9
003d58   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
003d5a   ffe5
003d5c   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
003d5e   ffe5
003d60   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
003d62   ffe5
003d64   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
003d66   ffe5
003d68   0e02     movlw	0x2                	MOVLW	0x02
003d6a   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
003d6c   f000
                                           ;	.line	480; reveil.c	mod_amin = (amin + val) / 60;
003d6e   cf4b     movff	0xf4b, 0x1         	MOVFF	_amin, r0x01
003d70   f001
003d72   6a02     clrf	0x2, 0              	CLRF	r0x02
003d74   6a03     clrf	0x3, 0              	CLRF	r0x03
003d76   5000     movf	0, 0, 0             	MOVF	r0x00, W
003d78   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
003d7a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
003d7c   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
003d7e   0e00     movlw	0                  	MOVLW	0x00
003d80   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003d82   0e3c     movlw	0x3c               	MOVLW	0x3c
003d84   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003d86   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
003d88   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003d8a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
003d8c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003d8e   ec93     call	0x3526, 0           	CALL	__divsint
003d90   f01a
003d92   6e01     movwf	0x1, 0             	MOVWF	r0x01
003d94   cff3     movff	0xff3, 0x2         	MOVFF	PRODL, r0x02
003d96   f002
003d98   0e04     movlw	0x4                	MOVLW	0x04
003d9a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	481; reveil.c	if (mod_amin) {
003d9c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
003d9e   e005     bz	0x3daa                	BZ	_00337_DS_
                                           ;	.line	482; reveil.c	inc_ahour(mod_amin);
003da0   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
003da2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003da4   ec39     call	0x4072, 0           	CALL	_inc_ahour
003da6   f020
003da8   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           _00337_DS_:
                                           ;	.line	485; reveil.c	amin = (amin + val) % 60;
003daa   cf4b     movff	0xf4b, 0x1         	MOVFF	_amin, r0x01
003dac   f001
003dae   6a02     clrf	0x2, 0              	CLRF	r0x02
003db0   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
003db2   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
003db4   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
003db6   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
003db8   0e00     movlw	0                  	MOVLW	0x00
003dba   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003dbc   0e3c     movlw	0x3c               	MOVLW	0x3c
003dbe   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003dc0   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
003dc2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003dc4   5000     movf	0, 0, 0             	MOVF	r0x00, W
003dc6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003dc8   ecf9     call	0x37f2, 0           	CALL	__modsint
003dca   f01b
003dcc   6e00     movwf	0, 0               	MOVWF	r0x00
003dce   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
003dd0   f001
003dd2   0e04     movlw	0x4                	MOVLW	0x04
003dd4   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
003dd6   5000     movf	0, 0, 0             	MOVF	r0x00, W
003dd8   010f     movlb	0xf                	BANKSEL	_amin
003dda   6f4b     movwf	0x4b, 0x1          	MOVWF	_amin, B
003ddc   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
003dde   f003
003de0   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
003de2   f002
003de4   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
003de6   f001
003de8   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
003dea   f000
003dec   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
003dee   ffd9
003df0   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_reveil__inc_ahour	code
                                           _inc_ahour:
                                           ;	.line	470; reveil.c	void inc_ahour(BYTE val)
004072   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
004074   ffe5
004076   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
004078   ffd9
00407a   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00407c   ffe5
00407e   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
004080   ffe5
004082   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
004084   ffe5
004086   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
004088   ffe5
00408a   0e02     movlw	0x2                	MOVLW	0x02
00408c   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
00408e   f000
                                           ;	.line	472; reveil.c	ahour = (ahour + val) % 24;
004090   cf4a     movff	0xf4a, 0x1         	MOVFF	_ahour, r0x01
004092   f001
004094   6a02     clrf	0x2, 0              	CLRF	r0x02
004096   6a03     clrf	0x3, 0              	CLRF	r0x03
004098   5000     movf	0, 0, 0             	MOVF	r0x00, W
00409a   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
00409c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00409e   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0040a0   0e00     movlw	0                  	MOVLW	0x00
0040a2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0040a4   0e18     movlw	0x18               	MOVLW	0x18
0040a6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0040a8   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0040aa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0040ac   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0040ae   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0040b0   ecf9     call	0x37f2, 0           	CALL	__modsint
0040b2   f01b
0040b4   6e00     movwf	0, 0               	MOVWF	r0x00
0040b6   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
0040b8   f001
0040ba   0e04     movlw	0x4                	MOVLW	0x04
0040bc   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0040be   5000     movf	0, 0, 0             	MOVF	r0x00, W
0040c0   010f     movlb	0xf                	BANKSEL	_ahour
0040c2   6f4a     movwf	0x4a, 0x1          	MOVWF	_ahour, B
0040c4   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0040c6   f003
0040c8   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0040ca   f002
0040cc   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0040ce   f001
0040d0   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0040d2   f000
0040d4   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0040d6   ffd9
0040d8   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_reveil__button	code
                                           _button:
                                           ;	.line	340; reveil.c	void button(void)
000e3e   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000e40   ffe5
000e42   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000e44   ffd9
000e46   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000e48   ffe5
000e4a   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000e4c   ffe5
000e4e   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
000e50   ffe5
000e52   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
000e54   ffe5
000e56   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
000e58   ffe5
000e5a   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
000e5c   ffe5
000e5e   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
000e60   ffe5
000e62   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
000e64   ffe5
                                           ;	.line	345; reveil.c	BYTE incsec = tsec;
000e66   cf49     movff	0xf49, 0           	MOVFF	_tsec, r0x00
000e68   f000
000e6a   010f     movlb	0xf                	BANKSEL	_button1
                                           ;	.line	348; reveil.c	if (button1) {
000e6c   5141     movf	0x41, 0, 0x1        	MOVF	_button1, W, B
000e6e   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
000e70   d07d     bra	0xf6c                	BRA	_00297_DS_
                                           ;	.line	349; reveil.c	switch (whereami) {
000e72   0e01     movlw	0x1                	MOVLW	0x01
000e74   010f     movlb	0xf                	BANKSEL	_whereami
000e76   5d51     subwf	0x51, 0, 0x1       	SUBWF	_whereami, W, B
000e78   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
000e7a   d074     bra	0xf64                	BRA	_00267_DS_
000e7c   0e0c     movlw	0xc                	MOVLW	0x0c
000e7e   010f     movlb	0xf                	BANKSEL	_whereami
000e80   5d51     subwf	0x51, 0, 0x1       	SUBWF	_whereami, W, B
000e82   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000e84   d06f     bra	0xf64                	BRA	_00267_DS_
000e86   010f     movlb	0xf                	BANKSEL	_whereami
000e88   0551     decf	0x51, 0, 0x1        	DECF	_whereami, W, B
000e8a   6e01     movwf	0x1, 0             	MOVWF	r0x01
000e8c   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
000e8e   ffe5
000e90   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
000e92   ffe5
000e94   6a09     clrf	0x9, 0              	CLRF	r0x09
000e96   3401     rlcf	0x1, 0, 0           	RLCF	r0x01, W
000e98   3609     rlcf	0x9, 0x1, 0         	RLCF	r0x09, F
000e9a   34e8     rlcf	0xe8, 0, 0          	RLCF	WREG, W
000e9c   3609     rlcf	0x9, 0x1, 0         	RLCF	r0x09, F
000e9e   0bfc     andlw	0xfc               	ANDLW	0xfc
000ea0   6e08     movwf	0x8, 0             	MOVWF	r0x08
000ea2   0e00     movlw	0                  	MOVLW	UPPER(_00314_DS_)
000ea4   6efb     movwf	0xfb, 0            	MOVWF	PCLATU
000ea6   0e0e     movlw	0xe                	MOVLW	HIGH(_00314_DS_)
000ea8   6efa     movwf	0xfa, 0            	MOVWF	PCLATH
000eaa   0ec2     movlw	0xc2               	MOVLW	LOW(_00314_DS_)
000eac   2608     addwf	0x8, 0x1, 0        	ADDWF	r0x08, F
000eae   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
000eb0   22fa     addwfc	0xfa, 0x1, 0      	ADDWFC	PCLATH, F
000eb2   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000eb4   2afb     incf	0xfb, 0x1, 0        	INCF	PCLATU, F
000eb6   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
000eb8   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
000eba   f009
000ebc   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
000ebe   f008
000ec0   6ef9     movwf	0xf9, 0            	MOVWF	PCL
                                           _00314_DS_:
000ec2   ef77     goto	0xeee               	GOTO	_00255_DS_
000ec4   f007
000ec6   ef7b     goto	0xef6               	GOTO	_00256_DS_
000ec8   f007
000eca   ef7f     goto	0xefe               	GOTO	_00257_DS_
000ecc   f007
000ece   ef83     goto	0xf06               	GOTO	_00258_DS_
000ed0   f007
000ed2   ef87     goto	0xf0e               	GOTO	_00259_DS_
000ed4   f007
000ed6   ef8b     goto	0xf16               	GOTO	_00260_DS_
000ed8   f007
000eda   ef8f     goto	0xf1e               	GOTO	_00261_DS_
000edc   f007
000ede   ef93     goto	0xf26               	GOTO	_00262_DS_
000ee0   f007
000ee2   ef97     goto	0xf2e               	GOTO	_00263_DS_
000ee4   f007
000ee6   ef9b     goto	0xf36               	GOTO	_00264_DS_
000ee8   f007
000eea   efa4     goto	0xf48               	GOTO	_00265_DS_
000eec   f007
                                           _00255_DS_:
                                           ;	.line	351; reveil.c	whereami = ALARM_MENU;
000eee   0e05     movlw	0x5                	MOVLW	0x05
000ef0   010f     movlb	0xf                	BANKSEL	_whereami
000ef2   6f51     movwf	0x51, 0x1          	MOVWF	_whereami, B
                                           ;	.line	352; reveil.c	break;
000ef4   d037     bra	0xf64                	BRA	_00267_DS_
                                           _00256_DS_:
                                           ;	.line	354; reveil.c	whereami = SET_MINUTE;
000ef6   0e03     movlw	0x3                	MOVLW	0x03
000ef8   010f     movlb	0xf                	BANKSEL	_whereami
000efa   6f51     movwf	0x51, 0x1          	MOVWF	_whereami, B
                                           ;	.line	355; reveil.c	break;
000efc   d033     bra	0xf64                	BRA	_00267_DS_
                                           _00257_DS_:
                                           ;	.line	357; reveil.c	whereami = SET_SECOND;
000efe   0e04     movlw	0x4                	MOVLW	0x04
000f00   010f     movlb	0xf                	BANKSEL	_whereami
000f02   6f51     movwf	0x51, 0x1          	MOVWF	_whereami, B
                                           ;	.line	358; reveil.c	break;
000f04   d02f     bra	0xf64                	BRA	_00267_DS_
                                           _00258_DS_:
                                           ;	.line	360; reveil.c	whereami = ALARM_MENU;
000f06   0e05     movlw	0x5                	MOVLW	0x05
000f08   010f     movlb	0xf                	BANKSEL	_whereami
000f0a   6f51     movwf	0x51, 0x1          	MOVWF	_whereami, B
                                           ;	.line	361; reveil.c	break;
000f0c   d02b     bra	0xf64                	BRA	_00267_DS_
                                           _00259_DS_:
                                           ;	.line	363; reveil.c	whereami = DISPLAY;
000f0e   0e09     movlw	0x9                	MOVLW	0x09
000f10   010f     movlb	0xf                	BANKSEL	_whereami
000f12   6f51     movwf	0x51, 0x1          	MOVWF	_whereami, B
                                           ;	.line	364; reveil.c	break;
000f14   d027     bra	0xf64                	BRA	_00267_DS_
                                           _00260_DS_:
                                           ;	.line	366; reveil.c	whereami = SET_A_HOUR;
000f16   0e07     movlw	0x7                	MOVLW	0x07
000f18   010f     movlb	0xf                	BANKSEL	_whereami
000f1a   6f51     movwf	0x51, 0x1          	MOVWF	_whereami, B
                                           ;	.line	367; reveil.c	break;
000f1c   d023     bra	0xf64                	BRA	_00267_DS_
                                           _00261_DS_:
                                           ;	.line	369; reveil.c	whereami = SET_A_MIN;
000f1e   0e08     movlw	0x8                	MOVLW	0x08
000f20   010f     movlb	0xf                	BANKSEL	_whereami
000f22   6f51     movwf	0x51, 0x1          	MOVWF	_whereami, B
                                           ;	.line	370; reveil.c	break;
000f24   d01f     bra	0xf64                	BRA	_00267_DS_
                                           _00262_DS_:
                                           ;	.line	372; reveil.c	whereami = DISPLAY;
000f26   0e09     movlw	0x9                	MOVLW	0x09
000f28   010f     movlb	0xf                	BANKSEL	_whereami
000f2a   6f51     movwf	0x51, 0x1          	MOVWF	_whereami, B
                                           ;	.line	373; reveil.c	break;
000f2c   d01b     bra	0xf64                	BRA	_00267_DS_
                                           _00263_DS_:
                                           ;	.line	375; reveil.c	whereami = TIME_MENU;
000f2e   0e01     movlw	0x1                	MOVLW	0x01
000f30   010f     movlb	0xf                	BANKSEL	_whereami
000f32   6f51     movwf	0x51, 0x1          	MOVWF	_whereami, B
                                           ;	.line	376; reveil.c	break;
000f34   d017     bra	0xf64                	BRA	_00267_DS_
                                           _00264_DS_:
                                           ;	.line	378; reveil.c	stop_ringing = 1;
000f36   0e01     movlw	0x1                	MOVLW	0x01
000f38   010f     movlb	0xf                	BANKSEL	_stop_ringing
000f3a   6f50     movwf	0x50, 0x1          	MOVWF	_stop_ringing, B
                                           ;	.line	379; reveil.c	LATJbits.LATJ1 = 0; // switch LED 2 off
000f3c   9291     bcf	0x91, 0x1, 0         	BCF	_LATJbits, 1
                                           ;	.line	380; reveil.c	LATJbits.LATJ2 = 0; // switch LED 3 off
000f3e   9491     bcf	0x91, 0x2, 0         	BCF	_LATJbits, 2
                                           ;	.line	381; reveil.c	whereami = DISPLAY;
000f40   0e09     movlw	0x9                	MOVLW	0x09
000f42   010f     movlb	0xf                	BANKSEL	_whereami
000f44   6f51     movwf	0x51, 0x1          	MOVWF	_whereami, B
                                           ;	.line	382; reveil.c	break;
000f46   d00e     bra	0xf64                	BRA	_00267_DS_
                                           _00265_DS_:
                                           ;	.line	384; reveil.c	stop_ringing = 1; // le réveil ne doit plus sonner
000f48   0e01     movlw	0x1                	MOVLW	0x01
000f4a   010f     movlb	0xf                	BANKSEL	_stop_ringing
000f4c   6f50     movwf	0x50, 0x1          	MOVWF	_stop_ringing, B
                                           ;	.line	385; reveil.c	amin = amin_o; // remet le réveil à l'heure d'origine
000f4e   cf4d     movff	0xf4d, 0xf4b       	MOVFF	_amin_o, _amin
000f50   ff4b
                                           ;	.line	386; reveil.c	ahour = ahour_o;
000f52   cf4c     movff	0xf4c, 0xf4a       	MOVFF	_ahour_o, _ahour
000f54   ff4a
000f56   010f     movlb	0xf                	BANKSEL	_snooze
                                           ;	.line	387; reveil.c	snooze = 0;
000f58   6b4f     clrf	0x4f, 0x1           	CLRF	_snooze, B
                                           ;	.line	388; reveil.c	LATJbits.LATJ1 = 0; // switch LED 2 off
000f5a   9291     bcf	0x91, 0x1, 0         	BCF	_LATJbits, 1
                                           ;	.line	389; reveil.c	LATJbits.LATJ2 = 0; // switch LED 3 off
000f5c   9491     bcf	0x91, 0x2, 0         	BCF	_LATJbits, 2
                                           ;	.line	390; reveil.c	whereami = DISPLAY;
000f5e   0e09     movlw	0x9                	MOVLW	0x09
000f60   010f     movlb	0xf                	BANKSEL	_whereami
000f62   6f51     movwf	0x51, 0x1          	MOVWF	_whereami, B
                                           _00267_DS_:
000f64   010f     movlb	0xf                	BANKSEL	_button1
                                           ;	.line	395; reveil.c	button1 = 0; // remet le flag du bouton 1 à 0
000f66   6b41     clrf	0x41, 0x1           	CLRF	_button1, B
000f68   efd5     goto	0x13aa              	GOTO	_00299_DS_
000f6a   f009
                                           _00297_DS_:
000f6c   010f     movlb	0xf                	BANKSEL	_button2
                                           ;	.line	398; reveil.c	} else if (button2) {
000f6e   5142     movf	0x42, 0, 0x1        	MOVF	_button2, W, B
000f70   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
000f72   efd5     goto	0x13aa              	GOTO	_00299_DS_
000f74   f009
                                           ;	.line	399; reveil.c	switch (whereami) {
000f76   0e01     movlw	0x1                	MOVLW	0x01
000f78   010f     movlb	0xf                	BANKSEL	_whereami
000f7a   5d51     subwf	0x51, 0, 0x1       	SUBWF	_whereami, W, B
000f7c   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
000f7e   efd3     goto	0x13a6              	GOTO	_00293_DS_
000f80   f009
000f82   0e0c     movlw	0xc                	MOVLW	0x0c
000f84   010f     movlb	0xf                	BANKSEL	_whereami
000f86   5d51     subwf	0x51, 0, 0x1       	SUBWF	_whereami, W, B
000f88   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000f8a   efd3     goto	0x13a6              	GOTO	_00293_DS_
000f8c   f009
000f8e   010f     movlb	0xf                	BANKSEL	_whereami
000f90   0551     decf	0x51, 0, 0x1        	DECF	_whereami, W, B
000f92   6e01     movwf	0x1, 0             	MOVWF	r0x01
000f94   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
000f96   ffe5
000f98   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
000f9a   ffe5
000f9c   6a09     clrf	0x9, 0              	CLRF	r0x09
000f9e   3401     rlcf	0x1, 0, 0           	RLCF	r0x01, W
000fa0   3609     rlcf	0x9, 0x1, 0         	RLCF	r0x09, F
000fa2   34e8     rlcf	0xe8, 0, 0          	RLCF	WREG, W
000fa4   3609     rlcf	0x9, 0x1, 0         	RLCF	r0x09, F
000fa6   0bfc     andlw	0xfc               	ANDLW	0xfc
000fa8   6e08     movwf	0x8, 0             	MOVWF	r0x08
000faa   0e00     movlw	0                  	MOVLW	UPPER(_00317_DS_)
000fac   6efb     movwf	0xfb, 0            	MOVWF	PCLATU
000fae   0e0f     movlw	0xf                	MOVLW	HIGH(_00317_DS_)
000fb0   6efa     movwf	0xfa, 0            	MOVWF	PCLATH
000fb2   0eca     movlw	0xca               	MOVLW	LOW(_00317_DS_)
000fb4   2608     addwf	0x8, 0x1, 0        	ADDWF	r0x08, F
000fb6   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
000fb8   22fa     addwfc	0xfa, 0x1, 0      	ADDWFC	PCLATH, F
000fba   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000fbc   2afb     incf	0xfb, 0x1, 0        	INCF	PCLATU, F
000fbe   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
000fc0   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
000fc2   f009
000fc4   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
000fc6   f008
000fc8   6ef9     movwf	0xf9, 0            	MOVWF	PCL
                                           _00317_DS_:
000fca   effb     goto	0xff6               	GOTO	_00268_DS_
000fcc   f007
000fce   efff     goto	0xffe               	GOTO	_00269_DS_
000fd0   f007
000fd2   ef46     goto	0x108c              	GOTO	_00270_DS_
000fd4   f008
000fd6   efd9     goto	0x11b2              	GOTO	_00274_DS_
000fd8   f008
000fda   ef96     goto	0x132c              	GOTO	_00275_DS_
000fdc   f009
000fde   ef9a     goto	0x1334              	GOTO	_00276_DS_
000fe0   f009
000fe2   ef9e     goto	0x133c              	GOTO	_00277_DS_
000fe4   f009
000fe6   efaa     goto	0x1354              	GOTO	_00281_DS_
000fe8   f009
000fea   efb6     goto	0x136c              	GOTO	_00285_DS_
000fec   f009
000fee   efb7     goto	0x136e              	GOTO	_00286_DS_
000ff0   f009
000ff2   efc8     goto	0x1390              	GOTO	_00289_DS_
000ff4   f009
                                           _00268_DS_:
                                           ;	.line	401; reveil.c	whereami = SET_HOUR;
000ff6   0e02     movlw	0x2                	MOVLW	0x02
000ff8   010f     movlb	0xf                	BANKSEL	_whereami
000ffa   6f51     movwf	0x51, 0x1          	MOVWF	_whereami, B
                                           ;	.line	402; reveil.c	break;
000ffc   d1d4     bra	0x13a6               	BRA	_00293_DS_
                                           _00269_DS_:
000ffe   010f     movlb	0xf                	BANKSEL	(_overflows + 3)
                                           ;	.line	404; reveil.c	overflows += F*3600;
001000   5146     movf	0x46, 0, 0x1        	MOVF	(_overflows + 3), W, B
001002   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001004   010f     movlb	0xf                	BANKSEL	(_overflows + 2)
001006   5145     movf	0x45, 0, 0x1        	MOVF	(_overflows + 2), W, B
001008   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00100a   010f     movlb	0xf                	BANKSEL	(_overflows + 1)
00100c   5144     movf	0x44, 0, 0x1        	MOVF	(_overflows + 1), W, B
00100e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001010   010f     movlb	0xf                	BANKSEL	_overflows
001012   5143     movf	0x43, 0, 0x1        	MOVF	_overflows, W, B
001014   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001016   ec8d     call	0x2f1a, 0           	CALL	___ulong2fs
001018   f017
00101a   6e01     movwf	0x1, 0             	MOVWF	r0x01
00101c   cff3     movff	0xff3, 0x2         	MOVFF	PRODL, r0x02
00101e   f002
001020   cff4     movff	0xff4, 0x3         	MOVFF	PRODH, r0x03
001022   f003
001024   cfe9     movff	0xfe9, 0x4         	MOVFF	FSR0L, r0x04
001026   f004
001028   0e04     movlw	0x4                	MOVLW	0x04
00102a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00102c   0e48     movlw	0x48               	MOVLW	0x48
00102e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001030   0ea7     movlw	0xa7               	MOVLW	0xa7
001032   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001034   0ea2     movlw	0xa2               	MOVLW	0xa2
001036   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001038   0e80     movlw	0x80               	MOVLW	0x80
00103a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00103c   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00103e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001040   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001042   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001044   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001046   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001048   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00104a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00104c   ecc9     call	0x1792, 0           	CALL	___fsadd
00104e   f00b
001050   6e01     movwf	0x1, 0             	MOVWF	r0x01
001052   cff3     movff	0xff3, 0x2         	MOVFF	PRODL, r0x02
001054   f002
001056   cff4     movff	0xff4, 0x3         	MOVFF	PRODH, r0x03
001058   f003
00105a   cfe9     movff	0xfe9, 0x4         	MOVFF	FSR0L, r0x04
00105c   f004
00105e   0e08     movlw	0x8                	MOVLW	0x08
001060   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
001062   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001064   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001066   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001068   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00106a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00106c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00106e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001070   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001072   ec0e     call	0x361c, 0           	CALL	___fs2ulong
001074   f01b
001076   010f     movlb	0xf                	BANKSEL	_overflows
001078   6f43     movwf	0x43, 0x1          	MOVWF	_overflows, B
00107a   cff3     movff	0xff3, 0xf44       	MOVFF	PRODL, (_overflows + 1)
00107c   ff44
00107e   cff4     movff	0xff4, 0xf45       	MOVFF	PRODH, (_overflows + 2)
001080   ff45
001082   cfe9     movff	0xfe9, 0xf46       	MOVFF	FSR0L, (_overflows + 3)
001084   ff46
001086   0e04     movlw	0x4                	MOVLW	0x04
001088   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	406; reveil.c	break;
00108a   d18d     bra	0x13a6               	BRA	_00293_DS_
                                           _00270_DS_:
00108c   010f     movlb	0xf                	BANKSEL	_tsec
                                           ;	.line	408; reveil.c	if (tsec==59)
00108e   5149     movf	0x49, 0, 0x1        	MOVF	_tsec, W, B
001090   0a3b     xorlw	0x3b               	XORLW	0x3b
001092   e001     bz	0x1096                	BZ	_00319_DS_
001094   d047     bra	0x1124               	BRA	_00272_DS_
                                           _00319_DS_:
001096   010f     movlb	0xf                	BANKSEL	(_overflows + 3)
                                           ;	.line	409; reveil.c	overflows -= 59*F*3600;
001098   5146     movf	0x46, 0, 0x1        	MOVF	(_overflows + 3), W, B
00109a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00109c   010f     movlb	0xf                	BANKSEL	(_overflows + 2)
00109e   5145     movf	0x45, 0, 0x1        	MOVF	(_overflows + 2), W, B
0010a0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0010a2   010f     movlb	0xf                	BANKSEL	(_overflows + 1)
0010a4   5144     movf	0x44, 0, 0x1        	MOVF	(_overflows + 1), W, B
0010a6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0010a8   010f     movlb	0xf                	BANKSEL	_overflows
0010aa   5143     movf	0x43, 0, 0x1        	MOVF	_overflows, W, B
0010ac   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0010ae   ec8d     call	0x2f1a, 0           	CALL	___ulong2fs
0010b0   f017
0010b2   6e01     movwf	0x1, 0             	MOVWF	r0x01
0010b4   cff3     movff	0xff3, 0x2         	MOVFF	PRODL, r0x02
0010b6   f002
0010b8   cff4     movff	0xff4, 0x3         	MOVFF	PRODH, r0x03
0010ba   f003
0010bc   cfe9     movff	0xfe9, 0x4         	MOVFF	FSR0L, r0x04
0010be   f004
0010c0   0e04     movlw	0x4                	MOVLW	0x04
0010c2   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0010c4   0e4b     movlw	0x4b               	MOVLW	0x4b
0010c6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0010c8   0e9a     movlw	0x9a               	MOVLW	0x9a
0010ca   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0010cc   0e89     movlw	0x89               	MOVLW	0x89
0010ce   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0010d0   0ece     movlw	0xce               	MOVLW	0xce
0010d2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0010d4   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0010d6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0010d8   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0010da   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0010dc   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0010de   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0010e0   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0010e2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0010e4   ec4b     call	0x3096, 0           	CALL	___fssub
0010e6   f018
0010e8   6e01     movwf	0x1, 0             	MOVWF	r0x01
0010ea   cff3     movff	0xff3, 0x2         	MOVFF	PRODL, r0x02
0010ec   f002
0010ee   cff4     movff	0xff4, 0x3         	MOVFF	PRODH, r0x03
0010f0   f003
0010f2   cfe9     movff	0xfe9, 0x4         	MOVFF	FSR0L, r0x04
0010f4   f004
0010f6   0e08     movlw	0x8                	MOVLW	0x08
0010f8   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0010fa   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0010fc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0010fe   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001100   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001102   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001104   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001106   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001108   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00110a   ec0e     call	0x361c, 0           	CALL	___fs2ulong
00110c   f01b
00110e   010f     movlb	0xf                	BANKSEL	_overflows
001110   6f43     movwf	0x43, 0x1          	MOVWF	_overflows, B
001112   cff3     movff	0xff3, 0xf44       	MOVFF	PRODL, (_overflows + 1)
001114   ff44
001116   cff4     movff	0xff4, 0xf45       	MOVFF	PRODH, (_overflows + 2)
001118   ff45
00111a   cfe9     movff	0xfe9, 0xf46       	MOVFF	FSR0L, (_overflows + 3)
00111c   ff46
00111e   0e04     movlw	0x4                	MOVLW	0x04
001120   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
001122   d141     bra	0x13a6               	BRA	_00293_DS_
                                           _00272_DS_:
001124   010f     movlb	0xf                	BANKSEL	(_overflows + 3)
                                           ;	.line	411; reveil.c	overflows += F*60;
001126   5146     movf	0x46, 0, 0x1        	MOVF	(_overflows + 3), W, B
001128   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00112a   010f     movlb	0xf                	BANKSEL	(_overflows + 2)
00112c   5145     movf	0x45, 0, 0x1        	MOVF	(_overflows + 2), W, B
00112e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001130   010f     movlb	0xf                	BANKSEL	(_overflows + 1)
001132   5144     movf	0x44, 0, 0x1        	MOVF	(_overflows + 1), W, B
001134   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001136   010f     movlb	0xf                	BANKSEL	_overflows
001138   5143     movf	0x43, 0, 0x1        	MOVF	_overflows, W, B
00113a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00113c   ec8d     call	0x2f1a, 0           	CALL	___ulong2fs
00113e   f017
001140   6e01     movwf	0x1, 0             	MOVWF	r0x01
001142   cff3     movff	0xff3, 0x2         	MOVFF	PRODL, r0x02
001144   f002
001146   cff4     movff	0xff4, 0x3         	MOVFF	PRODH, r0x03
001148   f003
00114a   cfe9     movff	0xfe9, 0x4         	MOVFF	FSR0L, r0x04
00114c   f004
00114e   0e04     movlw	0x4                	MOVLW	0x04
001150   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
001152   0e45     movlw	0x45               	MOVLW	0x45
001154   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001156   0eb2     movlw	0xb2               	MOVLW	0xb2
001158   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00115a   0ecf     movlw	0xcf               	MOVLW	0xcf
00115c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00115e   0e77     movlw	0x77               	MOVLW	0x77
001160   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001162   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001164   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001166   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001168   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00116a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00116c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00116e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001170   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001172   ecc9     call	0x1792, 0           	CALL	___fsadd
001174   f00b
001176   6e01     movwf	0x1, 0             	MOVWF	r0x01
001178   cff3     movff	0xff3, 0x2         	MOVFF	PRODL, r0x02
00117a   f002
00117c   cff4     movff	0xff4, 0x3         	MOVFF	PRODH, r0x03
00117e   f003
001180   cfe9     movff	0xfe9, 0x4         	MOVFF	FSR0L, r0x04
001182   f004
001184   0e08     movlw	0x8                	MOVLW	0x08
001186   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
001188   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00118a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00118c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00118e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001190   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001192   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001194   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001196   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001198   ec0e     call	0x361c, 0           	CALL	___fs2ulong
00119a   f01b
00119c   010f     movlb	0xf                	BANKSEL	_overflows
00119e   6f43     movwf	0x43, 0x1          	MOVWF	_overflows, B
0011a0   cff3     movff	0xff3, 0xf44       	MOVFF	PRODL, (_overflows + 1)
0011a2   ff44
0011a4   cff4     movff	0xff4, 0xf45       	MOVFF	PRODH, (_overflows + 2)
0011a6   ff45
0011a8   cfe9     movff	0xfe9, 0xf46       	MOVFF	FSR0L, (_overflows + 3)
0011aa   ff46
0011ac   0e04     movlw	0x4                	MOVLW	0x04
0011ae   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	413; reveil.c	break;
0011b0   d0fa     bra	0x13a6               	BRA	_00293_DS_
                                           _00274_DS_:
0011b2   010f     movlb	0xf                	BANKSEL	(_overflows + 3)
                                           ;	.line	415; reveil.c	overflows += F;
0011b4   5146     movf	0x46, 0, 0x1        	MOVF	(_overflows + 3), W, B
0011b6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0011b8   010f     movlb	0xf                	BANKSEL	(_overflows + 2)
0011ba   5145     movf	0x45, 0, 0x1        	MOVF	(_overflows + 2), W, B
0011bc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0011be   010f     movlb	0xf                	BANKSEL	(_overflows + 1)
0011c0   5144     movf	0x44, 0, 0x1        	MOVF	(_overflows + 1), W, B
0011c2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0011c4   010f     movlb	0xf                	BANKSEL	_overflows
0011c6   5143     movf	0x43, 0, 0x1        	MOVF	_overflows, W, B
0011c8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0011ca   ec8d     call	0x2f1a, 0           	CALL	___ulong2fs
0011cc   f017
0011ce   6e01     movwf	0x1, 0             	MOVWF	r0x01
0011d0   cff3     movff	0xff3, 0x2         	MOVFF	PRODL, r0x02
0011d2   f002
0011d4   cff4     movff	0xff4, 0x3         	MOVFF	PRODH, r0x03
0011d6   f003
0011d8   cfe9     movff	0xfe9, 0x4         	MOVFF	FSR0L, r0x04
0011da   f004
0011dc   0e04     movlw	0x4                	MOVLW	0x04
0011de   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0011e0   0e42     movlw	0x42               	MOVLW	0x42
0011e2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0011e4   0ebe     movlw	0xbe               	MOVLW	0xbe
0011e6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0011e8   0ebb     movlw	0xbb               	MOVLW	0xbb
0011ea   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0011ec   0e2a     movlw	0x2a               	MOVLW	0x2a
0011ee   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0011f0   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0011f2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0011f4   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0011f6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0011f8   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0011fa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0011fc   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0011fe   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001200   ecc9     call	0x1792, 0           	CALL	___fsadd
001202   f00b
001204   6e01     movwf	0x1, 0             	MOVWF	r0x01
001206   cff3     movff	0xff3, 0x2         	MOVFF	PRODL, r0x02
001208   f002
00120a   cff4     movff	0xff4, 0x3         	MOVFF	PRODH, r0x03
00120c   f003
00120e   cfe9     movff	0xfe9, 0x4         	MOVFF	FSR0L, r0x04
001210   f004
001212   0e08     movlw	0x8                	MOVLW	0x08
001214   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
001216   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001218   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00121a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00121c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00121e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001220   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001222   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001224   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001226   ec0e     call	0x361c, 0           	CALL	___fs2ulong
001228   f01b
00122a   010f     movlb	0xf                	BANKSEL	_overflows
00122c   6f43     movwf	0x43, 0x1          	MOVWF	_overflows, B
00122e   cff3     movff	0xff3, 0xf44       	MOVFF	PRODL, (_overflows + 1)
001230   ff44
001232   cff4     movff	0xff4, 0xf45       	MOVFF	PRODH, (_overflows + 2)
001234   ff45
001236   cfe9     movff	0xfe9, 0xf46       	MOVFF	FSR0L, (_overflows + 3)
001238   ff46
00123a   0e04     movlw	0x4                	MOVLW	0x04
00123c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	416; reveil.c	overflows -= (incsec/60)*F*60;
00123e   0e3c     movlw	0x3c               	MOVLW	0x3c
001240   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001242   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
001244   ffe5
001246   ec02     call	0x4004, 0           	CALL	__divuchar
001248   f020
00124a   6e00     movwf	0, 0               	MOVWF	r0x00
00124c   50e4     movf	0xe4, 0, 0          	MOVF	PREINC1, W
00124e   50e4     movf	0xe4, 0, 0          	MOVF	PREINC1, W
001250   5000     movf	0, 0, 0             	MOVF	r0x00, W
001252   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001254   ec9e     call	0x413c, 0           	CALL	___uchar2fs
001256   f020
001258   6e00     movwf	0, 0               	MOVWF	r0x00
00125a   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
00125c   f001
00125e   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
001260   f002
001262   cfe9     movff	0xfe9, 0x3         	MOVFF	FSR0L, r0x03
001264   f003
001266   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
001268   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00126a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00126c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00126e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001270   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001272   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001274   5000     movf	0, 0, 0             	MOVF	r0x00, W
001276   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001278   0e45     movlw	0x45               	MOVLW	0x45
00127a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00127c   0eb2     movlw	0xb2               	MOVLW	0xb2
00127e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001280   0ecf     movlw	0xcf               	MOVLW	0xcf
001282   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001284   0e77     movlw	0x77               	MOVLW	0x77
001286   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001288   ece8     call	0x13d0, 0           	CALL	___fsmul
00128a   f009
00128c   6e00     movwf	0, 0               	MOVWF	r0x00
00128e   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
001290   f001
001292   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
001294   f002
001296   cfe9     movff	0xfe9, 0x3         	MOVFF	FSR0L, r0x03
001298   f003
00129a   0e08     movlw	0x8                	MOVLW	0x08
00129c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00129e   010f     movlb	0xf                	BANKSEL	(_overflows + 3)
0012a0   5146     movf	0x46, 0, 0x1        	MOVF	(_overflows + 3), W, B
0012a2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0012a4   010f     movlb	0xf                	BANKSEL	(_overflows + 2)
0012a6   5145     movf	0x45, 0, 0x1        	MOVF	(_overflows + 2), W, B
0012a8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0012aa   010f     movlb	0xf                	BANKSEL	(_overflows + 1)
0012ac   5144     movf	0x44, 0, 0x1        	MOVF	(_overflows + 1), W, B
0012ae   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0012b0   010f     movlb	0xf                	BANKSEL	_overflows
0012b2   5143     movf	0x43, 0, 0x1        	MOVF	_overflows, W, B
0012b4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0012b6   ec8d     call	0x2f1a, 0           	CALL	___ulong2fs
0012b8   f017
0012ba   6e04     movwf	0x4, 0             	MOVWF	r0x04
0012bc   cff3     movff	0xff3, 0x5         	MOVFF	PRODL, r0x05
0012be   f005
0012c0   cff4     movff	0xff4, 0x6         	MOVFF	PRODH, r0x06
0012c2   f006
0012c4   cfe9     movff	0xfe9, 0x7         	MOVFF	FSR0L, r0x07
0012c6   f007
0012c8   0e04     movlw	0x4                	MOVLW	0x04
0012ca   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0012cc   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0012ce   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0012d0   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0012d2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0012d4   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0012d6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0012d8   5000     movf	0, 0, 0             	MOVF	r0x00, W
0012da   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0012dc   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0012de   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0012e0   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0012e2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0012e4   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0012e6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0012e8   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0012ea   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0012ec   ec4b     call	0x3096, 0           	CALL	___fssub
0012ee   f018
0012f0   6e00     movwf	0, 0               	MOVWF	r0x00
0012f2   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
0012f4   f001
0012f6   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
0012f8   f002
0012fa   cfe9     movff	0xfe9, 0x3         	MOVFF	FSR0L, r0x03
0012fc   f003
0012fe   0e08     movlw	0x8                	MOVLW	0x08
001300   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
001302   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001304   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001306   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001308   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00130a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00130c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00130e   5000     movf	0, 0, 0             	MOVF	r0x00, W
001310   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001312   ec0e     call	0x361c, 0           	CALL	___fs2ulong
001314   f01b
001316   010f     movlb	0xf                	BANKSEL	_overflows
001318   6f43     movwf	0x43, 0x1          	MOVWF	_overflows, B
00131a   cff3     movff	0xff3, 0xf44       	MOVFF	PRODL, (_overflows + 1)
00131c   ff44
00131e   cff4     movff	0xff4, 0xf45       	MOVFF	PRODH, (_overflows + 2)
001320   ff45
001322   cfe9     movff	0xfe9, 0xf46       	MOVFF	FSR0L, (_overflows + 3)
001324   ff46
001326   0e04     movlw	0x4                	MOVLW	0x04
001328   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	417; reveil.c	break;
00132a   d03d     bra	0x13a6               	BRA	_00293_DS_
                                           _00275_DS_:
                                           ;	.line	419; reveil.c	whereami = SET_ALARM;
00132c   0e06     movlw	0x6                	MOVLW	0x06
00132e   010f     movlb	0xf                	BANKSEL	_whereami
001330   6f51     movwf	0x51, 0x1          	MOVWF	_whereami, B
                                           ;	.line	420; reveil.c	break;
001332   d039     bra	0x13a6               	BRA	_00293_DS_
                                           _00276_DS_:
                                           ;	.line	422; reveil.c	alarm_set ^= 1;
001334   0e01     movlw	0x1                	MOVLW	0x01
001336   010f     movlb	0xf                	BANKSEL	_alarm_set
001338   1b4e     xorwf	0x4e, 0x1, 0x1     	XORWF	_alarm_set, F, B
                                           ;	.line	423; reveil.c	break;
00133a   d035     bra	0x13a6               	BRA	_00293_DS_
                                           _00277_DS_:
00133c   010f     movlb	0xf                	BANKSEL	_ahour
                                           ;	.line	425; reveil.c	if (ahour == 23) {
00133e   514a     movf	0x4a, 0, 0x1        	MOVF	_ahour, W, B
001340   0a17     xorlw	0x17               	XORLW	0x17
001342   e103     bnz	0x134a               	BNZ	_00279_DS_
                                           _00322_DS_:
001344   010f     movlb	0xf                	BANKSEL	_ahour
                                           ;	.line	426; reveil.c	ahour = 0;
001346   6b4a     clrf	0x4a, 0x1           	CLRF	_ahour, B
001348   d002     bra	0x134e               	BRA	_00280_DS_
                                           _00279_DS_:
00134a   010f     movlb	0xf                	BANKSEL	_ahour
                                           ;	.line	428; reveil.c	ahour++;
00134c   2b4a     incf	0x4a, 0x1, 0x1      	INCF	_ahour, F, B
                                           _00280_DS_:
                                           ;	.line	430; reveil.c	ahour_o = ahour;
00134e   cf4a     movff	0xf4a, 0xf4c       	MOVFF	_ahour, _ahour_o
001350   ff4c
                                           ;	.line	431; reveil.c	break;
001352   d029     bra	0x13a6               	BRA	_00293_DS_
                                           _00281_DS_:
001354   010f     movlb	0xf                	BANKSEL	_amin
                                           ;	.line	433; reveil.c	if (amin == 59) {
001356   514b     movf	0x4b, 0, 0x1        	MOVF	_amin, W, B
001358   0a3b     xorlw	0x3b               	XORLW	0x3b
00135a   e103     bnz	0x1362               	BNZ	_00283_DS_
                                           _00324_DS_:
00135c   010f     movlb	0xf                	BANKSEL	_amin
                                           ;	.line	434; reveil.c	amin = 0;
00135e   6b4b     clrf	0x4b, 0x1           	CLRF	_amin, B
001360   d002     bra	0x1366               	BRA	_00284_DS_
                                           _00283_DS_:
001362   010f     movlb	0xf                	BANKSEL	_amin
                                           ;	.line	436; reveil.c	amin++;
001364   2b4b     incf	0x4b, 0x1, 0x1      	INCF	_amin, F, B
                                           _00284_DS_:
                                           ;	.line	438; reveil.c	amin_o = amin;
001366   cf4b     movff	0xf4b, 0xf4d       	MOVFF	_amin, _amin_o
001368   ff4d
                                           ;	.line	439; reveil.c	break;
00136a   d01d     bra	0x13a6               	BRA	_00293_DS_
                                           _00285_DS_:
                                           ;	.line	442; reveil.c	break;
00136c   d01c     bra	0x13a6               	BRA	_00293_DS_
                                           _00286_DS_:
                                           ;	.line	445; reveil.c	if (snooze < SNOOZE_MAX) {
00136e   0e0c     movlw	0xc                	MOVLW	0x0c
001370   010f     movlb	0xf                	BANKSEL	_snooze
001372   5d4f     subwf	0x4f, 0, 0x1       	SUBWF	_snooze, W, B
001374   e218     bc	0x13a6                	BC	_00293_DS_
                                           ;	.line	446; reveil.c	inc_amin(SNOOZE_MINUTE); // modifie le réveil
001376   0e05     movlw	0x5                	MOVLW	0x05
001378   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00137a   eca8     call	0x3d50, 0           	CALL	_inc_amin
00137c   f01e
00137e   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
001380   010f     movlb	0xf                	BANKSEL	_snooze
                                           ;	.line	447; reveil.c	snooze++; // augmente le compteur de snooze
001382   2b4f     incf	0x4f, 0x1, 0x1      	INCF	_snooze, F, B
                                           ;	.line	448; reveil.c	LATJbits.LATJ1 = 0; // switch LED 2 off
001384   9291     bcf	0x91, 0x1, 0         	BCF	_LATJbits, 1
                                           ;	.line	449; reveil.c	LATJbits.LATJ2 = 0; // switch LED 3 off
001386   9491     bcf	0x91, 0x2, 0         	BCF	_LATJbits, 2
                                           ;	.line	450; reveil.c	whereami = SNOOZE;
001388   0e0b     movlw	0xb                	MOVLW	0x0b
00138a   010f     movlb	0xf                	BANKSEL	_whereami
00138c   6f51     movwf	0x51, 0x1          	MOVWF	_whereami, B
                                           ;	.line	453; reveil.c	break;
00138e   d00b     bra	0x13a6               	BRA	_00293_DS_
                                           _00289_DS_:
                                           ;	.line	456; reveil.c	if (snooze < SNOOZE_MAX) {
001390   0e0c     movlw	0xc                	MOVLW	0x0c
001392   010f     movlb	0xf                	BANKSEL	_snooze
001394   5d4f     subwf	0x4f, 0, 0x1       	SUBWF	_snooze, W, B
001396   e207     bc	0x13a6                	BC	_00293_DS_
                                           ;	.line	457; reveil.c	inc_amin(SNOOZE_MINUTE); // modifie le réveil
001398   0e05     movlw	0x5                	MOVLW	0x05
00139a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00139c   eca8     call	0x3d50, 0           	CALL	_inc_amin
00139e   f01e
0013a0   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
0013a2   010f     movlb	0xf                	BANKSEL	_snooze
                                           ;	.line	458; reveil.c	snooze++; // augmente le compteur de snooze
0013a4   2b4f     incf	0x4f, 0x1, 0x1      	INCF	_snooze, F, B
                                           _00293_DS_:
0013a6   010f     movlb	0xf                	BANKSEL	_button2
                                           ;	.line	465; reveil.c	button2 = 0; // remet le flag du bouton 2 à 0
0013a8   6b42     clrf	0x42, 0x1           	CLRF	_button2, B
                                           _00299_DS_:
0013aa   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
0013ac   f007
0013ae   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0013b0   f006
0013b2   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0013b4   f005
0013b6   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0013b8   f004
0013ba   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0013bc   f003
0013be   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0013c0   f002
0013c2   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0013c4   f001
0013c6   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0013c8   f000
0013ca   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0013cc   ffd9
0013ce   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_reveil__alarm	code
                                           _alarm:
                                           ;	.line	310; reveil.c	void alarm(void)
003e8a   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
003e8c   ffe5
003e8e   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
003e90   ffd9
003e92   010f     movlb	0xf                	BANKSEL	_thour
                                           ;	.line	313; reveil.c	if ((thour == ahour) && (tmin == amin) && alarm_set) {
003e94   5147     movf	0x47, 0, 0x1        	MOVF	_thour, W, B
003e96   010f     movlb	0xf                	BANKSEL	_ahour
003e98   194a     xorwf	0x4a, 0, 0x1       	XORWF	_ahour, W, B
003e9a   e001     bz	0x3e9e                	BZ	_00240_DS_
003e9c   d038     bra	0x3f0e               	BRA	_00228_DS_
                                           _00240_DS_:
003e9e   010f     movlb	0xf                	BANKSEL	_tmin
003ea0   5148     movf	0x48, 0, 0x1        	MOVF	_tmin, W, B
003ea2   010f     movlb	0xf                	BANKSEL	_amin
003ea4   194b     xorwf	0x4b, 0, 0x1       	XORWF	_amin, W, B
003ea6   e001     bz	0x3eaa                	BZ	_00242_DS_
003ea8   d032     bra	0x3f0e               	BRA	_00228_DS_
                                           _00242_DS_:
003eaa   010f     movlb	0xf                	BANKSEL	_alarm_set
003eac   514e     movf	0x4e, 0, 0x1        	MOVF	_alarm_set, W, B
003eae   e02f     bz	0x3f0e                	BZ	_00228_DS_
                                           ;	.line	316; reveil.c	if ((tsec < 31) && (stop_ringing == 0)) {
003eb0   0e1f     movlw	0x1f               	MOVLW	0x1f
003eb2   010f     movlb	0xf                	BANKSEL	_tsec
003eb4   5d49     subwf	0x49, 0, 0x1       	SUBWF	_tsec, W, B
003eb6   e20f     bc	0x3ed6                	BC	_00221_DS_
003eb8   010f     movlb	0xf                	BANKSEL	_stop_ringing
003eba   5150     movf	0x50, 0, 0x1        	MOVF	_stop_ringing, W, B
003ebc   e10c     bnz	0x3ed6               	BNZ	_00221_DS_
003ebe   010f     movlb	0xf                	BANKSEL	_whereami
                                           ;	.line	317; reveil.c	if ((whereami == DISPLAY) || (whereami == SNOOZE)) {
003ec0   5151     movf	0x51, 0, 0x1        	MOVF	_whereami, W, B
003ec2   0a09     xorlw	0x9                	XORLW	0x09
003ec4   e004     bz	0x3ece                	BZ	_00210_DS_
                                           _00245_DS_:
003ec6   010f     movlb	0xf                	BANKSEL	_whereami
003ec8   5151     movf	0x51, 0, 0x1        	MOVF	_whereami, W, B
003eca   0a0b     xorlw	0xb                	XORLW	0x0b
003ecc   e120     bnz	0x3f0e               	BNZ	_00228_DS_
                                           _00210_DS_:
                                           ;	.line	318; reveil.c	whereami = ALARM;
003ece   0e0a     movlw	0xa                	MOVLW	0x0a
003ed0   010f     movlb	0xf                	BANKSEL	_whereami
003ed2   6f51     movwf	0x51, 0x1          	MOVWF	_whereami, B
003ed4   d01c     bra	0x3f0e               	BRA	_00228_DS_
                                           _00221_DS_:
                                           ;	.line	321; reveil.c	} else if (tsec > 30) {
003ed6   0e1f     movlw	0x1f               	MOVLW	0x1f
003ed8   010f     movlb	0xf                	BANKSEL	_tsec
003eda   5d49     subwf	0x49, 0, 0x1       	SUBWF	_tsec, W, B
003edc   e318     bnc	0x3f0e               	BNC	_00228_DS_
003ede   010f     movlb	0xf                	BANKSEL	_stop_ringing
                                           ;	.line	322; reveil.c	stop_ringing = 0; // remet à 0 si l'alarme a été éteinte à la main
003ee0   6b50     clrf	0x50, 0x1           	CLRF	_stop_ringing, B
                                           ;	.line	323; reveil.c	LATJbits.LATJ1 = 0; // switch LED 2 off
003ee2   9291     bcf	0x91, 0x1, 0         	BCF	_LATJbits, 1
                                           ;	.line	324; reveil.c	LATJbits.LATJ2 = 0; // switch LED 3 off
003ee4   9491     bcf	0x91, 0x2, 0         	BCF	_LATJbits, 2
003ee6   010f     movlb	0xf                	BANKSEL	_snooze
                                           ;	.line	326; reveil.c	if (snooze) {
003ee8   514f     movf	0x4f, 0, 0x1        	MOVF	_snooze, W, B
003eea   e00a     bz	0x3f00                	BZ	_00216_DS_
                                           ;	.line	327; reveil.c	ahour = ahour_o; // remet le réveil
003eec   cf4c     movff	0xf4c, 0xf4a       	MOVFF	_ahour_o, _ahour
003eee   ff4a
                                           ;	.line	328; reveil.c	amin = amin_o;
003ef0   cf4d     movff	0xf4d, 0xf4b       	MOVFF	_amin_o, _amin
003ef2   ff4b
003ef4   010f     movlb	0xf                	BANKSEL	_snooze
                                           ;	.line	329; reveil.c	snooze = 0;
003ef6   6b4f     clrf	0x4f, 0x1           	CLRF	_snooze, B
                                           ;	.line	330; reveil.c	whereami = DISPLAY;
003ef8   0e09     movlw	0x9                	MOVLW	0x09
003efa   010f     movlb	0xf                	BANKSEL	_whereami
003efc   6f51     movwf	0x51, 0x1          	MOVWF	_whereami, B
003efe   d007     bra	0x3f0e               	BRA	_00228_DS_
                                           _00216_DS_:
003f00   010f     movlb	0xf                	BANKSEL	_whereami
                                           ;	.line	331; reveil.c	} else if (whereami == ALARM) { // si l'alarme sonnait toujours, on
003f02   5151     movf	0x51, 0, 0x1        	MOVF	_whereami, W, B
003f04   0a0a     xorlw	0xa                	XORLW	0x0a
003f06   e103     bnz	0x3f0e               	BNZ	_00228_DS_
                                           ;	.line	332; reveil.c	whereami = DISPLAY;         // revient à l'affichage de l'heure
003f08   0e09     movlw	0x9                	MOVLW	0x09
003f0a   010f     movlb	0xf                	BANKSEL	_whereami
003f0c   6f51     movwf	0x51, 0x1          	MOVWF	_whereami, B
                                           _00228_DS_:
003f0e   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
003f10   ffd9
003f12   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_reveil__refresh_lcd	code
                                           _refresh_lcd:
                                           ;	.line	242; reveil.c	void refresh_lcd(void)
000852   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000854   ffe5
000856   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000858   ffd9
00085a   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00085c   ffe5
00085e   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000860   ffe5
000862   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
000864   ffe5
000866   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
000868   ffe5
00086a   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00086c   ffe5
00086e   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
000870   ffe5
000872   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
000874   ffe5
000876   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
000878   ffe5
00087a   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
00087c   ffe5
00087e   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
000880   ffe5
000882   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
000884   ffe5
000886   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
000888   ffe5
00088a   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
00088c   ffe5
00088e   c00d     movff	0xd, 0xfe5         	MOVFF	r0x0d, POSTDEC1
000890   ffe5
000892   c00e     movff	0xe, 0xfe5         	MOVFF	r0x0e, POSTDEC1
000894   ffe5
                                           ;	.line	245; reveil.c	switch (whereami) {
000896   0e01     movlw	0x1                	MOVLW	0x01
000898   010f     movlb	0xf                	BANKSEL	_whereami
00089a   5d51     subwf	0x51, 0, 0x1       	SUBWF	_whereami, W, B
00089c   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
00089e   efd6     goto	0xdac               	GOTO	_00193_DS_
0008a0   f006
0008a2   0e0c     movlw	0xc                	MOVLW	0x0c
0008a4   010f     movlb	0xf                	BANKSEL	_whereami
0008a6   5d51     subwf	0x51, 0, 0x1       	SUBWF	_whereami, W, B
0008a8   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0008aa   efd6     goto	0xdac               	GOTO	_00193_DS_
0008ac   f006
0008ae   010f     movlb	0xf                	BANKSEL	_whereami
0008b0   0551     decf	0x51, 0, 0x1        	DECF	_whereami, W, B
0008b2   6e00     movwf	0, 0               	MOVWF	r0x00
0008b4   c00f     movff	0xf, 0xfe5         	MOVFF	r0x0f, POSTDEC1
0008b6   ffe5
0008b8   c010     movff	0x10, 0xfe5        	MOVFF	r0x10, POSTDEC1
0008ba   ffe5
0008bc   6a10     clrf	0x10, 0             	CLRF	r0x10
0008be   3400     rlcf	0, 0, 0             	RLCF	r0x00, W
0008c0   3610     rlcf	0x10, 0x1, 0        	RLCF	r0x10, F
0008c2   34e8     rlcf	0xe8, 0, 0          	RLCF	WREG, W
0008c4   3610     rlcf	0x10, 0x1, 0        	RLCF	r0x10, F
0008c6   0bfc     andlw	0xfc               	ANDLW	0xfc
0008c8   6e0f     movwf	0xf, 0             	MOVWF	r0x0f
0008ca   0e00     movlw	0                  	MOVLW	UPPER(_00204_DS_)
0008cc   6efb     movwf	0xfb, 0            	MOVWF	PCLATU
0008ce   0e08     movlw	0x8                	MOVLW	HIGH(_00204_DS_)
0008d0   6efa     movwf	0xfa, 0            	MOVWF	PCLATH
0008d2   0eea     movlw	0xea               	MOVLW	LOW(_00204_DS_)
0008d4   260f     addwf	0xf, 0x1, 0        	ADDWF	r0x0f, F
0008d6   5010     movf	0x10, 0, 0          	MOVF	r0x10, W
0008d8   22fa     addwfc	0xfa, 0x1, 0      	ADDWFC	PCLATH, F
0008da   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0008dc   2afb     incf	0xfb, 0x1, 0        	INCF	PCLATU, F
0008de   500f     movf	0xf, 0, 0           	MOVF	r0x0f, W
0008e0   cfe4     movff	0xfe4, 0x10        	MOVFF	PREINC1, r0x10
0008e2   f010
0008e4   cfe4     movff	0xfe4, 0xf         	MOVFF	PREINC1, r0x0f
0008e6   f00f
0008e8   6ef9     movwf	0xf9, 0            	MOVWF	PCL
                                           _00204_DS_:
0008ea   ef8b     goto	0x916               	GOTO	_00173_DS_
0008ec   f004
0008ee   efa3     goto	0x946               	GOTO	_00174_DS_
0008f0   f004
0008f2   efd0     goto	0x9a0               	GOTO	_00175_DS_
0008f4   f004
0008f6   effc     goto	0x9f8               	GOTO	_00176_DS_
0008f8   f004
0008fa   ef28     goto	0xa50               	GOTO	_00177_DS_
0008fc   f005
0008fe   ef3f     goto	0xa7e               	GOTO	_00178_DS_
000900   f005
000902   ef70     goto	0xae0               	GOTO	_00182_DS_
000904   f005
000906   ef95     goto	0xb2a               	GOTO	_00183_DS_
000908   f005
00090a   efba     goto	0xb74               	GOTO	_00184_DS_
00090c   f005
00090e   ef23     goto	0xc46               	GOTO	_00188_DS_
000910   f006
000912   ef4f     goto	0xc9e               	GOTO	_00189_DS_
000914   f006
                                           _00173_DS_:
                                           ;	.line	247; reveil.c	sprintf(display, "Do you want to  set the time ?  ");
000916   0e0f     movlw	0xf                	MOVLW	HIGH(_display)
000918   6e01     movwf	0x1, 0             	MOVWF	r0x01
00091a   0e21     movlw	0x21               	MOVLW	LOW(_display)
00091c   6e00     movwf	0, 0               	MOVWF	r0x00
00091e   0e80     movlw	0x80               	MOVLW	0x80
000920   6e02     movwf	0x2, 0             	MOVWF	r0x02
000922   0e00     movlw	0                  	MOVLW	UPPER(__str_0)
000924   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000926   0e22     movlw	0x22               	MOVLW	HIGH(__str_0)
000928   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00092a   0e46     movlw	0x46               	MOVLW	LOW(__str_0)
00092c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00092e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000930   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000932   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000934   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000936   5000     movf	0, 0, 0             	MOVF	r0x00, W
000938   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00093a   ec84     call	0x3708, 0           	CALL	_sprintf
00093c   f01b
00093e   0e06     movlw	0x6                	MOVLW	0x06
000940   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	248; reveil.c	break;
000942   efec     goto	0xdd8               	GOTO	_00194_DS_
000944   f006
                                           _00174_DS_:
                                           ;	.line	251; reveil.c	thour, tmin, tsec);
000946   cf49     movff	0xf49, 0           	MOVFF	_tsec, r0x00
000948   f000
00094a   6a01     clrf	0x1, 0              	CLRF	r0x01
00094c   cf48     movff	0xf48, 0x2         	MOVFF	_tmin, r0x02
00094e   f002
000950   6a03     clrf	0x3, 0              	CLRF	r0x03
000952   cf47     movff	0xf47, 0x4         	MOVFF	_thour, r0x04
000954   f004
000956   6a05     clrf	0x5, 0              	CLRF	r0x05
                                           ;	.line	250; reveil.c	sprintf(display, " [%02u]: %02u : %02u                  ",
000958   0e0f     movlw	0xf                	MOVLW	HIGH(_display)
00095a   6e07     movwf	0x7, 0             	MOVWF	r0x07
00095c   0e21     movlw	0x21               	MOVLW	LOW(_display)
00095e   6e06     movwf	0x6, 0             	MOVWF	r0x06
000960   0e80     movlw	0x80               	MOVLW	0x80
000962   6e08     movwf	0x8, 0             	MOVWF	r0x08
000964   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000966   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000968   5000     movf	0, 0, 0             	MOVF	r0x00, W
00096a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00096c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00096e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000970   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000972   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000974   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000976   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000978   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00097a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00097c   0e00     movlw	0                  	MOVLW	UPPER(__str_1)
00097e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000980   0e22     movlw	0x22               	MOVLW	HIGH(__str_1)
000982   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000984   0e68     movlw	0x68               	MOVLW	LOW(__str_1)
000986   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000988   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
00098a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00098c   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
00098e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000990   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000992   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000994   ec84     call	0x3708, 0           	CALL	_sprintf
000996   f01b
000998   0e0c     movlw	0xc                	MOVLW	0x0c
00099a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	252; reveil.c	break;
00099c   efec     goto	0xdd8               	GOTO	_00194_DS_
00099e   f006
                                           _00175_DS_:
                                           ;	.line	255; reveil.c	thour, tmin, tsec);
0009a0   cf49     movff	0xf49, 0           	MOVFF	_tsec, r0x00
0009a2   f000
0009a4   6a01     clrf	0x1, 0              	CLRF	r0x01
0009a6   cf48     movff	0xf48, 0x2         	MOVFF	_tmin, r0x02
0009a8   f002
0009aa   6a03     clrf	0x3, 0              	CLRF	r0x03
0009ac   cf47     movff	0xf47, 0x4         	MOVFF	_thour, r0x04
0009ae   f004
0009b0   6a05     clrf	0x5, 0              	CLRF	r0x05
                                           ;	.line	254; reveil.c	sprintf(display, "  %02u :[%02u]: %02u                  ",
0009b2   0e0f     movlw	0xf                	MOVLW	HIGH(_display)
0009b4   6e07     movwf	0x7, 0             	MOVWF	r0x07
0009b6   0e21     movlw	0x21               	MOVLW	LOW(_display)
0009b8   6e06     movwf	0x6, 0             	MOVWF	r0x06
0009ba   0e80     movlw	0x80               	MOVLW	0x80
0009bc   6e08     movwf	0x8, 0             	MOVWF	r0x08
0009be   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0009c0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0009c2   5000     movf	0, 0, 0             	MOVF	r0x00, W
0009c4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0009c6   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0009c8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0009ca   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0009cc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0009ce   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0009d0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0009d2   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0009d4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0009d6   0e00     movlw	0                  	MOVLW	UPPER(__str_2)
0009d8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0009da   0e22     movlw	0x22               	MOVLW	HIGH(__str_2)
0009dc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0009de   0e90     movlw	0x90               	MOVLW	LOW(__str_2)
0009e0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0009e2   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
0009e4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0009e6   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0009e8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0009ea   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0009ec   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0009ee   ec84     call	0x3708, 0           	CALL	_sprintf
0009f0   f01b
0009f2   0e0c     movlw	0xc                	MOVLW	0x0c
0009f4   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	256; reveil.c	break;
0009f6   d1f0     bra	0xdd8                	BRA	_00194_DS_
                                           _00176_DS_:
                                           ;	.line	259; reveil.c	thour, tmin, tsec);
0009f8   cf49     movff	0xf49, 0           	MOVFF	_tsec, r0x00
0009fa   f000
0009fc   6a01     clrf	0x1, 0              	CLRF	r0x01
0009fe   cf48     movff	0xf48, 0x2         	MOVFF	_tmin, r0x02
000a00   f002
000a02   6a03     clrf	0x3, 0              	CLRF	r0x03
000a04   cf47     movff	0xf47, 0x4         	MOVFF	_thour, r0x04
000a06   f004
000a08   6a05     clrf	0x5, 0              	CLRF	r0x05
                                           ;	.line	258; reveil.c	sprintf(display, "  %02u : %02u :[%02u]                 ",
000a0a   0e0f     movlw	0xf                	MOVLW	HIGH(_display)
000a0c   6e07     movwf	0x7, 0             	MOVWF	r0x07
000a0e   0e21     movlw	0x21               	MOVLW	LOW(_display)
000a10   6e06     movwf	0x6, 0             	MOVWF	r0x06
000a12   0e80     movlw	0x80               	MOVLW	0x80
000a14   6e08     movwf	0x8, 0             	MOVWF	r0x08
000a16   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000a18   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a1a   5000     movf	0, 0, 0             	MOVF	r0x00, W
000a1c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a1e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000a20   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a22   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000a24   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a26   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000a28   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a2a   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000a2c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a2e   0e00     movlw	0                  	MOVLW	UPPER(__str_3)
000a30   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a32   0e22     movlw	0x22               	MOVLW	HIGH(__str_3)
000a34   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a36   0eb8     movlw	0xb8               	MOVLW	LOW(__str_3)
000a38   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a3a   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
000a3c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a3e   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
000a40   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a42   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000a44   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a46   ec84     call	0x3708, 0           	CALL	_sprintf
000a48   f01b
000a4a   0e0c     movlw	0xc                	MOVLW	0x0c
000a4c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	260; reveil.c	break;
000a4e   d1c4     bra	0xdd8                	BRA	_00194_DS_
                                           _00177_DS_:
                                           ;	.line	262; reveil.c	sprintf(display, "Do you want to  set the alarm ? ");
000a50   0e0f     movlw	0xf                	MOVLW	HIGH(_display)
000a52   6e01     movwf	0x1, 0             	MOVWF	r0x01
000a54   0e21     movlw	0x21               	MOVLW	LOW(_display)
000a56   6e00     movwf	0, 0               	MOVWF	r0x00
000a58   0e80     movlw	0x80               	MOVLW	0x80
000a5a   6e02     movwf	0x2, 0             	MOVWF	r0x02
000a5c   0e00     movlw	0                  	MOVLW	UPPER(__str_4)
000a5e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a60   0e22     movlw	0x22               	MOVLW	HIGH(__str_4)
000a62   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a64   0ee0     movlw	0xe0               	MOVLW	LOW(__str_4)
000a66   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a68   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000a6a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a6c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000a6e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a70   5000     movf	0, 0, 0             	MOVF	r0x00, W
000a72   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a74   ec84     call	0x3708, 0           	CALL	_sprintf
000a76   f01b
000a78   0e06     movlw	0x6                	MOVLW	0x06
000a7a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	263; reveil.c	break;
000a7c   d1ad     bra	0xdd8                	BRA	_00194_DS_
                                           _00178_DS_:
000a7e   010f     movlb	0xf                	BANKSEL	_alarm_set
                                           ;	.line	265; reveil.c	if (alarm_set) {
000a80   514e     movf	0x4e, 0, 0x1        	MOVF	_alarm_set, W, B
000a82   e017     bz	0xab2                 	BZ	_00180_DS_
                                           ;	.line	266; reveil.c	sprintf(display, "  Alarm [ON ]                   ");
000a84   0e0f     movlw	0xf                	MOVLW	HIGH(_display)
000a86   6e01     movwf	0x1, 0             	MOVWF	r0x01
000a88   0e21     movlw	0x21               	MOVLW	LOW(_display)
000a8a   6e00     movwf	0, 0               	MOVWF	r0x00
000a8c   0e80     movlw	0x80               	MOVLW	0x80
000a8e   6e02     movwf	0x2, 0             	MOVWF	r0x02
000a90   0e00     movlw	0                  	MOVLW	UPPER(__str_5)
000a92   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a94   0e23     movlw	0x23               	MOVLW	HIGH(__str_5)
000a96   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a98   0e02     movlw	0x2                	MOVLW	LOW(__str_5)
000a9a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a9c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000a9e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000aa0   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000aa2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000aa4   5000     movf	0, 0, 0             	MOVF	r0x00, W
000aa6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000aa8   ec84     call	0x3708, 0           	CALL	_sprintf
000aaa   f01b
000aac   0e06     movlw	0x6                	MOVLW	0x06
000aae   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000ab0   d193     bra	0xdd8                	BRA	_00194_DS_
                                           _00180_DS_:
                                           ;	.line	268; reveil.c	sprintf(display, "  Alarm [OFF]                   ");
000ab2   0e0f     movlw	0xf                	MOVLW	HIGH(_display)
000ab4   6e01     movwf	0x1, 0             	MOVWF	r0x01
000ab6   0e21     movlw	0x21               	MOVLW	LOW(_display)
000ab8   6e00     movwf	0, 0               	MOVWF	r0x00
000aba   0e80     movlw	0x80               	MOVLW	0x80
000abc   6e02     movwf	0x2, 0             	MOVWF	r0x02
000abe   0e00     movlw	0                  	MOVLW	UPPER(__str_6)
000ac0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ac2   0e23     movlw	0x23               	MOVLW	HIGH(__str_6)
000ac4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ac6   0e24     movlw	0x24               	MOVLW	LOW(__str_6)
000ac8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000aca   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000acc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ace   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000ad0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ad2   5000     movf	0, 0, 0             	MOVF	r0x00, W
000ad4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ad6   ec84     call	0x3708, 0           	CALL	_sprintf
000ad8   f01b
000ada   0e06     movlw	0x6                	MOVLW	0x06
000adc   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	270; reveil.c	break;
000ade   d17c     bra	0xdd8                	BRA	_00194_DS_
                                           _00182_DS_:
                                           ;	.line	273; reveil.c	ahour, amin);
000ae0   cf4b     movff	0xf4b, 0           	MOVFF	_amin, r0x00
000ae2   f000
000ae4   6a01     clrf	0x1, 0              	CLRF	r0x01
000ae6   cf4a     movff	0xf4a, 0x2         	MOVFF	_ahour, r0x02
000ae8   f002
000aea   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           ;	.line	272; reveil.c	sprintf(display, "    Alarm at        [%02u]: %02u    ",
000aec   0e0f     movlw	0xf                	MOVLW	HIGH(_display)
000aee   6e05     movwf	0x5, 0             	MOVWF	r0x05
000af0   0e21     movlw	0x21               	MOVLW	LOW(_display)
000af2   6e04     movwf	0x4, 0             	MOVWF	r0x04
000af4   0e80     movlw	0x80               	MOVLW	0x80
000af6   6e06     movwf	0x6, 0             	MOVWF	r0x06
000af8   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000afa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000afc   5000     movf	0, 0, 0             	MOVF	r0x00, W
000afe   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b00   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000b02   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b04   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000b06   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b08   0e00     movlw	0                  	MOVLW	UPPER(__str_7)
000b0a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b0c   0e23     movlw	0x23               	MOVLW	HIGH(__str_7)
000b0e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b10   0e46     movlw	0x46               	MOVLW	LOW(__str_7)
000b12   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b14   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000b16   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b18   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000b1a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b1c   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000b1e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b20   ec84     call	0x3708, 0           	CALL	_sprintf
000b22   f01b
000b24   0e0a     movlw	0xa                	MOVLW	0x0a
000b26   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	274; reveil.c	break;
000b28   d157     bra	0xdd8                	BRA	_00194_DS_
                                           _00183_DS_:
                                           ;	.line	277; reveil.c	ahour, amin);
000b2a   cf4b     movff	0xf4b, 0           	MOVFF	_amin, r0x00
000b2c   f000
000b2e   6a01     clrf	0x1, 0              	CLRF	r0x01
000b30   cf4a     movff	0xf4a, 0x2         	MOVFF	_ahour, r0x02
000b32   f002
000b34   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           ;	.line	276; reveil.c	sprintf(display, "    Alarm at         %02u :[%02u]   ",
000b36   0e0f     movlw	0xf                	MOVLW	HIGH(_display)
000b38   6e05     movwf	0x5, 0             	MOVWF	r0x05
000b3a   0e21     movlw	0x21               	MOVLW	LOW(_display)
000b3c   6e04     movwf	0x4, 0             	MOVWF	r0x04
000b3e   0e80     movlw	0x80               	MOVLW	0x80
000b40   6e06     movwf	0x6, 0             	MOVWF	r0x06
000b42   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000b44   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b46   5000     movf	0, 0, 0             	MOVF	r0x00, W
000b48   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b4a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000b4c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b4e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000b50   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b52   0e00     movlw	0                  	MOVLW	UPPER(__str_8)
000b54   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b56   0e23     movlw	0x23               	MOVLW	HIGH(__str_8)
000b58   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b5a   0e6c     movlw	0x6c               	MOVLW	LOW(__str_8)
000b5c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b5e   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000b60   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b62   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000b64   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b66   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000b68   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b6a   ec84     call	0x3708, 0           	CALL	_sprintf
000b6c   f01b
000b6e   0e0a     movlw	0xa                	MOVLW	0x0a
000b70   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	278; reveil.c	break;
000b72   d132     bra	0xdd8                	BRA	_00194_DS_
                                           _00184_DS_:
000b74   010f     movlb	0xf                	BANKSEL	_alarm_set
                                           ;	.line	280; reveil.c	if (alarm_set) {
000b76   514e     movf	0x4e, 0, 0x1        	MOVF	_alarm_set, W, B
000b78   e03a     bz	0xbee                 	BZ	_00186_DS_
                                           ;	.line	282; reveil.c	thour, tmin, tsec, ahour, amin);
000b7a   cf4b     movff	0xf4b, 0           	MOVFF	_amin, r0x00
000b7c   f000
000b7e   6a01     clrf	0x1, 0              	CLRF	r0x01
000b80   cf4a     movff	0xf4a, 0x2         	MOVFF	_ahour, r0x02
000b82   f002
000b84   6a03     clrf	0x3, 0              	CLRF	r0x03
000b86   cf49     movff	0xf49, 0x4         	MOVFF	_tsec, r0x04
000b88   f004
000b8a   6a05     clrf	0x5, 0              	CLRF	r0x05
000b8c   cf48     movff	0xf48, 0x6         	MOVFF	_tmin, r0x06
000b8e   f006
000b90   6a07     clrf	0x7, 0              	CLRF	r0x07
000b92   cf47     movff	0xf47, 0x8         	MOVFF	_thour, r0x08
000b94   f008
000b96   6a09     clrf	0x9, 0              	CLRF	r0x09
                                           ;	.line	281; reveil.c	sprintf(display, "    %02u:%02u:%02u    Alarm ON  %02u:%02u ",
000b98   0e0f     movlw	0xf                	MOVLW	HIGH(_display)
000b9a   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
000b9c   0e21     movlw	0x21               	MOVLW	LOW(_display)
000b9e   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
000ba0   0e80     movlw	0x80               	MOVLW	0x80
000ba2   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
000ba4   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000ba6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ba8   5000     movf	0, 0, 0             	MOVF	r0x00, W
000baa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000bac   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000bae   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000bb0   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000bb2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000bb4   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000bb6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000bb8   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000bba   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000bbc   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
000bbe   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000bc0   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000bc2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000bc4   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
000bc6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000bc8   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
000bca   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000bcc   0e00     movlw	0                  	MOVLW	UPPER(__str_9)
000bce   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000bd0   0e23     movlw	0x23               	MOVLW	HIGH(__str_9)
000bd2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000bd4   0e92     movlw	0x92               	MOVLW	LOW(__str_9)
000bd6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000bd8   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
000bda   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000bdc   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
000bde   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000be0   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
000be2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000be4   ec84     call	0x3708, 0           	CALL	_sprintf
000be6   f01b
000be8   0e10     movlw	0x10               	MOVLW	0x10
000bea   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000bec   d0f5     bra	0xdd8                	BRA	_00194_DS_
                                           _00186_DS_:
                                           ;	.line	285; reveil.c	thour, tmin, tsec);
000bee   cf49     movff	0xf49, 0           	MOVFF	_tsec, r0x00
000bf0   f000
000bf2   6a01     clrf	0x1, 0              	CLRF	r0x01
000bf4   cf48     movff	0xf48, 0x2         	MOVFF	_tmin, r0x02
000bf6   f002
000bf8   6a03     clrf	0x3, 0              	CLRF	r0x03
000bfa   cf47     movff	0xf47, 0x4         	MOVFF	_thour, r0x04
000bfc   f004
000bfe   6a05     clrf	0x5, 0              	CLRF	r0x05
                                           ;	.line	284; reveil.c	sprintf(display, "    %02u:%02u:%02u       Alarm  OFF   ",
000c00   0e0f     movlw	0xf                	MOVLW	HIGH(_display)
000c02   6e07     movwf	0x7, 0             	MOVWF	r0x07
000c04   0e21     movlw	0x21               	MOVLW	LOW(_display)
000c06   6e06     movwf	0x6, 0             	MOVWF	r0x06
000c08   0e80     movlw	0x80               	MOVLW	0x80
000c0a   6e08     movwf	0x8, 0             	MOVWF	r0x08
000c0c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000c0e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c10   5000     movf	0, 0, 0             	MOVF	r0x00, W
000c12   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c14   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000c16   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c18   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000c1a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c1c   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000c1e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c20   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000c22   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c24   0e00     movlw	0                  	MOVLW	UPPER(__str_10)
000c26   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c28   0e23     movlw	0x23               	MOVLW	HIGH(__str_10)
000c2a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c2c   0ebe     movlw	0xbe               	MOVLW	LOW(__str_10)
000c2e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c30   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
000c32   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c34   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
000c36   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c38   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000c3a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c3c   ec84     call	0x3708, 0           	CALL	_sprintf
000c3e   f01b
000c40   0e0c     movlw	0xc                	MOVLW	0x0c
000c42   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	287; reveil.c	break;
000c44   d0c9     bra	0xdd8                	BRA	_00194_DS_
                                           _00188_DS_:
                                           ;	.line	290; reveil.c	thour, tmin, tsec); // ***blink***
000c46   cf49     movff	0xf49, 0           	MOVFF	_tsec, r0x00
000c48   f000
000c4a   6a01     clrf	0x1, 0              	CLRF	r0x01
000c4c   cf48     movff	0xf48, 0x2         	MOVFF	_tmin, r0x02
000c4e   f002
000c50   6a03     clrf	0x3, 0              	CLRF	r0x03
000c52   cf47     movff	0xf47, 0x4         	MOVFF	_thour, r0x04
000c54   f004
000c56   6a05     clrf	0x5, 0              	CLRF	r0x05
                                           ;	.line	289; reveil.c	sprintf(display, "    %02u:%02u:%02u      I am ringing! ",
000c58   0e0f     movlw	0xf                	MOVLW	HIGH(_display)
000c5a   6e07     movwf	0x7, 0             	MOVWF	r0x07
000c5c   0e21     movlw	0x21               	MOVLW	LOW(_display)
000c5e   6e06     movwf	0x6, 0             	MOVWF	r0x06
000c60   0e80     movlw	0x80               	MOVLW	0x80
000c62   6e08     movwf	0x8, 0             	MOVWF	r0x08
000c64   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000c66   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c68   5000     movf	0, 0, 0             	MOVF	r0x00, W
000c6a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c6c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000c6e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c70   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000c72   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c74   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000c76   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c78   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000c7a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c7c   0e00     movlw	0                  	MOVLW	UPPER(__str_11)
000c7e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c80   0e23     movlw	0x23               	MOVLW	HIGH(__str_11)
000c82   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c84   0ee6     movlw	0xe6               	MOVLW	LOW(__str_11)
000c86   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c88   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
000c8a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c8c   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
000c8e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c90   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000c92   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c94   ec84     call	0x3708, 0           	CALL	_sprintf
000c96   f01b
000c98   0e0c     movlw	0xc                	MOVLW	0x0c
000c9a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	291; reveil.c	break;
000c9c   d09d     bra	0xdd8                	BRA	_00194_DS_
                                           _00189_DS_:
                                           ;	.line	293; reveil.c	if (snooze < 10) {
000c9e   0e0a     movlw	0xa                	MOVLW	0x0a
000ca0   010f     movlb	0xf                	BANKSEL	_snooze
000ca2   5d4f     subwf	0x4f, 0, 0x1       	SUBWF	_snooze, W, B
000ca4   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000ca6   d041     bra	0xd2a                	BRA	_00191_DS_
                                           ;	.line	295; reveil.c	thour, tmin, tsec, snooze, ahour_o, amin_o);
000ca8   cf4d     movff	0xf4d, 0           	MOVFF	_amin_o, r0x00
000caa   f000
000cac   6a01     clrf	0x1, 0              	CLRF	r0x01
000cae   cf4c     movff	0xf4c, 0x2         	MOVFF	_ahour_o, r0x02
000cb0   f002
000cb2   6a03     clrf	0x3, 0              	CLRF	r0x03
000cb4   cf4f     movff	0xf4f, 0x4         	MOVFF	_snooze, r0x04
000cb6   f004
000cb8   6a05     clrf	0x5, 0              	CLRF	r0x05
000cba   cf49     movff	0xf49, 0x6         	MOVFF	_tsec, r0x06
000cbc   f006
000cbe   6a07     clrf	0x7, 0              	CLRF	r0x07
000cc0   cf48     movff	0xf48, 0x8         	MOVFF	_tmin, r0x08
000cc2   f008
000cc4   6a09     clrf	0x9, 0              	CLRF	r0x09
000cc6   cf47     movff	0xf47, 0xa         	MOVFF	_thour, r0x0a
000cc8   f00a
000cca   6a0b     clrf	0xb, 0              	CLRF	r0x0b
                                           ;	.line	294; reveil.c	sprintf(display, "    %02u:%02u:%02u    Snooze %u  %02u:%02u ",
000ccc   0e0f     movlw	0xf                	MOVLW	HIGH(_display)
000cce   6e0d     movwf	0xd, 0             	MOVWF	r0x0d
000cd0   0e21     movlw	0x21               	MOVLW	LOW(_display)
000cd2   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
000cd4   0e80     movlw	0x80               	MOVLW	0x80
000cd6   6e0e     movwf	0xe, 0             	MOVWF	r0x0e
000cd8   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000cda   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000cdc   5000     movf	0, 0, 0             	MOVF	r0x00, W
000cde   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ce0   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000ce2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ce4   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000ce6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ce8   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000cea   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000cec   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000cee   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000cf0   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
000cf2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000cf4   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000cf6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000cf8   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
000cfa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000cfc   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
000cfe   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d00   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
000d02   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d04   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
000d06   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d08   0e00     movlw	0                  	MOVLW	UPPER(__str_12)
000d0a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d0c   0e24     movlw	0x24               	MOVLW	HIGH(__str_12)
000d0e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d10   0e0e     movlw	0xe                	MOVLW	LOW(__str_12)
000d12   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d14   500e     movf	0xe, 0, 0           	MOVF	r0x0e, W
000d16   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d18   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
000d1a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d1c   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
000d1e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d20   ec84     call	0x3708, 0           	CALL	_sprintf
000d22   f01b
000d24   0e12     movlw	0x12               	MOVLW	0x12
000d26   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000d28   d057     bra	0xdd8                	BRA	_00194_DS_
                                           _00191_DS_:
                                           ;	.line	298; reveil.c	thour, tmin, tsec, snooze, ahour_o, amin_o);
000d2a   cf4d     movff	0xf4d, 0           	MOVFF	_amin_o, r0x00
000d2c   f000
000d2e   6a01     clrf	0x1, 0              	CLRF	r0x01
000d30   cf4c     movff	0xf4c, 0x2         	MOVFF	_ahour_o, r0x02
000d32   f002
000d34   6a03     clrf	0x3, 0              	CLRF	r0x03
000d36   cf4f     movff	0xf4f, 0x4         	MOVFF	_snooze, r0x04
000d38   f004
000d3a   6a05     clrf	0x5, 0              	CLRF	r0x05
000d3c   cf49     movff	0xf49, 0x6         	MOVFF	_tsec, r0x06
000d3e   f006
000d40   6a07     clrf	0x7, 0              	CLRF	r0x07
000d42   cf48     movff	0xf48, 0x8         	MOVFF	_tmin, r0x08
000d44   f008
000d46   6a09     clrf	0x9, 0              	CLRF	r0x09
000d48   cf47     movff	0xf47, 0xa         	MOVFF	_thour, r0x0a
000d4a   f00a
000d4c   6a0b     clrf	0xb, 0              	CLRF	r0x0b
                                           ;	.line	297; reveil.c	sprintf(display, "    %02u:%02u:%02u    Snooze %u %02u:%02u ",
000d4e   0e0f     movlw	0xf                	MOVLW	HIGH(_display)
000d50   6e0d     movwf	0xd, 0             	MOVWF	r0x0d
000d52   0e21     movlw	0x21               	MOVLW	LOW(_display)
000d54   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
000d56   0e80     movlw	0x80               	MOVLW	0x80
000d58   6e0e     movwf	0xe, 0             	MOVWF	r0x0e
000d5a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000d5c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d5e   5000     movf	0, 0, 0             	MOVF	r0x00, W
000d60   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d62   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000d64   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d66   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000d68   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d6a   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000d6c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d6e   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000d70   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d72   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
000d74   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d76   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000d78   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d7a   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
000d7c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d7e   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
000d80   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d82   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
000d84   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d86   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
000d88   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d8a   0e00     movlw	0                  	MOVLW	UPPER(__str_13)
000d8c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d8e   0e24     movlw	0x24               	MOVLW	HIGH(__str_13)
000d90   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d92   0e3a     movlw	0x3a               	MOVLW	LOW(__str_13)
000d94   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d96   500e     movf	0xe, 0, 0           	MOVF	r0x0e, W
000d98   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d9a   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
000d9c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d9e   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
000da0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000da2   ec84     call	0x3708, 0           	CALL	_sprintf
000da4   f01b
000da6   0e12     movlw	0x12               	MOVLW	0x12
000da8   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	300; reveil.c	break;
000daa   d016     bra	0xdd8                	BRA	_00194_DS_
                                           _00193_DS_:
                                           ;	.line	302; reveil.c	sprintf(display, "**** ERROR ********* ERROR *****");
000dac   0e0f     movlw	0xf                	MOVLW	HIGH(_display)
000dae   6e01     movwf	0x1, 0             	MOVWF	r0x01
000db0   0e21     movlw	0x21               	MOVLW	LOW(_display)
000db2   6e00     movwf	0, 0               	MOVWF	r0x00
000db4   0e80     movlw	0x80               	MOVLW	0x80
000db6   6e02     movwf	0x2, 0             	MOVWF	r0x02
000db8   0e00     movlw	0                  	MOVLW	UPPER(__str_14)
000dba   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000dbc   0e24     movlw	0x24               	MOVLW	HIGH(__str_14)
000dbe   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000dc0   0e66     movlw	0x66               	MOVLW	LOW(__str_14)
000dc2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000dc4   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000dc6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000dc8   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000dca   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000dcc   5000     movf	0, 0, 0             	MOVF	r0x00, W
000dce   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000dd0   ec84     call	0x3708, 0           	CALL	_sprintf
000dd2   f01b
000dd4   0e06     movlw	0x6                	MOVLW	0x06
000dd6   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00194_DS_:
                                           ;	.line	305; reveil.c	DisplayString(0, display);
000dd8   0e0f     movlw	0xf                	MOVLW	HIGH(_display)
000dda   6e01     movwf	0x1, 0             	MOVWF	r0x01
000ddc   0e21     movlw	0x21               	MOVLW	LOW(_display)
000dde   6e00     movwf	0, 0               	MOVWF	r0x00
000de0   0e80     movlw	0x80               	MOVLW	0x80
000de2   6e02     movwf	0x2, 0             	MOVWF	r0x02
000de4   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000de6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000de8   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000dea   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000dec   5000     movf	0, 0, 0             	MOVF	r0x00, W
000dee   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000df0   0e00     movlw	0                  	MOVLW	0x00
000df2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000df4   ec6b     call	0x38d6, 0           	CALL	_DisplayString
000df6   f01c
000df8   0e04     movlw	0x4                	MOVLW	0x04
000dfa   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000dfc   cfe4     movff	0xfe4, 0xe         	MOVFF	PREINC1, r0x0e
000dfe   f00e
000e00   cfe4     movff	0xfe4, 0xd         	MOVFF	PREINC1, r0x0d
000e02   f00d
000e04   cfe4     movff	0xfe4, 0xc         	MOVFF	PREINC1, r0x0c
000e06   f00c
000e08   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
000e0a   f00b
000e0c   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
000e0e   f00a
000e10   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
000e12   f009
000e14   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
000e16   f008
000e18   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
000e1a   f007
000e1c   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
000e1e   f006
000e20   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
000e22   f005
000e24   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
000e26   f004
000e28   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
000e2a   f003
000e2c   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
000e2e   f002
000e30   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
000e32   f001
000e34   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000e36   f000
000e38   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000e3a   ffd9
000e3c   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_reveil__time	code
                                           _time:
                                           ;	.line	202; reveil.c	void time(void)
001b22   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
001b24   ffe5
001b26   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001b28   ffd9
001b2a   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
001b2c   ffe5
001b2e   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
001b30   ffe5
001b32   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
001b34   ffe5
001b36   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
001b38   ffe5
001b3a   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
001b3c   ffe5
001b3e   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
001b40   ffe5
001b42   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
001b44   ffe5
001b46   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
001b48   ffe5
001b4a   010f     movlb	0xf                	BANKSEL	(_overflows + 3)
                                           ;	.line	205; reveil.c	sec = overflows/F;
001b4c   5146     movf	0x46, 0, 0x1        	MOVF	(_overflows + 3), W, B
001b4e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001b50   010f     movlb	0xf                	BANKSEL	(_overflows + 2)
001b52   5145     movf	0x45, 0, 0x1        	MOVF	(_overflows + 2), W, B
001b54   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001b56   010f     movlb	0xf                	BANKSEL	(_overflows + 1)
001b58   5144     movf	0x44, 0, 0x1        	MOVF	(_overflows + 1), W, B
001b5a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001b5c   010f     movlb	0xf                	BANKSEL	_overflows
001b5e   5143     movf	0x43, 0, 0x1        	MOVF	_overflows, W, B
001b60   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001b62   ec8d     call	0x2f1a, 0           	CALL	___ulong2fs
001b64   f017
001b66   6e00     movwf	0, 0               	MOVWF	r0x00
001b68   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
001b6a   f001
001b6c   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
001b6e   f002
001b70   cfe9     movff	0xfe9, 0x3         	MOVFF	FSR0L, r0x03
001b72   f003
001b74   0e04     movlw	0x4                	MOVLW	0x04
001b76   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
001b78   0e42     movlw	0x42               	MOVLW	0x42
001b7a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001b7c   0ebe     movlw	0xbe               	MOVLW	0xbe
001b7e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001b80   0ebb     movlw	0xbb               	MOVLW	0xbb
001b82   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001b84   0e2a     movlw	0x2a               	MOVLW	0x2a
001b86   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001b88   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001b8a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001b8c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001b8e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001b90   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001b92   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001b94   5000     movf	0, 0, 0             	MOVF	r0x00, W
001b96   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001b98   ec50     call	0x1ea0, 0           	CALL	___fsdiv
001b9a   f00f
001b9c   6e00     movwf	0, 0               	MOVWF	r0x00
001b9e   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
001ba0   f001
001ba2   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
001ba4   f002
001ba6   cfe9     movff	0xfe9, 0x3         	MOVFF	FSR0L, r0x03
001ba8   f003
001baa   0e08     movlw	0x8                	MOVLW	0x08
001bac   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
001bae   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001bb0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001bb2   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001bb4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001bb6   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001bb8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001bba   5000     movf	0, 0, 0             	MOVF	r0x00, W
001bbc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001bbe   ec0e     call	0x361c, 0           	CALL	___fs2ulong
001bc0   f01b
001bc2   010f     movlb	0xf                	BANKSEL	_sec
001bc4   6f54     movwf	0x54, 0x1          	MOVWF	_sec, B
001bc6   cff3     movff	0xff3, 0xf55       	MOVFF	PRODL, (_sec + 1)
001bc8   ff55
001bca   cff4     movff	0xff4, 0xf56       	MOVFF	PRODH, (_sec + 2)
001bcc   ff56
001bce   cfe9     movff	0xfe9, 0xf57       	MOVFF	FSR0L, (_sec + 3)
001bd0   ff57
001bd2   0e04     movlw	0x4                	MOVLW	0x04
001bd4   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
001bd6   010f     movlb	0xf                	BANKSEL	(_overflows + 3)
                                           ;	.line	206; reveil.c	decisec = ((10*overflows)/F);
001bd8   5146     movf	0x46, 0, 0x1        	MOVF	(_overflows + 3), W, B
001bda   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001bdc   010f     movlb	0xf                	BANKSEL	(_overflows + 2)
001bde   5145     movf	0x45, 0, 0x1        	MOVF	(_overflows + 2), W, B
001be0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001be2   010f     movlb	0xf                	BANKSEL	(_overflows + 1)
001be4   5144     movf	0x44, 0, 0x1        	MOVF	(_overflows + 1), W, B
001be6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001be8   010f     movlb	0xf                	BANKSEL	_overflows
001bea   5143     movf	0x43, 0, 0x1        	MOVF	_overflows, W, B
001bec   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001bee   0e00     movlw	0                  	MOVLW	0x00
001bf0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001bf2   0e00     movlw	0                  	MOVLW	0x00
001bf4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001bf6   0e00     movlw	0                  	MOVLW	0x00
001bf8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001bfa   0e0a     movlw	0xa                	MOVLW	0x0a
001bfc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001bfe   eca7     call	0x294e, 0           	CALL	__mullong
001c00   f014
001c02   6e00     movwf	0, 0               	MOVWF	r0x00
001c04   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
001c06   f001
001c08   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
001c0a   f002
001c0c   cfe9     movff	0xfe9, 0x3         	MOVFF	FSR0L, r0x03
001c0e   f003
001c10   0e08     movlw	0x8                	MOVLW	0x08
001c12   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
001c14   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001c16   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c18   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001c1a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c1c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001c1e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c20   5000     movf	0, 0, 0             	MOVF	r0x00, W
001c22   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c24   ec8d     call	0x2f1a, 0           	CALL	___ulong2fs
001c26   f017
001c28   6e00     movwf	0, 0               	MOVWF	r0x00
001c2a   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
001c2c   f001
001c2e   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
001c30   f002
001c32   cfe9     movff	0xfe9, 0x3         	MOVFF	FSR0L, r0x03
001c34   f003
001c36   0e04     movlw	0x4                	MOVLW	0x04
001c38   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
001c3a   0e42     movlw	0x42               	MOVLW	0x42
001c3c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c3e   0ebe     movlw	0xbe               	MOVLW	0xbe
001c40   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c42   0ebb     movlw	0xbb               	MOVLW	0xbb
001c44   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c46   0e2a     movlw	0x2a               	MOVLW	0x2a
001c48   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c4a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001c4c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c4e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001c50   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c52   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001c54   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c56   5000     movf	0, 0, 0             	MOVF	r0x00, W
001c58   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c5a   ec50     call	0x1ea0, 0           	CALL	___fsdiv
001c5c   f00f
001c5e   6e00     movwf	0, 0               	MOVWF	r0x00
001c60   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
001c62   f001
001c64   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
001c66   f002
001c68   cfe9     movff	0xfe9, 0x3         	MOVFF	FSR0L, r0x03
001c6a   f003
001c6c   0e08     movlw	0x8                	MOVLW	0x08
001c6e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
001c70   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001c72   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c74   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001c76   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c78   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001c7a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c7c   5000     movf	0, 0, 0             	MOVF	r0x00, W
001c7e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c80   ec0e     call	0x361c, 0           	CALL	___fs2ulong
001c82   f01b
001c84   010f     movlb	0xf                	BANKSEL	_decisec
001c86   6f58     movwf	0x58, 0x1          	MOVWF	_decisec, B
001c88   cff3     movff	0xff3, 0xf59       	MOVFF	PRODL, (_decisec + 1)
001c8a   ff59
001c8c   cff4     movff	0xff4, 0xf5a       	MOVFF	PRODH, (_decisec + 2)
001c8e   ff5a
001c90   cfe9     movff	0xfe9, 0xf5b       	MOVFF	FSR0L, (_decisec + 3)
001c92   ff5b
001c94   0e04     movlw	0x4                	MOVLW	0x04
001c96   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	207; reveil.c	ds = decisec%10;
001c98   0e00     movlw	0                  	MOVLW	0x00
001c9a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c9c   0e00     movlw	0                  	MOVLW	0x00
001c9e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001ca0   0e00     movlw	0                  	MOVLW	0x00
001ca2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001ca4   0e0a     movlw	0xa                	MOVLW	0x0a
001ca6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001ca8   010f     movlb	0xf                	BANKSEL	(_decisec + 3)
001caa   515b     movf	0x5b, 0, 0x1        	MOVF	(_decisec + 3), W, B
001cac   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001cae   010f     movlb	0xf                	BANKSEL	(_decisec + 2)
001cb0   515a     movf	0x5a, 0, 0x1        	MOVF	(_decisec + 2), W, B
001cb2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001cb4   010f     movlb	0xf                	BANKSEL	(_decisec + 1)
001cb6   5159     movf	0x59, 0, 0x1        	MOVF	(_decisec + 1), W, B
001cb8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001cba   010f     movlb	0xf                	BANKSEL	_decisec
001cbc   5158     movf	0x58, 0, 0x1        	MOVF	_decisec, W, B
001cbe   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001cc0   ecf5     call	0x31ea, 0           	CALL	__modulong
001cc2   f018
001cc4   6e00     movwf	0, 0               	MOVWF	r0x00
001cc6   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
001cc8   f001
001cca   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
001ccc   f002
001cce   cfe9     movff	0xfe9, 0x3         	MOVFF	FSR0L, r0x03
001cd0   f003
001cd2   0e08     movlw	0x8                	MOVLW	0x08
001cd4   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
001cd6   5000     movf	0, 0, 0             	MOVF	r0x00, W
001cd8   010e     movlb	0xe                	BANKSEL	_ds
001cda   6f69     movwf	0x69, 0x1          	MOVWF	_ds, B
                                           ;	.line	208; reveil.c	h = (sec/3600)%24;
001cdc   0e00     movlw	0                  	MOVLW	0x00
001cde   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001ce0   0e00     movlw	0                  	MOVLW	0x00
001ce2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001ce4   0e0e     movlw	0xe                	MOVLW	0x0e
001ce6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001ce8   0e10     movlw	0x10               	MOVLW	0x10
001cea   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001cec   010f     movlb	0xf                	BANKSEL	(_sec + 3)
001cee   5157     movf	0x57, 0, 0x1        	MOVF	(_sec + 3), W, B
001cf0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001cf2   010f     movlb	0xf                	BANKSEL	(_sec + 2)
001cf4   5156     movf	0x56, 0, 0x1        	MOVF	(_sec + 2), W, B
001cf6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001cf8   010f     movlb	0xf                	BANKSEL	(_sec + 1)
001cfa   5155     movf	0x55, 0, 0x1        	MOVF	(_sec + 1), W, B
001cfc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001cfe   010f     movlb	0xf                	BANKSEL	_sec
001d00   5154     movf	0x54, 0, 0x1        	MOVF	_sec, W, B
001d02   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001d04   ec87     call	0x330e, 0           	CALL	__divulong
001d06   f019
001d08   6e00     movwf	0, 0               	MOVWF	r0x00
001d0a   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
001d0c   f001
001d0e   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
001d10   f002
001d12   cfe9     movff	0xfe9, 0x3         	MOVFF	FSR0L, r0x03
001d14   f003
001d16   0e08     movlw	0x8                	MOVLW	0x08
001d18   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
001d1a   0e00     movlw	0                  	MOVLW	0x00
001d1c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001d1e   0e00     movlw	0                  	MOVLW	0x00
001d20   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001d22   0e00     movlw	0                  	MOVLW	0x00
001d24   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001d26   0e18     movlw	0x18               	MOVLW	0x18
001d28   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001d2a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001d2c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001d2e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001d30   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001d32   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001d34   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001d36   5000     movf	0, 0, 0             	MOVF	r0x00, W
001d38   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001d3a   ecf5     call	0x31ea, 0           	CALL	__modulong
001d3c   f018
001d3e   6e04     movwf	0x4, 0             	MOVWF	r0x04
001d40   cff3     movff	0xff3, 0x5         	MOVFF	PRODL, r0x05
001d42   f005
001d44   cff4     movff	0xff4, 0x6         	MOVFF	PRODH, r0x06
001d46   f006
001d48   cfe9     movff	0xfe9, 0x7         	MOVFF	FSR0L, r0x07
001d4a   f007
001d4c   0e08     movlw	0x8                	MOVLW	0x08
001d4e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
001d50   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001d52   010e     movlb	0xe                	BANKSEL	_h
001d54   6f6a     movwf	0x6a, 0x1          	MOVWF	_h, B
                                           ;	.line	209; reveil.c	m = (sec-(sec/3600)*3600)/60;
001d56   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001d58   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001d5a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001d5c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001d5e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001d60   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001d62   5000     movf	0, 0, 0             	MOVF	r0x00, W
001d64   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001d66   0e00     movlw	0                  	MOVLW	0x00
001d68   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001d6a   0e00     movlw	0                  	MOVLW	0x00
001d6c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001d6e   0e0e     movlw	0xe                	MOVLW	0x0e
001d70   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001d72   0e10     movlw	0x10               	MOVLW	0x10
001d74   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001d76   eca7     call	0x294e, 0           	CALL	__mullong
001d78   f014
001d7a   6e00     movwf	0, 0               	MOVWF	r0x00
001d7c   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
001d7e   f001
001d80   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
001d82   f002
001d84   cfe9     movff	0xfe9, 0x3         	MOVFF	FSR0L, r0x03
001d86   f003
001d88   0e08     movlw	0x8                	MOVLW	0x08
001d8a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
001d8c   5000     movf	0, 0, 0             	MOVF	r0x00, W
001d8e   010f     movlb	0xf                	BANKSEL	_sec
001d90   5d54     subwf	0x54, 0, 0x1       	SUBWF	_sec, W, B
001d92   6e00     movwf	0, 0               	MOVWF	r0x00
001d94   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001d96   010f     movlb	0xf                	BANKSEL	(_sec + 1)
001d98   5955     subwfb	0x55, 0, 0x1      	SUBWFB	(_sec + 1), W, B
001d9a   6e01     movwf	0x1, 0             	MOVWF	r0x01
001d9c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001d9e   010f     movlb	0xf                	BANKSEL	(_sec + 2)
001da0   5956     subwfb	0x56, 0, 0x1      	SUBWFB	(_sec + 2), W, B
001da2   6e02     movwf	0x2, 0             	MOVWF	r0x02
001da4   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001da6   010f     movlb	0xf                	BANKSEL	(_sec + 3)
001da8   5957     subwfb	0x57, 0, 0x1      	SUBWFB	(_sec + 3), W, B
001daa   6e03     movwf	0x3, 0             	MOVWF	r0x03
001dac   0e00     movlw	0                  	MOVLW	0x00
001dae   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001db0   0e00     movlw	0                  	MOVLW	0x00
001db2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001db4   0e00     movlw	0                  	MOVLW	0x00
001db6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001db8   0e3c     movlw	0x3c               	MOVLW	0x3c
001dba   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001dbc   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001dbe   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001dc0   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001dc2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001dc4   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001dc6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001dc8   5000     movf	0, 0, 0             	MOVF	r0x00, W
001dca   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001dcc   ec87     call	0x330e, 0           	CALL	__divulong
001dce   f019
001dd0   6e00     movwf	0, 0               	MOVWF	r0x00
001dd2   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
001dd4   f001
001dd6   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
001dd8   f002
001dda   cfe9     movff	0xfe9, 0x3         	MOVFF	FSR0L, r0x03
001ddc   f003
001dde   0e08     movlw	0x8                	MOVLW	0x08
001de0   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
001de2   5000     movf	0, 0, 0             	MOVF	r0x00, W
001de4   010e     movlb	0xe                	BANKSEL	_m
001de6   6f6b     movwf	0x6b, 0x1          	MOVWF	_m, B
001de8   010f     movlb	0xf                	BANKSEL	_sec
                                           ;	.line	210; reveil.c	s = sec-h*3600-m*60;
001dea   5154     movf	0x54, 0, 0x1        	MOVF	_sec, W, B
001dec   6e00     movwf	0, 0               	MOVWF	r0x00
                                           ; ;multiply lit val:0x10 by variable _h and store in r0x01
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
001dee   010e     movlb	0xe                	BANKSEL	_h
001df0   516a     movf	0x6a, 0, 0x1        	MOVF	_h, W, B
001df2   0d10     mullw	0x10               	MULLW	0x10
001df4   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
001df6   f001
001df8   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001dfa   5e00     subwf	0, 0x1, 0          	SUBWF	r0x00, F
                                           ; ;multiply lit val:0x3c by variable _m and store in r0x01
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
001dfc   010e     movlb	0xe                	BANKSEL	_m
001dfe   516b     movf	0x6b, 0, 0x1        	MOVF	_m, W, B
001e00   0d3c     mullw	0x3c               	MULLW	0x3c
001e02   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
001e04   f001
001e06   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001e08   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
001e0a   010e     movlb	0xe                	BANKSEL	_s
001e0c   6f6c     movwf	0x6c, 0x1          	MOVWF	_s, B
001e0e   010f     movlb	0xf                	BANKSEL	_tsec
                                           ;	.line	213; reveil.c	if (tsec != s)
001e10   5149     movf	0x49, 0, 0x1        	MOVF	_tsec, W, B
001e12   010e     movlb	0xe                	BANKSEL	_s
001e14   196c     xorwf	0x6c, 0, 0x1       	XORWF	_s, W, B
001e16   e002     bz	0x1e1c                	BZ	_00131_DS_
                                           ;	.line	214; reveil.c	tsec = s;
001e18   ce6c     movff	0xe6c, 0xf49       	MOVFF	_s, _tsec
001e1a   ff49
                                           _00131_DS_:
001e1c   010f     movlb	0xf                	BANKSEL	_tmin
                                           ;	.line	215; reveil.c	if (tmin != m)
001e1e   5148     movf	0x48, 0, 0x1        	MOVF	_tmin, W, B
001e20   010e     movlb	0xe                	BANKSEL	_m
001e22   196b     xorwf	0x6b, 0, 0x1       	XORWF	_m, W, B
001e24   e002     bz	0x1e2a                	BZ	_00133_DS_
                                           ;	.line	216; reveil.c	tmin = m;
001e26   ce6b     movff	0xe6b, 0xf48       	MOVFF	_m, _tmin
001e28   ff48
                                           _00133_DS_:
001e2a   010f     movlb	0xf                	BANKSEL	_thour
                                           ;	.line	217; reveil.c	if (thour != h)
001e2c   5147     movf	0x47, 0, 0x1        	MOVF	_thour, W, B
001e2e   010e     movlb	0xe                	BANKSEL	_h
001e30   196a     xorwf	0x6a, 0, 0x1       	XORWF	_h, W, B
001e32   e002     bz	0x1e38                	BZ	_00135_DS_
                                           ;	.line	218; reveil.c	thour = h;
001e34   ce6a     movff	0xe6a, 0xf47       	MOVFF	_h, _thour
001e36   ff47
                                           _00135_DS_:
001e38   010f     movlb	0xf                	BANKSEL	_on
                                           ;	.line	221; reveil.c	if (!on && ds < 5) {
001e3a   5152     movf	0x52, 0, 0x1        	MOVF	_on, W, B
001e3c   e10e     bnz	0x1e5a               	BNZ	_00139_DS_
001e3e   0e05     movlw	0x5                	MOVLW	0x05
001e40   010e     movlb	0xe                	BANKSEL	_ds
001e42   5d69     subwf	0x69, 0, 0x1       	SUBWF	_ds, W, B
001e44   e20a     bc	0x1e5a                	BC	_00139_DS_
                                           ;	.line	222; reveil.c	LATJbits.LATJ0 = 1;
001e46   8091     bsf	0x91, 0, 0           	BSF	_LATJbits, 0
001e48   010f     movlb	0xf                	BANKSEL	_whereami
                                           ;	.line	223; reveil.c	if (whereami == ALARM) {
001e4a   5151     movf	0x51, 0, 0x1        	MOVF	_whereami, W, B
001e4c   0a0a     xorlw	0xa                	XORLW	0x0a
001e4e   e102     bnz	0x1e54               	BNZ	_00137_DS_
                                           ;	.line	224; reveil.c	LATJbits.LATJ1 = 1;
001e50   8291     bsf	0x91, 0x1, 0         	BSF	_LATJbits, 1
                                           ;	.line	225; reveil.c	LATJbits.LATJ2 = 1;
001e52   8491     bsf	0x91, 0x2, 0         	BSF	_LATJbits, 2
                                           _00137_DS_:
                                           ;	.line	227; reveil.c	on = 1;
001e54   0e01     movlw	0x1                	MOVLW	0x01
001e56   010f     movlb	0xf                	BANKSEL	_on
001e58   6f52     movwf	0x52, 0x1          	MOVWF	_on, B
                                           _00139_DS_:
001e5a   010f     movlb	0xf                	BANKSEL	_on
                                           ;	.line	231; reveil.c	if (on && ds >= 5) {
001e5c   5152     movf	0x52, 0, 0x1        	MOVF	_on, W, B
001e5e   e00d     bz	0x1e7a                	BZ	_00146_DS_
001e60   0e05     movlw	0x5                	MOVLW	0x05
001e62   010e     movlb	0xe                	BANKSEL	_ds
001e64   5d69     subwf	0x69, 0, 0x1       	SUBWF	_ds, W, B
001e66   e309     bnc	0x1e7a               	BNC	_00146_DS_
                                           ;	.line	232; reveil.c	LATJbits.LATJ0 = 0;
001e68   9091     bcf	0x91, 0, 0           	BCF	_LATJbits, 0
001e6a   010f     movlb	0xf                	BANKSEL	_whereami
                                           ;	.line	233; reveil.c	if (whereami == ALARM) {
001e6c   5151     movf	0x51, 0, 0x1        	MOVF	_whereami, W, B
001e6e   0a0a     xorlw	0xa                	XORLW	0x0a
001e70   e102     bnz	0x1e76               	BNZ	_00142_DS_
                                           ;	.line	234; reveil.c	LATJbits.LATJ1 = 0;
001e72   9291     bcf	0x91, 0x1, 0         	BCF	_LATJbits, 1
                                           ;	.line	235; reveil.c	LATJbits.LATJ2 = 0;
001e74   9491     bcf	0x91, 0x2, 0         	BCF	_LATJbits, 2
                                           _00142_DS_:
001e76   010f     movlb	0xf                	BANKSEL	_on
                                           ;	.line	237; reveil.c	on = 0;
001e78   6b52     clrf	0x52, 0x1           	CLRF	_on, B
                                           _00146_DS_:
001e7a   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
001e7c   f007
001e7e   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
001e80   f006
001e82   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
001e84   f005
001e86   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
001e88   f004
001e8a   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
001e8c   f003
001e8e   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
001e90   f002
001e92   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
001e94   f001
001e96   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
001e98   f000
001e9a   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001e9c   ffd9
001e9e   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_reveil__low_isr	code
                                           _low_isr:
                                           ;	.line	136; reveil.c	void low_isr (void) interrupt 2
003f94   cfe8     movff	0xfe8, 0xfe5       	MOVFF	WREG, POSTDEC1
003f96   ffe5
003f98   cfd8     movff	0xfd8, 0xfe5       	MOVFF	STATUS, POSTDEC1
003f9a   ffe5
003f9c   cfe0     movff	0xfe0, 0xfe5       	MOVFF	BSR, POSTDEC1
003f9e   ffe5
003fa0   cff3     movff	0xff3, 0xfe5       	MOVFF	PRODL, POSTDEC1
003fa2   ffe5
003fa4   cff4     movff	0xff4, 0xfe5       	MOVFF	PRODH, POSTDEC1
003fa6   ffe5
003fa8   cfe9     movff	0xfe9, 0xfe5       	MOVFF	FSR0L, POSTDEC1
003faa   ffe5
003fac   cfea     movff	0xfea, 0xfe5       	MOVFF	FSR0H, POSTDEC1
003fae   ffe5
003fb0   cffa     movff	0xffa, 0xfe5       	MOVFF	PCLATH, POSTDEC1
003fb2   ffe5
003fb4   cffb     movff	0xffb, 0xfe5       	MOVFF	PCLATU, POSTDEC1
003fb6   ffe5
003fb8   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
003fba   ffe5
003fbc   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
003fbe   ffd9
                                           ;	.line	139; reveil.c	if(INTCON3bits.INT3F) {
003fc0   a4f0     btfss	0xf0, 0x2, 0       	BTFSS	_INTCON3bits, 2
003fc2   d005     bra	0x3fce               	BRA	_00115_DS_
                                           ;	.line	140; reveil.c	button1 = 1;
003fc4   0e01     movlw	0x1                	MOVLW	0x01
003fc6   010f     movlb	0xf                	BANKSEL	_button1
003fc8   6f41     movwf	0x41, 0x1          	MOVWF	_button1, B
                                           ;	.line	141; reveil.c	INTCON3bits.INT3F = 0;
003fca   94f0     bcf	0xf0, 0x2, 0         	BCF	_INTCON3bits, 2
003fcc   d006     bra	0x3fda               	BRA	_00117_DS_
                                           _00115_DS_:
                                           ;	.line	144; reveil.c	} else if(INTCON3bits.INT1F) {
003fce   a0f0     btfss	0xf0, 0, 0         	BTFSS	_INTCON3bits, 0
003fd0   d004     bra	0x3fda               	BRA	_00117_DS_
                                           ;	.line	145; reveil.c	button2 = 1;
003fd2   0e01     movlw	0x1                	MOVLW	0x01
003fd4   010f     movlb	0xf                	BANKSEL	_button2
003fd6   6f42     movwf	0x42, 0x1          	MOVWF	_button2, B
                                           ;	.line	146; reveil.c	INTCON3bits.INT1F = 0;
003fd8   90f0     bcf	0xf0, 0, 0           	BCF	_INTCON3bits, 0
                                           _00117_DS_:
003fda   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
003fdc   ffd9
003fde   cfe4     movff	0xfe4, 0xffb       	MOVFF	PREINC1, PCLATU
003fe0   fffb
003fe2   cfe4     movff	0xfe4, 0xffa       	MOVFF	PREINC1, PCLATH
003fe4   fffa
003fe6   cfe4     movff	0xfe4, 0xfea       	MOVFF	PREINC1, FSR0H
003fe8   ffea
003fea   cfe4     movff	0xfe4, 0xfe9       	MOVFF	PREINC1, FSR0L
003fec   ffe9
003fee   cfe4     movff	0xfe4, 0xff4       	MOVFF	PREINC1, PRODH
003ff0   fff4
003ff2   cfe4     movff	0xfe4, 0xff3       	MOVFF	PREINC1, PRODL
003ff4   fff3
003ff6   cfe4     movff	0xfe4, 0xfe0       	MOVFF	PREINC1, BSR
003ff8   ffe0
003ffa   cfe4     movff	0xfe4, 0xfd8       	MOVFF	PREINC1, STATUS
003ffc   ffd8
003ffe   cfe4     movff	0xfe4, 0xfe8       	MOVFF	PREINC1, WREG
004000   ffe8
004002   0010     retfie	0                 	RETFIE	
                                           
                                           ; ; Starting pCode block
                                           S_reveil__high_isr	code
                                           _high_isr:
                                           ;	.line	125; reveil.c	void high_isr (void) interrupt 1
0021d4   cfe8     movff	0xfe8, 0xfe5       	MOVFF	WREG, POSTDEC1
0021d6   ffe5
0021d8   cfd8     movff	0xfd8, 0xfe5       	MOVFF	STATUS, POSTDEC1
0021da   ffe5
0021dc   cfe0     movff	0xfe0, 0xfe5       	MOVFF	BSR, POSTDEC1
0021de   ffe5
0021e0   cff3     movff	0xff3, 0xfe5       	MOVFF	PRODL, POSTDEC1
0021e2   ffe5
0021e4   cff4     movff	0xff4, 0xfe5       	MOVFF	PRODH, POSTDEC1
0021e6   ffe5
0021e8   cfe9     movff	0xfe9, 0xfe5       	MOVFF	FSR0L, POSTDEC1
0021ea   ffe5
0021ec   cfea     movff	0xfea, 0xfe5       	MOVFF	FSR0H, POSTDEC1
0021ee   ffe5
0021f0   cffa     movff	0xffa, 0xfe5       	MOVFF	PCLATH, POSTDEC1
0021f2   ffe5
0021f4   cffb     movff	0xffb, 0xfe5       	MOVFF	PCLATU, POSTDEC1
0021f6   ffe5
0021f8   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0021fa   ffe5
0021fc   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0021fe   ffd9
                                           ;	.line	128; reveil.c	if (INTCONbits.T0IF) {
002200   a4f2     btfss	0xf2, 0x2, 0       	BTFSS	_INTCONbits, 2
002202   d00c     bra	0x221c               	BRA	_00107_DS_
002204   010f     movlb	0xf                	BANKSEL	_overflows
                                           ;	.line	129; reveil.c	overflows++;
002206   2b43     incf	0x43, 0x1, 0x1      	INCF	_overflows, F, B
002208   e302     bnc	0x220e               	BNC	_10353_DS_
00220a   010f     movlb	0xf                	BANKSEL	(_overflows + 1)
00220c   2b44     incf	0x44, 0x1, 0x1      	INCF	(_overflows + 1), F, B
                                           _10353_DS_:
00220e   e302     bnc	0x2214               	BNC	_20354_DS_
002210   010f     movlb	0xf                	BANKSEL	(_overflows + 2)
002212   2b45     incf	0x45, 0x1, 0x1      	INCF	(_overflows + 2), F, B
                                           _20354_DS_:
002214   e302     bnc	0x221a               	BNC	_30355_DS_
002216   010f     movlb	0xf                	BANKSEL	(_overflows + 3)
002218   2b46     incf	0x46, 0x1, 0x1      	INCF	(_overflows + 3), F, B
                                           _30355_DS_:
                                           ;	.line	130; reveil.c	INTCONbits.T0IF = 0;
00221a   94f2     bcf	0xf2, 0x2, 0         	BCF	_INTCONbits, 2
                                           _00107_DS_:
00221c   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00221e   ffd9
002220   cfe4     movff	0xfe4, 0xffb       	MOVFF	PREINC1, PCLATU
002222   fffb
002224   cfe4     movff	0xfe4, 0xffa       	MOVFF	PREINC1, PCLATH
002226   fffa
002228   cfe4     movff	0xfe4, 0xfea       	MOVFF	PREINC1, FSR0H
00222a   ffea
00222c   cfe4     movff	0xfe4, 0xfe9       	MOVFF	PREINC1, FSR0L
00222e   ffe9
002230   cfe4     movff	0xfe4, 0xff4       	MOVFF	PREINC1, PRODH
002232   fff4
002234   cfe4     movff	0xfe4, 0xff3       	MOVFF	PREINC1, PRODL
002236   fff3
002238   cfe4     movff	0xfe4, 0xfe0       	MOVFF	PREINC1, BSR
00223a   ffe0
00223c   cfe4     movff	0xfe4, 0xfd8       	MOVFF	PREINC1, STATUS
00223e   ffd8
002240   cfe4     movff	0xfe4, 0xfe8       	MOVFF	PREINC1, WREG
002242   ffe8
002244   0010     retfie	0                 	RETFIE	
                                           
                                           ; ; Starting pCode block
                                           __str_0:
002246   6f44     movwf	0x44, 0x1          	DB	0x44, 0x6f, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x77, 0x61, 0x6e, 0x74, 0x20
002248   7920     btg	0x20, 0x4, 0x1       
00224a   756f     btg	0x6f, 0x2, 0x1       
00224c   7720     btg	0x20, 0x3, 0x1       
00224e   6e61     movwf	0x61, 0            
002250   2074     addwfc	0x74, 0, 0        
002252   6f74     movwf	0x74, 0x1          	DB	0x74, 0x6f, 0x20, 0x20, 0x73, 0x65, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20
002254   2020     addwfc	0x20, 0, 0        
002256   6573     cpfsgt	0x73, 0x1         
002258   2074     addwfc	0x74, 0, 0        
00225a   6874     setf	0x74, 0             
00225c   2065     addwfc	0x65, 0, 0        
00225e   6974     setf	0x74, 0x1           	DB	0x74, 0x69, 0x6d, 0x65, 0x20, 0x3f, 0x20, 0x20, 0x00
002260   656d     cpfsgt	0x6d, 0x1         
002262   3f20     incfsz	0x20, 0x1, 0x1    
002264   2020     addwfc	0x20, 0, 0        
002266   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_1:
002268   5b20     subwfb	0x20, 0x1, 0x1    	DB	0x20, 0x5b, 0x25, 0x30, 0x32, 0x75, 0x5d, 0x3a, 0x20, 0x25, 0x30, 0x32
00226a   3025     rrcf	0x25, 0, 0          
00226c   7532     btg	0x32, 0x2, 0x1       
00226e   3a5d     swapf	0x5d, 0x1, 0       
002270   2520     addwf	0x20, 0, 0x1       
002272   3230     rrcf	0x30, 0x1, 0        
002274   2075     addwfc	0x75, 0, 0        	DB	0x75, 0x20, 0x3a, 0x20, 0x25, 0x30, 0x32, 0x75, 0x20, 0x20, 0x20, 0x20
002276   203a     addwfc	0x3a, 0, 0        
002278   3025     rrcf	0x25, 0, 0          
00227a   7532     btg	0x32, 0x2, 0x1       
00227c   2020     addwfc	0x20, 0, 0        
00227e   2020     addwfc	0x20, 0, 0        
002280   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
002282   2020     addwfc	0x20, 0, 0        
002284   2020     addwfc	0x20, 0, 0        
002286   2020     addwfc	0x20, 0, 0        
002288   2020     addwfc	0x20, 0, 0        
00228a   2020     addwfc	0x20, 0, 0        
00228c   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x00
00228e   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_2:
002290   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x25, 0x30, 0x32, 0x75, 0x20, 0x3a, 0x5b, 0x25, 0x30, 0x32
002292   3025     rrcf	0x25, 0, 0          
002294   7532     btg	0x32, 0x2, 0x1       
002296   3a20     swapf	0x20, 0x1, 0       
002298   255b     addwf	0x5b, 0, 0x1       
00229a   3230     rrcf	0x30, 0x1, 0        
00229c   5d75     subwf	0x75, 0, 0x1       	DB	0x75, 0x5d, 0x3a, 0x20, 0x25, 0x30, 0x32, 0x75, 0x20, 0x20, 0x20, 0x20
00229e   203a     addwfc	0x3a, 0, 0        
0022a0   3025     rrcf	0x25, 0, 0          
0022a2   7532     btg	0x32, 0x2, 0x1       
0022a4   2020     addwfc	0x20, 0, 0        
0022a6   2020     addwfc	0x20, 0, 0        
0022a8   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
0022aa   2020     addwfc	0x20, 0, 0        
0022ac   2020     addwfc	0x20, 0, 0        
0022ae   2020     addwfc	0x20, 0, 0        
0022b0   2020     addwfc	0x20, 0, 0        
0022b2   2020     addwfc	0x20, 0, 0        
0022b4   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x00
0022b6   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_3:
0022b8   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x25, 0x30, 0x32, 0x75, 0x20, 0x3a, 0x20, 0x25, 0x30, 0x32
0022ba   3025     rrcf	0x25, 0, 0          
0022bc   7532     btg	0x32, 0x2, 0x1       
0022be   3a20     swapf	0x20, 0x1, 0       
0022c0   2520     addwf	0x20, 0, 0x1       
0022c2   3230     rrcf	0x30, 0x1, 0        
0022c4   2075     addwfc	0x75, 0, 0        	DB	0x75, 0x20, 0x3a, 0x5b, 0x25, 0x30, 0x32, 0x75, 0x5d, 0x20, 0x20, 0x20
0022c6   5b3a     subwfb	0x3a, 0x1, 0x1    
0022c8   3025     rrcf	0x25, 0, 0          
0022ca   7532     btg	0x32, 0x2, 0x1       
0022cc   205d     addwfc	0x5d, 0, 0        
0022ce   2020     addwfc	0x20, 0, 0        
0022d0   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
0022d2   2020     addwfc	0x20, 0, 0        
0022d4   2020     addwfc	0x20, 0, 0        
0022d6   2020     addwfc	0x20, 0, 0        
0022d8   2020     addwfc	0x20, 0, 0        
0022da   2020     addwfc	0x20, 0, 0        
0022dc   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x00
0022de   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_4:
0022e0   6f44     movwf	0x44, 0x1          	DB	0x44, 0x6f, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x77, 0x61, 0x6e, 0x74, 0x20
0022e2   7920     btg	0x20, 0x4, 0x1       
0022e4   756f     btg	0x6f, 0x2, 0x1       
0022e6   7720     btg	0x20, 0x3, 0x1       
0022e8   6e61     movwf	0x61, 0            
0022ea   2074     addwfc	0x74, 0, 0        
0022ec   6f74     movwf	0x74, 0x1          	DB	0x74, 0x6f, 0x20, 0x20, 0x73, 0x65, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20
0022ee   2020     addwfc	0x20, 0, 0        
0022f0   6573     cpfsgt	0x73, 0x1         
0022f2   2074     addwfc	0x74, 0, 0        
0022f4   6874     setf	0x74, 0             
0022f6   2065     addwfc	0x65, 0, 0        
0022f8   6c61     negf	0x61, 0             	DB	0x61, 0x6c, 0x61, 0x72, 0x6d, 0x20, 0x3f, 0x20, 0x00
0022fa   7261     btg	0x61, 0x1, 0         
0022fc   206d     addwfc	0x6d, 0, 0        
0022fe   203f     addwfc	0x3f, 0, 0        
002300   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_5:
002302   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x20, 0x5b, 0x4f, 0x4e, 0x20
002304   6c41     negf	0x41, 0             
002306   7261     btg	0x61, 0x1, 0         
002308   206d     addwfc	0x6d, 0, 0        
00230a   4f5b     dcfsnz	0x5b, 0x1, 0x1    
00230c   204e     addwfc	0x4e, 0, 0        
00230e   205d     addwfc	0x5d, 0, 0        	DB	0x5d, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
002310   2020     addwfc	0x20, 0, 0        
002312   2020     addwfc	0x20, 0, 0        
002314   2020     addwfc	0x20, 0, 0        
002316   2020     addwfc	0x20, 0, 0        
002318   2020     addwfc	0x20, 0, 0        
00231a   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00
00231c   2020     addwfc	0x20, 0, 0        
00231e   2020     addwfc	0x20, 0, 0        
002320   2020     addwfc	0x20, 0, 0        
002322   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_6:
002324   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x20, 0x5b, 0x4f, 0x46, 0x46
002326   6c41     negf	0x41, 0             
002328   7261     btg	0x61, 0x1, 0         
00232a   206d     addwfc	0x6d, 0, 0        
00232c   4f5b     dcfsnz	0x5b, 0x1, 0x1    
00232e   4646     rlncf	0x46, 0x1, 0       
002330   205d     addwfc	0x5d, 0, 0        	DB	0x5d, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
002332   2020     addwfc	0x20, 0, 0        
002334   2020     addwfc	0x20, 0, 0        
002336   2020     addwfc	0x20, 0, 0        
002338   2020     addwfc	0x20, 0, 0        
00233a   2020     addwfc	0x20, 0, 0        
00233c   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00
00233e   2020     addwfc	0x20, 0, 0        
002340   2020     addwfc	0x20, 0, 0        
002342   2020     addwfc	0x20, 0, 0        
002344   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_7:
002346   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x20, 0x61, 0x74
002348   2020     addwfc	0x20, 0, 0        
00234a   6c41     negf	0x41, 0             
00234c   7261     btg	0x61, 0x1, 0         
00234e   206d     addwfc	0x6d, 0, 0        
002350   7461     btg	0x61, 0x2, 0         
002352   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5b, 0x25, 0x30, 0x32
002354   2020     addwfc	0x20, 0, 0        
002356   2020     addwfc	0x20, 0, 0        
002358   2020     addwfc	0x20, 0, 0        
00235a   255b     addwf	0x5b, 0, 0x1       
00235c   3230     rrcf	0x30, 0x1, 0        
00235e   5d75     subwf	0x75, 0, 0x1       	DB	0x75, 0x5d, 0x3a, 0x20, 0x25, 0x30, 0x32, 0x75, 0x20, 0x20, 0x20, 0x20
002360   203a     addwfc	0x3a, 0, 0        
002362   3025     rrcf	0x25, 0, 0          
002364   7532     btg	0x32, 0x2, 0x1       
002366   2020     addwfc	0x20, 0, 0        
002368   2020     addwfc	0x20, 0, 0        
00236a   0000     nop                      	DB	0x00
                                           ; ; Starting pCode block
                                           __str_8:
00236c   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x20, 0x61, 0x74
00236e   2020     addwfc	0x20, 0, 0        
002370   6c41     negf	0x41, 0             
002372   7261     btg	0x61, 0x1, 0         
002374   206d     addwfc	0x6d, 0, 0        
002376   7461     btg	0x61, 0x2, 0         
002378   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x25, 0x30, 0x32
00237a   2020     addwfc	0x20, 0, 0        
00237c   2020     addwfc	0x20, 0, 0        
00237e   2020     addwfc	0x20, 0, 0        
002380   2520     addwf	0x20, 0, 0x1       
002382   3230     rrcf	0x30, 0x1, 0        
002384   2075     addwfc	0x75, 0, 0        	DB	0x75, 0x20, 0x3a, 0x5b, 0x25, 0x30, 0x32, 0x75, 0x5d, 0x20, 0x20, 0x20
002386   5b3a     subwfb	0x3a, 0x1, 0x1    
002388   3025     rrcf	0x25, 0, 0          
00238a   7532     btg	0x32, 0x2, 0x1       
00238c   205d     addwfc	0x5d, 0, 0        
00238e   2020     addwfc	0x20, 0, 0        
002390   0000     nop                      	DB	0x00
                                           ; ; Starting pCode block
                                           __str_9:
002392   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x25, 0x30, 0x32, 0x75, 0x3a, 0x25, 0x30, 0x32
002394   2020     addwfc	0x20, 0, 0        
002396   3025     rrcf	0x25, 0, 0          
002398   7532     btg	0x32, 0x2, 0x1       
00239a   253a     addwf	0x3a, 0, 0x1       
00239c   3230     rrcf	0x30, 0x1, 0        
00239e   3a75     swapf	0x75, 0x1, 0       	DB	0x75, 0x3a, 0x25, 0x30, 0x32, 0x75, 0x20, 0x20, 0x20, 0x20, 0x41, 0x6c
0023a0   3025     rrcf	0x25, 0, 0          
0023a2   7532     btg	0x32, 0x2, 0x1       
0023a4   2020     addwfc	0x20, 0, 0        
0023a6   2020     addwfc	0x20, 0, 0        
0023a8   6c41     negf	0x41, 0             
0023aa   7261     btg	0x61, 0x1, 0         	DB	0x61, 0x72, 0x6d, 0x20, 0x4f, 0x4e, 0x20, 0x20, 0x25, 0x30, 0x32, 0x75
0023ac   206d     addwfc	0x6d, 0, 0        
0023ae   4e4f     dcfsnz	0x4f, 0x1, 0      
0023b0   2020     addwfc	0x20, 0, 0        
0023b2   3025     rrcf	0x25, 0, 0          
0023b4   7532     btg	0x32, 0x2, 0x1       
0023b6   253a     addwf	0x3a, 0, 0x1       	DB	0x3a, 0x25, 0x30, 0x32, 0x75, 0x20, 0x00
0023b8   3230     rrcf	0x30, 0x1, 0        
0023ba   2075     addwfc	0x75, 0, 0        
0023bc   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_10:
0023be   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x25, 0x30, 0x32, 0x75, 0x3a, 0x25, 0x30, 0x32
0023c0   2020     addwfc	0x20, 0, 0        
0023c2   3025     rrcf	0x25, 0, 0          
0023c4   7532     btg	0x32, 0x2, 0x1       
0023c6   253a     addwf	0x3a, 0, 0x1       
0023c8   3230     rrcf	0x30, 0x1, 0        
0023ca   3a75     swapf	0x75, 0x1, 0       	DB	0x75, 0x3a, 0x25, 0x30, 0x32, 0x75, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
0023cc   3025     rrcf	0x25, 0, 0          
0023ce   7532     btg	0x32, 0x2, 0x1       
0023d0   2020     addwfc	0x20, 0, 0        
0023d2   2020     addwfc	0x20, 0, 0        
0023d4   2020     addwfc	0x20, 0, 0        
0023d6   4120     rrncf	0x20, 0, 0x1       	DB	0x20, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x20, 0x20, 0x4f, 0x46, 0x46, 0x20
0023d8   616c     cpfslt	0x6c, 0x1         
0023da   6d72     negf	0x72, 0x1           
0023dc   2020     addwfc	0x20, 0, 0        
0023de   464f     rlncf	0x4f, 0x1, 0       
0023e0   2046     addwfc	0x46, 0, 0        
0023e2   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x00
0023e4   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_11:
0023e6   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x25, 0x30, 0x32, 0x75, 0x3a, 0x25, 0x30, 0x32
0023e8   2020     addwfc	0x20, 0, 0        
0023ea   3025     rrcf	0x25, 0, 0          
0023ec   7532     btg	0x32, 0x2, 0x1       
0023ee   253a     addwf	0x3a, 0, 0x1       
0023f0   3230     rrcf	0x30, 0x1, 0        
0023f2   3a75     swapf	0x75, 0x1, 0       	DB	0x75, 0x3a, 0x25, 0x30, 0x32, 0x75, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
0023f4   3025     rrcf	0x25, 0, 0          
0023f6   7532     btg	0x32, 0x2, 0x1       
0023f8   2020     addwfc	0x20, 0, 0        
0023fa   2020     addwfc	0x20, 0, 0        
0023fc   2020     addwfc	0x20, 0, 0        
0023fe   2049     addwfc	0x49, 0, 0        	DB	0x49, 0x20, 0x61, 0x6d, 0x20, 0x72, 0x69, 0x6e, 0x67, 0x69, 0x6e, 0x67
002400   6d61     negf	0x61, 0x1           
002402   7220     btg	0x20, 0x1, 0         
002404   6e69     movwf	0x69, 0            
002406   6967     setf	0x67, 0x1           
002408   676e     tstfsz	0x6e, 0x1         
00240a   2021     addwfc	0x21, 0, 0        	DB	0x21, 0x20, 0x00
00240c   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_12:
00240e   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x25, 0x30, 0x32, 0x75, 0x3a, 0x25, 0x30, 0x32
002410   2020     addwfc	0x20, 0, 0        
002412   3025     rrcf	0x25, 0, 0          
002414   7532     btg	0x32, 0x2, 0x1       
002416   253a     addwf	0x3a, 0, 0x1       
002418   3230     rrcf	0x30, 0x1, 0        
00241a   3a75     swapf	0x75, 0x1, 0       	DB	0x75, 0x3a, 0x25, 0x30, 0x32, 0x75, 0x20, 0x20, 0x20, 0x20, 0x53, 0x6e
00241c   3025     rrcf	0x25, 0, 0          
00241e   7532     btg	0x32, 0x2, 0x1       
002420   2020     addwfc	0x20, 0, 0        
002422   2020     addwfc	0x20, 0, 0        
002424   6e53     movwf	0x53, 0            
002426   6f6f     movwf	0x6f, 0x1          	DB	0x6f, 0x6f, 0x7a, 0x65, 0x20, 0x25, 0x75, 0x20, 0x20, 0x25, 0x30, 0x32
002428   657a     cpfsgt	0x7a, 0x1         
00242a   2520     addwf	0x20, 0, 0x1       
00242c   2075     addwfc	0x75, 0, 0        
00242e   2520     addwf	0x20, 0, 0x1       
002430   3230     rrcf	0x30, 0x1, 0        
002432   3a75     swapf	0x75, 0x1, 0       	DB	0x75, 0x3a, 0x25, 0x30, 0x32, 0x75, 0x20, 0x00
002434   3025     rrcf	0x25, 0, 0          
002436   7532     btg	0x32, 0x2, 0x1       
002438   0020     dw	0x20  ;unknown opcode 
                                           ; ; Starting pCode block
                                           __str_13:
00243a   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x25, 0x30, 0x32, 0x75, 0x3a, 0x25, 0x30, 0x32
00243c   2020     addwfc	0x20, 0, 0        
00243e   3025     rrcf	0x25, 0, 0          
002440   7532     btg	0x32, 0x2, 0x1       
002442   253a     addwf	0x3a, 0, 0x1       
002444   3230     rrcf	0x30, 0x1, 0        
002446   3a75     swapf	0x75, 0x1, 0       	DB	0x75, 0x3a, 0x25, 0x30, 0x32, 0x75, 0x20, 0x20, 0x20, 0x20, 0x53, 0x6e
002448   3025     rrcf	0x25, 0, 0          
00244a   7532     btg	0x32, 0x2, 0x1       
00244c   2020     addwfc	0x20, 0, 0        
00244e   2020     addwfc	0x20, 0, 0        
002450   6e53     movwf	0x53, 0            
002452   6f6f     movwf	0x6f, 0x1          	DB	0x6f, 0x6f, 0x7a, 0x65, 0x20, 0x25, 0x75, 0x20, 0x25, 0x30, 0x32, 0x75
002454   657a     cpfsgt	0x7a, 0x1         
002456   2520     addwf	0x20, 0, 0x1       
002458   2075     addwfc	0x75, 0, 0        
00245a   3025     rrcf	0x25, 0, 0          
00245c   7532     btg	0x32, 0x2, 0x1       
00245e   253a     addwf	0x3a, 0, 0x1       	DB	0x3a, 0x25, 0x30, 0x32, 0x75, 0x20, 0x00
002460   3230     rrcf	0x30, 0x1, 0        
002462   2075     addwfc	0x75, 0, 0        
002464   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_14:
002466   2a2a     incf	0x2a, 0x1, 0        	DB	0x2a, 0x2a, 0x2a, 0x2a, 0x20, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x20, 0x2a
002468   2a2a     incf	0x2a, 0x1, 0        
00246a   4520     rlncf	0x20, 0, 0x1       
00246c   5252     movf	0x52, 0x1, 0        
00246e   524f     movf	0x4f, 0x1, 0        
002470   2a20     incf	0x20, 0x1, 0        
002472   2a2a     incf	0x2a, 0x1, 0        	DB	0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x20, 0x45, 0x52, 0x52
002474   2a2a     incf	0x2a, 0x1, 0        
002476   2a2a     incf	0x2a, 0x1, 0        
002478   2a2a     incf	0x2a, 0x1, 0        
00247a   4520     rlncf	0x20, 0, 0x1       
00247c   5252     movf	0x52, 0x1, 0        
00247e   524f     movf	0x4f, 0x1, 0        	DB	0x4f, 0x52, 0x20, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x00
002480   2a20     incf	0x20, 0x1, 0        
002482   2a2a     incf	0x2a, 0x1, 0        
002484   2a2a     incf	0x2a, 0x1, 0        
002486   0000     nop                      
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 5394 (0x1512) bytes ( 4.12%)
                                           ;           	 2697 (0x0a89) words
                                           ; udata size:	   45 (0x002d) bytes ( 1.17%)
                                           ; access size:	   22 (0x0016) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Oct 15 2013) (Mac OS X ppc)
                                           ; This file was generated Sat Oct 26 16:23:24 2013
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _LCDInit
                                           	global _LCDUpdate
                                           	global _LCDErase
                                           	global _LCDText
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _AN0String
                                           	extern _AppConfig
                                           	extern _activeUDPSocket
                                           	extern _UDPSocketInfo
                                           	extern _UDPTxCount
                                           	extern _UDPRxCount
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _memset
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODH	equ	0xff4
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           
                                           udata_LCDBlocking_0	udata
                                           _LCDText	res	33
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDErase	code
                                           _LCDErase:
                                           ;	.line	392; TCPIP_Stack/LCDBlocking.c	void LCDErase(void)
003bf6   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
003bf8   ffe5
003bfa   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
003bfc   ffd9
003bfe   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
003c00   ffe5
003c02   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
003c04   ffe5
003c06   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
003c08   ffe5
003c0a   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
003c0c   ffe5
003c0e   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
003c10   ffe5
003c12   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
003c14   ffe5
003c16   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
003c18   ffe5
003c1a   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
003c1c   ffe5
                                           ;	.line	395; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0x01);
003c1e   0e01     movlw	0x1                	MOVLW	0x01
003c20   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003c22   0e00     movlw	0                  	MOVLW	0x00
003c24   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003c26   ec6d     call	0x40da, 0           	CALL	_LCDWrite
003c28   f020
003c2a   0e02     movlw	0x2                	MOVLW	0x02
003c2c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	396; TCPIP_Stack/LCDBlocking.c	DelayMs(2);
003c2e   0e48     movlw	0x48               	MOVLW	0x48
003c30   6e00     movwf	0, 0               	MOVWF	r0x00
003c32   0e0d     movlw	0xd                	MOVLW	0x0d
003c34   6e01     movwf	0x1, 0             	MOVWF	r0x01
003c36   6a02     clrf	0x2, 0              	CLRF	r0x02
003c38   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00305_DS_:
003c3a   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
003c3c   f004
003c3e   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
003c40   f005
003c42   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
003c44   f006
003c46   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
003c48   f007
003c4a   0eff     movlw	0xff               	MOVLW	0xff
003c4c   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
003c4e   0eff     movlw	0xff               	MOVLW	0xff
003c50   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
003c52   0eff     movlw	0xff               	MOVLW	0xff
003c54   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
003c56   0eff     movlw	0xff               	MOVLW	0xff
003c58   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
003c5a   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
003c5c   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
003c5e   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
003c60   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
003c62   e1eb     bnz	0x3c3a               	BNZ	_00305_DS_
                                           ;	.line	399; TCPIP_Stack/LCDBlocking.c	memset(LCDText, ' ', 32);
003c64   0e00     movlw	0                  	MOVLW	0x00
003c66   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003c68   0e20     movlw	0x20               	MOVLW	0x20
003c6a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003c6c   0e20     movlw	0x20               	MOVLW	0x20
003c6e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003c70   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
003c72   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003c74   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
003c76   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003c78   ecd6     call	0x39ac, 0           	CALL	_memset
003c7a   f01c
003c7c   0e05     movlw	0x5                	MOVLW	0x05
003c7e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
003c80   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
003c82   f007
003c84   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
003c86   f006
003c88   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
003c8a   f005
003c8c   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
003c8e   f004
003c90   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
003c92   f003
003c94   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
003c96   f002
003c98   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
003c9a   f001
003c9c   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
003c9e   f000
003ca0   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
003ca2   ffd9
003ca4   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDUpdate	code
                                           _LCDUpdate:
                                           ;	.line	332; TCPIP_Stack/LCDBlocking.c	void LCDUpdate(void)
002488   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00248a   ffe5
00248c   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00248e   ffd9
002490   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002492   ffe5
002494   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002496   ffe5
002498   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00249a   ffe5
00249c   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00249e   ffe5
0024a0   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0024a2   ffe5
0024a4   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0024a6   ffe5
0024a8   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0024aa   ffe5
0024ac   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
0024ae   ffe5
0024b0   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
0024b2   ffe5
                                           ;	.line	337; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0x02);
0024b4   0e02     movlw	0x2                	MOVLW	0x02
0024b6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0024b8   0e00     movlw	0                  	MOVLW	0x00
0024ba   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0024bc   ec6d     call	0x40da, 0           	CALL	_LCDWrite
0024be   f020
0024c0   0e02     movlw	0x2                	MOVLW	0x02
0024c2   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	338; TCPIP_Stack/LCDBlocking.c	DelayMs(2);
0024c4   0e48     movlw	0x48               	MOVLW	0x48
0024c6   6e00     movwf	0, 0               	MOVWF	r0x00
0024c8   0e0d     movlw	0xd                	MOVLW	0x0d
0024ca   6e01     movwf	0x1, 0             	MOVWF	r0x01
0024cc   6a02     clrf	0x2, 0              	CLRF	r0x02
0024ce   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00225_DS_:
0024d0   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
0024d2   f004
0024d4   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
0024d6   f005
0024d8   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
0024da   f006
0024dc   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
0024de   f007
0024e0   0eff     movlw	0xff               	MOVLW	0xff
0024e2   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0024e4   0eff     movlw	0xff               	MOVLW	0xff
0024e6   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
0024e8   0eff     movlw	0xff               	MOVLW	0xff
0024ea   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0024ec   0eff     movlw	0xff               	MOVLW	0xff
0024ee   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
0024f0   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0024f2   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
0024f4   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
0024f6   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
0024f8   e1eb     bnz	0x24d0               	BNZ	_00225_DS_
                                           ;	.line	341; TCPIP_Stack/LCDBlocking.c	for(i = 0; i < 16u; i++)
0024fa   6a00     clrf	0, 0                	CLRF	r0x00
                                           _00257_DS_:
0024fc   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
0024fe   f001
002500   6a02     clrf	0x2, 0              	CLRF	r0x02
002502   0e00     movlw	0                  	MOVLW	0x00
002504   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
002506   e102     bnz	0x250c               	BNZ	_00297_DS_
002508   0e10     movlw	0x10               	MOVLW	0x10
00250a   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00297_DS_:
00250c   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00250e   d057     bra	0x25be               	BRA	_00260_DS_
                                           ;	.line	345; TCPIP_Stack/LCDBlocking.c	if(LCDText[i] == 0u)
002510   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
002512   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
002514   6e01     movwf	0x1, 0             	MOVWF	r0x01
002516   6a02     clrf	0x2, 0              	CLRF	r0x02
002518   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
00251a   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
00251c   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
00251e   ffe9
002520   c002     movff	0x2, 0xfea         	MOVFF	r0x02, FSR0H
002522   ffea
002524   cfef     movff	0xfef, 0x1         	MOVFF	INDF0, r0x01
002526   f001
002528   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00252a   e119     bnz	0x255e               	BNZ	_00232_DS_
                                           ;	.line	347; TCPIP_Stack/LCDBlocking.c	for(j=i; j < 16u; j++)
00252c   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
00252e   f001
                                           _00253_DS_:
002530   c001     movff	0x1, 0x2           	MOVFF	r0x01, r0x02
002532   f002
002534   6a03     clrf	0x3, 0              	CLRF	r0x03
002536   0e00     movlw	0                  	MOVLW	0x00
002538   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
00253a   e102     bnz	0x2540               	BNZ	_00298_DS_
00253c   0e10     movlw	0x10               	MOVLW	0x10
00253e   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
                                           _00298_DS_:
002540   e20e     bc	0x255e                	BC	_00232_DS_
                                           ;	.line	349; TCPIP_Stack/LCDBlocking.c	LCDText[j] = ' ';
002542   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
002544   2401     addwf	0x1, 0, 0          	ADDWF	r0x01, W
002546   6e02     movwf	0x2, 0             	MOVWF	r0x02
002548   6a03     clrf	0x3, 0              	CLRF	r0x03
00254a   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
00254c   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
00254e   c002     movff	0x2, 0xfe9         	MOVFF	r0x02, FSR0L
002550   ffe9
002552   c003     movff	0x3, 0xfea         	MOVFF	r0x03, FSR0H
002554   ffea
002556   0e20     movlw	0x20               	MOVLW	0x20
002558   6eef     movwf	0xef, 0            	MOVWF	INDF0
                                           ;	.line	347; TCPIP_Stack/LCDBlocking.c	for(j=i; j < 16u; j++)
00255a   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
00255c   d7e9     bra	0x2530               	BRA	_00253_DS_
                                           _00232_DS_:
                                           ;	.line	352; TCPIP_Stack/LCDBlocking.c	LCDWrite(1, LCDText[i]);
00255e   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
002560   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
002562   6e01     movwf	0x1, 0             	MOVWF	r0x01
002564   6a02     clrf	0x2, 0              	CLRF	r0x02
002566   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
002568   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
00256a   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
00256c   ffe9
00256e   c002     movff	0x2, 0xfea         	MOVFF	r0x02, FSR0H
002570   ffea
002572   cfef     movff	0xfef, 0x1         	MOVFF	INDF0, r0x01
002574   f001
002576   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002578   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00257a   0e01     movlw	0x1                	MOVLW	0x01
00257c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00257e   ec6d     call	0x40da, 0           	CALL	_LCDWrite
002580   f020
002582   0e02     movlw	0x2                	MOVLW	0x02
002584   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	353; TCPIP_Stack/LCDBlocking.c	Delay10us(5);
002586   0e55     movlw	0x55               	MOVLW	0x55
002588   6e01     movwf	0x1, 0             	MOVWF	r0x01
00258a   6a02     clrf	0x2, 0              	CLRF	r0x02
00258c   6a03     clrf	0x3, 0              	CLRF	r0x03
00258e   6a04     clrf	0x4, 0              	CLRF	r0x04
                                           _00233_DS_:
002590   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
002592   f005
002594   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
002596   f006
002598   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
00259a   f007
00259c   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
00259e   f008
0025a0   0eff     movlw	0xff               	MOVLW	0xff
0025a2   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
0025a4   0eff     movlw	0xff               	MOVLW	0xff
0025a6   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0025a8   0eff     movlw	0xff               	MOVLW	0xff
0025aa   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
0025ac   0eff     movlw	0xff               	MOVLW	0xff
0025ae   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
0025b0   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0025b2   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
0025b4   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
0025b6   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
0025b8   e1eb     bnz	0x2590               	BNZ	_00233_DS_
                                           ;	.line	341; TCPIP_Stack/LCDBlocking.c	for(i = 0; i < 16u; i++)
0025ba   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
0025bc   d79f     bra	0x24fc               	BRA	_00257_DS_
                                           _00260_DS_:
                                           ;	.line	357; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0xC0);
0025be   0ec0     movlw	0xc0               	MOVLW	0xc0
0025c0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0025c2   0e00     movlw	0                  	MOVLW	0x00
0025c4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0025c6   ec6d     call	0x40da, 0           	CALL	_LCDWrite
0025c8   f020
0025ca   0e02     movlw	0x2                	MOVLW	0x02
0025cc   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	358; TCPIP_Stack/LCDBlocking.c	Delay10us(5);
0025ce   0e55     movlw	0x55               	MOVLW	0x55
0025d0   6e00     movwf	0, 0               	MOVWF	r0x00
0025d2   6a01     clrf	0x1, 0              	CLRF	r0x01
0025d4   6a02     clrf	0x2, 0              	CLRF	r0x02
0025d6   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00239_DS_:
0025d8   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
0025da   f004
0025dc   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
0025de   f005
0025e0   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
0025e2   f006
0025e4   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
0025e6   f007
0025e8   0eff     movlw	0xff               	MOVLW	0xff
0025ea   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0025ec   0eff     movlw	0xff               	MOVLW	0xff
0025ee   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
0025f0   0eff     movlw	0xff               	MOVLW	0xff
0025f2   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0025f4   0eff     movlw	0xff               	MOVLW	0xff
0025f6   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
0025f8   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0025fa   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
0025fc   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
0025fe   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
002600   e1eb     bnz	0x25d8               	BNZ	_00239_DS_
                                           ;	.line	361; TCPIP_Stack/LCDBlocking.c	for(i = 16; i < 32u; i++)
002602   0e10     movlw	0x10               	MOVLW	0x10
002604   6e00     movwf	0, 0               	MOVWF	r0x00
                                           _00265_DS_:
002606   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
002608   f001
00260a   6a02     clrf	0x2, 0              	CLRF	r0x02
00260c   0e00     movlw	0                  	MOVLW	0x00
00260e   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
002610   e102     bnz	0x2616               	BNZ	_00299_DS_
002612   0e20     movlw	0x20               	MOVLW	0x20
002614   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00299_DS_:
002616   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
002618   d057     bra	0x26c8               	BRA	_00269_DS_
                                           ;	.line	365; TCPIP_Stack/LCDBlocking.c	if(LCDText[i] == 0u)
00261a   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
00261c   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
00261e   6e01     movwf	0x1, 0             	MOVWF	r0x01
002620   6a02     clrf	0x2, 0              	CLRF	r0x02
002622   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
002624   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
002626   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
002628   ffe9
00262a   c002     movff	0x2, 0xfea         	MOVFF	r0x02, FSR0H
00262c   ffea
00262e   cfef     movff	0xfef, 0x1         	MOVFF	INDF0, r0x01
002630   f001
002632   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002634   e119     bnz	0x2668               	BNZ	_00246_DS_
                                           ;	.line	367; TCPIP_Stack/LCDBlocking.c	for(j=i; j < 32u; j++)
002636   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
002638   f001
                                           _00261_DS_:
00263a   c001     movff	0x1, 0x2           	MOVFF	r0x01, r0x02
00263c   f002
00263e   6a03     clrf	0x3, 0              	CLRF	r0x03
002640   0e00     movlw	0                  	MOVLW	0x00
002642   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
002644   e102     bnz	0x264a               	BNZ	_00300_DS_
002646   0e20     movlw	0x20               	MOVLW	0x20
002648   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
                                           _00300_DS_:
00264a   e20e     bc	0x2668                	BC	_00246_DS_
                                           ;	.line	369; TCPIP_Stack/LCDBlocking.c	LCDText[j] = ' ';
00264c   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
00264e   2401     addwf	0x1, 0, 0          	ADDWF	r0x01, W
002650   6e02     movwf	0x2, 0             	MOVWF	r0x02
002652   6a03     clrf	0x3, 0              	CLRF	r0x03
002654   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
002656   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
002658   c002     movff	0x2, 0xfe9         	MOVFF	r0x02, FSR0L
00265a   ffe9
00265c   c003     movff	0x3, 0xfea         	MOVFF	r0x03, FSR0H
00265e   ffea
002660   0e20     movlw	0x20               	MOVLW	0x20
002662   6eef     movwf	0xef, 0            	MOVWF	INDF0
                                           ;	.line	367; TCPIP_Stack/LCDBlocking.c	for(j=i; j < 32u; j++)
002664   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
002666   d7e9     bra	0x263a               	BRA	_00261_DS_
                                           _00246_DS_:
                                           ;	.line	372; TCPIP_Stack/LCDBlocking.c	LCDWrite(1, LCDText[i]);
002668   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
00266a   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
00266c   6e01     movwf	0x1, 0             	MOVWF	r0x01
00266e   6a02     clrf	0x2, 0              	CLRF	r0x02
002670   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
002672   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
002674   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
002676   ffe9
002678   c002     movff	0x2, 0xfea         	MOVFF	r0x02, FSR0H
00267a   ffea
00267c   cfef     movff	0xfef, 0x1         	MOVFF	INDF0, r0x01
00267e   f001
002680   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002682   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002684   0e01     movlw	0x1                	MOVLW	0x01
002686   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002688   ec6d     call	0x40da, 0           	CALL	_LCDWrite
00268a   f020
00268c   0e02     movlw	0x2                	MOVLW	0x02
00268e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	373; TCPIP_Stack/LCDBlocking.c	Delay10us(5);
002690   0e55     movlw	0x55               	MOVLW	0x55
002692   6e01     movwf	0x1, 0             	MOVWF	r0x01
002694   6a02     clrf	0x2, 0              	CLRF	r0x02
002696   6a03     clrf	0x3, 0              	CLRF	r0x03
002698   6a04     clrf	0x4, 0              	CLRF	r0x04
                                           _00247_DS_:
00269a   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
00269c   f005
00269e   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
0026a0   f006
0026a2   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
0026a4   f007
0026a6   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
0026a8   f008
0026aa   0eff     movlw	0xff               	MOVLW	0xff
0026ac   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
0026ae   0eff     movlw	0xff               	MOVLW	0xff
0026b0   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0026b2   0eff     movlw	0xff               	MOVLW	0xff
0026b4   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
0026b6   0eff     movlw	0xff               	MOVLW	0xff
0026b8   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
0026ba   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0026bc   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
0026be   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
0026c0   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
0026c2   e1eb     bnz	0x269a               	BNZ	_00247_DS_
                                           ;	.line	361; TCPIP_Stack/LCDBlocking.c	for(i = 16; i < 32u; i++)
0026c4   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
0026c6   d79f     bra	0x2606               	BRA	_00265_DS_
                                           _00269_DS_:
0026c8   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
0026ca   f008
0026cc   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
0026ce   f007
0026d0   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0026d2   f006
0026d4   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0026d6   f005
0026d8   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0026da   f004
0026dc   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0026de   f003
0026e0   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0026e2   f002
0026e4   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0026e6   f001
0026e8   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0026ea   f000
0026ec   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0026ee   ffd9
0026f0   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDInit	code
                                           _LCDInit:
                                           ;	.line	207; TCPIP_Stack/LCDBlocking.c	void LCDInit(void)
0026f2   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0026f4   ffe5
0026f6   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0026f8   ffd9
0026fa   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0026fc   ffe5
0026fe   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002700   ffe5
002702   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
002704   ffe5
002706   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002708   ffe5
00270a   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00270c   ffe5
00270e   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
002710   ffe5
002712   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
002714   ffe5
002716   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
002718   ffe5
00271a   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
00271c   ffe5
                                           ;	.line	211; TCPIP_Stack/LCDBlocking.c	memset(LCDText, ' ', sizeof(LCDText)-1);
00271e   0e00     movlw	0                  	MOVLW	0x00
002720   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002722   0e20     movlw	0x20               	MOVLW	0x20
002724   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002726   0e20     movlw	0x20               	MOVLW	0x20
002728   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00272a   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
00272c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00272e   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
002730   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002732   ecd6     call	0x39ac, 0           	CALL	_memset
002734   f01c
002736   0e05     movlw	0x5                	MOVLW	0x05
002738   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00273a   010f     movlb	0xf                	BANKSEL	(_LCDText + 32)
                                           ;	.line	212; TCPIP_Stack/LCDBlocking.c	LCDText[sizeof(LCDText)-1] = 0;
00273c   6b20     clrf	0x20, 0x1           	CLRF	(_LCDText + 32), B
                                           ;	.line	215; TCPIP_Stack/LCDBlocking.c	LCD_E_IO = 0;
00273e   9090     bcf	0x90, 0, 0           	BCF	_LATHbits, 0
                                           ;	.line	216; TCPIP_Stack/LCDBlocking.c	LCD_RD_WR_IO = 0;
002740   9290     bcf	0x90, 0x1, 0         	BCF	_LATHbits, 1
                                           ;	.line	220; TCPIP_Stack/LCDBlocking.c	LCD_DATA_TRIS = 0x00;
002742   6a96     clrf	0x96, 0             	CLRF	_TRISE
                                           ;	.line	233; TCPIP_Stack/LCDBlocking.c	LCD_RD_WR_TRIS = 0;
002744   9299     bcf	0x99, 0x1, 0         	BCF	_TRISHbits, 1
                                           ;	.line	234; TCPIP_Stack/LCDBlocking.c	LCD_RS_TRIS = 0;
002746   9499     bcf	0x99, 0x2, 0         	BCF	_TRISHbits, 2
                                           ;	.line	235; TCPIP_Stack/LCDBlocking.c	LCD_E_TRIS = 0;
002748   9099     bcf	0x99, 0, 0           	BCF	_TRISHbits, 0
                                           ;	.line	239; TCPIP_Stack/LCDBlocking.c	DelayMs(40);
00274a   0ea0     movlw	0xa0               	MOVLW	0xa0
00274c   6e00     movwf	0, 0               	MOVWF	r0x00
00274e   0e09     movlw	0x9                	MOVLW	0x09
002750   6e01     movwf	0x1, 0             	MOVWF	r0x01
002752   0e01     movlw	0x1                	MOVLW	0x01
002754   6e02     movwf	0x2, 0             	MOVWF	r0x02
002756   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00143_DS_:
002758   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
00275a   f004
00275c   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
00275e   f005
002760   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
002762   f006
002764   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
002766   f007
002768   0eff     movlw	0xff               	MOVLW	0xff
00276a   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
00276c   0eff     movlw	0xff               	MOVLW	0xff
00276e   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
002770   0eff     movlw	0xff               	MOVLW	0xff
002772   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
002774   0eff     movlw	0xff               	MOVLW	0xff
002776   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
002778   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00277a   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
00277c   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
00277e   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
002780   e1eb     bnz	0x2758               	BNZ	_00143_DS_
                                           ;	.line	247; TCPIP_Stack/LCDBlocking.c	LCD_RS_IO = 0;
002782   9490     bcf	0x90, 0x2, 0         	BCF	_LATHbits, 2
                                           ;	.line	249; TCPIP_Stack/LCDBlocking.c	LCD_DATA_IO = 0x03;
002784   0e03     movlw	0x3                	MOVLW	0x03
002786   6e8d     movwf	0x8d, 0            	MOVWF	_LATE
002788   0000     nop                      	nop 
00278a   0000     nop                      	nop 
                                           ;	.line	264; TCPIP_Stack/LCDBlocking.c	for(i = 0; i < 3u; i++)
00278c   6a00     clrf	0, 0                	CLRF	r0x00
                                           _00191_DS_:
00278e   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
002790   f001
002792   6a02     clrf	0x2, 0              	CLRF	r0x02
002794   0e00     movlw	0                  	MOVLW	0x00
002796   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
002798   e102     bnz	0x279e               	BNZ	_00220_DS_
00279a   0e03     movlw	0x3                	MOVLW	0x03
00279c   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00220_DS_:
00279e   e239     bc	0x2812                	BC	_00194_DS_
                                           ;	.line	266; TCPIP_Stack/LCDBlocking.c	LCD_E_IO = 1;
0027a0   8090     bsf	0x90, 0, 0           	BSF	_LATHbits, 0
                                           ;	.line	267; TCPIP_Stack/LCDBlocking.c	Delay10us(1);	       	// Wait E Pulse width time (min 230ns)
0027a2   0e11     movlw	0x11               	MOVLW	0x11
0027a4   6e01     movwf	0x1, 0             	MOVWF	r0x01
0027a6   6a02     clrf	0x2, 0              	CLRF	r0x02
0027a8   6a03     clrf	0x3, 0              	CLRF	r0x03
0027aa   6a04     clrf	0x4, 0              	CLRF	r0x04
                                           _00155_DS_:
0027ac   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
0027ae   f005
0027b0   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
0027b2   f006
0027b4   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
0027b6   f007
0027b8   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
0027ba   f008
0027bc   0eff     movlw	0xff               	MOVLW	0xff
0027be   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
0027c0   0eff     movlw	0xff               	MOVLW	0xff
0027c2   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0027c4   0eff     movlw	0xff               	MOVLW	0xff
0027c6   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
0027c8   0eff     movlw	0xff               	MOVLW	0xff
0027ca   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
0027cc   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0027ce   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
0027d0   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
0027d2   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
0027d4   e1eb     bnz	0x27ac               	BNZ	_00155_DS_
                                           ;	.line	268; TCPIP_Stack/LCDBlocking.c	LCD_E_IO = 0;
0027d6   9090     bcf	0x90, 0, 0           	BCF	_LATHbits, 0
                                           ;	.line	269; TCPIP_Stack/LCDBlocking.c	DelayMs(2);
0027d8   0e48     movlw	0x48               	MOVLW	0x48
0027da   6e01     movwf	0x1, 0             	MOVWF	r0x01
0027dc   0e0d     movlw	0xd                	MOVLW	0x0d
0027de   6e02     movwf	0x2, 0             	MOVWF	r0x02
0027e0   6a03     clrf	0x3, 0              	CLRF	r0x03
0027e2   6a04     clrf	0x4, 0              	CLRF	r0x04
                                           _00161_DS_:
0027e4   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
0027e6   f005
0027e8   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
0027ea   f006
0027ec   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
0027ee   f007
0027f0   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
0027f2   f008
0027f4   0eff     movlw	0xff               	MOVLW	0xff
0027f6   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
0027f8   0eff     movlw	0xff               	MOVLW	0xff
0027fa   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0027fc   0eff     movlw	0xff               	MOVLW	0xff
0027fe   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
002800   0eff     movlw	0xff               	MOVLW	0xff
002802   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
002804   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
002806   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
002808   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
00280a   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
00280c   e1eb     bnz	0x27e4               	BNZ	_00161_DS_
                                           ;	.line	264; TCPIP_Stack/LCDBlocking.c	for(i = 0; i < 3u; i++)
00280e   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
002810   d7be     bra	0x278e               	BRA	_00191_DS_
                                           _00194_DS_:
                                           ;	.line	295; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0x38);
002812   0e38     movlw	0x38               	MOVLW	0x38
002814   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002816   0e00     movlw	0                  	MOVLW	0x00
002818   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00281a   ec6d     call	0x40da, 0           	CALL	_LCDWrite
00281c   f020
00281e   0e02     movlw	0x2                	MOVLW	0x02
002820   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	297; TCPIP_Stack/LCDBlocking.c	Delay10us(5);
002822   0e55     movlw	0x55               	MOVLW	0x55
002824   6e00     movwf	0, 0               	MOVWF	r0x00
002826   6a01     clrf	0x1, 0              	CLRF	r0x01
002828   6a02     clrf	0x2, 0              	CLRF	r0x02
00282a   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00167_DS_:
00282c   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
00282e   f004
002830   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
002832   f005
002834   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
002836   f006
002838   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
00283a   f007
00283c   0eff     movlw	0xff               	MOVLW	0xff
00283e   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
002840   0eff     movlw	0xff               	MOVLW	0xff
002842   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
002844   0eff     movlw	0xff               	MOVLW	0xff
002846   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
002848   0eff     movlw	0xff               	MOVLW	0xff
00284a   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
00284c   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00284e   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
002850   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
002852   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
002854   e1eb     bnz	0x282c               	BNZ	_00167_DS_
                                           ;	.line	300; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0x06);	// Increment after each write, do not shift
002856   0e06     movlw	0x6                	MOVLW	0x06
002858   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00285a   0e00     movlw	0                  	MOVLW	0x00
00285c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00285e   ec6d     call	0x40da, 0           	CALL	_LCDWrite
002860   f020
002862   0e02     movlw	0x2                	MOVLW	0x02
002864   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	301; TCPIP_Stack/LCDBlocking.c	Delay10us(5);
002866   0e55     movlw	0x55               	MOVLW	0x55
002868   6e00     movwf	0, 0               	MOVWF	r0x00
00286a   6a01     clrf	0x1, 0              	CLRF	r0x01
00286c   6a02     clrf	0x2, 0              	CLRF	r0x02
00286e   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00173_DS_:
002870   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
002872   f004
002874   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
002876   f005
002878   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
00287a   f006
00287c   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
00287e   f007
002880   0eff     movlw	0xff               	MOVLW	0xff
002882   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
002884   0eff     movlw	0xff               	MOVLW	0xff
002886   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
002888   0eff     movlw	0xff               	MOVLW	0xff
00288a   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
00288c   0eff     movlw	0xff               	MOVLW	0xff
00288e   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
002890   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002892   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
002894   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
002896   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
002898   e1eb     bnz	0x2870               	BNZ	_00173_DS_
                                           ;	.line	304; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0x0C);	// Turn display on, no cusor, no cursor blink
00289a   0e0c     movlw	0xc                	MOVLW	0x0c
00289c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00289e   0e00     movlw	0                  	MOVLW	0x00
0028a0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0028a2   ec6d     call	0x40da, 0           	CALL	_LCDWrite
0028a4   f020
0028a6   0e02     movlw	0x2                	MOVLW	0x02
0028a8   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	305; TCPIP_Stack/LCDBlocking.c	Delay10us(5);
0028aa   0e55     movlw	0x55               	MOVLW	0x55
0028ac   6e00     movwf	0, 0               	MOVWF	r0x00
0028ae   6a01     clrf	0x1, 0              	CLRF	r0x01
0028b0   6a02     clrf	0x2, 0              	CLRF	r0x02
0028b2   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00179_DS_:
0028b4   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
0028b6   f004
0028b8   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
0028ba   f005
0028bc   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
0028be   f006
0028c0   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
0028c2   f007
0028c4   0eff     movlw	0xff               	MOVLW	0xff
0028c6   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0028c8   0eff     movlw	0xff               	MOVLW	0xff
0028ca   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
0028cc   0eff     movlw	0xff               	MOVLW	0xff
0028ce   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0028d0   0eff     movlw	0xff               	MOVLW	0xff
0028d2   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
0028d4   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0028d6   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
0028d8   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
0028da   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
0028dc   e1eb     bnz	0x28b4               	BNZ	_00179_DS_
                                           ;	.line	308; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0x01);	
0028de   0e01     movlw	0x1                	MOVLW	0x01
0028e0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0028e2   0e00     movlw	0                  	MOVLW	0x00
0028e4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0028e6   ec6d     call	0x40da, 0           	CALL	_LCDWrite
0028e8   f020
0028ea   0e02     movlw	0x2                	MOVLW	0x02
0028ec   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	309; TCPIP_Stack/LCDBlocking.c	DelayMs(2);
0028ee   0e48     movlw	0x48               	MOVLW	0x48
0028f0   6e00     movwf	0, 0               	MOVWF	r0x00
0028f2   0e0d     movlw	0xd                	MOVLW	0x0d
0028f4   6e01     movwf	0x1, 0             	MOVWF	r0x01
0028f6   6a02     clrf	0x2, 0              	CLRF	r0x02
0028f8   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00185_DS_:
0028fa   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
0028fc   f004
0028fe   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
002900   f005
002902   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
002904   f006
002906   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
002908   f007
00290a   0eff     movlw	0xff               	MOVLW	0xff
00290c   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
00290e   0eff     movlw	0xff               	MOVLW	0xff
002910   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
002912   0eff     movlw	0xff               	MOVLW	0xff
002914   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
002916   0eff     movlw	0xff               	MOVLW	0xff
002918   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
00291a   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00291c   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
00291e   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
002920   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
002922   e1eb     bnz	0x28fa               	BNZ	_00185_DS_
002924   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
002926   f008
002928   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
00292a   f007
00292c   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
00292e   f006
002930   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
002932   f005
002934   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
002936   f004
002938   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00293a   f003
00293c   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00293e   f002
002940   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
002942   f001
002944   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002946   f000
002948   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00294a   ffd9
00294c   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDWrite	code
                                           _LCDWrite:
                                           ;	.line	94; TCPIP_Stack/LCDBlocking.c	static void LCDWrite(BYTE RS, BYTE Data)
0040da   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0040dc   ffe5
0040de   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0040e0   ffd9
0040e2   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0040e4   ffe5
0040e6   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0040e8   ffe5
0040ea   0e02     movlw	0x2                	MOVLW	0x02
0040ec   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0040ee   f000
0040f0   0e03     movlw	0x3                	MOVLW	0x03
0040f2   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0040f4   f001
                                           ;	.line	97; TCPIP_Stack/LCDBlocking.c	LCD_DATA_TRIS = 0x00;
0040f6   6a96     clrf	0x96, 0             	CLRF	_TRISE
                                           ;	.line	110; TCPIP_Stack/LCDBlocking.c	LCD_RS_TRIS = 0;
0040f8   9499     bcf	0x99, 0x2, 0         	BCF	_TRISHbits, 2
                                           ;	.line	111; TCPIP_Stack/LCDBlocking.c	LCD_RD_WR_TRIS = 0;
0040fa   9299     bcf	0x99, 0x1, 0         	BCF	_TRISHbits, 1
                                           ;	.line	112; TCPIP_Stack/LCDBlocking.c	LCD_RD_WR_IO = 0;
0040fc   9290     bcf	0x90, 0x1, 0         	BCF	_LATHbits, 1
                                           ;	.line	113; TCPIP_Stack/LCDBlocking.c	LCD_RS_IO = RS;
0040fe   5000     movf	0, 0, 0             	MOVF	r0x00, W
004100   0b01     andlw	0x1                	ANDLW	0x01
004102   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
004104   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
004106   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
004108   5090     movf	0x90, 0, 0          	MOVF	_LATHbits, W
00410a   0bfb     andlw	0xfb               	ANDLW	0xfb
00410c   10f4     iorwf	0xf4, 0, 0         	IORWF	PRODH, W
00410e   6e90     movwf	0x90, 0            	MOVWF	_LATHbits
                                           ;	.line	140; TCPIP_Stack/LCDBlocking.c	LCD_DATA_IO = Data;
004110   c001     movff	0x1, 0xf8d         	MOVFF	r0x01, _LATE
004112   ff8d
004114   0000     nop                      	nop 
004116   0000     nop                      	nop 
                                           ;	.line	155; TCPIP_Stack/LCDBlocking.c	LCD_E_IO = 1;
004118   8090     bsf	0x90, 0, 0           	BSF	_LATHbits, 0
00411a   0000     nop                      	nop 
00411c   0000     nop                      	nop 
00411e   0000     nop                      	nop 
004120   0000     nop                      	nop 
004122   0000     nop                      	nop 
004124   0000     nop                      	nop 
004126   0000     nop                      	nop 
004128   0000     nop                      	nop 
00412a   0000     nop                      	nop 
                                           ;	.line	165; TCPIP_Stack/LCDBlocking.c	LCD_E_IO = 0;
00412c   9090     bcf	0x90, 0, 0           	BCF	_LATHbits, 0
00412e   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
004130   f001
004132   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
004134   f000
004136   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
004138   ffd9
00413a   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 1496 (0x05d8) bytes ( 1.14%)
                                           ;           	  748 (0x02ec) words
                                           ; udata size:	   33 (0x0021) bytes ( 0.86%)
                                           ; access size:	    9 (0x0009) bytes
                                           
                                           
                                           	end
