gplink-0.13.7 beta
Copyright (c) 1998-2005 gputils project
Listing File Generated: 10-27-2013  15:37:26
 
 
Address  Value    Disassembly              Source
-------  -----    -----------              ------
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Oct 15 2013) (Mac OS X ppc)
                                           ; This file was generated Sun Oct 27 15:37:26 2013
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _time
                                           	global _refresh_lcd
                                           	global _alarm
                                           	global _button
                                           	global _inc_ahour
                                           	global _inc_amin
                                           	global _button1
                                           	global _button2
                                           	global _overflows
                                           	global _sec
                                           	global _decisec
                                           	global _ds
                                           	global _h
                                           	global _m
                                           	global _s
                                           	global _thour
                                           	global _tmin
                                           	global _tsec
                                           	global _ahour
                                           	global _amin
                                           	global _ahour_o
                                           	global _amin_o
                                           	global _alarm_set
                                           	global _snooze
                                           	global _stop_ringing
                                           	global _whereami
                                           	global _on
                                           	global _display
                                           	global _high_isr
                                           	global _low_isr
                                           	global _main
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _LCDText
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _sprintf
                                           	extern _LCDInit
                                           	extern _DisplayString
                                           	extern ___ulong2fs
                                           	extern ___fsdiv
                                           	extern ___fs2ulong
                                           	extern __mullong
                                           	extern __modulong
                                           	extern __divulong
                                           	extern ___fssub
                                           	extern ___fsadd
                                           	extern __modsint
                                           	extern __divsint
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           PCL	equ	0xff9
                                           PCLATH	equ	0xffa
                                           PCLATU	equ	0xffb
                                           WREG	equ	0xfe8
                                           BSR	equ	0xfe0
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           	idata
                                           _button1	db	0x00
                                           _button2	db	0x00
                                           _overflows	db	0x00, 0x00, 0x00, 0x00
                                           _thour	db	0x00
                                           _tmin	db	0x00
                                           _tsec	db	0x00
                                           _ahour	db	0x00
                                           _amin	db	0x00
                                           _ahour_o	db	0x00
                                           _amin_o	db	0x00
                                           _alarm_set	db	0x00
                                           _snooze	db	0x00
                                           _stop_ringing	db	0x00
                                           _whereami	db	0x00
                                           _on	db	0x00
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           r0x0a	res	1
                                           r0x0b	res	1
                                           r0x0c	res	1
                                           r0x0d	res	1
                                           r0x0e	res	1
                                           r0x0f	res	1
                                           r0x10	res	1
                                           
                                           udata_reveil_0	udata
                                           _sec	res	4
                                           
                                           udata_reveil_1	udata
                                           _decisec	res	4
                                           
                                           udata_reveil_2	udata
                                           _ds	res	1
                                           
                                           udata_reveil_3	udata
                                           _h	res	1
                                           
                                           udata_reveil_4	udata
                                           _m	res	1
                                           
                                           udata_reveil_5	udata
                                           _s	res	1
                                           
                                           udata_reveil_6	udata
                                           _display	res	32
                                           
                                           ;--------------------------------------------------------
                                           ; interrupt vector 
                                           ;--------------------------------------------------------
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; ; Starting pCode block for absolute section
                                           ; ;-----------------------------------------
                                           S_reveil_ivec_0x1_high_isr	code	0X000008
                                           ivec_0x1_high_isr:
000008   ef1a     goto	0x1e34              	GOTO	_high_isr
00000a   f00f
                                           
                                           ; ; Starting pCode block for absolute section
                                           ; ;-----------------------------------------
                                           S_reveil_ivec_0x2_low_isr	code	0X000018
                                           ivec_0x2_low_isr:
000018   effa     goto	0x3bf4              	GOTO	_low_isr
00001a   f01d
                                           
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_reveil__main	code
                                           _main:
                                           ;	.line	147; reveil.c	RCONbits.IPEN       = 1; // enable interrupts priority levels
003d2e   8ed0     bsf	0xd0, 0x7, 0         	BSF	_RCONbits, 7
                                           ;	.line	148; reveil.c	INTCONbits.GIE      = 1; // enables all high-priority interrupts
003d30   8ef2     bsf	0xf2, 0x7, 0         	BSF	_INTCONbits, 7
                                           ;	.line	149; reveil.c	INTCONbits.PEIE     = 1; // enables all low-priority peripheral interrupts
003d32   8cf2     bsf	0xf2, 0x6, 0         	BSF	_INTCONbits, 6
                                           ;	.line	152; reveil.c	T0CONbits.TMR0ON    = 1; // enables Timer0
003d34   8ed5     bsf	0xd5, 0x7, 0         	BSF	_T0CONbits, 7
                                           ;	.line	153; reveil.c	INTCONbits.TMR0IE   = 1; // enables the TMR0 overflow interrupt
003d36   8af2     bsf	0xf2, 0x5, 0         	BSF	_INTCONbits, 5
                                           ;	.line	154; reveil.c	INTCONbits.TMR0IF   = 0; // clear Timer0 overflow bit
003d38   94f2     bcf	0xf2, 0x2, 0         	BCF	_INTCONbits, 2
                                           ;	.line	155; reveil.c	INTCON2bits.TMR0IP  = 1; // high priority
003d3a   84f1     bsf	0xf1, 0x2, 0         	BSF	_INTCON2bits, 2
                                           ;	.line	156; reveil.c	T0CONbits.T08BIT    = 0; // timer0 is configured as a 16-bit timer/counter
003d3c   9cd5     bcf	0xd5, 0x6, 0         	BCF	_T0CONbits, 6
                                           ;	.line	157; reveil.c	T0CONbits.T0CS      = 0; // internal instruction cycle clock (CLKO)
003d3e   9ad5     bcf	0xd5, 0x5, 0         	BCF	_T0CONbits, 5
                                           ;	.line	158; reveil.c	T0CONbits.PSA       = 1; // timer0 prescaler is not assigned
003d40   86d5     bsf	0xd5, 0x3, 0         	BSF	_T0CONbits, 3
                                           ;	.line	159; reveil.c	TMR0L = 0;    TMR0H = 0;
003d42   6ad6     clrf	0xd6, 0             	CLRF	_TMR0L
003d44   6ad7     clrf	0xd7, 0             	CLRF	_TMR0H
                                           ;	.line	162; reveil.c	LED0_TRIS = 0; // configure 1st led pin as output (yellow)
003d46   909a     bcf	0x9a, 0, 0           	BCF	_TRISJbits, 0
                                           ;	.line	163; reveil.c	LED1_TRIS = 0; // configure 2nd led pin as output (red)
003d48   929a     bcf	0x9a, 0x1, 0         	BCF	_TRISJbits, 1
                                           ;	.line	164; reveil.c	LED2_TRIS = 0; // configure 3rd led pin as output (red)
003d4a   949a     bcf	0x9a, 0x2, 0         	BCF	_TRISJbits, 2
                                           ;	.line	165; reveil.c	LATJbits.LATJ0 = 0; // switch LED 1 off
003d4c   9091     bcf	0x91, 0, 0           	BCF	_LATJbits, 0
                                           ;	.line	166; reveil.c	LATJbits.LATJ1 = 0; // switch LED 2 off
003d4e   9291     bcf	0x91, 0x1, 0         	BCF	_LATJbits, 1
                                           ;	.line	167; reveil.c	LATJbits.LATJ2 = 0; // switch LED 3 off
003d50   9491     bcf	0x91, 0x2, 0         	BCF	_LATJbits, 2
                                           ;	.line	170; reveil.c	BUTTON0_TRIS        = 1; // configure 1st button as input
003d52   8693     bsf	0x93, 0x3, 0         	BSF	_TRISBbits, 3
                                           ;	.line	171; reveil.c	BUTTON1_TRIS        = 1; // configure 2nd button as input
003d54   8293     bsf	0x93, 0x1, 0         	BSF	_TRISBbits, 1
                                           ;	.line	172; reveil.c	INTCON3bits.INT3E   = 1; // enable INT3 interrupt (button 1)
003d56   8af0     bsf	0xf0, 0x5, 0         	BSF	_INTCON3bits, 5
                                           ;	.line	173; reveil.c	INTCON3bits.INT3F   = 0; // clear INT3 flag
003d58   94f0     bcf	0xf0, 0x2, 0         	BCF	_INTCON3bits, 2
                                           ;	.line	174; reveil.c	INTCON3bits.INT1E   = 1; // enable INT1 interrupt (button 2)
003d5a   86f0     bsf	0xf0, 0x3, 0         	BSF	_INTCON3bits, 3
                                           ;	.line	175; reveil.c	INTCON3bits.INT1F   = 0; // clear INT1 flag
003d5c   90f0     bcf	0xf0, 0, 0           	BCF	_INTCON3bits, 0
                                           ;	.line	176; reveil.c	INTCON3bits.INT1IP  = 0; // low priority
003d5e   9cf0     bcf	0xf0, 0x6, 0         	BCF	_INTCON3bits, 6
                                           ;	.line	177; reveil.c	INTCON2bits.INT3IP  = 0; // low priority
003d60   92f1     bcf	0xf1, 0x1, 0         	BCF	_INTCON2bits, 1
                                           ;	.line	179; reveil.c	LCDInit();
003d62   eca9     call	0x2352, 0           	CALL	_LCDInit
003d64   f011
                                           ;	.line	180; reveil.c	whereami = TIME_MENU;
003d66   0e01     movlw	0x1                	MOVLW	0x01
003d68   010f     movlb	0xf                	BANKSEL	_whereami
003d6a   6f51     movwf	0x51, 0x1          	MOVWF	_whereami, B
                                           ;	.line	182; reveil.c	T0CONbits.TMR0ON = 1; // start timer0
003d6c   8ed5     bsf	0xd5, 0x7, 0         	BSF	_T0CONbits, 7
                                           _00123_DS_:
                                           ;	.line	185; reveil.c	time(); // met à jour l'heure
003d6e   ecc1     call	0x1782, 0           	CALL	_time
003d70   f00b
                                           ;	.line	186; reveil.c	refresh_lcd(); // met à jour l'affichage
003d72   ec29     call	0x852, 0            	CALL	_refresh_lcd
003d74   f004
                                           ;	.line	187; reveil.c	alarm(); // vérifie l'alarme
003d76   ec75     call	0x3aea, 0           	CALL	_alarm
003d78   f01d
                                           ;	.line	188; reveil.c	button(); // vérifie les boutons
003d7a   ec1f     call	0xe3e, 0            	CALL	_button
003d7c   f007
003d7e   d7f7     bra	0x3d6e               	BRA	_00123_DS_
003d80   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_reveil__inc_amin	code
                                           _inc_amin:
                                           ;	.line	464; reveil.c	void inc_amin(BYTE val)
0039b0   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0039b2   ffe5
0039b4   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0039b6   ffd9
0039b8   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0039ba   ffe5
0039bc   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0039be   ffe5
0039c0   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0039c2   ffe5
0039c4   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0039c6   ffe5
0039c8   0e02     movlw	0x2                	MOVLW	0x02
0039ca   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0039cc   f000
                                           ;	.line	467; reveil.c	mod_amin = (amin + val) / 60;
0039ce   cf4b     movff	0xf4b, 0x1         	MOVFF	_amin, r0x01
0039d0   f001
0039d2   6a02     clrf	0x2, 0              	CLRF	r0x02
0039d4   6a03     clrf	0x3, 0              	CLRF	r0x03
0039d6   5000     movf	0, 0, 0             	MOVF	r0x00, W
0039d8   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
0039da   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0039dc   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0039de   0e00     movlw	0                  	MOVLW	0x00
0039e0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0039e2   0e3c     movlw	0x3c               	MOVLW	0x3c
0039e4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0039e6   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0039e8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0039ea   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0039ec   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0039ee   ecc3     call	0x3186, 0           	CALL	__divsint
0039f0   f018
0039f2   6e01     movwf	0x1, 0             	MOVWF	r0x01
0039f4   cff3     movff	0xff3, 0x2         	MOVFF	PRODL, r0x02
0039f6   f002
0039f8   0e04     movlw	0x4                	MOVLW	0x04
0039fa   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	468; reveil.c	if (mod_amin) // vérifie s'il faut incrémenter les heures
0039fc   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0039fe   e005     bz	0x3a0a                	BZ	_00349_DS_
                                           ;	.line	469; reveil.c	inc_ahour(mod_amin);
003a00   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
003a02   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003a04   ec32     call	0x3c64, 0           	CALL	_inc_ahour
003a06   f01e
003a08   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           _00349_DS_:
                                           ;	.line	471; reveil.c	amin = (amin + val) % 60;
003a0a   cf4b     movff	0xf4b, 0x1         	MOVFF	_amin, r0x01
003a0c   f001
003a0e   6a02     clrf	0x2, 0              	CLRF	r0x02
003a10   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
003a12   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
003a14   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
003a16   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
003a18   0e00     movlw	0                  	MOVLW	0x00
003a1a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003a1c   0e3c     movlw	0x3c               	MOVLW	0x3c
003a1e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003a20   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
003a22   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003a24   5000     movf	0, 0, 0             	MOVF	r0x00, W
003a26   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003a28   ec29     call	0x3452, 0           	CALL	__modsint
003a2a   f01a
003a2c   6e00     movwf	0, 0               	MOVWF	r0x00
003a2e   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
003a30   f001
003a32   0e04     movlw	0x4                	MOVLW	0x04
003a34   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
003a36   5000     movf	0, 0, 0             	MOVF	r0x00, W
003a38   010f     movlb	0xf                	BANKSEL	_amin
003a3a   6f4b     movwf	0x4b, 0x1          	MOVWF	_amin, B
003a3c   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
003a3e   f003
003a40   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
003a42   f002
003a44   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
003a46   f001
003a48   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
003a4a   f000
003a4c   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
003a4e   ffd9
003a50   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_reveil__inc_ahour	code
                                           _inc_ahour:
                                           ;	.line	458; reveil.c	void inc_ahour(BYTE val)
003c64   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
003c66   ffe5
003c68   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
003c6a   ffd9
003c6c   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
003c6e   ffe5
003c70   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
003c72   ffe5
003c74   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
003c76   ffe5
003c78   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
003c7a   ffe5
003c7c   0e02     movlw	0x2                	MOVLW	0x02
003c7e   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
003c80   f000
                                           ;	.line	460; reveil.c	ahour = (ahour + val) % 24;
003c82   cf4a     movff	0xf4a, 0x1         	MOVFF	_ahour, r0x01
003c84   f001
003c86   6a02     clrf	0x2, 0              	CLRF	r0x02
003c88   6a03     clrf	0x3, 0              	CLRF	r0x03
003c8a   5000     movf	0, 0, 0             	MOVF	r0x00, W
003c8c   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
003c8e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
003c90   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
003c92   0e00     movlw	0                  	MOVLW	0x00
003c94   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003c96   0e18     movlw	0x18               	MOVLW	0x18
003c98   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003c9a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
003c9c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003c9e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
003ca0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003ca2   ec29     call	0x3452, 0           	CALL	__modsint
003ca4   f01a
003ca6   6e00     movwf	0, 0               	MOVWF	r0x00
003ca8   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
003caa   f001
003cac   0e04     movlw	0x4                	MOVLW	0x04
003cae   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
003cb0   5000     movf	0, 0, 0             	MOVF	r0x00, W
003cb2   010f     movlb	0xf                	BANKSEL	_ahour
003cb4   6f4a     movwf	0x4a, 0x1          	MOVWF	_ahour, B
003cb6   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
003cb8   f003
003cba   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
003cbc   f002
003cbe   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
003cc0   f001
003cc2   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
003cc4   f000
003cc6   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
003cc8   ffd9
003cca   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_reveil__button	code
                                           _button:
                                           ;	.line	328; reveil.c	void button(void)
000e3e   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000e40   ffe5
000e42   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000e44   ffd9
000e46   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000e48   ffe5
000e4a   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000e4c   ffe5
000e4e   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
000e50   ffe5
000e52   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
000e54   ffe5
000e56   010f     movlb	0xf                	BANKSEL	_button1
                                           ;	.line	336; reveil.c	if (button1) {
000e58   5141     movf	0x41, 0, 0x1        	MOVF	_button1, W, B
000e5a   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
000e5c   d07d     bra	0xf58                	BRA	_00303_DS_
                                           ;	.line	337; reveil.c	switch (whereami) {
000e5e   0e01     movlw	0x1                	MOVLW	0x01
000e60   010f     movlb	0xf                	BANKSEL	_whereami
000e62   5d51     subwf	0x51, 0, 0x1       	SUBWF	_whereami, W, B
000e64   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
000e66   d074     bra	0xf50                	BRA	_00267_DS_
000e68   0e0c     movlw	0xc                	MOVLW	0x0c
000e6a   010f     movlb	0xf                	BANKSEL	_whereami
000e6c   5d51     subwf	0x51, 0, 0x1       	SUBWF	_whereami, W, B
000e6e   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000e70   d06f     bra	0xf50                	BRA	_00267_DS_
000e72   010f     movlb	0xf                	BANKSEL	_whereami
000e74   0551     decf	0x51, 0, 0x1        	DECF	_whereami, W, B
000e76   6e00     movwf	0, 0               	MOVWF	r0x00
000e78   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
000e7a   ffe5
000e7c   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
000e7e   ffe5
000e80   6a05     clrf	0x5, 0              	CLRF	r0x05
000e82   3400     rlcf	0, 0, 0             	RLCF	r0x00, W
000e84   3605     rlcf	0x5, 0x1, 0         	RLCF	r0x05, F
000e86   34e8     rlcf	0xe8, 0, 0          	RLCF	WREG, W
000e88   3605     rlcf	0x5, 0x1, 0         	RLCF	r0x05, F
000e8a   0bfc     andlw	0xfc               	ANDLW	0xfc
000e8c   6e04     movwf	0x4, 0             	MOVWF	r0x04
000e8e   0e00     movlw	0                  	MOVLW	UPPER(_00322_DS_)
000e90   6efb     movwf	0xfb, 0            	MOVWF	PCLATU
000e92   0e0e     movlw	0xe                	MOVLW	HIGH(_00322_DS_)
000e94   6efa     movwf	0xfa, 0            	MOVWF	PCLATH
000e96   0eae     movlw	0xae               	MOVLW	LOW(_00322_DS_)
000e98   2604     addwf	0x4, 0x1, 0        	ADDWF	r0x04, F
000e9a   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000e9c   22fa     addwfc	0xfa, 0x1, 0      	ADDWFC	PCLATH, F
000e9e   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000ea0   2afb     incf	0xfb, 0x1, 0        	INCF	PCLATU, F
000ea2   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000ea4   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
000ea6   f005
000ea8   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
000eaa   f004
000eac   6ef9     movwf	0xf9, 0            	MOVWF	PCL
                                           _00322_DS_:
000eae   ef6d     goto	0xeda               	GOTO	_00255_DS_
000eb0   f007
000eb2   ef71     goto	0xee2               	GOTO	_00256_DS_
000eb4   f007
000eb6   ef75     goto	0xeea               	GOTO	_00257_DS_
000eb8   f007
000eba   ef79     goto	0xef2               	GOTO	_00258_DS_
000ebc   f007
000ebe   ef7d     goto	0xefa               	GOTO	_00259_DS_
000ec0   f007
000ec2   ef81     goto	0xf02               	GOTO	_00260_DS_
000ec4   f007
000ec6   ef85     goto	0xf0a               	GOTO	_00261_DS_
000ec8   f007
000eca   ef89     goto	0xf12               	GOTO	_00262_DS_
000ecc   f007
000ece   ef8d     goto	0xf1a               	GOTO	_00263_DS_
000ed0   f007
000ed2   ef91     goto	0xf22               	GOTO	_00264_DS_
000ed4   f007
000ed6   ef9a     goto	0xf34               	GOTO	_00265_DS_
000ed8   f007
                                           _00255_DS_:
                                           ;	.line	339; reveil.c	whereami = ALARM_MENU;
000eda   0e05     movlw	0x5                	MOVLW	0x05
000edc   010f     movlb	0xf                	BANKSEL	_whereami
000ede   6f51     movwf	0x51, 0x1          	MOVWF	_whereami, B
                                           ;	.line	340; reveil.c	break;
000ee0   d037     bra	0xf50                	BRA	_00267_DS_
                                           _00256_DS_:
                                           ;	.line	342; reveil.c	whereami = SET_MINUTE;
000ee2   0e03     movlw	0x3                	MOVLW	0x03
000ee4   010f     movlb	0xf                	BANKSEL	_whereami
000ee6   6f51     movwf	0x51, 0x1          	MOVWF	_whereami, B
                                           ;	.line	343; reveil.c	break;
000ee8   d033     bra	0xf50                	BRA	_00267_DS_
                                           _00257_DS_:
                                           ;	.line	345; reveil.c	whereami = SET_SECOND;
000eea   0e04     movlw	0x4                	MOVLW	0x04
000eec   010f     movlb	0xf                	BANKSEL	_whereami
000eee   6f51     movwf	0x51, 0x1          	MOVWF	_whereami, B
                                           ;	.line	346; reveil.c	break;
000ef0   d02f     bra	0xf50                	BRA	_00267_DS_
                                           _00258_DS_:
                                           ;	.line	348; reveil.c	whereami = ALARM_MENU;
000ef2   0e05     movlw	0x5                	MOVLW	0x05
000ef4   010f     movlb	0xf                	BANKSEL	_whereami
000ef6   6f51     movwf	0x51, 0x1          	MOVWF	_whereami, B
                                           ;	.line	349; reveil.c	break;
000ef8   d02b     bra	0xf50                	BRA	_00267_DS_
                                           _00259_DS_:
                                           ;	.line	351; reveil.c	whereami = DISPLAY;
000efa   0e09     movlw	0x9                	MOVLW	0x09
000efc   010f     movlb	0xf                	BANKSEL	_whereami
000efe   6f51     movwf	0x51, 0x1          	MOVWF	_whereami, B
                                           ;	.line	352; reveil.c	break;
000f00   d027     bra	0xf50                	BRA	_00267_DS_
                                           _00260_DS_:
                                           ;	.line	354; reveil.c	whereami = SET_A_HOUR;
000f02   0e07     movlw	0x7                	MOVLW	0x07
000f04   010f     movlb	0xf                	BANKSEL	_whereami
000f06   6f51     movwf	0x51, 0x1          	MOVWF	_whereami, B
                                           ;	.line	355; reveil.c	break;
000f08   d023     bra	0xf50                	BRA	_00267_DS_
                                           _00261_DS_:
                                           ;	.line	357; reveil.c	whereami = SET_A_MIN;
000f0a   0e08     movlw	0x8                	MOVLW	0x08
000f0c   010f     movlb	0xf                	BANKSEL	_whereami
000f0e   6f51     movwf	0x51, 0x1          	MOVWF	_whereami, B
                                           ;	.line	358; reveil.c	break;
000f10   d01f     bra	0xf50                	BRA	_00267_DS_
                                           _00262_DS_:
                                           ;	.line	360; reveil.c	whereami = DISPLAY;
000f12   0e09     movlw	0x9                	MOVLW	0x09
000f14   010f     movlb	0xf                	BANKSEL	_whereami
000f16   6f51     movwf	0x51, 0x1          	MOVWF	_whereami, B
                                           ;	.line	361; reveil.c	break;
000f18   d01b     bra	0xf50                	BRA	_00267_DS_
                                           _00263_DS_:
                                           ;	.line	363; reveil.c	whereami = TIME_MENU;
000f1a   0e01     movlw	0x1                	MOVLW	0x01
000f1c   010f     movlb	0xf                	BANKSEL	_whereami
000f1e   6f51     movwf	0x51, 0x1          	MOVWF	_whereami, B
                                           ;	.line	364; reveil.c	break;
000f20   d017     bra	0xf50                	BRA	_00267_DS_
                                           _00264_DS_:
                                           ;	.line	366; reveil.c	stop_ringing = 1; // l'alarme doit s'arrêter
000f22   0e01     movlw	0x1                	MOVLW	0x01
000f24   010f     movlb	0xf                	BANKSEL	_stop_ringing
000f26   6f50     movwf	0x50, 0x1          	MOVWF	_stop_ringing, B
                                           ;	.line	367; reveil.c	LATJbits.LATJ1 = 0; // switch LED 2 off
000f28   9291     bcf	0x91, 0x1, 0         	BCF	_LATJbits, 1
                                           ;	.line	368; reveil.c	LATJbits.LATJ2 = 0; // switch LED 3 off
000f2a   9491     bcf	0x91, 0x2, 0         	BCF	_LATJbits, 2
                                           ;	.line	369; reveil.c	whereami = DISPLAY;
000f2c   0e09     movlw	0x9                	MOVLW	0x09
000f2e   010f     movlb	0xf                	BANKSEL	_whereami
000f30   6f51     movwf	0x51, 0x1          	MOVWF	_whereami, B
                                           ;	.line	370; reveil.c	break;
000f32   d00e     bra	0xf50                	BRA	_00267_DS_
                                           _00265_DS_:
                                           ;	.line	372; reveil.c	stop_ringing = 1; // l'alarme doit s'arrêter
000f34   0e01     movlw	0x1                	MOVLW	0x01
000f36   010f     movlb	0xf                	BANKSEL	_stop_ringing
000f38   6f50     movwf	0x50, 0x1          	MOVWF	_stop_ringing, B
                                           ;	.line	373; reveil.c	amin = amin_o; // remet le réveil à l'heure d'origine
000f3a   cf4d     movff	0xf4d, 0xf4b       	MOVFF	_amin_o, _amin
000f3c   ff4b
                                           ;	.line	374; reveil.c	ahour = ahour_o;
000f3e   cf4c     movff	0xf4c, 0xf4a       	MOVFF	_ahour_o, _ahour
000f40   ff4a
000f42   010f     movlb	0xf                	BANKSEL	_snooze
                                           ;	.line	375; reveil.c	snooze = 0;
000f44   6b4f     clrf	0x4f, 0x1           	CLRF	_snooze, B
                                           ;	.line	376; reveil.c	LATJbits.LATJ1 = 0; // switch LED 2 off
000f46   9291     bcf	0x91, 0x1, 0         	BCF	_LATJbits, 1
                                           ;	.line	377; reveil.c	LATJbits.LATJ2 = 0; // switch LED 3 off
000f48   9491     bcf	0x91, 0x2, 0         	BCF	_LATJbits, 2
                                           ;	.line	378; reveil.c	whereami = DISPLAY;
000f4a   0e09     movlw	0x9                	MOVLW	0x09
000f4c   010f     movlb	0xf                	BANKSEL	_whereami
000f4e   6f51     movwf	0x51, 0x1          	MOVWF	_whereami, B
                                           _00267_DS_:
000f50   010f     movlb	0xf                	BANKSEL	_button1
                                           ;	.line	383; reveil.c	button1 = 0; // remet le flag du bouton 1 à 0
000f52   6b41     clrf	0x41, 0x1           	CLRF	_button1, B
000f54   efee     goto	0x13dc              	GOTO	_00305_DS_
000f56   f009
                                           _00303_DS_:
000f58   010f     movlb	0xf                	BANKSEL	_button2
                                           ;	.line	386; reveil.c	} else if (button2) {
000f5a   5142     movf	0x42, 0, 0x1        	MOVF	_button2, W, B
000f5c   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
000f5e   efee     goto	0x13dc              	GOTO	_00305_DS_
000f60   f009
                                           ;	.line	387; reveil.c	switch (whereami) {
000f62   0e01     movlw	0x1                	MOVLW	0x01
000f64   010f     movlb	0xf                	BANKSEL	_whereami
000f66   5d51     subwf	0x51, 0, 0x1       	SUBWF	_whereami, W, B
000f68   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
000f6a   efec     goto	0x13d8              	GOTO	_00299_DS_
000f6c   f009
000f6e   0e0c     movlw	0xc                	MOVLW	0x0c
000f70   010f     movlb	0xf                	BANKSEL	_whereami
000f72   5d51     subwf	0x51, 0, 0x1       	SUBWF	_whereami, W, B
000f74   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000f76   efec     goto	0x13d8              	GOTO	_00299_DS_
000f78   f009
000f7a   010f     movlb	0xf                	BANKSEL	_whereami
000f7c   0551     decf	0x51, 0, 0x1        	DECF	_whereami, W, B
000f7e   6e00     movwf	0, 0               	MOVWF	r0x00
000f80   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
000f82   ffe5
000f84   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
000f86   ffe5
000f88   6a05     clrf	0x5, 0              	CLRF	r0x05
000f8a   3400     rlcf	0, 0, 0             	RLCF	r0x00, W
000f8c   3605     rlcf	0x5, 0x1, 0         	RLCF	r0x05, F
000f8e   34e8     rlcf	0xe8, 0, 0          	RLCF	WREG, W
000f90   3605     rlcf	0x5, 0x1, 0         	RLCF	r0x05, F
000f92   0bfc     andlw	0xfc               	ANDLW	0xfc
000f94   6e04     movwf	0x4, 0             	MOVWF	r0x04
000f96   0e00     movlw	0                  	MOVLW	UPPER(_00325_DS_)
000f98   6efb     movwf	0xfb, 0            	MOVWF	PCLATU
000f9a   0e0f     movlw	0xf                	MOVLW	HIGH(_00325_DS_)
000f9c   6efa     movwf	0xfa, 0            	MOVWF	PCLATH
000f9e   0eb6     movlw	0xb6               	MOVLW	LOW(_00325_DS_)
000fa0   2604     addwf	0x4, 0x1, 0        	ADDWF	r0x04, F
000fa2   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000fa4   22fa     addwfc	0xfa, 0x1, 0      	ADDWFC	PCLATH, F
000fa6   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000fa8   2afb     incf	0xfb, 0x1, 0        	INCF	PCLATU, F
000faa   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000fac   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
000fae   f005
000fb0   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
000fb2   f004
000fb4   6ef9     movwf	0xf9, 0            	MOVWF	PCL
                                           _00325_DS_:
000fb6   eff1     goto	0xfe2               	GOTO	_00268_DS_
000fb8   f007
000fba   eff6     goto	0xfec               	GOTO	_00269_DS_
000fbc   f007
000fbe   ef89     goto	0x1112              	GOTO	_00273_DS_
000fc0   f008
000fc2   ef1c     goto	0x1238              	GOTO	_00277_DS_
000fc4   f009
000fc6   efaf     goto	0x135e              	GOTO	_00281_DS_
000fc8   f009
000fca   efb3     goto	0x1366              	GOTO	_00282_DS_
000fcc   f009
000fce   efb7     goto	0x136e              	GOTO	_00283_DS_
000fd0   f009
000fd2   efc3     goto	0x1386              	GOTO	_00287_DS_
000fd4   f009
000fd6   efcf     goto	0x139e              	GOTO	_00291_DS_
000fd8   f009
000fda   efd0     goto	0x13a0              	GOTO	_00292_DS_
000fdc   f009
000fde   efe1     goto	0x13c2              	GOTO	_00295_DS_
000fe0   f009
                                           _00268_DS_:
                                           ;	.line	389; reveil.c	whereami = SET_HOUR;
000fe2   0e02     movlw	0x2                	MOVLW	0x02
000fe4   010f     movlb	0xf                	BANKSEL	_whereami
000fe6   6f51     movwf	0x51, 0x1          	MOVWF	_whereami, B
                                           ;	.line	390; reveil.c	break;
000fe8   efec     goto	0x13d8              	GOTO	_00299_DS_
000fea   f009
                                           _00269_DS_:
000fec   010f     movlb	0xf                	BANKSEL	_thour
                                           ;	.line	392; reveil.c	if (thour == 23) // l'heure doit repasser à 0
000fee   5147     movf	0x47, 0, 0x1        	MOVF	_thour, W, B
000ff0   0a17     xorlw	0x17               	XORLW	0x17
000ff2   e001     bz	0xff6                 	BZ	_00327_DS_
000ff4   d047     bra	0x1084               	BRA	_00271_DS_
                                           _00327_DS_:
000ff6   010f     movlb	0xf                	BANKSEL	(_overflows + 3)
                                           ;	.line	393; reveil.c	overflows -= 59*F*3600;
000ff8   5146     movf	0x46, 0, 0x1        	MOVF	(_overflows + 3), W, B
000ffa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ffc   010f     movlb	0xf                	BANKSEL	(_overflows + 2)
000ffe   5145     movf	0x45, 0, 0x1        	MOVF	(_overflows + 2), W, B
001000   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001002   010f     movlb	0xf                	BANKSEL	(_overflows + 1)
001004   5144     movf	0x44, 0, 0x1        	MOVF	(_overflows + 1), W, B
001006   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001008   010f     movlb	0xf                	BANKSEL	_overflows
00100a   5143     movf	0x43, 0, 0x1        	MOVF	_overflows, W, B
00100c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00100e   ecbd     call	0x2b7a, 0           	CALL	___ulong2fs
001010   f015
001012   6e00     movwf	0, 0               	MOVWF	r0x00
001014   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
001016   f001
001018   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
00101a   f002
00101c   cfe9     movff	0xfe9, 0x3         	MOVFF	FSR0L, r0x03
00101e   f003
001020   0e04     movlw	0x4                	MOVLW	0x04
001022   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
001024   0e4b     movlw	0x4b               	MOVLW	0x4b
001026   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001028   0e9a     movlw	0x9a               	MOVLW	0x9a
00102a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00102c   0e89     movlw	0x89               	MOVLW	0x89
00102e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001030   0ece     movlw	0xce               	MOVLW	0xce
001032   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001034   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001036   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001038   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00103a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00103c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00103e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001040   5000     movf	0, 0, 0             	MOVF	r0x00, W
001042   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001044   ec7b     call	0x2cf6, 0           	CALL	___fssub
001046   f016
001048   6e00     movwf	0, 0               	MOVWF	r0x00
00104a   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
00104c   f001
00104e   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
001050   f002
001052   cfe9     movff	0xfe9, 0x3         	MOVFF	FSR0L, r0x03
001054   f003
001056   0e08     movlw	0x8                	MOVLW	0x08
001058   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00105a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00105c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00105e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001060   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001062   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001064   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001066   5000     movf	0, 0, 0             	MOVF	r0x00, W
001068   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00106a   ec3e     call	0x327c, 0           	CALL	___fs2ulong
00106c   f019
00106e   010f     movlb	0xf                	BANKSEL	_overflows
001070   6f43     movwf	0x43, 0x1          	MOVWF	_overflows, B
001072   cff3     movff	0xff3, 0xf44       	MOVFF	PRODL, (_overflows + 1)
001074   ff44
001076   cff4     movff	0xff4, 0xf45       	MOVFF	PRODH, (_overflows + 2)
001078   ff45
00107a   cfe9     movff	0xfe9, 0xf46       	MOVFF	FSR0L, (_overflows + 3)
00107c   ff46
00107e   0e04     movlw	0x4                	MOVLW	0x04
001080   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
001082   d1aa     bra	0x13d8               	BRA	_00299_DS_
                                           _00271_DS_:
001084   010f     movlb	0xf                	BANKSEL	(_overflows + 3)
                                           ;	.line	395; reveil.c	overflows += F*3600;
001086   5146     movf	0x46, 0, 0x1        	MOVF	(_overflows + 3), W, B
001088   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00108a   010f     movlb	0xf                	BANKSEL	(_overflows + 2)
00108c   5145     movf	0x45, 0, 0x1        	MOVF	(_overflows + 2), W, B
00108e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001090   010f     movlb	0xf                	BANKSEL	(_overflows + 1)
001092   5144     movf	0x44, 0, 0x1        	MOVF	(_overflows + 1), W, B
001094   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001096   010f     movlb	0xf                	BANKSEL	_overflows
001098   5143     movf	0x43, 0, 0x1        	MOVF	_overflows, W, B
00109a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00109c   ecbd     call	0x2b7a, 0           	CALL	___ulong2fs
00109e   f015
0010a0   6e00     movwf	0, 0               	MOVWF	r0x00
0010a2   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
0010a4   f001
0010a6   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
0010a8   f002
0010aa   cfe9     movff	0xfe9, 0x3         	MOVFF	FSR0L, r0x03
0010ac   f003
0010ae   0e04     movlw	0x4                	MOVLW	0x04
0010b0   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0010b2   0e48     movlw	0x48               	MOVLW	0x48
0010b4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0010b6   0ea7     movlw	0xa7               	MOVLW	0xa7
0010b8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0010ba   0ea2     movlw	0xa2               	MOVLW	0xa2
0010bc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0010be   0e80     movlw	0x80               	MOVLW	0x80
0010c0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0010c2   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0010c4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0010c6   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0010c8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0010ca   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0010cc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0010ce   5000     movf	0, 0, 0             	MOVF	r0x00, W
0010d0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0010d2   ecf9     call	0x13f2, 0           	CALL	___fsadd
0010d4   f009
0010d6   6e00     movwf	0, 0               	MOVWF	r0x00
0010d8   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
0010da   f001
0010dc   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
0010de   f002
0010e0   cfe9     movff	0xfe9, 0x3         	MOVFF	FSR0L, r0x03
0010e2   f003
0010e4   0e08     movlw	0x8                	MOVLW	0x08
0010e6   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0010e8   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0010ea   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0010ec   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0010ee   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0010f0   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0010f2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0010f4   5000     movf	0, 0, 0             	MOVF	r0x00, W
0010f6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0010f8   ec3e     call	0x327c, 0           	CALL	___fs2ulong
0010fa   f019
0010fc   010f     movlb	0xf                	BANKSEL	_overflows
0010fe   6f43     movwf	0x43, 0x1          	MOVWF	_overflows, B
001100   cff3     movff	0xff3, 0xf44       	MOVFF	PRODL, (_overflows + 1)
001102   ff44
001104   cff4     movff	0xff4, 0xf45       	MOVFF	PRODH, (_overflows + 2)
001106   ff45
001108   cfe9     movff	0xfe9, 0xf46       	MOVFF	FSR0L, (_overflows + 3)
00110a   ff46
00110c   0e04     movlw	0x4                	MOVLW	0x04
00110e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	396; reveil.c	break;
001110   d163     bra	0x13d8               	BRA	_00299_DS_
                                           _00273_DS_:
001112   010f     movlb	0xf                	BANKSEL	_tmin
                                           ;	.line	398; reveil.c	if (tmin == 59) // les minutes doivent repasser à 0
001114   5148     movf	0x48, 0, 0x1        	MOVF	_tmin, W, B
001116   0a3b     xorlw	0x3b               	XORLW	0x3b
001118   e001     bz	0x111c                	BZ	_00329_DS_
00111a   d047     bra	0x11aa               	BRA	_00275_DS_
                                           _00329_DS_:
00111c   010f     movlb	0xf                	BANKSEL	(_overflows + 3)
                                           ;	.line	399; reveil.c	overflows -= 59*F*60;
00111e   5146     movf	0x46, 0, 0x1        	MOVF	(_overflows + 3), W, B
001120   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001122   010f     movlb	0xf                	BANKSEL	(_overflows + 2)
001124   5145     movf	0x45, 0, 0x1        	MOVF	(_overflows + 2), W, B
001126   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001128   010f     movlb	0xf                	BANKSEL	(_overflows + 1)
00112a   5144     movf	0x44, 0, 0x1        	MOVF	(_overflows + 1), W, B
00112c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00112e   010f     movlb	0xf                	BANKSEL	_overflows
001130   5143     movf	0x43, 0, 0x1        	MOVF	_overflows, W, B
001132   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001134   ecbd     call	0x2b7a, 0           	CALL	___ulong2fs
001136   f015
001138   6e00     movwf	0, 0               	MOVWF	r0x00
00113a   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
00113c   f001
00113e   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
001140   f002
001142   cfe9     movff	0xfe9, 0x3         	MOVFF	FSR0L, r0x03
001144   f003
001146   0e04     movlw	0x4                	MOVLW	0x04
001148   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00114a   0e48     movlw	0x48               	MOVLW	0x48
00114c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00114e   0ea4     movlw	0xa4               	MOVLW	0xa4
001150   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001152   0ed7     movlw	0xd7               	MOVLW	0xd7
001154   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001156   0e42     movlw	0x42               	MOVLW	0x42
001158   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00115a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00115c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00115e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001160   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001162   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001164   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001166   5000     movf	0, 0, 0             	MOVF	r0x00, W
001168   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00116a   ec7b     call	0x2cf6, 0           	CALL	___fssub
00116c   f016
00116e   6e00     movwf	0, 0               	MOVWF	r0x00
001170   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
001172   f001
001174   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
001176   f002
001178   cfe9     movff	0xfe9, 0x3         	MOVFF	FSR0L, r0x03
00117a   f003
00117c   0e08     movlw	0x8                	MOVLW	0x08
00117e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
001180   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001182   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001184   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001186   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001188   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00118a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00118c   5000     movf	0, 0, 0             	MOVF	r0x00, W
00118e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001190   ec3e     call	0x327c, 0           	CALL	___fs2ulong
001192   f019
001194   010f     movlb	0xf                	BANKSEL	_overflows
001196   6f43     movwf	0x43, 0x1          	MOVWF	_overflows, B
001198   cff3     movff	0xff3, 0xf44       	MOVFF	PRODL, (_overflows + 1)
00119a   ff44
00119c   cff4     movff	0xff4, 0xf45       	MOVFF	PRODH, (_overflows + 2)
00119e   ff45
0011a0   cfe9     movff	0xfe9, 0xf46       	MOVFF	FSR0L, (_overflows + 3)
0011a2   ff46
0011a4   0e04     movlw	0x4                	MOVLW	0x04
0011a6   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0011a8   d117     bra	0x13d8               	BRA	_00299_DS_
                                           _00275_DS_:
0011aa   010f     movlb	0xf                	BANKSEL	(_overflows + 3)
                                           ;	.line	401; reveil.c	overflows += F*60;
0011ac   5146     movf	0x46, 0, 0x1        	MOVF	(_overflows + 3), W, B
0011ae   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0011b0   010f     movlb	0xf                	BANKSEL	(_overflows + 2)
0011b2   5145     movf	0x45, 0, 0x1        	MOVF	(_overflows + 2), W, B
0011b4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0011b6   010f     movlb	0xf                	BANKSEL	(_overflows + 1)
0011b8   5144     movf	0x44, 0, 0x1        	MOVF	(_overflows + 1), W, B
0011ba   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0011bc   010f     movlb	0xf                	BANKSEL	_overflows
0011be   5143     movf	0x43, 0, 0x1        	MOVF	_overflows, W, B
0011c0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0011c2   ecbd     call	0x2b7a, 0           	CALL	___ulong2fs
0011c4   f015
0011c6   6e00     movwf	0, 0               	MOVWF	r0x00
0011c8   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
0011ca   f001
0011cc   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
0011ce   f002
0011d0   cfe9     movff	0xfe9, 0x3         	MOVFF	FSR0L, r0x03
0011d2   f003
0011d4   0e04     movlw	0x4                	MOVLW	0x04
0011d6   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0011d8   0e45     movlw	0x45               	MOVLW	0x45
0011da   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0011dc   0eb2     movlw	0xb2               	MOVLW	0xb2
0011de   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0011e0   0ecf     movlw	0xcf               	MOVLW	0xcf
0011e2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0011e4   0e77     movlw	0x77               	MOVLW	0x77
0011e6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0011e8   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0011ea   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0011ec   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0011ee   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0011f0   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0011f2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0011f4   5000     movf	0, 0, 0             	MOVF	r0x00, W
0011f6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0011f8   ecf9     call	0x13f2, 0           	CALL	___fsadd
0011fa   f009
0011fc   6e00     movwf	0, 0               	MOVWF	r0x00
0011fe   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
001200   f001
001202   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
001204   f002
001206   cfe9     movff	0xfe9, 0x3         	MOVFF	FSR0L, r0x03
001208   f003
00120a   0e08     movlw	0x8                	MOVLW	0x08
00120c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00120e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001210   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001212   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001214   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001216   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001218   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00121a   5000     movf	0, 0, 0             	MOVF	r0x00, W
00121c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00121e   ec3e     call	0x327c, 0           	CALL	___fs2ulong
001220   f019
001222   010f     movlb	0xf                	BANKSEL	_overflows
001224   6f43     movwf	0x43, 0x1          	MOVWF	_overflows, B
001226   cff3     movff	0xff3, 0xf44       	MOVFF	PRODL, (_overflows + 1)
001228   ff44
00122a   cff4     movff	0xff4, 0xf45       	MOVFF	PRODH, (_overflows + 2)
00122c   ff45
00122e   cfe9     movff	0xfe9, 0xf46       	MOVFF	FSR0L, (_overflows + 3)
001230   ff46
001232   0e04     movlw	0x4                	MOVLW	0x04
001234   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	402; reveil.c	break;
001236   d0d0     bra	0x13d8               	BRA	_00299_DS_
                                           _00277_DS_:
001238   010f     movlb	0xf                	BANKSEL	_tsec
                                           ;	.line	404; reveil.c	if (tsec == 59) // les secondes doivent repasser à 0
00123a   5149     movf	0x49, 0, 0x1        	MOVF	_tsec, W, B
00123c   0a3b     xorlw	0x3b               	XORLW	0x3b
00123e   e001     bz	0x1242                	BZ	_00331_DS_
001240   d047     bra	0x12d0               	BRA	_00279_DS_
                                           _00331_DS_:
001242   010f     movlb	0xf                	BANKSEL	(_overflows + 3)
                                           ;	.line	405; reveil.c	overflows -= 59*F;
001244   5146     movf	0x46, 0, 0x1        	MOVF	(_overflows + 3), W, B
001246   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001248   010f     movlb	0xf                	BANKSEL	(_overflows + 2)
00124a   5145     movf	0x45, 0, 0x1        	MOVF	(_overflows + 2), W, B
00124c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00124e   010f     movlb	0xf                	BANKSEL	(_overflows + 1)
001250   5144     movf	0x44, 0, 0x1        	MOVF	(_overflows + 1), W, B
001252   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001254   010f     movlb	0xf                	BANKSEL	_overflows
001256   5143     movf	0x43, 0, 0x1        	MOVF	_overflows, W, B
001258   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00125a   ecbd     call	0x2b7a, 0           	CALL	___ulong2fs
00125c   f015
00125e   6e00     movwf	0, 0               	MOVWF	r0x00
001260   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
001262   f001
001264   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
001266   f002
001268   cfe9     movff	0xfe9, 0x3         	MOVFF	FSR0L, r0x03
00126a   f003
00126c   0e04     movlw	0x4                	MOVLW	0x04
00126e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
001270   0e45     movlw	0x45               	MOVLW	0x45
001272   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001274   0eaf     movlw	0xaf               	MOVLW	0xaf
001276   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001278   0ed4     movlw	0xd4               	MOVLW	0xd4
00127a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00127c   0e8b     movlw	0x8b               	MOVLW	0x8b
00127e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001280   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001282   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001284   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001286   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001288   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00128a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00128c   5000     movf	0, 0, 0             	MOVF	r0x00, W
00128e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001290   ec7b     call	0x2cf6, 0           	CALL	___fssub
001292   f016
001294   6e00     movwf	0, 0               	MOVWF	r0x00
001296   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
001298   f001
00129a   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
00129c   f002
00129e   cfe9     movff	0xfe9, 0x3         	MOVFF	FSR0L, r0x03
0012a0   f003
0012a2   0e08     movlw	0x8                	MOVLW	0x08
0012a4   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0012a6   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0012a8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0012aa   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0012ac   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0012ae   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0012b0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0012b2   5000     movf	0, 0, 0             	MOVF	r0x00, W
0012b4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0012b6   ec3e     call	0x327c, 0           	CALL	___fs2ulong
0012b8   f019
0012ba   010f     movlb	0xf                	BANKSEL	_overflows
0012bc   6f43     movwf	0x43, 0x1          	MOVWF	_overflows, B
0012be   cff3     movff	0xff3, 0xf44       	MOVFF	PRODL, (_overflows + 1)
0012c0   ff44
0012c2   cff4     movff	0xff4, 0xf45       	MOVFF	PRODH, (_overflows + 2)
0012c4   ff45
0012c6   cfe9     movff	0xfe9, 0xf46       	MOVFF	FSR0L, (_overflows + 3)
0012c8   ff46
0012ca   0e04     movlw	0x4                	MOVLW	0x04
0012cc   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0012ce   d084     bra	0x13d8               	BRA	_00299_DS_
                                           _00279_DS_:
0012d0   010f     movlb	0xf                	BANKSEL	(_overflows + 3)
                                           ;	.line	407; reveil.c	overflows += F;
0012d2   5146     movf	0x46, 0, 0x1        	MOVF	(_overflows + 3), W, B
0012d4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0012d6   010f     movlb	0xf                	BANKSEL	(_overflows + 2)
0012d8   5145     movf	0x45, 0, 0x1        	MOVF	(_overflows + 2), W, B
0012da   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0012dc   010f     movlb	0xf                	BANKSEL	(_overflows + 1)
0012de   5144     movf	0x44, 0, 0x1        	MOVF	(_overflows + 1), W, B
0012e0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0012e2   010f     movlb	0xf                	BANKSEL	_overflows
0012e4   5143     movf	0x43, 0, 0x1        	MOVF	_overflows, W, B
0012e6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0012e8   ecbd     call	0x2b7a, 0           	CALL	___ulong2fs
0012ea   f015
0012ec   6e00     movwf	0, 0               	MOVWF	r0x00
0012ee   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
0012f0   f001
0012f2   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
0012f4   f002
0012f6   cfe9     movff	0xfe9, 0x3         	MOVFF	FSR0L, r0x03
0012f8   f003
0012fa   0e04     movlw	0x4                	MOVLW	0x04
0012fc   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0012fe   0e42     movlw	0x42               	MOVLW	0x42
001300   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001302   0ebe     movlw	0xbe               	MOVLW	0xbe
001304   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001306   0ebb     movlw	0xbb               	MOVLW	0xbb
001308   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00130a   0e2a     movlw	0x2a               	MOVLW	0x2a
00130c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00130e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001310   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001312   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001314   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001316   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001318   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00131a   5000     movf	0, 0, 0             	MOVF	r0x00, W
00131c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00131e   ecf9     call	0x13f2, 0           	CALL	___fsadd
001320   f009
001322   6e00     movwf	0, 0               	MOVWF	r0x00
001324   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
001326   f001
001328   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
00132a   f002
00132c   cfe9     movff	0xfe9, 0x3         	MOVFF	FSR0L, r0x03
00132e   f003
001330   0e08     movlw	0x8                	MOVLW	0x08
001332   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
001334   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001336   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001338   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00133a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00133c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00133e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001340   5000     movf	0, 0, 0             	MOVF	r0x00, W
001342   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001344   ec3e     call	0x327c, 0           	CALL	___fs2ulong
001346   f019
001348   010f     movlb	0xf                	BANKSEL	_overflows
00134a   6f43     movwf	0x43, 0x1          	MOVWF	_overflows, B
00134c   cff3     movff	0xff3, 0xf44       	MOVFF	PRODL, (_overflows + 1)
00134e   ff44
001350   cff4     movff	0xff4, 0xf45       	MOVFF	PRODH, (_overflows + 2)
001352   ff45
001354   cfe9     movff	0xfe9, 0xf46       	MOVFF	FSR0L, (_overflows + 3)
001356   ff46
001358   0e04     movlw	0x4                	MOVLW	0x04
00135a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	408; reveil.c	break;
00135c   d03d     bra	0x13d8               	BRA	_00299_DS_
                                           _00281_DS_:
                                           ;	.line	410; reveil.c	whereami = SET_ALARM;
00135e   0e06     movlw	0x6                	MOVLW	0x06
001360   010f     movlb	0xf                	BANKSEL	_whereami
001362   6f51     movwf	0x51, 0x1          	MOVWF	_whereami, B
                                           ;	.line	411; reveil.c	break;
001364   d039     bra	0x13d8               	BRA	_00299_DS_
                                           _00282_DS_:
                                           ;	.line	413; reveil.c	alarm_set ^= 1;
001366   0e01     movlw	0x1                	MOVLW	0x01
001368   010f     movlb	0xf                	BANKSEL	_alarm_set
00136a   1b4e     xorwf	0x4e, 0x1, 0x1     	XORWF	_alarm_set, F, B
                                           ;	.line	414; reveil.c	break;
00136c   d035     bra	0x13d8               	BRA	_00299_DS_
                                           _00283_DS_:
00136e   010f     movlb	0xf                	BANKSEL	_ahour
                                           ;	.line	416; reveil.c	if (ahour == 23) // l'heure d'alarme doit repasser à 0
001370   514a     movf	0x4a, 0, 0x1        	MOVF	_ahour, W, B
001372   0a17     xorlw	0x17               	XORLW	0x17
001374   e103     bnz	0x137c               	BNZ	_00285_DS_
                                           _00334_DS_:
001376   010f     movlb	0xf                	BANKSEL	_ahour
                                           ;	.line	417; reveil.c	ahour = 0;
001378   6b4a     clrf	0x4a, 0x1           	CLRF	_ahour, B
00137a   d002     bra	0x1380               	BRA	_00286_DS_
                                           _00285_DS_:
00137c   010f     movlb	0xf                	BANKSEL	_ahour
                                           ;	.line	419; reveil.c	ahour++;
00137e   2b4a     incf	0x4a, 0x1, 0x1      	INCF	_ahour, F, B
                                           _00286_DS_:
                                           ;	.line	420; reveil.c	ahour_o = ahour;
001380   cf4a     movff	0xf4a, 0xf4c       	MOVFF	_ahour, _ahour_o
001382   ff4c
                                           ;	.line	421; reveil.c	break;
001384   d029     bra	0x13d8               	BRA	_00299_DS_
                                           _00287_DS_:
001386   010f     movlb	0xf                	BANKSEL	_amin
                                           ;	.line	423; reveil.c	if (amin == 59) // les minutes d'alarme doivent repasser à 0
001388   514b     movf	0x4b, 0, 0x1        	MOVF	_amin, W, B
00138a   0a3b     xorlw	0x3b               	XORLW	0x3b
00138c   e103     bnz	0x1394               	BNZ	_00289_DS_
                                           _00336_DS_:
00138e   010f     movlb	0xf                	BANKSEL	_amin
                                           ;	.line	424; reveil.c	amin = 0;
001390   6b4b     clrf	0x4b, 0x1           	CLRF	_amin, B
001392   d002     bra	0x1398               	BRA	_00290_DS_
                                           _00289_DS_:
001394   010f     movlb	0xf                	BANKSEL	_amin
                                           ;	.line	426; reveil.c	amin++;
001396   2b4b     incf	0x4b, 0x1, 0x1      	INCF	_amin, F, B
                                           _00290_DS_:
                                           ;	.line	427; reveil.c	amin_o = amin;
001398   cf4b     movff	0xf4b, 0xf4d       	MOVFF	_amin, _amin_o
00139a   ff4d
                                           ;	.line	428; reveil.c	break;
00139c   d01d     bra	0x13d8               	BRA	_00299_DS_
                                           _00291_DS_:
                                           ;	.line	430; reveil.c	break; // bouton sans fonction
00139e   d01c     bra	0x13d8               	BRA	_00299_DS_
                                           _00292_DS_:
                                           ;	.line	433; reveil.c	if (snooze < SNOOZE_MAX) {
0013a0   0e0c     movlw	0xc                	MOVLW	0x0c
0013a2   010f     movlb	0xf                	BANKSEL	_snooze
0013a4   5d4f     subwf	0x4f, 0, 0x1       	SUBWF	_snooze, W, B
0013a6   e218     bc	0x13d8                	BC	_00299_DS_
                                           ;	.line	434; reveil.c	inc_amin(SNOOZE_MINUTE); // modifie le réveil
0013a8   0e05     movlw	0x5                	MOVLW	0x05
0013aa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0013ac   ecd8     call	0x39b0, 0           	CALL	_inc_amin
0013ae   f01c
0013b0   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
0013b2   010f     movlb	0xf                	BANKSEL	_snooze
                                           ;	.line	435; reveil.c	snooze++; // augmente le compteur de snooze
0013b4   2b4f     incf	0x4f, 0x1, 0x1      	INCF	_snooze, F, B
                                           ;	.line	436; reveil.c	LATJbits.LATJ1 = 0; // switch LED 2 off
0013b6   9291     bcf	0x91, 0x1, 0         	BCF	_LATJbits, 1
                                           ;	.line	437; reveil.c	LATJbits.LATJ2 = 0; // switch LED 3 off
0013b8   9491     bcf	0x91, 0x2, 0         	BCF	_LATJbits, 2
                                           ;	.line	438; reveil.c	whereami = SNOOZE;
0013ba   0e0b     movlw	0xb                	MOVLW	0x0b
0013bc   010f     movlb	0xf                	BANKSEL	_whereami
0013be   6f51     movwf	0x51, 0x1          	MOVWF	_whereami, B
                                           ;	.line	441; reveil.c	break;
0013c0   d00b     bra	0x13d8               	BRA	_00299_DS_
                                           _00295_DS_:
                                           ;	.line	444; reveil.c	if (snooze < SNOOZE_MAX) {
0013c2   0e0c     movlw	0xc                	MOVLW	0x0c
0013c4   010f     movlb	0xf                	BANKSEL	_snooze
0013c6   5d4f     subwf	0x4f, 0, 0x1       	SUBWF	_snooze, W, B
0013c8   e207     bc	0x13d8                	BC	_00299_DS_
                                           ;	.line	445; reveil.c	inc_amin(SNOOZE_MINUTE); // modifie le réveil
0013ca   0e05     movlw	0x5                	MOVLW	0x05
0013cc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0013ce   ecd8     call	0x39b0, 0           	CALL	_inc_amin
0013d0   f01c
0013d2   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
0013d4   010f     movlb	0xf                	BANKSEL	_snooze
                                           ;	.line	446; reveil.c	snooze++; // augmente le compteur de snooze
0013d6   2b4f     incf	0x4f, 0x1, 0x1      	INCF	_snooze, F, B
                                           _00299_DS_:
0013d8   010f     movlb	0xf                	BANKSEL	_button2
                                           ;	.line	453; reveil.c	button2 = 0; // remet le flag du bouton 2 à 0
0013da   6b42     clrf	0x42, 0x1           	CLRF	_button2, B
                                           _00305_DS_:
0013dc   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0013de   f003
0013e0   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0013e2   f002
0013e4   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0013e6   f001
0013e8   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0013ea   f000
0013ec   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0013ee   ffd9
0013f0   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_reveil__alarm	code
                                           _alarm:
                                           ;	.line	298; reveil.c	void alarm(void)
003aea   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
003aec   ffe5
003aee   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
003af0   ffd9
003af2   010f     movlb	0xf                	BANKSEL	_thour
                                           ;	.line	301; reveil.c	if (thour == ahour && tmin == amin && alarm_set) {
003af4   5147     movf	0x47, 0, 0x1        	MOVF	_thour, W, B
003af6   010f     movlb	0xf                	BANKSEL	_ahour
003af8   194a     xorwf	0x4a, 0, 0x1       	XORWF	_ahour, W, B
003afa   e001     bz	0x3afe                	BZ	_00240_DS_
003afc   d038     bra	0x3b6e               	BRA	_00228_DS_
                                           _00240_DS_:
003afe   010f     movlb	0xf                	BANKSEL	_tmin
003b00   5148     movf	0x48, 0, 0x1        	MOVF	_tmin, W, B
003b02   010f     movlb	0xf                	BANKSEL	_amin
003b04   194b     xorwf	0x4b, 0, 0x1       	XORWF	_amin, W, B
003b06   e001     bz	0x3b0a                	BZ	_00242_DS_
003b08   d032     bra	0x3b6e               	BRA	_00228_DS_
                                           _00242_DS_:
003b0a   010f     movlb	0xf                	BANKSEL	_alarm_set
003b0c   514e     movf	0x4e, 0, 0x1        	MOVF	_alarm_set, W, B
003b0e   e02f     bz	0x3b6e                	BZ	_00228_DS_
                                           ;	.line	305; reveil.c	if (tsec < 31 && stop_ringing == 0) {
003b10   0e1f     movlw	0x1f               	MOVLW	0x1f
003b12   010f     movlb	0xf                	BANKSEL	_tsec
003b14   5d49     subwf	0x49, 0, 0x1       	SUBWF	_tsec, W, B
003b16   e20f     bc	0x3b36                	BC	_00221_DS_
003b18   010f     movlb	0xf                	BANKSEL	_stop_ringing
003b1a   5150     movf	0x50, 0, 0x1        	MOVF	_stop_ringing, W, B
003b1c   e10c     bnz	0x3b36               	BNZ	_00221_DS_
003b1e   010f     movlb	0xf                	BANKSEL	_whereami
                                           ;	.line	306; reveil.c	if (whereami == DISPLAY || whereami == SNOOZE)
003b20   5151     movf	0x51, 0, 0x1        	MOVF	_whereami, W, B
003b22   0a09     xorlw	0x9                	XORLW	0x09
003b24   e004     bz	0x3b2e                	BZ	_00210_DS_
                                           _00245_DS_:
003b26   010f     movlb	0xf                	BANKSEL	_whereami
003b28   5151     movf	0x51, 0, 0x1        	MOVF	_whereami, W, B
003b2a   0a0b     xorlw	0xb                	XORLW	0x0b
003b2c   e120     bnz	0x3b6e               	BNZ	_00228_DS_
                                           _00210_DS_:
                                           ;	.line	307; reveil.c	whereami = ALARM;
003b2e   0e0a     movlw	0xa                	MOVLW	0x0a
003b30   010f     movlb	0xf                	BANKSEL	_whereami
003b32   6f51     movwf	0x51, 0x1          	MOVWF	_whereami, B
003b34   d01c     bra	0x3b6e               	BRA	_00228_DS_
                                           _00221_DS_:
                                           ;	.line	310; reveil.c	} else if (tsec > 30) {
003b36   0e1f     movlw	0x1f               	MOVLW	0x1f
003b38   010f     movlb	0xf                	BANKSEL	_tsec
003b3a   5d49     subwf	0x49, 0, 0x1       	SUBWF	_tsec, W, B
003b3c   e318     bnc	0x3b6e               	BNC	_00228_DS_
003b3e   010f     movlb	0xf                	BANKSEL	_stop_ringing
                                           ;	.line	311; reveil.c	stop_ringing = 0; // l'alarme doit sonner à nouveau dans 24h
003b40   6b50     clrf	0x50, 0x1           	CLRF	_stop_ringing, B
                                           ;	.line	312; reveil.c	LATJbits.LATJ1 = 0; // switch LED 2 off
003b42   9291     bcf	0x91, 0x1, 0         	BCF	_LATJbits, 1
                                           ;	.line	313; reveil.c	LATJbits.LATJ2 = 0; // switch LED 3 off
003b44   9491     bcf	0x91, 0x2, 0         	BCF	_LATJbits, 2
003b46   010f     movlb	0xf                	BANKSEL	_snooze
                                           ;	.line	316; reveil.c	if (snooze) {
003b48   514f     movf	0x4f, 0, 0x1        	MOVF	_snooze, W, B
003b4a   e00a     bz	0x3b60                	BZ	_00216_DS_
                                           ;	.line	317; reveil.c	ahour = ahour_o; // remet le réveil à l'heure d'origine
003b4c   cf4c     movff	0xf4c, 0xf4a       	MOVFF	_ahour_o, _ahour
003b4e   ff4a
                                           ;	.line	318; reveil.c	amin = amin_o;
003b50   cf4d     movff	0xf4d, 0xf4b       	MOVFF	_amin_o, _amin
003b52   ff4b
003b54   010f     movlb	0xf                	BANKSEL	_snooze
                                           ;	.line	319; reveil.c	snooze = 0;
003b56   6b4f     clrf	0x4f, 0x1           	CLRF	_snooze, B
                                           ;	.line	320; reveil.c	whereami = DISPLAY;
003b58   0e09     movlw	0x9                	MOVLW	0x09
003b5a   010f     movlb	0xf                	BANKSEL	_whereami
003b5c   6f51     movwf	0x51, 0x1          	MOVWF	_whereami, B
003b5e   d007     bra	0x3b6e               	BRA	_00228_DS_
                                           _00216_DS_:
003b60   010f     movlb	0xf                	BANKSEL	_whereami
                                           ;	.line	321; reveil.c	} else if (whereami == ALARM) // si l'alarme sonnait toujours, on
003b62   5151     movf	0x51, 0, 0x1        	MOVF	_whereami, W, B
003b64   0a0a     xorlw	0xa                	XORLW	0x0a
003b66   e103     bnz	0x3b6e               	BNZ	_00228_DS_
                                           ;	.line	322; reveil.c	whereami = DISPLAY;       // revient à l'affichage de l'heure
003b68   0e09     movlw	0x9                	MOVLW	0x09
003b6a   010f     movlb	0xf                	BANKSEL	_whereami
003b6c   6f51     movwf	0x51, 0x1          	MOVWF	_whereami, B
                                           _00228_DS_:
003b6e   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
003b70   ffd9
003b72   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_reveil__refresh_lcd	code
                                           _refresh_lcd:
                                           ;	.line	233; reveil.c	void refresh_lcd(void)
000852   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000854   ffe5
000856   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000858   ffd9
00085a   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00085c   ffe5
00085e   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000860   ffe5
000862   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
000864   ffe5
000866   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
000868   ffe5
00086a   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00086c   ffe5
00086e   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
000870   ffe5
000872   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
000874   ffe5
000876   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
000878   ffe5
00087a   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
00087c   ffe5
00087e   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
000880   ffe5
000882   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
000884   ffe5
000886   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
000888   ffe5
00088a   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
00088c   ffe5
00088e   c00d     movff	0xd, 0xfe5         	MOVFF	r0x0d, POSTDEC1
000890   ffe5
000892   c00e     movff	0xe, 0xfe5         	MOVFF	r0x0e, POSTDEC1
000894   ffe5
                                           ;	.line	236; reveil.c	switch (whereami) {
000896   0e01     movlw	0x1                	MOVLW	0x01
000898   010f     movlb	0xf                	BANKSEL	_whereami
00089a   5d51     subwf	0x51, 0, 0x1       	SUBWF	_whereami, W, B
00089c   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
00089e   efd6     goto	0xdac               	GOTO	_00193_DS_
0008a0   f006
0008a2   0e0c     movlw	0xc                	MOVLW	0x0c
0008a4   010f     movlb	0xf                	BANKSEL	_whereami
0008a6   5d51     subwf	0x51, 0, 0x1       	SUBWF	_whereami, W, B
0008a8   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0008aa   efd6     goto	0xdac               	GOTO	_00193_DS_
0008ac   f006
0008ae   010f     movlb	0xf                	BANKSEL	_whereami
0008b0   0551     decf	0x51, 0, 0x1        	DECF	_whereami, W, B
0008b2   6e00     movwf	0, 0               	MOVWF	r0x00
0008b4   c00f     movff	0xf, 0xfe5         	MOVFF	r0x0f, POSTDEC1
0008b6   ffe5
0008b8   c010     movff	0x10, 0xfe5        	MOVFF	r0x10, POSTDEC1
0008ba   ffe5
0008bc   6a10     clrf	0x10, 0             	CLRF	r0x10
0008be   3400     rlcf	0, 0, 0             	RLCF	r0x00, W
0008c0   3610     rlcf	0x10, 0x1, 0        	RLCF	r0x10, F
0008c2   34e8     rlcf	0xe8, 0, 0          	RLCF	WREG, W
0008c4   3610     rlcf	0x10, 0x1, 0        	RLCF	r0x10, F
0008c6   0bfc     andlw	0xfc               	ANDLW	0xfc
0008c8   6e0f     movwf	0xf, 0             	MOVWF	r0x0f
0008ca   0e00     movlw	0                  	MOVLW	UPPER(_00204_DS_)
0008cc   6efb     movwf	0xfb, 0            	MOVWF	PCLATU
0008ce   0e08     movlw	0x8                	MOVLW	HIGH(_00204_DS_)
0008d0   6efa     movwf	0xfa, 0            	MOVWF	PCLATH
0008d2   0eea     movlw	0xea               	MOVLW	LOW(_00204_DS_)
0008d4   260f     addwf	0xf, 0x1, 0        	ADDWF	r0x0f, F
0008d6   5010     movf	0x10, 0, 0          	MOVF	r0x10, W
0008d8   22fa     addwfc	0xfa, 0x1, 0      	ADDWFC	PCLATH, F
0008da   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0008dc   2afb     incf	0xfb, 0x1, 0        	INCF	PCLATU, F
0008de   500f     movf	0xf, 0, 0           	MOVF	r0x0f, W
0008e0   cfe4     movff	0xfe4, 0x10        	MOVFF	PREINC1, r0x10
0008e2   f010
0008e4   cfe4     movff	0xfe4, 0xf         	MOVFF	PREINC1, r0x0f
0008e6   f00f
0008e8   6ef9     movwf	0xf9, 0            	MOVWF	PCL
                                           _00204_DS_:
0008ea   ef8b     goto	0x916               	GOTO	_00173_DS_
0008ec   f004
0008ee   efa3     goto	0x946               	GOTO	_00174_DS_
0008f0   f004
0008f2   efd0     goto	0x9a0               	GOTO	_00175_DS_
0008f4   f004
0008f6   effc     goto	0x9f8               	GOTO	_00176_DS_
0008f8   f004
0008fa   ef28     goto	0xa50               	GOTO	_00177_DS_
0008fc   f005
0008fe   ef3f     goto	0xa7e               	GOTO	_00178_DS_
000900   f005
000902   ef70     goto	0xae0               	GOTO	_00182_DS_
000904   f005
000906   ef95     goto	0xb2a               	GOTO	_00183_DS_
000908   f005
00090a   efba     goto	0xb74               	GOTO	_00184_DS_
00090c   f005
00090e   ef23     goto	0xc46               	GOTO	_00188_DS_
000910   f006
000912   ef4f     goto	0xc9e               	GOTO	_00189_DS_
000914   f006
                                           _00173_DS_:
                                           ;	.line	238; reveil.c	sprintf(display, "Do you want to  set the time ?  ");
000916   0e0f     movlw	0xf                	MOVLW	HIGH(_display)
000918   6e01     movwf	0x1, 0             	MOVWF	r0x01
00091a   0e21     movlw	0x21               	MOVLW	LOW(_display)
00091c   6e00     movwf	0, 0               	MOVWF	r0x00
00091e   0e80     movlw	0x80               	MOVLW	0x80
000920   6e02     movwf	0x2, 0             	MOVWF	r0x02
000922   0e00     movlw	0                  	MOVLW	UPPER(__str_0)
000924   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000926   0e1e     movlw	0x1e               	MOVLW	HIGH(__str_0)
000928   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00092a   0ea6     movlw	0xa6               	MOVLW	LOW(__str_0)
00092c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00092e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000930   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000932   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000934   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000936   5000     movf	0, 0, 0             	MOVF	r0x00, W
000938   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00093a   ecb4     call	0x3368, 0           	CALL	_sprintf
00093c   f019
00093e   0e06     movlw	0x6                	MOVLW	0x06
000940   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	239; reveil.c	break;
000942   efec     goto	0xdd8               	GOTO	_00194_DS_
000944   f006
                                           _00174_DS_:
                                           ;	.line	242; reveil.c	thour, tmin, tsec);
000946   cf49     movff	0xf49, 0           	MOVFF	_tsec, r0x00
000948   f000
00094a   6a01     clrf	0x1, 0              	CLRF	r0x01
00094c   cf48     movff	0xf48, 0x2         	MOVFF	_tmin, r0x02
00094e   f002
000950   6a03     clrf	0x3, 0              	CLRF	r0x03
000952   cf47     movff	0xf47, 0x4         	MOVFF	_thour, r0x04
000954   f004
000956   6a05     clrf	0x5, 0              	CLRF	r0x05
                                           ;	.line	241; reveil.c	sprintf(display, " [%02u]: %02u : %02u                  ",
000958   0e0f     movlw	0xf                	MOVLW	HIGH(_display)
00095a   6e07     movwf	0x7, 0             	MOVWF	r0x07
00095c   0e21     movlw	0x21               	MOVLW	LOW(_display)
00095e   6e06     movwf	0x6, 0             	MOVWF	r0x06
000960   0e80     movlw	0x80               	MOVLW	0x80
000962   6e08     movwf	0x8, 0             	MOVWF	r0x08
000964   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000966   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000968   5000     movf	0, 0, 0             	MOVF	r0x00, W
00096a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00096c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00096e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000970   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000972   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000974   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000976   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000978   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00097a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00097c   0e00     movlw	0                  	MOVLW	UPPER(__str_1)
00097e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000980   0e1e     movlw	0x1e               	MOVLW	HIGH(__str_1)
000982   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000984   0ec8     movlw	0xc8               	MOVLW	LOW(__str_1)
000986   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000988   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
00098a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00098c   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
00098e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000990   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000992   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000994   ecb4     call	0x3368, 0           	CALL	_sprintf
000996   f019
000998   0e0c     movlw	0xc                	MOVLW	0x0c
00099a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	243; reveil.c	break;
00099c   efec     goto	0xdd8               	GOTO	_00194_DS_
00099e   f006
                                           _00175_DS_:
                                           ;	.line	246; reveil.c	thour, tmin, tsec);
0009a0   cf49     movff	0xf49, 0           	MOVFF	_tsec, r0x00
0009a2   f000
0009a4   6a01     clrf	0x1, 0              	CLRF	r0x01
0009a6   cf48     movff	0xf48, 0x2         	MOVFF	_tmin, r0x02
0009a8   f002
0009aa   6a03     clrf	0x3, 0              	CLRF	r0x03
0009ac   cf47     movff	0xf47, 0x4         	MOVFF	_thour, r0x04
0009ae   f004
0009b0   6a05     clrf	0x5, 0              	CLRF	r0x05
                                           ;	.line	245; reveil.c	sprintf(display, "  %02u :[%02u]: %02u                  ",
0009b2   0e0f     movlw	0xf                	MOVLW	HIGH(_display)
0009b4   6e07     movwf	0x7, 0             	MOVWF	r0x07
0009b6   0e21     movlw	0x21               	MOVLW	LOW(_display)
0009b8   6e06     movwf	0x6, 0             	MOVWF	r0x06
0009ba   0e80     movlw	0x80               	MOVLW	0x80
0009bc   6e08     movwf	0x8, 0             	MOVWF	r0x08
0009be   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0009c0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0009c2   5000     movf	0, 0, 0             	MOVF	r0x00, W
0009c4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0009c6   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0009c8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0009ca   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0009cc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0009ce   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0009d0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0009d2   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0009d4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0009d6   0e00     movlw	0                  	MOVLW	UPPER(__str_2)
0009d8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0009da   0e1e     movlw	0x1e               	MOVLW	HIGH(__str_2)
0009dc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0009de   0ef0     movlw	0xf0               	MOVLW	LOW(__str_2)
0009e0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0009e2   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
0009e4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0009e6   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0009e8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0009ea   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0009ec   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0009ee   ecb4     call	0x3368, 0           	CALL	_sprintf
0009f0   f019
0009f2   0e0c     movlw	0xc                	MOVLW	0x0c
0009f4   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	247; reveil.c	break;
0009f6   d1f0     bra	0xdd8                	BRA	_00194_DS_
                                           _00176_DS_:
                                           ;	.line	250; reveil.c	thour, tmin, tsec);
0009f8   cf49     movff	0xf49, 0           	MOVFF	_tsec, r0x00
0009fa   f000
0009fc   6a01     clrf	0x1, 0              	CLRF	r0x01
0009fe   cf48     movff	0xf48, 0x2         	MOVFF	_tmin, r0x02
000a00   f002
000a02   6a03     clrf	0x3, 0              	CLRF	r0x03
000a04   cf47     movff	0xf47, 0x4         	MOVFF	_thour, r0x04
000a06   f004
000a08   6a05     clrf	0x5, 0              	CLRF	r0x05
                                           ;	.line	249; reveil.c	sprintf(display, "  %02u : %02u :[%02u]                 ",
000a0a   0e0f     movlw	0xf                	MOVLW	HIGH(_display)
000a0c   6e07     movwf	0x7, 0             	MOVWF	r0x07
000a0e   0e21     movlw	0x21               	MOVLW	LOW(_display)
000a10   6e06     movwf	0x6, 0             	MOVWF	r0x06
000a12   0e80     movlw	0x80               	MOVLW	0x80
000a14   6e08     movwf	0x8, 0             	MOVWF	r0x08
000a16   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000a18   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a1a   5000     movf	0, 0, 0             	MOVF	r0x00, W
000a1c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a1e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000a20   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a22   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000a24   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a26   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000a28   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a2a   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000a2c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a2e   0e00     movlw	0                  	MOVLW	UPPER(__str_3)
000a30   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a32   0e1f     movlw	0x1f               	MOVLW	HIGH(__str_3)
000a34   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a36   0e18     movlw	0x18               	MOVLW	LOW(__str_3)
000a38   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a3a   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
000a3c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a3e   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
000a40   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a42   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000a44   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a46   ecb4     call	0x3368, 0           	CALL	_sprintf
000a48   f019
000a4a   0e0c     movlw	0xc                	MOVLW	0x0c
000a4c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	251; reveil.c	break;
000a4e   d1c4     bra	0xdd8                	BRA	_00194_DS_
                                           _00177_DS_:
                                           ;	.line	253; reveil.c	sprintf(display, "Do you want to  set the alarm ? ");
000a50   0e0f     movlw	0xf                	MOVLW	HIGH(_display)
000a52   6e01     movwf	0x1, 0             	MOVWF	r0x01
000a54   0e21     movlw	0x21               	MOVLW	LOW(_display)
000a56   6e00     movwf	0, 0               	MOVWF	r0x00
000a58   0e80     movlw	0x80               	MOVLW	0x80
000a5a   6e02     movwf	0x2, 0             	MOVWF	r0x02
000a5c   0e00     movlw	0                  	MOVLW	UPPER(__str_4)
000a5e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a60   0e1f     movlw	0x1f               	MOVLW	HIGH(__str_4)
000a62   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a64   0e40     movlw	0x40               	MOVLW	LOW(__str_4)
000a66   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a68   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000a6a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a6c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000a6e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a70   5000     movf	0, 0, 0             	MOVF	r0x00, W
000a72   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a74   ecb4     call	0x3368, 0           	CALL	_sprintf
000a76   f019
000a78   0e06     movlw	0x6                	MOVLW	0x06
000a7a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	254; reveil.c	break;
000a7c   d1ad     bra	0xdd8                	BRA	_00194_DS_
                                           _00178_DS_:
000a7e   010f     movlb	0xf                	BANKSEL	_alarm_set
                                           ;	.line	256; reveil.c	if (alarm_set)
000a80   514e     movf	0x4e, 0, 0x1        	MOVF	_alarm_set, W, B
000a82   e017     bz	0xab2                 	BZ	_00180_DS_
                                           ;	.line	257; reveil.c	sprintf(display, "  Alarm [ON ]                   ");
000a84   0e0f     movlw	0xf                	MOVLW	HIGH(_display)
000a86   6e01     movwf	0x1, 0             	MOVWF	r0x01
000a88   0e21     movlw	0x21               	MOVLW	LOW(_display)
000a8a   6e00     movwf	0, 0               	MOVWF	r0x00
000a8c   0e80     movlw	0x80               	MOVLW	0x80
000a8e   6e02     movwf	0x2, 0             	MOVWF	r0x02
000a90   0e00     movlw	0                  	MOVLW	UPPER(__str_5)
000a92   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a94   0e1f     movlw	0x1f               	MOVLW	HIGH(__str_5)
000a96   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a98   0e62     movlw	0x62               	MOVLW	LOW(__str_5)
000a9a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a9c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000a9e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000aa0   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000aa2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000aa4   5000     movf	0, 0, 0             	MOVF	r0x00, W
000aa6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000aa8   ecb4     call	0x3368, 0           	CALL	_sprintf
000aaa   f019
000aac   0e06     movlw	0x6                	MOVLW	0x06
000aae   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000ab0   d193     bra	0xdd8                	BRA	_00194_DS_
                                           _00180_DS_:
                                           ;	.line	259; reveil.c	sprintf(display, "  Alarm [OFF]                   ");
000ab2   0e0f     movlw	0xf                	MOVLW	HIGH(_display)
000ab4   6e01     movwf	0x1, 0             	MOVWF	r0x01
000ab6   0e21     movlw	0x21               	MOVLW	LOW(_display)
000ab8   6e00     movwf	0, 0               	MOVWF	r0x00
000aba   0e80     movlw	0x80               	MOVLW	0x80
000abc   6e02     movwf	0x2, 0             	MOVWF	r0x02
000abe   0e00     movlw	0                  	MOVLW	UPPER(__str_6)
000ac0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ac2   0e1f     movlw	0x1f               	MOVLW	HIGH(__str_6)
000ac4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ac6   0e84     movlw	0x84               	MOVLW	LOW(__str_6)
000ac8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000aca   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000acc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ace   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000ad0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ad2   5000     movf	0, 0, 0             	MOVF	r0x00, W
000ad4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ad6   ecb4     call	0x3368, 0           	CALL	_sprintf
000ad8   f019
000ada   0e06     movlw	0x6                	MOVLW	0x06
000adc   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	260; reveil.c	break;
000ade   d17c     bra	0xdd8                	BRA	_00194_DS_
                                           _00182_DS_:
                                           ;	.line	263; reveil.c	ahour, amin);
000ae0   cf4b     movff	0xf4b, 0           	MOVFF	_amin, r0x00
000ae2   f000
000ae4   6a01     clrf	0x1, 0              	CLRF	r0x01
000ae6   cf4a     movff	0xf4a, 0x2         	MOVFF	_ahour, r0x02
000ae8   f002
000aea   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           ;	.line	262; reveil.c	sprintf(display, "    Alarm at        [%02u]: %02u    ",
000aec   0e0f     movlw	0xf                	MOVLW	HIGH(_display)
000aee   6e05     movwf	0x5, 0             	MOVWF	r0x05
000af0   0e21     movlw	0x21               	MOVLW	LOW(_display)
000af2   6e04     movwf	0x4, 0             	MOVWF	r0x04
000af4   0e80     movlw	0x80               	MOVLW	0x80
000af6   6e06     movwf	0x6, 0             	MOVWF	r0x06
000af8   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000afa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000afc   5000     movf	0, 0, 0             	MOVF	r0x00, W
000afe   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b00   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000b02   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b04   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000b06   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b08   0e00     movlw	0                  	MOVLW	UPPER(__str_7)
000b0a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b0c   0e1f     movlw	0x1f               	MOVLW	HIGH(__str_7)
000b0e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b10   0ea6     movlw	0xa6               	MOVLW	LOW(__str_7)
000b12   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b14   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000b16   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b18   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000b1a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b1c   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000b1e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b20   ecb4     call	0x3368, 0           	CALL	_sprintf
000b22   f019
000b24   0e0a     movlw	0xa                	MOVLW	0x0a
000b26   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	264; reveil.c	break;
000b28   d157     bra	0xdd8                	BRA	_00194_DS_
                                           _00183_DS_:
                                           ;	.line	267; reveil.c	ahour, amin);
000b2a   cf4b     movff	0xf4b, 0           	MOVFF	_amin, r0x00
000b2c   f000
000b2e   6a01     clrf	0x1, 0              	CLRF	r0x01
000b30   cf4a     movff	0xf4a, 0x2         	MOVFF	_ahour, r0x02
000b32   f002
000b34   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           ;	.line	266; reveil.c	sprintf(display, "    Alarm at         %02u :[%02u]   ",
000b36   0e0f     movlw	0xf                	MOVLW	HIGH(_display)
000b38   6e05     movwf	0x5, 0             	MOVWF	r0x05
000b3a   0e21     movlw	0x21               	MOVLW	LOW(_display)
000b3c   6e04     movwf	0x4, 0             	MOVWF	r0x04
000b3e   0e80     movlw	0x80               	MOVLW	0x80
000b40   6e06     movwf	0x6, 0             	MOVWF	r0x06
000b42   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000b44   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b46   5000     movf	0, 0, 0             	MOVF	r0x00, W
000b48   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b4a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000b4c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b4e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000b50   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b52   0e00     movlw	0                  	MOVLW	UPPER(__str_8)
000b54   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b56   0e1f     movlw	0x1f               	MOVLW	HIGH(__str_8)
000b58   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b5a   0ecc     movlw	0xcc               	MOVLW	LOW(__str_8)
000b5c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b5e   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000b60   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b62   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000b64   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b66   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000b68   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b6a   ecb4     call	0x3368, 0           	CALL	_sprintf
000b6c   f019
000b6e   0e0a     movlw	0xa                	MOVLW	0x0a
000b70   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	268; reveil.c	break;
000b72   d132     bra	0xdd8                	BRA	_00194_DS_
                                           _00184_DS_:
000b74   010f     movlb	0xf                	BANKSEL	_alarm_set
                                           ;	.line	270; reveil.c	if (alarm_set)
000b76   514e     movf	0x4e, 0, 0x1        	MOVF	_alarm_set, W, B
000b78   e03a     bz	0xbee                 	BZ	_00186_DS_
                                           ;	.line	272; reveil.c	thour, tmin, tsec, ahour, amin);
000b7a   cf4b     movff	0xf4b, 0           	MOVFF	_amin, r0x00
000b7c   f000
000b7e   6a01     clrf	0x1, 0              	CLRF	r0x01
000b80   cf4a     movff	0xf4a, 0x2         	MOVFF	_ahour, r0x02
000b82   f002
000b84   6a03     clrf	0x3, 0              	CLRF	r0x03
000b86   cf49     movff	0xf49, 0x4         	MOVFF	_tsec, r0x04
000b88   f004
000b8a   6a05     clrf	0x5, 0              	CLRF	r0x05
000b8c   cf48     movff	0xf48, 0x6         	MOVFF	_tmin, r0x06
000b8e   f006
000b90   6a07     clrf	0x7, 0              	CLRF	r0x07
000b92   cf47     movff	0xf47, 0x8         	MOVFF	_thour, r0x08
000b94   f008
000b96   6a09     clrf	0x9, 0              	CLRF	r0x09
                                           ;	.line	271; reveil.c	sprintf(display, "    %02u:%02u:%02u    Alarm ON  %02u:%02u ",
000b98   0e0f     movlw	0xf                	MOVLW	HIGH(_display)
000b9a   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
000b9c   0e21     movlw	0x21               	MOVLW	LOW(_display)
000b9e   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
000ba0   0e80     movlw	0x80               	MOVLW	0x80
000ba2   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
000ba4   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000ba6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ba8   5000     movf	0, 0, 0             	MOVF	r0x00, W
000baa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000bac   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000bae   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000bb0   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000bb2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000bb4   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000bb6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000bb8   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000bba   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000bbc   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
000bbe   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000bc0   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000bc2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000bc4   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
000bc6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000bc8   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
000bca   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000bcc   0e00     movlw	0                  	MOVLW	UPPER(__str_9)
000bce   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000bd0   0e1f     movlw	0x1f               	MOVLW	HIGH(__str_9)
000bd2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000bd4   0ef2     movlw	0xf2               	MOVLW	LOW(__str_9)
000bd6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000bd8   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
000bda   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000bdc   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
000bde   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000be0   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
000be2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000be4   ecb4     call	0x3368, 0           	CALL	_sprintf
000be6   f019
000be8   0e10     movlw	0x10               	MOVLW	0x10
000bea   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000bec   d0f5     bra	0xdd8                	BRA	_00194_DS_
                                           _00186_DS_:
                                           ;	.line	275; reveil.c	thour, tmin, tsec);
000bee   cf49     movff	0xf49, 0           	MOVFF	_tsec, r0x00
000bf0   f000
000bf2   6a01     clrf	0x1, 0              	CLRF	r0x01
000bf4   cf48     movff	0xf48, 0x2         	MOVFF	_tmin, r0x02
000bf6   f002
000bf8   6a03     clrf	0x3, 0              	CLRF	r0x03
000bfa   cf47     movff	0xf47, 0x4         	MOVFF	_thour, r0x04
000bfc   f004
000bfe   6a05     clrf	0x5, 0              	CLRF	r0x05
                                           ;	.line	274; reveil.c	sprintf(display, "    %02u:%02u:%02u       Alarm  OFF   ",
000c00   0e0f     movlw	0xf                	MOVLW	HIGH(_display)
000c02   6e07     movwf	0x7, 0             	MOVWF	r0x07
000c04   0e21     movlw	0x21               	MOVLW	LOW(_display)
000c06   6e06     movwf	0x6, 0             	MOVWF	r0x06
000c08   0e80     movlw	0x80               	MOVLW	0x80
000c0a   6e08     movwf	0x8, 0             	MOVWF	r0x08
000c0c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000c0e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c10   5000     movf	0, 0, 0             	MOVF	r0x00, W
000c12   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c14   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000c16   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c18   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000c1a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c1c   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000c1e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c20   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000c22   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c24   0e00     movlw	0                  	MOVLW	UPPER(__str_10)
000c26   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c28   0e20     movlw	0x20               	MOVLW	HIGH(__str_10)
000c2a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c2c   0e1e     movlw	0x1e               	MOVLW	LOW(__str_10)
000c2e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c30   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
000c32   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c34   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
000c36   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c38   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000c3a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c3c   ecb4     call	0x3368, 0           	CALL	_sprintf
000c3e   f019
000c40   0e0c     movlw	0xc                	MOVLW	0x0c
000c42   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	276; reveil.c	break;
000c44   d0c9     bra	0xdd8                	BRA	_00194_DS_
                                           _00188_DS_:
                                           ;	.line	279; reveil.c	thour, tmin, tsec);
000c46   cf49     movff	0xf49, 0           	MOVFF	_tsec, r0x00
000c48   f000
000c4a   6a01     clrf	0x1, 0              	CLRF	r0x01
000c4c   cf48     movff	0xf48, 0x2         	MOVFF	_tmin, r0x02
000c4e   f002
000c50   6a03     clrf	0x3, 0              	CLRF	r0x03
000c52   cf47     movff	0xf47, 0x4         	MOVFF	_thour, r0x04
000c54   f004
000c56   6a05     clrf	0x5, 0              	CLRF	r0x05
                                           ;	.line	278; reveil.c	sprintf(display, "    %02u:%02u:%02u      I am ringing! ",
000c58   0e0f     movlw	0xf                	MOVLW	HIGH(_display)
000c5a   6e07     movwf	0x7, 0             	MOVWF	r0x07
000c5c   0e21     movlw	0x21               	MOVLW	LOW(_display)
000c5e   6e06     movwf	0x6, 0             	MOVWF	r0x06
000c60   0e80     movlw	0x80               	MOVLW	0x80
000c62   6e08     movwf	0x8, 0             	MOVWF	r0x08
000c64   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000c66   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c68   5000     movf	0, 0, 0             	MOVF	r0x00, W
000c6a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c6c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000c6e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c70   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000c72   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c74   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000c76   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c78   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000c7a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c7c   0e00     movlw	0                  	MOVLW	UPPER(__str_11)
000c7e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c80   0e20     movlw	0x20               	MOVLW	HIGH(__str_11)
000c82   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c84   0e46     movlw	0x46               	MOVLW	LOW(__str_11)
000c86   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c88   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
000c8a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c8c   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
000c8e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c90   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000c92   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c94   ecb4     call	0x3368, 0           	CALL	_sprintf
000c96   f019
000c98   0e0c     movlw	0xc                	MOVLW	0x0c
000c9a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	280; reveil.c	break;
000c9c   d09d     bra	0xdd8                	BRA	_00194_DS_
                                           _00189_DS_:
                                           ;	.line	282; reveil.c	if (snooze < 10)
000c9e   0e0a     movlw	0xa                	MOVLW	0x0a
000ca0   010f     movlb	0xf                	BANKSEL	_snooze
000ca2   5d4f     subwf	0x4f, 0, 0x1       	SUBWF	_snooze, W, B
000ca4   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000ca6   d041     bra	0xd2a                	BRA	_00191_DS_
                                           ;	.line	284; reveil.c	thour, tmin, tsec, snooze, ahour_o, amin_o);
000ca8   cf4d     movff	0xf4d, 0           	MOVFF	_amin_o, r0x00
000caa   f000
000cac   6a01     clrf	0x1, 0              	CLRF	r0x01
000cae   cf4c     movff	0xf4c, 0x2         	MOVFF	_ahour_o, r0x02
000cb0   f002
000cb2   6a03     clrf	0x3, 0              	CLRF	r0x03
000cb4   cf4f     movff	0xf4f, 0x4         	MOVFF	_snooze, r0x04
000cb6   f004
000cb8   6a05     clrf	0x5, 0              	CLRF	r0x05
000cba   cf49     movff	0xf49, 0x6         	MOVFF	_tsec, r0x06
000cbc   f006
000cbe   6a07     clrf	0x7, 0              	CLRF	r0x07
000cc0   cf48     movff	0xf48, 0x8         	MOVFF	_tmin, r0x08
000cc2   f008
000cc4   6a09     clrf	0x9, 0              	CLRF	r0x09
000cc6   cf47     movff	0xf47, 0xa         	MOVFF	_thour, r0x0a
000cc8   f00a
000cca   6a0b     clrf	0xb, 0              	CLRF	r0x0b
                                           ;	.line	283; reveil.c	sprintf(display, "    %02u:%02u:%02u    Snooze %u  %02u:%02u ",
000ccc   0e0f     movlw	0xf                	MOVLW	HIGH(_display)
000cce   6e0d     movwf	0xd, 0             	MOVWF	r0x0d
000cd0   0e21     movlw	0x21               	MOVLW	LOW(_display)
000cd2   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
000cd4   0e80     movlw	0x80               	MOVLW	0x80
000cd6   6e0e     movwf	0xe, 0             	MOVWF	r0x0e
000cd8   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000cda   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000cdc   5000     movf	0, 0, 0             	MOVF	r0x00, W
000cde   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ce0   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000ce2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ce4   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000ce6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ce8   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000cea   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000cec   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000cee   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000cf0   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
000cf2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000cf4   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000cf6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000cf8   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
000cfa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000cfc   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
000cfe   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d00   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
000d02   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d04   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
000d06   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d08   0e00     movlw	0                  	MOVLW	UPPER(__str_12)
000d0a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d0c   0e20     movlw	0x20               	MOVLW	HIGH(__str_12)
000d0e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d10   0e6e     movlw	0x6e               	MOVLW	LOW(__str_12)
000d12   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d14   500e     movf	0xe, 0, 0           	MOVF	r0x0e, W
000d16   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d18   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
000d1a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d1c   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
000d1e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d20   ecb4     call	0x3368, 0           	CALL	_sprintf
000d22   f019
000d24   0e12     movlw	0x12               	MOVLW	0x12
000d26   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000d28   d057     bra	0xdd8                	BRA	_00194_DS_
                                           _00191_DS_:
                                           ;	.line	287; reveil.c	thour, tmin, tsec, snooze, ahour_o, amin_o);
000d2a   cf4d     movff	0xf4d, 0           	MOVFF	_amin_o, r0x00
000d2c   f000
000d2e   6a01     clrf	0x1, 0              	CLRF	r0x01
000d30   cf4c     movff	0xf4c, 0x2         	MOVFF	_ahour_o, r0x02
000d32   f002
000d34   6a03     clrf	0x3, 0              	CLRF	r0x03
000d36   cf4f     movff	0xf4f, 0x4         	MOVFF	_snooze, r0x04
000d38   f004
000d3a   6a05     clrf	0x5, 0              	CLRF	r0x05
000d3c   cf49     movff	0xf49, 0x6         	MOVFF	_tsec, r0x06
000d3e   f006
000d40   6a07     clrf	0x7, 0              	CLRF	r0x07
000d42   cf48     movff	0xf48, 0x8         	MOVFF	_tmin, r0x08
000d44   f008
000d46   6a09     clrf	0x9, 0              	CLRF	r0x09
000d48   cf47     movff	0xf47, 0xa         	MOVFF	_thour, r0x0a
000d4a   f00a
000d4c   6a0b     clrf	0xb, 0              	CLRF	r0x0b
                                           ;	.line	286; reveil.c	sprintf(display, "    %02u:%02u:%02u    Snooze %u %02u:%02u ",
000d4e   0e0f     movlw	0xf                	MOVLW	HIGH(_display)
000d50   6e0d     movwf	0xd, 0             	MOVWF	r0x0d
000d52   0e21     movlw	0x21               	MOVLW	LOW(_display)
000d54   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
000d56   0e80     movlw	0x80               	MOVLW	0x80
000d58   6e0e     movwf	0xe, 0             	MOVWF	r0x0e
000d5a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000d5c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d5e   5000     movf	0, 0, 0             	MOVF	r0x00, W
000d60   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d62   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000d64   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d66   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000d68   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d6a   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000d6c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d6e   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000d70   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d72   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
000d74   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d76   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000d78   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d7a   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
000d7c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d7e   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
000d80   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d82   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
000d84   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d86   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
000d88   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d8a   0e00     movlw	0                  	MOVLW	UPPER(__str_13)
000d8c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d8e   0e20     movlw	0x20               	MOVLW	HIGH(__str_13)
000d90   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d92   0e9a     movlw	0x9a               	MOVLW	LOW(__str_13)
000d94   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d96   500e     movf	0xe, 0, 0           	MOVF	r0x0e, W
000d98   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d9a   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
000d9c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d9e   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
000da0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000da2   ecb4     call	0x3368, 0           	CALL	_sprintf
000da4   f019
000da6   0e12     movlw	0x12               	MOVLW	0x12
000da8   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	288; reveil.c	break;
000daa   d016     bra	0xdd8                	BRA	_00194_DS_
                                           _00193_DS_:
                                           ;	.line	290; reveil.c	sprintf(display, "**** ERROR ********* ERROR *****");
000dac   0e0f     movlw	0xf                	MOVLW	HIGH(_display)
000dae   6e01     movwf	0x1, 0             	MOVWF	r0x01
000db0   0e21     movlw	0x21               	MOVLW	LOW(_display)
000db2   6e00     movwf	0, 0               	MOVWF	r0x00
000db4   0e80     movlw	0x80               	MOVLW	0x80
000db6   6e02     movwf	0x2, 0             	MOVWF	r0x02
000db8   0e00     movlw	0                  	MOVLW	UPPER(__str_14)
000dba   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000dbc   0e20     movlw	0x20               	MOVLW	HIGH(__str_14)
000dbe   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000dc0   0ec6     movlw	0xc6               	MOVLW	LOW(__str_14)
000dc2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000dc4   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000dc6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000dc8   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000dca   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000dcc   5000     movf	0, 0, 0             	MOVF	r0x00, W
000dce   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000dd0   ecb4     call	0x3368, 0           	CALL	_sprintf
000dd2   f019
000dd4   0e06     movlw	0x6                	MOVLW	0x06
000dd6   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00194_DS_:
                                           ;	.line	293; reveil.c	DisplayString(0, display);
000dd8   0e0f     movlw	0xf                	MOVLW	HIGH(_display)
000dda   6e01     movwf	0x1, 0             	MOVWF	r0x01
000ddc   0e21     movlw	0x21               	MOVLW	LOW(_display)
000dde   6e00     movwf	0, 0               	MOVWF	r0x00
000de0   0e80     movlw	0x80               	MOVLW	0x80
000de2   6e02     movwf	0x2, 0             	MOVWF	r0x02
000de4   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000de6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000de8   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000dea   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000dec   5000     movf	0, 0, 0             	MOVF	r0x00, W
000dee   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000df0   0e00     movlw	0                  	MOVLW	0x00
000df2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000df4   ec9b     call	0x3536, 0           	CALL	_DisplayString
000df6   f01a
000df8   0e04     movlw	0x4                	MOVLW	0x04
000dfa   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000dfc   cfe4     movff	0xfe4, 0xe         	MOVFF	PREINC1, r0x0e
000dfe   f00e
000e00   cfe4     movff	0xfe4, 0xd         	MOVFF	PREINC1, r0x0d
000e02   f00d
000e04   cfe4     movff	0xfe4, 0xc         	MOVFF	PREINC1, r0x0c
000e06   f00c
000e08   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
000e0a   f00b
000e0c   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
000e0e   f00a
000e10   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
000e12   f009
000e14   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
000e16   f008
000e18   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
000e1a   f007
000e1c   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
000e1e   f006
000e20   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
000e22   f005
000e24   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
000e26   f004
000e28   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
000e2a   f003
000e2c   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
000e2e   f002
000e30   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
000e32   f001
000e34   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000e36   f000
000e38   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000e3a   ffd9
000e3c   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_reveil__time	code
                                           _time:
                                           ;	.line	193; reveil.c	void time(void)
001782   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
001784   ffe5
001786   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001788   ffd9
00178a   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00178c   ffe5
00178e   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
001790   ffe5
001792   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
001794   ffe5
001796   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
001798   ffe5
00179a   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00179c   ffe5
00179e   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0017a0   ffe5
0017a2   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0017a4   ffe5
0017a6   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
0017a8   ffe5
0017aa   010f     movlb	0xf                	BANKSEL	(_overflows + 3)
                                           ;	.line	196; reveil.c	sec = overflows/F;
0017ac   5146     movf	0x46, 0, 0x1        	MOVF	(_overflows + 3), W, B
0017ae   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0017b0   010f     movlb	0xf                	BANKSEL	(_overflows + 2)
0017b2   5145     movf	0x45, 0, 0x1        	MOVF	(_overflows + 2), W, B
0017b4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0017b6   010f     movlb	0xf                	BANKSEL	(_overflows + 1)
0017b8   5144     movf	0x44, 0, 0x1        	MOVF	(_overflows + 1), W, B
0017ba   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0017bc   010f     movlb	0xf                	BANKSEL	_overflows
0017be   5143     movf	0x43, 0, 0x1        	MOVF	_overflows, W, B
0017c0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0017c2   ecbd     call	0x2b7a, 0           	CALL	___ulong2fs
0017c4   f015
0017c6   6e00     movwf	0, 0               	MOVWF	r0x00
0017c8   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
0017ca   f001
0017cc   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
0017ce   f002
0017d0   cfe9     movff	0xfe9, 0x3         	MOVFF	FSR0L, r0x03
0017d2   f003
0017d4   0e04     movlw	0x4                	MOVLW	0x04
0017d6   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0017d8   0e42     movlw	0x42               	MOVLW	0x42
0017da   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0017dc   0ebe     movlw	0xbe               	MOVLW	0xbe
0017de   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0017e0   0ebb     movlw	0xbb               	MOVLW	0xbb
0017e2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0017e4   0e2a     movlw	0x2a               	MOVLW	0x2a
0017e6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0017e8   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0017ea   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0017ec   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0017ee   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0017f0   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0017f2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0017f4   5000     movf	0, 0, 0             	MOVF	r0x00, W
0017f6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0017f8   ec80     call	0x1b00, 0           	CALL	___fsdiv
0017fa   f00d
0017fc   6e00     movwf	0, 0               	MOVWF	r0x00
0017fe   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
001800   f001
001802   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
001804   f002
001806   cfe9     movff	0xfe9, 0x3         	MOVFF	FSR0L, r0x03
001808   f003
00180a   0e08     movlw	0x8                	MOVLW	0x08
00180c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00180e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001810   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001812   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001814   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001816   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001818   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00181a   5000     movf	0, 0, 0             	MOVF	r0x00, W
00181c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00181e   ec3e     call	0x327c, 0           	CALL	___fs2ulong
001820   f019
001822   010f     movlb	0xf                	BANKSEL	_sec
001824   6f54     movwf	0x54, 0x1          	MOVWF	_sec, B
001826   cff3     movff	0xff3, 0xf55       	MOVFF	PRODL, (_sec + 1)
001828   ff55
00182a   cff4     movff	0xff4, 0xf56       	MOVFF	PRODH, (_sec + 2)
00182c   ff56
00182e   cfe9     movff	0xfe9, 0xf57       	MOVFF	FSR0L, (_sec + 3)
001830   ff57
001832   0e04     movlw	0x4                	MOVLW	0x04
001834   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
001836   010f     movlb	0xf                	BANKSEL	(_overflows + 3)
                                           ;	.line	197; reveil.c	decisec = ((10*overflows)/F);
001838   5146     movf	0x46, 0, 0x1        	MOVF	(_overflows + 3), W, B
00183a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00183c   010f     movlb	0xf                	BANKSEL	(_overflows + 2)
00183e   5145     movf	0x45, 0, 0x1        	MOVF	(_overflows + 2), W, B
001840   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001842   010f     movlb	0xf                	BANKSEL	(_overflows + 1)
001844   5144     movf	0x44, 0, 0x1        	MOVF	(_overflows + 1), W, B
001846   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001848   010f     movlb	0xf                	BANKSEL	_overflows
00184a   5143     movf	0x43, 0, 0x1        	MOVF	_overflows, W, B
00184c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00184e   0e00     movlw	0                  	MOVLW	0x00
001850   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001852   0e00     movlw	0                  	MOVLW	0x00
001854   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001856   0e00     movlw	0                  	MOVLW	0x00
001858   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00185a   0e0a     movlw	0xa                	MOVLW	0x0a
00185c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00185e   ecd7     call	0x25ae, 0           	CALL	__mullong
001860   f012
001862   6e00     movwf	0, 0               	MOVWF	r0x00
001864   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
001866   f001
001868   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
00186a   f002
00186c   cfe9     movff	0xfe9, 0x3         	MOVFF	FSR0L, r0x03
00186e   f003
001870   0e08     movlw	0x8                	MOVLW	0x08
001872   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
001874   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001876   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001878   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00187a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00187c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00187e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001880   5000     movf	0, 0, 0             	MOVF	r0x00, W
001882   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001884   ecbd     call	0x2b7a, 0           	CALL	___ulong2fs
001886   f015
001888   6e00     movwf	0, 0               	MOVWF	r0x00
00188a   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
00188c   f001
00188e   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
001890   f002
001892   cfe9     movff	0xfe9, 0x3         	MOVFF	FSR0L, r0x03
001894   f003
001896   0e04     movlw	0x4                	MOVLW	0x04
001898   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00189a   0e42     movlw	0x42               	MOVLW	0x42
00189c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00189e   0ebe     movlw	0xbe               	MOVLW	0xbe
0018a0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0018a2   0ebb     movlw	0xbb               	MOVLW	0xbb
0018a4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0018a6   0e2a     movlw	0x2a               	MOVLW	0x2a
0018a8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0018aa   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0018ac   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0018ae   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0018b0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0018b2   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0018b4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0018b6   5000     movf	0, 0, 0             	MOVF	r0x00, W
0018b8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0018ba   ec80     call	0x1b00, 0           	CALL	___fsdiv
0018bc   f00d
0018be   6e00     movwf	0, 0               	MOVWF	r0x00
0018c0   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
0018c2   f001
0018c4   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
0018c6   f002
0018c8   cfe9     movff	0xfe9, 0x3         	MOVFF	FSR0L, r0x03
0018ca   f003
0018cc   0e08     movlw	0x8                	MOVLW	0x08
0018ce   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0018d0   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0018d2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0018d4   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0018d6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0018d8   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0018da   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0018dc   5000     movf	0, 0, 0             	MOVF	r0x00, W
0018de   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0018e0   ec3e     call	0x327c, 0           	CALL	___fs2ulong
0018e2   f019
0018e4   010f     movlb	0xf                	BANKSEL	_decisec
0018e6   6f58     movwf	0x58, 0x1          	MOVWF	_decisec, B
0018e8   cff3     movff	0xff3, 0xf59       	MOVFF	PRODL, (_decisec + 1)
0018ea   ff59
0018ec   cff4     movff	0xff4, 0xf5a       	MOVFF	PRODH, (_decisec + 2)
0018ee   ff5a
0018f0   cfe9     movff	0xfe9, 0xf5b       	MOVFF	FSR0L, (_decisec + 3)
0018f2   ff5b
0018f4   0e04     movlw	0x4                	MOVLW	0x04
0018f6   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	198; reveil.c	ds = decisec%10;
0018f8   0e00     movlw	0                  	MOVLW	0x00
0018fa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0018fc   0e00     movlw	0                  	MOVLW	0x00
0018fe   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001900   0e00     movlw	0                  	MOVLW	0x00
001902   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001904   0e0a     movlw	0xa                	MOVLW	0x0a
001906   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001908   010f     movlb	0xf                	BANKSEL	(_decisec + 3)
00190a   515b     movf	0x5b, 0, 0x1        	MOVF	(_decisec + 3), W, B
00190c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00190e   010f     movlb	0xf                	BANKSEL	(_decisec + 2)
001910   515a     movf	0x5a, 0, 0x1        	MOVF	(_decisec + 2), W, B
001912   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001914   010f     movlb	0xf                	BANKSEL	(_decisec + 1)
001916   5159     movf	0x59, 0, 0x1        	MOVF	(_decisec + 1), W, B
001918   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00191a   010f     movlb	0xf                	BANKSEL	_decisec
00191c   5158     movf	0x58, 0, 0x1        	MOVF	_decisec, W, B
00191e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001920   ec25     call	0x2e4a, 0           	CALL	__modulong
001922   f017
001924   6e00     movwf	0, 0               	MOVWF	r0x00
001926   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
001928   f001
00192a   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
00192c   f002
00192e   cfe9     movff	0xfe9, 0x3         	MOVFF	FSR0L, r0x03
001930   f003
001932   0e08     movlw	0x8                	MOVLW	0x08
001934   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
001936   5000     movf	0, 0, 0             	MOVF	r0x00, W
001938   010e     movlb	0xe                	BANKSEL	_ds
00193a   6f60     movwf	0x60, 0x1          	MOVWF	_ds, B
                                           ;	.line	199; reveil.c	h = (sec/3600)%24;
00193c   0e00     movlw	0                  	MOVLW	0x00
00193e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001940   0e00     movlw	0                  	MOVLW	0x00
001942   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001944   0e0e     movlw	0xe                	MOVLW	0x0e
001946   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001948   0e10     movlw	0x10               	MOVLW	0x10
00194a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00194c   010f     movlb	0xf                	BANKSEL	(_sec + 3)
00194e   5157     movf	0x57, 0, 0x1        	MOVF	(_sec + 3), W, B
001950   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001952   010f     movlb	0xf                	BANKSEL	(_sec + 2)
001954   5156     movf	0x56, 0, 0x1        	MOVF	(_sec + 2), W, B
001956   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001958   010f     movlb	0xf                	BANKSEL	(_sec + 1)
00195a   5155     movf	0x55, 0, 0x1        	MOVF	(_sec + 1), W, B
00195c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00195e   010f     movlb	0xf                	BANKSEL	_sec
001960   5154     movf	0x54, 0, 0x1        	MOVF	_sec, W, B
001962   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001964   ecb7     call	0x2f6e, 0           	CALL	__divulong
001966   f017
001968   6e00     movwf	0, 0               	MOVWF	r0x00
00196a   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
00196c   f001
00196e   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
001970   f002
001972   cfe9     movff	0xfe9, 0x3         	MOVFF	FSR0L, r0x03
001974   f003
001976   0e08     movlw	0x8                	MOVLW	0x08
001978   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00197a   0e00     movlw	0                  	MOVLW	0x00
00197c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00197e   0e00     movlw	0                  	MOVLW	0x00
001980   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001982   0e00     movlw	0                  	MOVLW	0x00
001984   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001986   0e18     movlw	0x18               	MOVLW	0x18
001988   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00198a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00198c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00198e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001990   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001992   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001994   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001996   5000     movf	0, 0, 0             	MOVF	r0x00, W
001998   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00199a   ec25     call	0x2e4a, 0           	CALL	__modulong
00199c   f017
00199e   6e04     movwf	0x4, 0             	MOVWF	r0x04
0019a0   cff3     movff	0xff3, 0x5         	MOVFF	PRODL, r0x05
0019a2   f005
0019a4   cff4     movff	0xff4, 0x6         	MOVFF	PRODH, r0x06
0019a6   f006
0019a8   cfe9     movff	0xfe9, 0x7         	MOVFF	FSR0L, r0x07
0019aa   f007
0019ac   0e08     movlw	0x8                	MOVLW	0x08
0019ae   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0019b0   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0019b2   010e     movlb	0xe                	BANKSEL	_h
0019b4   6f61     movwf	0x61, 0x1          	MOVWF	_h, B
                                           ;	.line	200; reveil.c	m = (sec-(sec/3600)*3600)/60;
0019b6   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0019b8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0019ba   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0019bc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0019be   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0019c0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0019c2   5000     movf	0, 0, 0             	MOVF	r0x00, W
0019c4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0019c6   0e00     movlw	0                  	MOVLW	0x00
0019c8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0019ca   0e00     movlw	0                  	MOVLW	0x00
0019cc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0019ce   0e0e     movlw	0xe                	MOVLW	0x0e
0019d0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0019d2   0e10     movlw	0x10               	MOVLW	0x10
0019d4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0019d6   ecd7     call	0x25ae, 0           	CALL	__mullong
0019d8   f012
0019da   6e00     movwf	0, 0               	MOVWF	r0x00
0019dc   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
0019de   f001
0019e0   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
0019e2   f002
0019e4   cfe9     movff	0xfe9, 0x3         	MOVFF	FSR0L, r0x03
0019e6   f003
0019e8   0e08     movlw	0x8                	MOVLW	0x08
0019ea   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0019ec   5000     movf	0, 0, 0             	MOVF	r0x00, W
0019ee   010f     movlb	0xf                	BANKSEL	_sec
0019f0   5d54     subwf	0x54, 0, 0x1       	SUBWF	_sec, W, B
0019f2   6e00     movwf	0, 0               	MOVWF	r0x00
0019f4   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0019f6   010f     movlb	0xf                	BANKSEL	(_sec + 1)
0019f8   5955     subwfb	0x55, 0, 0x1      	SUBWFB	(_sec + 1), W, B
0019fa   6e01     movwf	0x1, 0             	MOVWF	r0x01
0019fc   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0019fe   010f     movlb	0xf                	BANKSEL	(_sec + 2)
001a00   5956     subwfb	0x56, 0, 0x1      	SUBWFB	(_sec + 2), W, B
001a02   6e02     movwf	0x2, 0             	MOVWF	r0x02
001a04   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001a06   010f     movlb	0xf                	BANKSEL	(_sec + 3)
001a08   5957     subwfb	0x57, 0, 0x1      	SUBWFB	(_sec + 3), W, B
001a0a   6e03     movwf	0x3, 0             	MOVWF	r0x03
001a0c   0e00     movlw	0                  	MOVLW	0x00
001a0e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001a10   0e00     movlw	0                  	MOVLW	0x00
001a12   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001a14   0e00     movlw	0                  	MOVLW	0x00
001a16   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001a18   0e3c     movlw	0x3c               	MOVLW	0x3c
001a1a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001a1c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001a1e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001a20   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001a22   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001a24   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001a26   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001a28   5000     movf	0, 0, 0             	MOVF	r0x00, W
001a2a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001a2c   ecb7     call	0x2f6e, 0           	CALL	__divulong
001a2e   f017
001a30   6e00     movwf	0, 0               	MOVWF	r0x00
001a32   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
001a34   f001
001a36   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
001a38   f002
001a3a   cfe9     movff	0xfe9, 0x3         	MOVFF	FSR0L, r0x03
001a3c   f003
001a3e   0e08     movlw	0x8                	MOVLW	0x08
001a40   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
001a42   5000     movf	0, 0, 0             	MOVF	r0x00, W
001a44   010e     movlb	0xe                	BANKSEL	_m
001a46   6f62     movwf	0x62, 0x1          	MOVWF	_m, B
001a48   010f     movlb	0xf                	BANKSEL	_sec
                                           ;	.line	201; reveil.c	s = sec-h*3600-m*60;
001a4a   5154     movf	0x54, 0, 0x1        	MOVF	_sec, W, B
001a4c   6e00     movwf	0, 0               	MOVWF	r0x00
                                           ; ;multiply lit val:0x10 by variable _h and store in r0x01
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
001a4e   010e     movlb	0xe                	BANKSEL	_h
001a50   5161     movf	0x61, 0, 0x1        	MOVF	_h, W, B
001a52   0d10     mullw	0x10               	MULLW	0x10
001a54   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
001a56   f001
001a58   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001a5a   5e00     subwf	0, 0x1, 0          	SUBWF	r0x00, F
                                           ; ;multiply lit val:0x3c by variable _m and store in r0x01
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
001a5c   010e     movlb	0xe                	BANKSEL	_m
001a5e   5162     movf	0x62, 0, 0x1        	MOVF	_m, W, B
001a60   0d3c     mullw	0x3c               	MULLW	0x3c
001a62   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
001a64   f001
001a66   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001a68   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
001a6a   010e     movlb	0xe                	BANKSEL	_s
001a6c   6f63     movwf	0x63, 0x1          	MOVWF	_s, B
001a6e   010f     movlb	0xf                	BANKSEL	_tsec
                                           ;	.line	204; reveil.c	if (tsec != s)
001a70   5149     movf	0x49, 0, 0x1        	MOVF	_tsec, W, B
001a72   010e     movlb	0xe                	BANKSEL	_s
001a74   1963     xorwf	0x63, 0, 0x1       	XORWF	_s, W, B
001a76   e002     bz	0x1a7c                	BZ	_00131_DS_
                                           ;	.line	205; reveil.c	tsec = s;
001a78   ce63     movff	0xe63, 0xf49       	MOVFF	_s, _tsec
001a7a   ff49
                                           _00131_DS_:
001a7c   010f     movlb	0xf                	BANKSEL	_tmin
                                           ;	.line	206; reveil.c	if (tmin != m)
001a7e   5148     movf	0x48, 0, 0x1        	MOVF	_tmin, W, B
001a80   010e     movlb	0xe                	BANKSEL	_m
001a82   1962     xorwf	0x62, 0, 0x1       	XORWF	_m, W, B
001a84   e002     bz	0x1a8a                	BZ	_00133_DS_
                                           ;	.line	207; reveil.c	tmin = m;
001a86   ce62     movff	0xe62, 0xf48       	MOVFF	_m, _tmin
001a88   ff48
                                           _00133_DS_:
001a8a   010f     movlb	0xf                	BANKSEL	_thour
                                           ;	.line	208; reveil.c	if (thour != h)
001a8c   5147     movf	0x47, 0, 0x1        	MOVF	_thour, W, B
001a8e   010e     movlb	0xe                	BANKSEL	_h
001a90   1961     xorwf	0x61, 0, 0x1       	XORWF	_h, W, B
001a92   e002     bz	0x1a98                	BZ	_00135_DS_
                                           ;	.line	209; reveil.c	thour = h;
001a94   ce61     movff	0xe61, 0xf47       	MOVFF	_h, _thour
001a96   ff47
                                           _00135_DS_:
001a98   010f     movlb	0xf                	BANKSEL	_on
                                           ;	.line	212; reveil.c	if (!on && ds < 5) {
001a9a   5152     movf	0x52, 0, 0x1        	MOVF	_on, W, B
001a9c   e10e     bnz	0x1aba               	BNZ	_00139_DS_
001a9e   0e05     movlw	0x5                	MOVLW	0x05
001aa0   010e     movlb	0xe                	BANKSEL	_ds
001aa2   5d60     subwf	0x60, 0, 0x1       	SUBWF	_ds, W, B
001aa4   e20a     bc	0x1aba                	BC	_00139_DS_
                                           ;	.line	213; reveil.c	LATJbits.LATJ0 = 1;
001aa6   8091     bsf	0x91, 0, 0           	BSF	_LATJbits, 0
001aa8   010f     movlb	0xf                	BANKSEL	_whereami
                                           ;	.line	214; reveil.c	if (whereami == ALARM) {
001aaa   5151     movf	0x51, 0, 0x1        	MOVF	_whereami, W, B
001aac   0a0a     xorlw	0xa                	XORLW	0x0a
001aae   e102     bnz	0x1ab4               	BNZ	_00137_DS_
                                           ;	.line	215; reveil.c	LATJbits.LATJ1 = 1;
001ab0   8291     bsf	0x91, 0x1, 0         	BSF	_LATJbits, 1
                                           ;	.line	216; reveil.c	LATJbits.LATJ2 = 1;
001ab2   8491     bsf	0x91, 0x2, 0         	BSF	_LATJbits, 2
                                           _00137_DS_:
                                           ;	.line	218; reveil.c	on = 1;
001ab4   0e01     movlw	0x1                	MOVLW	0x01
001ab6   010f     movlb	0xf                	BANKSEL	_on
001ab8   6f52     movwf	0x52, 0x1          	MOVWF	_on, B
                                           _00139_DS_:
001aba   010f     movlb	0xf                	BANKSEL	_on
                                           ;	.line	222; reveil.c	if (on && ds >= 5) {
001abc   5152     movf	0x52, 0, 0x1        	MOVF	_on, W, B
001abe   e00d     bz	0x1ada                	BZ	_00146_DS_
001ac0   0e05     movlw	0x5                	MOVLW	0x05
001ac2   010e     movlb	0xe                	BANKSEL	_ds
001ac4   5d60     subwf	0x60, 0, 0x1       	SUBWF	_ds, W, B
001ac6   e309     bnc	0x1ada               	BNC	_00146_DS_
                                           ;	.line	223; reveil.c	LATJbits.LATJ0 = 0;
001ac8   9091     bcf	0x91, 0, 0           	BCF	_LATJbits, 0
001aca   010f     movlb	0xf                	BANKSEL	_whereami
                                           ;	.line	224; reveil.c	if (whereami == ALARM) {
001acc   5151     movf	0x51, 0, 0x1        	MOVF	_whereami, W, B
001ace   0a0a     xorlw	0xa                	XORLW	0x0a
001ad0   e102     bnz	0x1ad6               	BNZ	_00142_DS_
                                           ;	.line	225; reveil.c	LATJbits.LATJ1 = 0;
001ad2   9291     bcf	0x91, 0x1, 0         	BCF	_LATJbits, 1
                                           ;	.line	226; reveil.c	LATJbits.LATJ2 = 0;
001ad4   9491     bcf	0x91, 0x2, 0         	BCF	_LATJbits, 2
                                           _00142_DS_:
001ad6   010f     movlb	0xf                	BANKSEL	_on
                                           ;	.line	228; reveil.c	on = 0;
001ad8   6b52     clrf	0x52, 0x1           	CLRF	_on, B
                                           _00146_DS_:
001ada   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
001adc   f007
001ade   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
001ae0   f006
001ae2   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
001ae4   f005
001ae6   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
001ae8   f004
001aea   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
001aec   f003
001aee   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
001af0   f002
001af2   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
001af4   f001
001af6   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
001af8   f000
001afa   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001afc   ffd9
001afe   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_reveil__low_isr	code
                                           _low_isr:
                                           ;	.line	129; reveil.c	void low_isr(void) interrupt 2
003bf4   cfe8     movff	0xfe8, 0xfe5       	MOVFF	WREG, POSTDEC1
003bf6   ffe5
003bf8   cfd8     movff	0xfd8, 0xfe5       	MOVFF	STATUS, POSTDEC1
003bfa   ffe5
003bfc   cfe0     movff	0xfe0, 0xfe5       	MOVFF	BSR, POSTDEC1
003bfe   ffe5
003c00   cff3     movff	0xff3, 0xfe5       	MOVFF	PRODL, POSTDEC1
003c02   ffe5
003c04   cff4     movff	0xff4, 0xfe5       	MOVFF	PRODH, POSTDEC1
003c06   ffe5
003c08   cfe9     movff	0xfe9, 0xfe5       	MOVFF	FSR0L, POSTDEC1
003c0a   ffe5
003c0c   cfea     movff	0xfea, 0xfe5       	MOVFF	FSR0H, POSTDEC1
003c0e   ffe5
003c10   cffa     movff	0xffa, 0xfe5       	MOVFF	PCLATH, POSTDEC1
003c12   ffe5
003c14   cffb     movff	0xffb, 0xfe5       	MOVFF	PCLATU, POSTDEC1
003c16   ffe5
003c18   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
003c1a   ffe5
003c1c   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
003c1e   ffd9
                                           ;	.line	132; reveil.c	if (INTCON3bits.INT3F) {
003c20   a4f0     btfss	0xf0, 0x2, 0       	BTFSS	_INTCON3bits, 2
003c22   d005     bra	0x3c2e               	BRA	_00115_DS_
                                           ;	.line	133; reveil.c	button1 = 1;
003c24   0e01     movlw	0x1                	MOVLW	0x01
003c26   010f     movlb	0xf                	BANKSEL	_button1
003c28   6f41     movwf	0x41, 0x1          	MOVWF	_button1, B
                                           ;	.line	134; reveil.c	INTCON3bits.INT3F = 0;
003c2a   94f0     bcf	0xf0, 0x2, 0         	BCF	_INTCON3bits, 2
003c2c   d006     bra	0x3c3a               	BRA	_00117_DS_
                                           _00115_DS_:
                                           ;	.line	137; reveil.c	} else if (INTCON3bits.INT1F) {
003c2e   a0f0     btfss	0xf0, 0, 0         	BTFSS	_INTCON3bits, 0
003c30   d004     bra	0x3c3a               	BRA	_00117_DS_
                                           ;	.line	138; reveil.c	button2 = 1;
003c32   0e01     movlw	0x1                	MOVLW	0x01
003c34   010f     movlb	0xf                	BANKSEL	_button2
003c36   6f42     movwf	0x42, 0x1          	MOVWF	_button2, B
                                           ;	.line	139; reveil.c	INTCON3bits.INT1F = 0;
003c38   90f0     bcf	0xf0, 0, 0           	BCF	_INTCON3bits, 0
                                           _00117_DS_:
003c3a   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
003c3c   ffd9
003c3e   cfe4     movff	0xfe4, 0xffb       	MOVFF	PREINC1, PCLATU
003c40   fffb
003c42   cfe4     movff	0xfe4, 0xffa       	MOVFF	PREINC1, PCLATH
003c44   fffa
003c46   cfe4     movff	0xfe4, 0xfea       	MOVFF	PREINC1, FSR0H
003c48   ffea
003c4a   cfe4     movff	0xfe4, 0xfe9       	MOVFF	PREINC1, FSR0L
003c4c   ffe9
003c4e   cfe4     movff	0xfe4, 0xff4       	MOVFF	PREINC1, PRODH
003c50   fff4
003c52   cfe4     movff	0xfe4, 0xff3       	MOVFF	PREINC1, PRODL
003c54   fff3
003c56   cfe4     movff	0xfe4, 0xfe0       	MOVFF	PREINC1, BSR
003c58   ffe0
003c5a   cfe4     movff	0xfe4, 0xfd8       	MOVFF	PREINC1, STATUS
003c5c   ffd8
003c5e   cfe4     movff	0xfe4, 0xfe8       	MOVFF	PREINC1, WREG
003c60   ffe8
003c62   0010     retfie	0                 	RETFIE	
                                           
                                           ; ; Starting pCode block
                                           S_reveil__high_isr	code
                                           _high_isr:
                                           ;	.line	119; reveil.c	void high_isr(void) interrupt 1
001e34   cfe8     movff	0xfe8, 0xfe5       	MOVFF	WREG, POSTDEC1
001e36   ffe5
001e38   cfd8     movff	0xfd8, 0xfe5       	MOVFF	STATUS, POSTDEC1
001e3a   ffe5
001e3c   cfe0     movff	0xfe0, 0xfe5       	MOVFF	BSR, POSTDEC1
001e3e   ffe5
001e40   cff3     movff	0xff3, 0xfe5       	MOVFF	PRODL, POSTDEC1
001e42   ffe5
001e44   cff4     movff	0xff4, 0xfe5       	MOVFF	PRODH, POSTDEC1
001e46   ffe5
001e48   cfe9     movff	0xfe9, 0xfe5       	MOVFF	FSR0L, POSTDEC1
001e4a   ffe5
001e4c   cfea     movff	0xfea, 0xfe5       	MOVFF	FSR0H, POSTDEC1
001e4e   ffe5
001e50   cffa     movff	0xffa, 0xfe5       	MOVFF	PCLATH, POSTDEC1
001e52   ffe5
001e54   cffb     movff	0xffb, 0xfe5       	MOVFF	PCLATU, POSTDEC1
001e56   ffe5
001e58   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
001e5a   ffe5
001e5c   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001e5e   ffd9
                                           ;	.line	122; reveil.c	if (INTCONbits.T0IF) {
001e60   a4f2     btfss	0xf2, 0x2, 0       	BTFSS	_INTCONbits, 2
001e62   d00c     bra	0x1e7c               	BRA	_00107_DS_
001e64   010f     movlb	0xf                	BANKSEL	_overflows
                                           ;	.line	123; reveil.c	overflows++;
001e66   2b43     incf	0x43, 0x1, 0x1      	INCF	_overflows, F, B
001e68   e302     bnc	0x1e6e               	BNC	_10348_DS_
001e6a   010f     movlb	0xf                	BANKSEL	(_overflows + 1)
001e6c   2b44     incf	0x44, 0x1, 0x1      	INCF	(_overflows + 1), F, B
                                           _10348_DS_:
001e6e   e302     bnc	0x1e74               	BNC	_20349_DS_
001e70   010f     movlb	0xf                	BANKSEL	(_overflows + 2)
001e72   2b45     incf	0x45, 0x1, 0x1      	INCF	(_overflows + 2), F, B
                                           _20349_DS_:
001e74   e302     bnc	0x1e7a               	BNC	_30350_DS_
001e76   010f     movlb	0xf                	BANKSEL	(_overflows + 3)
001e78   2b46     incf	0x46, 0x1, 0x1      	INCF	(_overflows + 3), F, B
                                           _30350_DS_:
                                           ;	.line	124; reveil.c	INTCONbits.T0IF = 0;
001e7a   94f2     bcf	0xf2, 0x2, 0         	BCF	_INTCONbits, 2
                                           _00107_DS_:
001e7c   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001e7e   ffd9
001e80   cfe4     movff	0xfe4, 0xffb       	MOVFF	PREINC1, PCLATU
001e82   fffb
001e84   cfe4     movff	0xfe4, 0xffa       	MOVFF	PREINC1, PCLATH
001e86   fffa
001e88   cfe4     movff	0xfe4, 0xfea       	MOVFF	PREINC1, FSR0H
001e8a   ffea
001e8c   cfe4     movff	0xfe4, 0xfe9       	MOVFF	PREINC1, FSR0L
001e8e   ffe9
001e90   cfe4     movff	0xfe4, 0xff4       	MOVFF	PREINC1, PRODH
001e92   fff4
001e94   cfe4     movff	0xfe4, 0xff3       	MOVFF	PREINC1, PRODL
001e96   fff3
001e98   cfe4     movff	0xfe4, 0xfe0       	MOVFF	PREINC1, BSR
001e9a   ffe0
001e9c   cfe4     movff	0xfe4, 0xfd8       	MOVFF	PREINC1, STATUS
001e9e   ffd8
001ea0   cfe4     movff	0xfe4, 0xfe8       	MOVFF	PREINC1, WREG
001ea2   ffe8
001ea4   0010     retfie	0                 	RETFIE	
                                           
                                           ; ; Starting pCode block
                                           __str_0:
001ea6   6f44     movwf	0x44, 0x1          	DB	0x44, 0x6f, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x77, 0x61, 0x6e, 0x74, 0x20
001ea8   7920     btg	0x20, 0x4, 0x1       
001eaa   756f     btg	0x6f, 0x2, 0x1       
001eac   7720     btg	0x20, 0x3, 0x1       
001eae   6e61     movwf	0x61, 0            
001eb0   2074     addwfc	0x74, 0, 0        
001eb2   6f74     movwf	0x74, 0x1          	DB	0x74, 0x6f, 0x20, 0x20, 0x73, 0x65, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20
001eb4   2020     addwfc	0x20, 0, 0        
001eb6   6573     cpfsgt	0x73, 0x1         
001eb8   2074     addwfc	0x74, 0, 0        
001eba   6874     setf	0x74, 0             
001ebc   2065     addwfc	0x65, 0, 0        
001ebe   6974     setf	0x74, 0x1           	DB	0x74, 0x69, 0x6d, 0x65, 0x20, 0x3f, 0x20, 0x20, 0x00
001ec0   656d     cpfsgt	0x6d, 0x1         
001ec2   3f20     incfsz	0x20, 0x1, 0x1    
001ec4   2020     addwfc	0x20, 0, 0        
001ec6   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_1:
001ec8   5b20     subwfb	0x20, 0x1, 0x1    	DB	0x20, 0x5b, 0x25, 0x30, 0x32, 0x75, 0x5d, 0x3a, 0x20, 0x25, 0x30, 0x32
001eca   3025     rrcf	0x25, 0, 0          
001ecc   7532     btg	0x32, 0x2, 0x1       
001ece   3a5d     swapf	0x5d, 0x1, 0       
001ed0   2520     addwf	0x20, 0, 0x1       
001ed2   3230     rrcf	0x30, 0x1, 0        
001ed4   2075     addwfc	0x75, 0, 0        	DB	0x75, 0x20, 0x3a, 0x20, 0x25, 0x30, 0x32, 0x75, 0x20, 0x20, 0x20, 0x20
001ed6   203a     addwfc	0x3a, 0, 0        
001ed8   3025     rrcf	0x25, 0, 0          
001eda   7532     btg	0x32, 0x2, 0x1       
001edc   2020     addwfc	0x20, 0, 0        
001ede   2020     addwfc	0x20, 0, 0        
001ee0   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
001ee2   2020     addwfc	0x20, 0, 0        
001ee4   2020     addwfc	0x20, 0, 0        
001ee6   2020     addwfc	0x20, 0, 0        
001ee8   2020     addwfc	0x20, 0, 0        
001eea   2020     addwfc	0x20, 0, 0        
001eec   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x00
001eee   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_2:
001ef0   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x25, 0x30, 0x32, 0x75, 0x20, 0x3a, 0x5b, 0x25, 0x30, 0x32
001ef2   3025     rrcf	0x25, 0, 0          
001ef4   7532     btg	0x32, 0x2, 0x1       
001ef6   3a20     swapf	0x20, 0x1, 0       
001ef8   255b     addwf	0x5b, 0, 0x1       
001efa   3230     rrcf	0x30, 0x1, 0        
001efc   5d75     subwf	0x75, 0, 0x1       	DB	0x75, 0x5d, 0x3a, 0x20, 0x25, 0x30, 0x32, 0x75, 0x20, 0x20, 0x20, 0x20
001efe   203a     addwfc	0x3a, 0, 0        
001f00   3025     rrcf	0x25, 0, 0          
001f02   7532     btg	0x32, 0x2, 0x1       
001f04   2020     addwfc	0x20, 0, 0        
001f06   2020     addwfc	0x20, 0, 0        
001f08   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
001f0a   2020     addwfc	0x20, 0, 0        
001f0c   2020     addwfc	0x20, 0, 0        
001f0e   2020     addwfc	0x20, 0, 0        
001f10   2020     addwfc	0x20, 0, 0        
001f12   2020     addwfc	0x20, 0, 0        
001f14   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x00
001f16   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_3:
001f18   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x25, 0x30, 0x32, 0x75, 0x20, 0x3a, 0x20, 0x25, 0x30, 0x32
001f1a   3025     rrcf	0x25, 0, 0          
001f1c   7532     btg	0x32, 0x2, 0x1       
001f1e   3a20     swapf	0x20, 0x1, 0       
001f20   2520     addwf	0x20, 0, 0x1       
001f22   3230     rrcf	0x30, 0x1, 0        
001f24   2075     addwfc	0x75, 0, 0        	DB	0x75, 0x20, 0x3a, 0x5b, 0x25, 0x30, 0x32, 0x75, 0x5d, 0x20, 0x20, 0x20
001f26   5b3a     subwfb	0x3a, 0x1, 0x1    
001f28   3025     rrcf	0x25, 0, 0          
001f2a   7532     btg	0x32, 0x2, 0x1       
001f2c   205d     addwfc	0x5d, 0, 0        
001f2e   2020     addwfc	0x20, 0, 0        
001f30   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
001f32   2020     addwfc	0x20, 0, 0        
001f34   2020     addwfc	0x20, 0, 0        
001f36   2020     addwfc	0x20, 0, 0        
001f38   2020     addwfc	0x20, 0, 0        
001f3a   2020     addwfc	0x20, 0, 0        
001f3c   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x00
001f3e   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_4:
001f40   6f44     movwf	0x44, 0x1          	DB	0x44, 0x6f, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x77, 0x61, 0x6e, 0x74, 0x20
001f42   7920     btg	0x20, 0x4, 0x1       
001f44   756f     btg	0x6f, 0x2, 0x1       
001f46   7720     btg	0x20, 0x3, 0x1       
001f48   6e61     movwf	0x61, 0            
001f4a   2074     addwfc	0x74, 0, 0        
001f4c   6f74     movwf	0x74, 0x1          	DB	0x74, 0x6f, 0x20, 0x20, 0x73, 0x65, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20
001f4e   2020     addwfc	0x20, 0, 0        
001f50   6573     cpfsgt	0x73, 0x1         
001f52   2074     addwfc	0x74, 0, 0        
001f54   6874     setf	0x74, 0             
001f56   2065     addwfc	0x65, 0, 0        
001f58   6c61     negf	0x61, 0             	DB	0x61, 0x6c, 0x61, 0x72, 0x6d, 0x20, 0x3f, 0x20, 0x00
001f5a   7261     btg	0x61, 0x1, 0         
001f5c   206d     addwfc	0x6d, 0, 0        
001f5e   203f     addwfc	0x3f, 0, 0        
001f60   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_5:
001f62   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x20, 0x5b, 0x4f, 0x4e, 0x20
001f64   6c41     negf	0x41, 0             
001f66   7261     btg	0x61, 0x1, 0         
001f68   206d     addwfc	0x6d, 0, 0        
001f6a   4f5b     dcfsnz	0x5b, 0x1, 0x1    
001f6c   204e     addwfc	0x4e, 0, 0        
001f6e   205d     addwfc	0x5d, 0, 0        	DB	0x5d, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
001f70   2020     addwfc	0x20, 0, 0        
001f72   2020     addwfc	0x20, 0, 0        
001f74   2020     addwfc	0x20, 0, 0        
001f76   2020     addwfc	0x20, 0, 0        
001f78   2020     addwfc	0x20, 0, 0        
001f7a   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00
001f7c   2020     addwfc	0x20, 0, 0        
001f7e   2020     addwfc	0x20, 0, 0        
001f80   2020     addwfc	0x20, 0, 0        
001f82   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_6:
001f84   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x20, 0x5b, 0x4f, 0x46, 0x46
001f86   6c41     negf	0x41, 0             
001f88   7261     btg	0x61, 0x1, 0         
001f8a   206d     addwfc	0x6d, 0, 0        
001f8c   4f5b     dcfsnz	0x5b, 0x1, 0x1    
001f8e   4646     rlncf	0x46, 0x1, 0       
001f90   205d     addwfc	0x5d, 0, 0        	DB	0x5d, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
001f92   2020     addwfc	0x20, 0, 0        
001f94   2020     addwfc	0x20, 0, 0        
001f96   2020     addwfc	0x20, 0, 0        
001f98   2020     addwfc	0x20, 0, 0        
001f9a   2020     addwfc	0x20, 0, 0        
001f9c   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00
001f9e   2020     addwfc	0x20, 0, 0        
001fa0   2020     addwfc	0x20, 0, 0        
001fa2   2020     addwfc	0x20, 0, 0        
001fa4   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_7:
001fa6   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x20, 0x61, 0x74
001fa8   2020     addwfc	0x20, 0, 0        
001faa   6c41     negf	0x41, 0             
001fac   7261     btg	0x61, 0x1, 0         
001fae   206d     addwfc	0x6d, 0, 0        
001fb0   7461     btg	0x61, 0x2, 0         
001fb2   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5b, 0x25, 0x30, 0x32
001fb4   2020     addwfc	0x20, 0, 0        
001fb6   2020     addwfc	0x20, 0, 0        
001fb8   2020     addwfc	0x20, 0, 0        
001fba   255b     addwf	0x5b, 0, 0x1       
001fbc   3230     rrcf	0x30, 0x1, 0        
001fbe   5d75     subwf	0x75, 0, 0x1       	DB	0x75, 0x5d, 0x3a, 0x20, 0x25, 0x30, 0x32, 0x75, 0x20, 0x20, 0x20, 0x20
001fc0   203a     addwfc	0x3a, 0, 0        
001fc2   3025     rrcf	0x25, 0, 0          
001fc4   7532     btg	0x32, 0x2, 0x1       
001fc6   2020     addwfc	0x20, 0, 0        
001fc8   2020     addwfc	0x20, 0, 0        
001fca   0000     nop                      	DB	0x00
                                           ; ; Starting pCode block
                                           __str_8:
001fcc   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x20, 0x61, 0x74
001fce   2020     addwfc	0x20, 0, 0        
001fd0   6c41     negf	0x41, 0             
001fd2   7261     btg	0x61, 0x1, 0         
001fd4   206d     addwfc	0x6d, 0, 0        
001fd6   7461     btg	0x61, 0x2, 0         
001fd8   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x25, 0x30, 0x32
001fda   2020     addwfc	0x20, 0, 0        
001fdc   2020     addwfc	0x20, 0, 0        
001fde   2020     addwfc	0x20, 0, 0        
001fe0   2520     addwf	0x20, 0, 0x1       
001fe2   3230     rrcf	0x30, 0x1, 0        
001fe4   2075     addwfc	0x75, 0, 0        	DB	0x75, 0x20, 0x3a, 0x5b, 0x25, 0x30, 0x32, 0x75, 0x5d, 0x20, 0x20, 0x20
001fe6   5b3a     subwfb	0x3a, 0x1, 0x1    
001fe8   3025     rrcf	0x25, 0, 0          
001fea   7532     btg	0x32, 0x2, 0x1       
001fec   205d     addwfc	0x5d, 0, 0        
001fee   2020     addwfc	0x20, 0, 0        
001ff0   0000     nop                      	DB	0x00
                                           ; ; Starting pCode block
                                           __str_9:
001ff2   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x25, 0x30, 0x32, 0x75, 0x3a, 0x25, 0x30, 0x32
001ff4   2020     addwfc	0x20, 0, 0        
001ff6   3025     rrcf	0x25, 0, 0          
001ff8   7532     btg	0x32, 0x2, 0x1       
001ffa   253a     addwf	0x3a, 0, 0x1       
001ffc   3230     rrcf	0x30, 0x1, 0        
001ffe   3a75     swapf	0x75, 0x1, 0       	DB	0x75, 0x3a, 0x25, 0x30, 0x32, 0x75, 0x20, 0x20, 0x20, 0x20, 0x41, 0x6c
002000   3025     rrcf	0x25, 0, 0          
002002   7532     btg	0x32, 0x2, 0x1       
002004   2020     addwfc	0x20, 0, 0        
002006   2020     addwfc	0x20, 0, 0        
002008   6c41     negf	0x41, 0             
00200a   7261     btg	0x61, 0x1, 0         	DB	0x61, 0x72, 0x6d, 0x20, 0x4f, 0x4e, 0x20, 0x20, 0x25, 0x30, 0x32, 0x75
00200c   206d     addwfc	0x6d, 0, 0        
00200e   4e4f     dcfsnz	0x4f, 0x1, 0      
002010   2020     addwfc	0x20, 0, 0        
002012   3025     rrcf	0x25, 0, 0          
002014   7532     btg	0x32, 0x2, 0x1       
002016   253a     addwf	0x3a, 0, 0x1       	DB	0x3a, 0x25, 0x30, 0x32, 0x75, 0x20, 0x00
002018   3230     rrcf	0x30, 0x1, 0        
00201a   2075     addwfc	0x75, 0, 0        
00201c   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_10:
00201e   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x25, 0x30, 0x32, 0x75, 0x3a, 0x25, 0x30, 0x32
002020   2020     addwfc	0x20, 0, 0        
002022   3025     rrcf	0x25, 0, 0          
002024   7532     btg	0x32, 0x2, 0x1       
002026   253a     addwf	0x3a, 0, 0x1       
002028   3230     rrcf	0x30, 0x1, 0        
00202a   3a75     swapf	0x75, 0x1, 0       	DB	0x75, 0x3a, 0x25, 0x30, 0x32, 0x75, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
00202c   3025     rrcf	0x25, 0, 0          
00202e   7532     btg	0x32, 0x2, 0x1       
002030   2020     addwfc	0x20, 0, 0        
002032   2020     addwfc	0x20, 0, 0        
002034   2020     addwfc	0x20, 0, 0        
002036   4120     rrncf	0x20, 0, 0x1       	DB	0x20, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x20, 0x20, 0x4f, 0x46, 0x46, 0x20
002038   616c     cpfslt	0x6c, 0x1         
00203a   6d72     negf	0x72, 0x1           
00203c   2020     addwfc	0x20, 0, 0        
00203e   464f     rlncf	0x4f, 0x1, 0       
002040   2046     addwfc	0x46, 0, 0        
002042   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x00
002044   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_11:
002046   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x25, 0x30, 0x32, 0x75, 0x3a, 0x25, 0x30, 0x32
002048   2020     addwfc	0x20, 0, 0        
00204a   3025     rrcf	0x25, 0, 0          
00204c   7532     btg	0x32, 0x2, 0x1       
00204e   253a     addwf	0x3a, 0, 0x1       
002050   3230     rrcf	0x30, 0x1, 0        
002052   3a75     swapf	0x75, 0x1, 0       	DB	0x75, 0x3a, 0x25, 0x30, 0x32, 0x75, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
002054   3025     rrcf	0x25, 0, 0          
002056   7532     btg	0x32, 0x2, 0x1       
002058   2020     addwfc	0x20, 0, 0        
00205a   2020     addwfc	0x20, 0, 0        
00205c   2020     addwfc	0x20, 0, 0        
00205e   2049     addwfc	0x49, 0, 0        	DB	0x49, 0x20, 0x61, 0x6d, 0x20, 0x72, 0x69, 0x6e, 0x67, 0x69, 0x6e, 0x67
002060   6d61     negf	0x61, 0x1           
002062   7220     btg	0x20, 0x1, 0         
002064   6e69     movwf	0x69, 0            
002066   6967     setf	0x67, 0x1           
002068   676e     tstfsz	0x6e, 0x1         
00206a   2021     addwfc	0x21, 0, 0        	DB	0x21, 0x20, 0x00
00206c   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_12:
00206e   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x25, 0x30, 0x32, 0x75, 0x3a, 0x25, 0x30, 0x32
002070   2020     addwfc	0x20, 0, 0        
002072   3025     rrcf	0x25, 0, 0          
002074   7532     btg	0x32, 0x2, 0x1       
002076   253a     addwf	0x3a, 0, 0x1       
002078   3230     rrcf	0x30, 0x1, 0        
00207a   3a75     swapf	0x75, 0x1, 0       	DB	0x75, 0x3a, 0x25, 0x30, 0x32, 0x75, 0x20, 0x20, 0x20, 0x20, 0x53, 0x6e
00207c   3025     rrcf	0x25, 0, 0          
00207e   7532     btg	0x32, 0x2, 0x1       
002080   2020     addwfc	0x20, 0, 0        
002082   2020     addwfc	0x20, 0, 0        
002084   6e53     movwf	0x53, 0            
002086   6f6f     movwf	0x6f, 0x1          	DB	0x6f, 0x6f, 0x7a, 0x65, 0x20, 0x25, 0x75, 0x20, 0x20, 0x25, 0x30, 0x32
002088   657a     cpfsgt	0x7a, 0x1         
00208a   2520     addwf	0x20, 0, 0x1       
00208c   2075     addwfc	0x75, 0, 0        
00208e   2520     addwf	0x20, 0, 0x1       
002090   3230     rrcf	0x30, 0x1, 0        
002092   3a75     swapf	0x75, 0x1, 0       	DB	0x75, 0x3a, 0x25, 0x30, 0x32, 0x75, 0x20, 0x00
002094   3025     rrcf	0x25, 0, 0          
002096   7532     btg	0x32, 0x2, 0x1       
002098   0020     dw	0x20  ;unknown opcode 
                                           ; ; Starting pCode block
                                           __str_13:
00209a   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x25, 0x30, 0x32, 0x75, 0x3a, 0x25, 0x30, 0x32
00209c   2020     addwfc	0x20, 0, 0        
00209e   3025     rrcf	0x25, 0, 0          
0020a0   7532     btg	0x32, 0x2, 0x1       
0020a2   253a     addwf	0x3a, 0, 0x1       
0020a4   3230     rrcf	0x30, 0x1, 0        
0020a6   3a75     swapf	0x75, 0x1, 0       	DB	0x75, 0x3a, 0x25, 0x30, 0x32, 0x75, 0x20, 0x20, 0x20, 0x20, 0x53, 0x6e
0020a8   3025     rrcf	0x25, 0, 0          
0020aa   7532     btg	0x32, 0x2, 0x1       
0020ac   2020     addwfc	0x20, 0, 0        
0020ae   2020     addwfc	0x20, 0, 0        
0020b0   6e53     movwf	0x53, 0            
0020b2   6f6f     movwf	0x6f, 0x1          	DB	0x6f, 0x6f, 0x7a, 0x65, 0x20, 0x25, 0x75, 0x20, 0x25, 0x30, 0x32, 0x75
0020b4   657a     cpfsgt	0x7a, 0x1         
0020b6   2520     addwf	0x20, 0, 0x1       
0020b8   2075     addwfc	0x75, 0, 0        
0020ba   3025     rrcf	0x25, 0, 0          
0020bc   7532     btg	0x32, 0x2, 0x1       
0020be   253a     addwf	0x3a, 0, 0x1       	DB	0x3a, 0x25, 0x30, 0x32, 0x75, 0x20, 0x00
0020c0   3230     rrcf	0x30, 0x1, 0        
0020c2   2075     addwfc	0x75, 0, 0        
0020c4   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_14:
0020c6   2a2a     incf	0x2a, 0x1, 0        	DB	0x2a, 0x2a, 0x2a, 0x2a, 0x20, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x20, 0x2a
0020c8   2a2a     incf	0x2a, 0x1, 0        
0020ca   4520     rlncf	0x20, 0, 0x1       
0020cc   5252     movf	0x52, 0x1, 0        
0020ce   524f     movf	0x4f, 0x1, 0        
0020d0   2a20     incf	0x20, 0x1, 0        
0020d2   2a2a     incf	0x2a, 0x1, 0        	DB	0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x20, 0x45, 0x52, 0x52
0020d4   2a2a     incf	0x2a, 0x1, 0        
0020d6   2a2a     incf	0x2a, 0x1, 0        
0020d8   2a2a     incf	0x2a, 0x1, 0        
0020da   4520     rlncf	0x20, 0, 0x1       
0020dc   5252     movf	0x52, 0x1, 0        
0020de   524f     movf	0x4f, 0x1, 0        	DB	0x4f, 0x52, 0x20, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x00
0020e0   2a20     incf	0x20, 0x1, 0        
0020e2   2a2a     incf	0x2a, 0x1, 0        
0020e4   2a2a     incf	0x2a, 0x1, 0        
0020e6   0000     nop                      
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 4698 (0x125a) bytes ( 3.58%)
                                           ;           	 2349 (0x092d) words
                                           ; udata size:	   44 (0x002c) bytes ( 1.15%)
                                           ; access size:	   17 (0x0011) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Oct 15 2013) (Mac OS X ppc)
                                           ; This file was generated Sun Oct 27 11:36:43 2013
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _strlcpy
                                           	global _DisplayString
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern __gptrget1
                                           	extern __gptrput1
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _LCDText
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _strlen
                                           	extern _LCDUpdate
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR0L	equ	0xfe9
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           r0x0a	res	1
                                           r0x0b	res	1
                                           r0x0c	res	1
                                           r0x0d	res	1
                                           r0x0e	res	1
                                           r0x0f	res	1
                                           r0x10	res	1
                                           r0x11	res	1
                                           r0x12	res	1
                                           r0x13	res	1
                                           r0x14	res	1
                                           r0x15	res	1
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_helper__DisplayString	code
                                           _DisplayString:
                                           ;	.line	94; helper.c	void DisplayString(BYTE pos, char* text)
003536   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
003538   ffe5
00353a   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00353c   ffd9
00353e   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
003540   ffe5
003542   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
003544   ffe5
003546   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
003548   ffe5
00354a   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00354c   ffe5
00354e   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
003550   ffe5
003552   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
003554   ffe5
003556   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
003558   ffe5
00355a   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
00355c   ffe5
00355e   0e02     movlw	0x2                	MOVLW	0x02
003560   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
003562   f000
003564   0e03     movlw	0x3                	MOVLW	0x03
003566   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
003568   f001
00356a   0e04     movlw	0x4                	MOVLW	0x04
00356c   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
00356e   f002
003570   0e05     movlw	0x5                	MOVLW	0x05
003572   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
003574   f003
                                           ;	.line	96; helper.c	BYTE l= strlen(text)+1;
003576   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
003578   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00357a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00357c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00357e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
003580   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003582   ecba     call	0x3b74, 0           	CALL	_strlen
003584   f01d
003586   6e04     movwf	0x4, 0             	MOVWF	r0x04
003588   cff3     movff	0xff3, 0x5         	MOVFF	PRODL, r0x05
00358a   f005
00358c   0e03     movlw	0x3                	MOVLW	0x03
00358e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
003590   2a04     incf	0x4, 0x1, 0         	INCF	r0x04, F
                                           ;	.line	97; helper.c	BYTE max= 32-pos;
003592   5000     movf	0, 0, 0             	MOVF	r0x00, W
003594   0820     sublw	0x20               	SUBLW	0x20
003596   6e05     movwf	0x5, 0             	MOVWF	r0x05
                                           ;	.line	98; helper.c	strlcpy((char*)&LCDText[pos], text,(l<max)?l:max );
003598   6a06     clrf	0x6, 0              	CLRF	r0x06
00359a   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
00359c   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
00359e   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
0035a0   2206     addwfc	0x6, 0x1, 0       	ADDWFC	r0x06, F
0035a2   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0035a4   6e06     movwf	0x6, 0             	MOVWF	r0x06
0035a6   5000     movf	0, 0, 0             	MOVF	r0x00, W
0035a8   6e00     movwf	0, 0               	MOVWF	r0x00
0035aa   0e80     movlw	0x80               	MOVLW	0x80
0035ac   6e07     movwf	0x7, 0             	MOVWF	r0x07
0035ae   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0035b0   5c04     subwf	0x4, 0, 0          	SUBWF	r0x04, W
0035b2   e302     bnc	0x35b8               	BNC	_00134_DS_
0035b4   c005     movff	0x5, 0x4           	MOVFF	r0x05, r0x04
0035b6   f004
                                           _00134_DS_:
0035b8   6a05     clrf	0x5, 0              	CLRF	r0x05
0035ba   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0035bc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0035be   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0035c0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0035c2   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0035c4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0035c6   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0035c8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0035ca   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0035cc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0035ce   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0035d0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0035d2   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0035d4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0035d6   5000     movf	0, 0, 0             	MOVF	r0x00, W
0035d8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0035da   ece1     call	0x27c2, 0           	CALL	_strlcpy
0035dc   f013
0035de   0e08     movlw	0x8                	MOVLW	0x08
0035e0   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	99; helper.c	LCDUpdate();
0035e2   ec74     call	0x20e8, 0           	CALL	_LCDUpdate
0035e4   f010
0035e6   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
0035e8   f007
0035ea   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0035ec   f006
0035ee   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0035f0   f005
0035f2   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0035f4   f004
0035f6   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0035f8   f003
0035fa   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0035fc   f002
0035fe   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
003600   f001
003602   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
003604   f000
003606   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
003608   ffd9
00360a   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_helper__strlcpy	code
                                           _strlcpy:
                                           ;	.line	58; helper.c	strlcpy(char *dst, const char *src, size_t siz)
0027c2   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0027c4   ffe5
0027c6   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0027c8   ffd9
0027ca   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0027cc   ffe5
0027ce   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0027d0   ffe5
0027d2   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0027d4   ffe5
0027d6   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0027d8   ffe5
0027da   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0027dc   ffe5
0027de   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0027e0   ffe5
0027e2   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0027e4   ffe5
0027e6   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
0027e8   ffe5
0027ea   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
0027ec   ffe5
0027ee   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
0027f0   ffe5
0027f2   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
0027f4   ffe5
0027f6   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
0027f8   ffe5
0027fa   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
0027fc   ffe5
0027fe   c00d     movff	0xd, 0xfe5         	MOVFF	r0x0d, POSTDEC1
002800   ffe5
002802   c00e     movff	0xe, 0xfe5         	MOVFF	r0x0e, POSTDEC1
002804   ffe5
002806   c00f     movff	0xf, 0xfe5         	MOVFF	r0x0f, POSTDEC1
002808   ffe5
00280a   c010     movff	0x10, 0xfe5        	MOVFF	r0x10, POSTDEC1
00280c   ffe5
00280e   c011     movff	0x11, 0xfe5        	MOVFF	r0x11, POSTDEC1
002810   ffe5
002812   c012     movff	0x12, 0xfe5        	MOVFF	r0x12, POSTDEC1
002814   ffe5
002816   c013     movff	0x13, 0xfe5        	MOVFF	r0x13, POSTDEC1
002818   ffe5
00281a   c014     movff	0x14, 0xfe5        	MOVFF	r0x14, POSTDEC1
00281c   ffe5
00281e   c015     movff	0x15, 0xfe5        	MOVFF	r0x15, POSTDEC1
002820   ffe5
002822   0e02     movlw	0x2                	MOVLW	0x02
002824   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
002826   f000
002828   0e03     movlw	0x3                	MOVLW	0x03
00282a   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
00282c   f001
00282e   0e04     movlw	0x4                	MOVLW	0x04
002830   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
002832   f002
002834   0e05     movlw	0x5                	MOVLW	0x05
002836   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
002838   f003
00283a   0e06     movlw	0x6                	MOVLW	0x06
00283c   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
00283e   f004
002840   0e07     movlw	0x7                	MOVLW	0x07
002842   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
002844   f005
002846   0e08     movlw	0x8                	MOVLW	0x08
002848   cfdb     movff	0xfdb, 0x6         	MOVFF	PLUSW2, r0x06
00284a   f006
00284c   0e09     movlw	0x9                	MOVLW	0x09
00284e   cfdb     movff	0xfdb, 0x7         	MOVFF	PLUSW2, r0x07
002850   f007
                                           ;	.line	60; helper.c	char       *d = dst;
002852   c000     movff	0, 0x8             	MOVFF	r0x00, r0x08
002854   f008
002856   c001     movff	0x1, 0x9           	MOVFF	r0x01, r0x09
002858   f009
00285a   c002     movff	0x2, 0xa           	MOVFF	r0x02, r0x0a
00285c   f00a
                                           ;	.line	61; helper.c	const char *s = src;
00285e   c003     movff	0x3, 0xb           	MOVFF	r0x03, r0x0b
002860   f00b
002862   c004     movff	0x4, 0xc           	MOVFF	r0x04, r0x0c
002864   f00c
002866   c005     movff	0x5, 0xd           	MOVFF	r0x05, r0x0d
002868   f00d
                                           ;	.line	62; helper.c	size_t      n = siz;
00286a   c006     movff	0x6, 0xe           	MOVFF	r0x06, r0x0e
00286c   f00e
00286e   c007     movff	0x7, 0xf           	MOVFF	r0x07, r0x0f
002870   f00f
                                           ;	.line	65; helper.c	if (n != 0)
002872   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
002874   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
002876   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
002878   d03e     bra	0x28f6               	BRA	_00111_DS_
                                           ;	.line	67; helper.c	while (--n != 0)
00287a   c003     movff	0x3, 0x10          	MOVFF	r0x03, r0x10
00287c   f010
00287e   c004     movff	0x4, 0x11          	MOVFF	r0x04, r0x11
002880   f011
002882   c005     movff	0x5, 0x12          	MOVFF	r0x05, r0x12
002884   f012
002886   c006     movff	0x6, 0x13          	MOVFF	r0x06, r0x13
002888   f013
00288a   c007     movff	0x7, 0x14          	MOVFF	r0x07, r0x14
00288c   f014
                                           _00107_DS_:
00288e   0eff     movlw	0xff               	MOVLW	0xff
002890   2613     addwf	0x13, 0x1, 0       	ADDWF	r0x13, F
002892   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
002894   0614     decf	0x14, 0x1, 0        	DECF	r0x14, F
002896   5013     movf	0x13, 0, 0          	MOVF	r0x13, W
002898   1014     iorwf	0x14, 0, 0         	IORWF	r0x14, W
00289a   e01d     bz	0x28d6                	BZ	_00126_DS_
                                           ;	.line	69; helper.c	if ((*d++ = *s++) == '\0')
00289c   c010     movff	0x10, 0xfe9        	MOVFF	r0x10, FSR0L
00289e   ffe9
0028a0   c011     movff	0x11, 0xff3        	MOVFF	r0x11, PRODL
0028a2   fff3
0028a4   5012     movf	0x12, 0, 0          	MOVF	r0x12, W
0028a6   ec29     call	0x3e52, 0           	CALL	__gptrget1
0028a8   f01f
0028aa   6e15     movwf	0x15, 0            	MOVWF	r0x15
0028ac   2a10     incf	0x10, 0x1, 0        	INCF	r0x10, F
0028ae   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0028b0   2a11     incf	0x11, 0x1, 0        	INCF	r0x11, F
0028b2   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0028b4   2a12     incf	0x12, 0x1, 0        	INCF	r0x12, F
0028b6   c015     movff	0x15, 0xfe5        	MOVFF	r0x15, POSTDEC1
0028b8   ffe5
0028ba   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0028bc   ffe9
0028be   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0028c0   fff3
0028c2   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0028c4   ec5e     call	0x3ebc, 0           	CALL	__gptrput1
0028c6   f01f
0028c8   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
0028ca   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0028cc   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
0028ce   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0028d0   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
0028d2   5015     movf	0x15, 0, 0          	MOVF	r0x15, W
0028d4   e1dc     bnz	0x288e               	BNZ	_00107_DS_
                                           _00126_DS_:
                                           ;	.line	70; helper.c	break;
0028d6   c010     movff	0x10, 0xb          	MOVFF	r0x10, r0x0b
0028d8   f00b
0028da   c011     movff	0x11, 0xc          	MOVFF	r0x11, r0x0c
0028dc   f00c
0028de   c012     movff	0x12, 0xd          	MOVFF	r0x12, r0x0d
0028e0   f00d
0028e2   c000     movff	0, 0x8             	MOVFF	r0x00, r0x08
0028e4   f008
0028e6   c001     movff	0x1, 0x9           	MOVFF	r0x01, r0x09
0028e8   f009
0028ea   c002     movff	0x2, 0xa           	MOVFF	r0x02, r0x0a
0028ec   f00a
0028ee   c013     movff	0x13, 0xe          	MOVFF	r0x13, r0x0e
0028f0   f00e
0028f2   c014     movff	0x14, 0xf          	MOVFF	r0x14, r0x0f
0028f4   f00f
                                           _00111_DS_:
                                           ;	.line	75; helper.c	if (n == 0)
0028f6   500e     movf	0xe, 0, 0           	MOVF	r0x0e, W
0028f8   100f     iorwf	0xf, 0, 0          	IORWF	r0x0f, W
0028fa   e127     bnz	0x294a               	BNZ	_00118_DS_
                                           ;	.line	77; helper.c	if (siz != 0)
0028fc   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0028fe   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
002900   e009     bz	0x2914                	BZ	_00125_DS_
                                           ;	.line	78; helper.c	*d = '\0';          /* NUL-terminate dst */
002902   0e00     movlw	0                  	MOVLW	0x00
002904   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002906   c008     movff	0x8, 0xfe9         	MOVFF	r0x08, FSR0L
002908   ffe9
00290a   c009     movff	0x9, 0xff3         	MOVFF	r0x09, PRODL
00290c   fff3
00290e   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
002910   ec5e     call	0x3ebc, 0           	CALL	__gptrput1
002912   f01f
                                           _00125_DS_:
                                           ;	.line	79; helper.c	while (*s++)
002914   c00b     movff	0xb, 0             	MOVFF	r0x0b, r0x00
002916   f000
002918   c00c     movff	0xc, 0x1           	MOVFF	r0x0c, r0x01
00291a   f001
00291c   c00d     movff	0xd, 0x2           	MOVFF	r0x0d, r0x02
00291e   f002
                                           _00114_DS_:
002920   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
002922   ffe9
002924   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
002926   fff3
002928   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00292a   ec29     call	0x3e52, 0           	CALL	__gptrget1
00292c   f01f
00292e   6e06     movwf	0x6, 0             	MOVWF	r0x06
002930   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
002932   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
002934   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
002936   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
002938   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
00293a   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
00293c   e1f1     bnz	0x2920               	BNZ	_00114_DS_
00293e   c000     movff	0, 0xb             	MOVFF	r0x00, r0x0b
002940   f00b
002942   c001     movff	0x1, 0xc           	MOVFF	r0x01, r0x0c
002944   f00c
002946   c002     movff	0x2, 0xd           	MOVFF	r0x02, r0x0d
002948   f00d
                                           _00118_DS_:
                                           ;	.line	85; helper.c	return (s - src - 1);       /* count does not include NUL */
00294a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00294c   5c0b     subwf	0xb, 0, 0          	SUBWF	r0x0b, W
00294e   6e03     movwf	0x3, 0             	MOVWF	r0x03
002950   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002952   580c     subwfb	0xc, 0, 0         	SUBWFB	r0x0c, W
002954   6e04     movwf	0x4, 0             	MOVWF	r0x04
002956   0eff     movlw	0xff               	MOVLW	0xff
002958   2603     addwf	0x3, 0x1, 0        	ADDWF	r0x03, F
00295a   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
00295c   0604     decf	0x4, 0x1, 0         	DECF	r0x04, F
00295e   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
002960   fff3
002962   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002964   cfe4     movff	0xfe4, 0x15        	MOVFF	PREINC1, r0x15
002966   f015
002968   cfe4     movff	0xfe4, 0x14        	MOVFF	PREINC1, r0x14
00296a   f014
00296c   cfe4     movff	0xfe4, 0x13        	MOVFF	PREINC1, r0x13
00296e   f013
002970   cfe4     movff	0xfe4, 0x12        	MOVFF	PREINC1, r0x12
002972   f012
002974   cfe4     movff	0xfe4, 0x11        	MOVFF	PREINC1, r0x11
002976   f011
002978   cfe4     movff	0xfe4, 0x10        	MOVFF	PREINC1, r0x10
00297a   f010
00297c   cfe4     movff	0xfe4, 0xf         	MOVFF	PREINC1, r0x0f
00297e   f00f
002980   cfe4     movff	0xfe4, 0xe         	MOVFF	PREINC1, r0x0e
002982   f00e
002984   cfe4     movff	0xfe4, 0xd         	MOVFF	PREINC1, r0x0d
002986   f00d
002988   cfe4     movff	0xfe4, 0xc         	MOVFF	PREINC1, r0x0c
00298a   f00c
00298c   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
00298e   f00b
002990   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
002992   f00a
002994   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
002996   f009
002998   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
00299a   f008
00299c   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
00299e   f007
0029a0   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0029a2   f006
0029a4   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0029a6   f005
0029a8   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0029aa   f004
0029ac   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0029ae   f003
0029b0   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0029b2   f002
0029b4   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0029b6   f001
0029b8   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0029ba   f000
0029bc   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0029be   ffd9
0029c0   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	  726 (0x02d6) bytes ( 0.55%)
                                           ;           	  363 (0x016b) words
                                           ; udata size:	    0 (0x0000) bytes ( 0.00%)
                                           ; access size:	   22 (0x0016) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Oct 15 2013) (Mac OS X ppc)
                                           ; This file was generated Sun Oct 27 11:36:43 2013
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _LCDInit
                                           	global _LCDUpdate
                                           	global _LCDErase
                                           	global _LCDText
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _AN0String
                                           	extern _AppConfig
                                           	extern _activeUDPSocket
                                           	extern _UDPSocketInfo
                                           	extern _UDPTxCount
                                           	extern _UDPRxCount
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _memset
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODH	equ	0xff4
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           
                                           udata_LCDBlocking_0	udata
                                           _LCDText	res	33
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDErase	code
                                           _LCDErase:
                                           ;	.line	392; TCPIP_Stack/LCDBlocking.c	void LCDErase(void)
003856   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
003858   ffe5
00385a   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00385c   ffd9
00385e   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
003860   ffe5
003862   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
003864   ffe5
003866   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
003868   ffe5
00386a   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00386c   ffe5
00386e   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
003870   ffe5
003872   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
003874   ffe5
003876   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
003878   ffe5
00387a   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
00387c   ffe5
                                           ;	.line	395; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0x01);
00387e   0e01     movlw	0x1                	MOVLW	0x01
003880   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003882   0e00     movlw	0                  	MOVLW	0x00
003884   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003886   ec66     call	0x3ccc, 0           	CALL	_LCDWrite
003888   f01e
00388a   0e02     movlw	0x2                	MOVLW	0x02
00388c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	396; TCPIP_Stack/LCDBlocking.c	DelayMs(2);
00388e   0e48     movlw	0x48               	MOVLW	0x48
003890   6e00     movwf	0, 0               	MOVWF	r0x00
003892   0e0d     movlw	0xd                	MOVLW	0x0d
003894   6e01     movwf	0x1, 0             	MOVWF	r0x01
003896   6a02     clrf	0x2, 0              	CLRF	r0x02
003898   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00305_DS_:
00389a   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
00389c   f004
00389e   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
0038a0   f005
0038a2   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
0038a4   f006
0038a6   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
0038a8   f007
0038aa   0eff     movlw	0xff               	MOVLW	0xff
0038ac   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0038ae   0eff     movlw	0xff               	MOVLW	0xff
0038b0   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
0038b2   0eff     movlw	0xff               	MOVLW	0xff
0038b4   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0038b6   0eff     movlw	0xff               	MOVLW	0xff
0038b8   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
0038ba   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0038bc   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
0038be   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
0038c0   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
0038c2   e1eb     bnz	0x389a               	BNZ	_00305_DS_
                                           ;	.line	399; TCPIP_Stack/LCDBlocking.c	memset(LCDText, ' ', 32);
0038c4   0e00     movlw	0                  	MOVLW	0x00
0038c6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0038c8   0e20     movlw	0x20               	MOVLW	0x20
0038ca   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0038cc   0e20     movlw	0x20               	MOVLW	0x20
0038ce   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0038d0   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
0038d2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0038d4   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
0038d6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0038d8   ec06     call	0x360c, 0           	CALL	_memset
0038da   f01b
0038dc   0e05     movlw	0x5                	MOVLW	0x05
0038de   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0038e0   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
0038e2   f007
0038e4   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0038e6   f006
0038e8   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0038ea   f005
0038ec   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0038ee   f004
0038f0   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0038f2   f003
0038f4   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0038f6   f002
0038f8   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0038fa   f001
0038fc   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0038fe   f000
003900   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
003902   ffd9
003904   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDUpdate	code
                                           _LCDUpdate:
                                           ;	.line	332; TCPIP_Stack/LCDBlocking.c	void LCDUpdate(void)
0020e8   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0020ea   ffe5
0020ec   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0020ee   ffd9
0020f0   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0020f2   ffe5
0020f4   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0020f6   ffe5
0020f8   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0020fa   ffe5
0020fc   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0020fe   ffe5
002100   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
002102   ffe5
002104   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
002106   ffe5
002108   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
00210a   ffe5
00210c   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
00210e   ffe5
002110   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
002112   ffe5
                                           ;	.line	337; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0x02);
002114   0e02     movlw	0x2                	MOVLW	0x02
002116   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002118   0e00     movlw	0                  	MOVLW	0x00
00211a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00211c   ec66     call	0x3ccc, 0           	CALL	_LCDWrite
00211e   f01e
002120   0e02     movlw	0x2                	MOVLW	0x02
002122   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	338; TCPIP_Stack/LCDBlocking.c	DelayMs(2);
002124   0e48     movlw	0x48               	MOVLW	0x48
002126   6e00     movwf	0, 0               	MOVWF	r0x00
002128   0e0d     movlw	0xd                	MOVLW	0x0d
00212a   6e01     movwf	0x1, 0             	MOVWF	r0x01
00212c   6a02     clrf	0x2, 0              	CLRF	r0x02
00212e   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00225_DS_:
002130   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
002132   f004
002134   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
002136   f005
002138   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
00213a   f006
00213c   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
00213e   f007
002140   0eff     movlw	0xff               	MOVLW	0xff
002142   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
002144   0eff     movlw	0xff               	MOVLW	0xff
002146   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
002148   0eff     movlw	0xff               	MOVLW	0xff
00214a   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
00214c   0eff     movlw	0xff               	MOVLW	0xff
00214e   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
002150   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002152   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
002154   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
002156   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
002158   e1eb     bnz	0x2130               	BNZ	_00225_DS_
                                           ;	.line	341; TCPIP_Stack/LCDBlocking.c	for(i = 0; i < 16u; i++)
00215a   6a00     clrf	0, 0                	CLRF	r0x00
                                           _00257_DS_:
00215c   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
00215e   f001
002160   6a02     clrf	0x2, 0              	CLRF	r0x02
002162   0e00     movlw	0                  	MOVLW	0x00
002164   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
002166   e102     bnz	0x216c               	BNZ	_00297_DS_
002168   0e10     movlw	0x10               	MOVLW	0x10
00216a   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00297_DS_:
00216c   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00216e   d057     bra	0x221e               	BRA	_00260_DS_
                                           ;	.line	345; TCPIP_Stack/LCDBlocking.c	if(LCDText[i] == 0u)
002170   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
002172   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
002174   6e01     movwf	0x1, 0             	MOVWF	r0x01
002176   6a02     clrf	0x2, 0              	CLRF	r0x02
002178   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
00217a   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
00217c   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
00217e   ffe9
002180   c002     movff	0x2, 0xfea         	MOVFF	r0x02, FSR0H
002182   ffea
002184   cfef     movff	0xfef, 0x1         	MOVFF	INDF0, r0x01
002186   f001
002188   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00218a   e119     bnz	0x21be               	BNZ	_00232_DS_
                                           ;	.line	347; TCPIP_Stack/LCDBlocking.c	for(j=i; j < 16u; j++)
00218c   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
00218e   f001
                                           _00253_DS_:
002190   c001     movff	0x1, 0x2           	MOVFF	r0x01, r0x02
002192   f002
002194   6a03     clrf	0x3, 0              	CLRF	r0x03
002196   0e00     movlw	0                  	MOVLW	0x00
002198   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
00219a   e102     bnz	0x21a0               	BNZ	_00298_DS_
00219c   0e10     movlw	0x10               	MOVLW	0x10
00219e   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
                                           _00298_DS_:
0021a0   e20e     bc	0x21be                	BC	_00232_DS_
                                           ;	.line	349; TCPIP_Stack/LCDBlocking.c	LCDText[j] = ' ';
0021a2   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
0021a4   2401     addwf	0x1, 0, 0          	ADDWF	r0x01, W
0021a6   6e02     movwf	0x2, 0             	MOVWF	r0x02
0021a8   6a03     clrf	0x3, 0              	CLRF	r0x03
0021aa   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
0021ac   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
0021ae   c002     movff	0x2, 0xfe9         	MOVFF	r0x02, FSR0L
0021b0   ffe9
0021b2   c003     movff	0x3, 0xfea         	MOVFF	r0x03, FSR0H
0021b4   ffea
0021b6   0e20     movlw	0x20               	MOVLW	0x20
0021b8   6eef     movwf	0xef, 0            	MOVWF	INDF0
                                           ;	.line	347; TCPIP_Stack/LCDBlocking.c	for(j=i; j < 16u; j++)
0021ba   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
0021bc   d7e9     bra	0x2190               	BRA	_00253_DS_
                                           _00232_DS_:
                                           ;	.line	352; TCPIP_Stack/LCDBlocking.c	LCDWrite(1, LCDText[i]);
0021be   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
0021c0   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
0021c2   6e01     movwf	0x1, 0             	MOVWF	r0x01
0021c4   6a02     clrf	0x2, 0              	CLRF	r0x02
0021c6   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
0021c8   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0021ca   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
0021cc   ffe9
0021ce   c002     movff	0x2, 0xfea         	MOVFF	r0x02, FSR0H
0021d0   ffea
0021d2   cfef     movff	0xfef, 0x1         	MOVFF	INDF0, r0x01
0021d4   f001
0021d6   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0021d8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0021da   0e01     movlw	0x1                	MOVLW	0x01
0021dc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0021de   ec66     call	0x3ccc, 0           	CALL	_LCDWrite
0021e0   f01e
0021e2   0e02     movlw	0x2                	MOVLW	0x02
0021e4   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	353; TCPIP_Stack/LCDBlocking.c	Delay10us(5);
0021e6   0e55     movlw	0x55               	MOVLW	0x55
0021e8   6e01     movwf	0x1, 0             	MOVWF	r0x01
0021ea   6a02     clrf	0x2, 0              	CLRF	r0x02
0021ec   6a03     clrf	0x3, 0              	CLRF	r0x03
0021ee   6a04     clrf	0x4, 0              	CLRF	r0x04
                                           _00233_DS_:
0021f0   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
0021f2   f005
0021f4   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
0021f6   f006
0021f8   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
0021fa   f007
0021fc   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
0021fe   f008
002200   0eff     movlw	0xff               	MOVLW	0xff
002202   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
002204   0eff     movlw	0xff               	MOVLW	0xff
002206   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
002208   0eff     movlw	0xff               	MOVLW	0xff
00220a   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
00220c   0eff     movlw	0xff               	MOVLW	0xff
00220e   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
002210   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
002212   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
002214   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
002216   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
002218   e1eb     bnz	0x21f0               	BNZ	_00233_DS_
                                           ;	.line	341; TCPIP_Stack/LCDBlocking.c	for(i = 0; i < 16u; i++)
00221a   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
00221c   d79f     bra	0x215c               	BRA	_00257_DS_
                                           _00260_DS_:
                                           ;	.line	357; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0xC0);
00221e   0ec0     movlw	0xc0               	MOVLW	0xc0
002220   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002222   0e00     movlw	0                  	MOVLW	0x00
002224   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002226   ec66     call	0x3ccc, 0           	CALL	_LCDWrite
002228   f01e
00222a   0e02     movlw	0x2                	MOVLW	0x02
00222c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	358; TCPIP_Stack/LCDBlocking.c	Delay10us(5);
00222e   0e55     movlw	0x55               	MOVLW	0x55
002230   6e00     movwf	0, 0               	MOVWF	r0x00
002232   6a01     clrf	0x1, 0              	CLRF	r0x01
002234   6a02     clrf	0x2, 0              	CLRF	r0x02
002236   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00239_DS_:
002238   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
00223a   f004
00223c   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
00223e   f005
002240   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
002242   f006
002244   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
002246   f007
002248   0eff     movlw	0xff               	MOVLW	0xff
00224a   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
00224c   0eff     movlw	0xff               	MOVLW	0xff
00224e   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
002250   0eff     movlw	0xff               	MOVLW	0xff
002252   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
002254   0eff     movlw	0xff               	MOVLW	0xff
002256   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
002258   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00225a   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
00225c   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
00225e   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
002260   e1eb     bnz	0x2238               	BNZ	_00239_DS_
                                           ;	.line	361; TCPIP_Stack/LCDBlocking.c	for(i = 16; i < 32u; i++)
002262   0e10     movlw	0x10               	MOVLW	0x10
002264   6e00     movwf	0, 0               	MOVWF	r0x00
                                           _00265_DS_:
002266   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
002268   f001
00226a   6a02     clrf	0x2, 0              	CLRF	r0x02
00226c   0e00     movlw	0                  	MOVLW	0x00
00226e   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
002270   e102     bnz	0x2276               	BNZ	_00299_DS_
002272   0e20     movlw	0x20               	MOVLW	0x20
002274   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00299_DS_:
002276   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
002278   d057     bra	0x2328               	BRA	_00269_DS_
                                           ;	.line	365; TCPIP_Stack/LCDBlocking.c	if(LCDText[i] == 0u)
00227a   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
00227c   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
00227e   6e01     movwf	0x1, 0             	MOVWF	r0x01
002280   6a02     clrf	0x2, 0              	CLRF	r0x02
002282   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
002284   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
002286   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
002288   ffe9
00228a   c002     movff	0x2, 0xfea         	MOVFF	r0x02, FSR0H
00228c   ffea
00228e   cfef     movff	0xfef, 0x1         	MOVFF	INDF0, r0x01
002290   f001
002292   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002294   e119     bnz	0x22c8               	BNZ	_00246_DS_
                                           ;	.line	367; TCPIP_Stack/LCDBlocking.c	for(j=i; j < 32u; j++)
002296   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
002298   f001
                                           _00261_DS_:
00229a   c001     movff	0x1, 0x2           	MOVFF	r0x01, r0x02
00229c   f002
00229e   6a03     clrf	0x3, 0              	CLRF	r0x03
0022a0   0e00     movlw	0                  	MOVLW	0x00
0022a2   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
0022a4   e102     bnz	0x22aa               	BNZ	_00300_DS_
0022a6   0e20     movlw	0x20               	MOVLW	0x20
0022a8   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
                                           _00300_DS_:
0022aa   e20e     bc	0x22c8                	BC	_00246_DS_
                                           ;	.line	369; TCPIP_Stack/LCDBlocking.c	LCDText[j] = ' ';
0022ac   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
0022ae   2401     addwf	0x1, 0, 0          	ADDWF	r0x01, W
0022b0   6e02     movwf	0x2, 0             	MOVWF	r0x02
0022b2   6a03     clrf	0x3, 0              	CLRF	r0x03
0022b4   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
0022b6   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
0022b8   c002     movff	0x2, 0xfe9         	MOVFF	r0x02, FSR0L
0022ba   ffe9
0022bc   c003     movff	0x3, 0xfea         	MOVFF	r0x03, FSR0H
0022be   ffea
0022c0   0e20     movlw	0x20               	MOVLW	0x20
0022c2   6eef     movwf	0xef, 0            	MOVWF	INDF0
                                           ;	.line	367; TCPIP_Stack/LCDBlocking.c	for(j=i; j < 32u; j++)
0022c4   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
0022c6   d7e9     bra	0x229a               	BRA	_00261_DS_
                                           _00246_DS_:
                                           ;	.line	372; TCPIP_Stack/LCDBlocking.c	LCDWrite(1, LCDText[i]);
0022c8   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
0022ca   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
0022cc   6e01     movwf	0x1, 0             	MOVWF	r0x01
0022ce   6a02     clrf	0x2, 0              	CLRF	r0x02
0022d0   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
0022d2   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0022d4   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
0022d6   ffe9
0022d8   c002     movff	0x2, 0xfea         	MOVFF	r0x02, FSR0H
0022da   ffea
0022dc   cfef     movff	0xfef, 0x1         	MOVFF	INDF0, r0x01
0022de   f001
0022e0   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0022e2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0022e4   0e01     movlw	0x1                	MOVLW	0x01
0022e6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0022e8   ec66     call	0x3ccc, 0           	CALL	_LCDWrite
0022ea   f01e
0022ec   0e02     movlw	0x2                	MOVLW	0x02
0022ee   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	373; TCPIP_Stack/LCDBlocking.c	Delay10us(5);
0022f0   0e55     movlw	0x55               	MOVLW	0x55
0022f2   6e01     movwf	0x1, 0             	MOVWF	r0x01
0022f4   6a02     clrf	0x2, 0              	CLRF	r0x02
0022f6   6a03     clrf	0x3, 0              	CLRF	r0x03
0022f8   6a04     clrf	0x4, 0              	CLRF	r0x04
                                           _00247_DS_:
0022fa   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
0022fc   f005
0022fe   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
002300   f006
002302   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
002304   f007
002306   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
002308   f008
00230a   0eff     movlw	0xff               	MOVLW	0xff
00230c   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
00230e   0eff     movlw	0xff               	MOVLW	0xff
002310   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
002312   0eff     movlw	0xff               	MOVLW	0xff
002314   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
002316   0eff     movlw	0xff               	MOVLW	0xff
002318   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
00231a   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00231c   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
00231e   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
002320   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
002322   e1eb     bnz	0x22fa               	BNZ	_00247_DS_
                                           ;	.line	361; TCPIP_Stack/LCDBlocking.c	for(i = 16; i < 32u; i++)
002324   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
002326   d79f     bra	0x2266               	BRA	_00265_DS_
                                           _00269_DS_:
002328   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
00232a   f008
00232c   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
00232e   f007
002330   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
002332   f006
002334   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
002336   f005
002338   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
00233a   f004
00233c   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00233e   f003
002340   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
002342   f002
002344   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
002346   f001
002348   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00234a   f000
00234c   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00234e   ffd9
002350   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDInit	code
                                           _LCDInit:
                                           ;	.line	207; TCPIP_Stack/LCDBlocking.c	void LCDInit(void)
002352   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002354   ffe5
002356   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002358   ffd9
00235a   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00235c   ffe5
00235e   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002360   ffe5
002362   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
002364   ffe5
002366   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002368   ffe5
00236a   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00236c   ffe5
00236e   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
002370   ffe5
002372   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
002374   ffe5
002376   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
002378   ffe5
00237a   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
00237c   ffe5
                                           ;	.line	211; TCPIP_Stack/LCDBlocking.c	memset(LCDText, ' ', sizeof(LCDText)-1);
00237e   0e00     movlw	0                  	MOVLW	0x00
002380   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002382   0e20     movlw	0x20               	MOVLW	0x20
002384   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002386   0e20     movlw	0x20               	MOVLW	0x20
002388   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00238a   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
00238c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00238e   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
002390   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002392   ec06     call	0x360c, 0           	CALL	_memset
002394   f01b
002396   0e05     movlw	0x5                	MOVLW	0x05
002398   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00239a   010f     movlb	0xf                	BANKSEL	(_LCDText + 32)
                                           ;	.line	212; TCPIP_Stack/LCDBlocking.c	LCDText[sizeof(LCDText)-1] = 0;
00239c   6b20     clrf	0x20, 0x1           	CLRF	(_LCDText + 32), B
                                           ;	.line	215; TCPIP_Stack/LCDBlocking.c	LCD_E_IO = 0;
00239e   9090     bcf	0x90, 0, 0           	BCF	_LATHbits, 0
                                           ;	.line	216; TCPIP_Stack/LCDBlocking.c	LCD_RD_WR_IO = 0;
0023a0   9290     bcf	0x90, 0x1, 0         	BCF	_LATHbits, 1
                                           ;	.line	220; TCPIP_Stack/LCDBlocking.c	LCD_DATA_TRIS = 0x00;
0023a2   6a96     clrf	0x96, 0             	CLRF	_TRISE
                                           ;	.line	233; TCPIP_Stack/LCDBlocking.c	LCD_RD_WR_TRIS = 0;
0023a4   9299     bcf	0x99, 0x1, 0         	BCF	_TRISHbits, 1
                                           ;	.line	234; TCPIP_Stack/LCDBlocking.c	LCD_RS_TRIS = 0;
0023a6   9499     bcf	0x99, 0x2, 0         	BCF	_TRISHbits, 2
                                           ;	.line	235; TCPIP_Stack/LCDBlocking.c	LCD_E_TRIS = 0;
0023a8   9099     bcf	0x99, 0, 0           	BCF	_TRISHbits, 0
                                           ;	.line	239; TCPIP_Stack/LCDBlocking.c	DelayMs(40);
0023aa   0ea0     movlw	0xa0               	MOVLW	0xa0
0023ac   6e00     movwf	0, 0               	MOVWF	r0x00
0023ae   0e09     movlw	0x9                	MOVLW	0x09
0023b0   6e01     movwf	0x1, 0             	MOVWF	r0x01
0023b2   0e01     movlw	0x1                	MOVLW	0x01
0023b4   6e02     movwf	0x2, 0             	MOVWF	r0x02
0023b6   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00143_DS_:
0023b8   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
0023ba   f004
0023bc   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
0023be   f005
0023c0   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
0023c2   f006
0023c4   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
0023c6   f007
0023c8   0eff     movlw	0xff               	MOVLW	0xff
0023ca   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0023cc   0eff     movlw	0xff               	MOVLW	0xff
0023ce   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
0023d0   0eff     movlw	0xff               	MOVLW	0xff
0023d2   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0023d4   0eff     movlw	0xff               	MOVLW	0xff
0023d6   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
0023d8   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0023da   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
0023dc   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
0023de   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
0023e0   e1eb     bnz	0x23b8               	BNZ	_00143_DS_
                                           ;	.line	247; TCPIP_Stack/LCDBlocking.c	LCD_RS_IO = 0;
0023e2   9490     bcf	0x90, 0x2, 0         	BCF	_LATHbits, 2
                                           ;	.line	249; TCPIP_Stack/LCDBlocking.c	LCD_DATA_IO = 0x03;
0023e4   0e03     movlw	0x3                	MOVLW	0x03
0023e6   6e8d     movwf	0x8d, 0            	MOVWF	_LATE
0023e8   0000     nop                      	nop 
0023ea   0000     nop                      	nop 
                                           ;	.line	264; TCPIP_Stack/LCDBlocking.c	for(i = 0; i < 3u; i++)
0023ec   6a00     clrf	0, 0                	CLRF	r0x00
                                           _00191_DS_:
0023ee   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
0023f0   f001
0023f2   6a02     clrf	0x2, 0              	CLRF	r0x02
0023f4   0e00     movlw	0                  	MOVLW	0x00
0023f6   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
0023f8   e102     bnz	0x23fe               	BNZ	_00220_DS_
0023fa   0e03     movlw	0x3                	MOVLW	0x03
0023fc   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00220_DS_:
0023fe   e239     bc	0x2472                	BC	_00194_DS_
                                           ;	.line	266; TCPIP_Stack/LCDBlocking.c	LCD_E_IO = 1;
002400   8090     bsf	0x90, 0, 0           	BSF	_LATHbits, 0
                                           ;	.line	267; TCPIP_Stack/LCDBlocking.c	Delay10us(1);	       	// Wait E Pulse width time (min 230ns)
002402   0e11     movlw	0x11               	MOVLW	0x11
002404   6e01     movwf	0x1, 0             	MOVWF	r0x01
002406   6a02     clrf	0x2, 0              	CLRF	r0x02
002408   6a03     clrf	0x3, 0              	CLRF	r0x03
00240a   6a04     clrf	0x4, 0              	CLRF	r0x04
                                           _00155_DS_:
00240c   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
00240e   f005
002410   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
002412   f006
002414   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
002416   f007
002418   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
00241a   f008
00241c   0eff     movlw	0xff               	MOVLW	0xff
00241e   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
002420   0eff     movlw	0xff               	MOVLW	0xff
002422   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
002424   0eff     movlw	0xff               	MOVLW	0xff
002426   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
002428   0eff     movlw	0xff               	MOVLW	0xff
00242a   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
00242c   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00242e   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
002430   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
002432   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
002434   e1eb     bnz	0x240c               	BNZ	_00155_DS_
                                           ;	.line	268; TCPIP_Stack/LCDBlocking.c	LCD_E_IO = 0;
002436   9090     bcf	0x90, 0, 0           	BCF	_LATHbits, 0
                                           ;	.line	269; TCPIP_Stack/LCDBlocking.c	DelayMs(2);
002438   0e48     movlw	0x48               	MOVLW	0x48
00243a   6e01     movwf	0x1, 0             	MOVWF	r0x01
00243c   0e0d     movlw	0xd                	MOVLW	0x0d
00243e   6e02     movwf	0x2, 0             	MOVWF	r0x02
002440   6a03     clrf	0x3, 0              	CLRF	r0x03
002442   6a04     clrf	0x4, 0              	CLRF	r0x04
                                           _00161_DS_:
002444   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
002446   f005
002448   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
00244a   f006
00244c   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
00244e   f007
002450   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
002452   f008
002454   0eff     movlw	0xff               	MOVLW	0xff
002456   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
002458   0eff     movlw	0xff               	MOVLW	0xff
00245a   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
00245c   0eff     movlw	0xff               	MOVLW	0xff
00245e   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
002460   0eff     movlw	0xff               	MOVLW	0xff
002462   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
002464   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
002466   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
002468   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
00246a   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
00246c   e1eb     bnz	0x2444               	BNZ	_00161_DS_
                                           ;	.line	264; TCPIP_Stack/LCDBlocking.c	for(i = 0; i < 3u; i++)
00246e   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
002470   d7be     bra	0x23ee               	BRA	_00191_DS_
                                           _00194_DS_:
                                           ;	.line	295; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0x38);
002472   0e38     movlw	0x38               	MOVLW	0x38
002474   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002476   0e00     movlw	0                  	MOVLW	0x00
002478   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00247a   ec66     call	0x3ccc, 0           	CALL	_LCDWrite
00247c   f01e
00247e   0e02     movlw	0x2                	MOVLW	0x02
002480   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	297; TCPIP_Stack/LCDBlocking.c	Delay10us(5);
002482   0e55     movlw	0x55               	MOVLW	0x55
002484   6e00     movwf	0, 0               	MOVWF	r0x00
002486   6a01     clrf	0x1, 0              	CLRF	r0x01
002488   6a02     clrf	0x2, 0              	CLRF	r0x02
00248a   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00167_DS_:
00248c   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
00248e   f004
002490   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
002492   f005
002494   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
002496   f006
002498   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
00249a   f007
00249c   0eff     movlw	0xff               	MOVLW	0xff
00249e   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0024a0   0eff     movlw	0xff               	MOVLW	0xff
0024a2   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
0024a4   0eff     movlw	0xff               	MOVLW	0xff
0024a6   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0024a8   0eff     movlw	0xff               	MOVLW	0xff
0024aa   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
0024ac   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0024ae   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
0024b0   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
0024b2   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
0024b4   e1eb     bnz	0x248c               	BNZ	_00167_DS_
                                           ;	.line	300; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0x06);	// Increment after each write, do not shift
0024b6   0e06     movlw	0x6                	MOVLW	0x06
0024b8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0024ba   0e00     movlw	0                  	MOVLW	0x00
0024bc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0024be   ec66     call	0x3ccc, 0           	CALL	_LCDWrite
0024c0   f01e
0024c2   0e02     movlw	0x2                	MOVLW	0x02
0024c4   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	301; TCPIP_Stack/LCDBlocking.c	Delay10us(5);
0024c6   0e55     movlw	0x55               	MOVLW	0x55
0024c8   6e00     movwf	0, 0               	MOVWF	r0x00
0024ca   6a01     clrf	0x1, 0              	CLRF	r0x01
0024cc   6a02     clrf	0x2, 0              	CLRF	r0x02
0024ce   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00173_DS_:
0024d0   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
0024d2   f004
0024d4   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
0024d6   f005
0024d8   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
0024da   f006
0024dc   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
0024de   f007
0024e0   0eff     movlw	0xff               	MOVLW	0xff
0024e2   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0024e4   0eff     movlw	0xff               	MOVLW	0xff
0024e6   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
0024e8   0eff     movlw	0xff               	MOVLW	0xff
0024ea   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0024ec   0eff     movlw	0xff               	MOVLW	0xff
0024ee   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
0024f0   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0024f2   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
0024f4   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
0024f6   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
0024f8   e1eb     bnz	0x24d0               	BNZ	_00173_DS_
                                           ;	.line	304; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0x0C);	// Turn display on, no cusor, no cursor blink
0024fa   0e0c     movlw	0xc                	MOVLW	0x0c
0024fc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0024fe   0e00     movlw	0                  	MOVLW	0x00
002500   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002502   ec66     call	0x3ccc, 0           	CALL	_LCDWrite
002504   f01e
002506   0e02     movlw	0x2                	MOVLW	0x02
002508   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	305; TCPIP_Stack/LCDBlocking.c	Delay10us(5);
00250a   0e55     movlw	0x55               	MOVLW	0x55
00250c   6e00     movwf	0, 0               	MOVWF	r0x00
00250e   6a01     clrf	0x1, 0              	CLRF	r0x01
002510   6a02     clrf	0x2, 0              	CLRF	r0x02
002512   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00179_DS_:
002514   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
002516   f004
002518   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
00251a   f005
00251c   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
00251e   f006
002520   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
002522   f007
002524   0eff     movlw	0xff               	MOVLW	0xff
002526   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
002528   0eff     movlw	0xff               	MOVLW	0xff
00252a   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
00252c   0eff     movlw	0xff               	MOVLW	0xff
00252e   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
002530   0eff     movlw	0xff               	MOVLW	0xff
002532   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
002534   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002536   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
002538   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
00253a   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
00253c   e1eb     bnz	0x2514               	BNZ	_00179_DS_
                                           ;	.line	308; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0x01);	
00253e   0e01     movlw	0x1                	MOVLW	0x01
002540   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002542   0e00     movlw	0                  	MOVLW	0x00
002544   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002546   ec66     call	0x3ccc, 0           	CALL	_LCDWrite
002548   f01e
00254a   0e02     movlw	0x2                	MOVLW	0x02
00254c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	309; TCPIP_Stack/LCDBlocking.c	DelayMs(2);
00254e   0e48     movlw	0x48               	MOVLW	0x48
002550   6e00     movwf	0, 0               	MOVWF	r0x00
002552   0e0d     movlw	0xd                	MOVLW	0x0d
002554   6e01     movwf	0x1, 0             	MOVWF	r0x01
002556   6a02     clrf	0x2, 0              	CLRF	r0x02
002558   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00185_DS_:
00255a   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
00255c   f004
00255e   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
002560   f005
002562   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
002564   f006
002566   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
002568   f007
00256a   0eff     movlw	0xff               	MOVLW	0xff
00256c   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
00256e   0eff     movlw	0xff               	MOVLW	0xff
002570   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
002572   0eff     movlw	0xff               	MOVLW	0xff
002574   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
002576   0eff     movlw	0xff               	MOVLW	0xff
002578   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
00257a   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00257c   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
00257e   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
002580   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
002582   e1eb     bnz	0x255a               	BNZ	_00185_DS_
002584   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
002586   f008
002588   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
00258a   f007
00258c   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
00258e   f006
002590   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
002592   f005
002594   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
002596   f004
002598   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00259a   f003
00259c   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00259e   f002
0025a0   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0025a2   f001
0025a4   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0025a6   f000
0025a8   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0025aa   ffd9
0025ac   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDWrite	code
                                           _LCDWrite:
                                           ;	.line	94; TCPIP_Stack/LCDBlocking.c	static void LCDWrite(BYTE RS, BYTE Data)
003ccc   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
003cce   ffe5
003cd0   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
003cd2   ffd9
003cd4   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
003cd6   ffe5
003cd8   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
003cda   ffe5
003cdc   0e02     movlw	0x2                	MOVLW	0x02
003cde   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
003ce0   f000
003ce2   0e03     movlw	0x3                	MOVLW	0x03
003ce4   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
003ce6   f001
                                           ;	.line	97; TCPIP_Stack/LCDBlocking.c	LCD_DATA_TRIS = 0x00;
003ce8   6a96     clrf	0x96, 0             	CLRF	_TRISE
                                           ;	.line	110; TCPIP_Stack/LCDBlocking.c	LCD_RS_TRIS = 0;
003cea   9499     bcf	0x99, 0x2, 0         	BCF	_TRISHbits, 2
                                           ;	.line	111; TCPIP_Stack/LCDBlocking.c	LCD_RD_WR_TRIS = 0;
003cec   9299     bcf	0x99, 0x1, 0         	BCF	_TRISHbits, 1
                                           ;	.line	112; TCPIP_Stack/LCDBlocking.c	LCD_RD_WR_IO = 0;
003cee   9290     bcf	0x90, 0x1, 0         	BCF	_LATHbits, 1
                                           ;	.line	113; TCPIP_Stack/LCDBlocking.c	LCD_RS_IO = RS;
003cf0   5000     movf	0, 0, 0             	MOVF	r0x00, W
003cf2   0b01     andlw	0x1                	ANDLW	0x01
003cf4   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
003cf6   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
003cf8   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
003cfa   5090     movf	0x90, 0, 0          	MOVF	_LATHbits, W
003cfc   0bfb     andlw	0xfb               	ANDLW	0xfb
003cfe   10f4     iorwf	0xf4, 0, 0         	IORWF	PRODH, W
003d00   6e90     movwf	0x90, 0            	MOVWF	_LATHbits
                                           ;	.line	140; TCPIP_Stack/LCDBlocking.c	LCD_DATA_IO = Data;
003d02   c001     movff	0x1, 0xf8d         	MOVFF	r0x01, _LATE
003d04   ff8d
003d06   0000     nop                      	nop 
003d08   0000     nop                      	nop 
                                           ;	.line	155; TCPIP_Stack/LCDBlocking.c	LCD_E_IO = 1;
003d0a   8090     bsf	0x90, 0, 0           	BSF	_LATHbits, 0
003d0c   0000     nop                      	nop 
003d0e   0000     nop                      	nop 
003d10   0000     nop                      	nop 
003d12   0000     nop                      	nop 
003d14   0000     nop                      	nop 
003d16   0000     nop                      	nop 
003d18   0000     nop                      	nop 
003d1a   0000     nop                      	nop 
003d1c   0000     nop                      	nop 
                                           ;	.line	165; TCPIP_Stack/LCDBlocking.c	LCD_E_IO = 0;
003d1e   9090     bcf	0x90, 0, 0           	BCF	_LATHbits, 0
003d20   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
003d22   f001
003d24   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
003d26   f000
003d28   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
003d2a   ffd9
003d2c   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 1496 (0x05d8) bytes ( 1.14%)
                                           ;           	  748 (0x02ec) words
                                           ; udata size:	   33 (0x0021) bytes ( 0.86%)
                                           ; access size:	    9 (0x0009) bytes
                                           
                                           
                                           	end
