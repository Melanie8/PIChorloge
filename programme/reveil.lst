gplink-0.13.7 beta
Copyright (c) 1998-2005 gputils project
Listing File Generated: 10-26-2013  20:17:23
 
 
Address  Value    Disassembly              Source
-------  -----    -----------              ------
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Oct 15 2013) (Mac OS X ppc)
                                           ; This file was generated Sat Oct 26 20:17:23 2013
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _time
                                           	global _refresh_lcd
                                           	global _alarm
                                           	global _button
                                           	global _inc_ahour
                                           	global _inc_amin
                                           	global _DisplayString
                                           	global _strlcpy
                                           	global _chandelle
                                           	global _button1
                                           	global _button2
                                           	global _overflows
                                           	global _sec
                                           	global _decisec
                                           	global _ds
                                           	global _h
                                           	global _m
                                           	global _s
                                           	global _thour
                                           	global _tmin
                                           	global _tsec
                                           	global _ahour
                                           	global _amin
                                           	global _ahour_o
                                           	global _amin_o
                                           	global _alarm_set
                                           	global _snooze
                                           	global _stop_ringing
                                           	global _whereami
                                           	global _on
                                           	global _display
                                           	global _high_isr
                                           	global _low_isr
                                           	global _main
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern __divuchar
                                           	extern __gptrget1
                                           	extern __gptrput1
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _LCDText
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _sprintf
                                           	extern _strlen
                                           	extern _LCDInit
                                           	extern _LCDUpdate
                                           	extern ___ulong2fs
                                           	extern ___fsdiv
                                           	extern ___fs2ulong
                                           	extern __mullong
                                           	extern __modulong
                                           	extern __divulong
                                           	extern ___fsadd
                                           	extern ___uchar2fs
                                           	extern ___fsmul
                                           	extern ___fssub
                                           	extern __modsint
                                           	extern __divsint
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           PCL	equ	0xff9
                                           PCLATH	equ	0xffa
                                           PCLATU	equ	0xffb
                                           WREG	equ	0xfe8
                                           BSR	equ	0xfe0
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           	idata
                                           _button1	db	0x00
                                           _button2	db	0x00
                                           _overflows	db	0x00, 0x00, 0x00, 0x00
                                           _thour	db	0x00
                                           _tmin	db	0x00
                                           _tsec	db	0x00
                                           _ahour	db	0x00
                                           _amin	db	0x00
                                           _ahour_o	db	0x00
                                           _amin_o	db	0x00
                                           _alarm_set	db	0x00
                                           _snooze	db	0x00
                                           _stop_ringing	db	0x00
                                           _whereami	db	0x00
                                           _on	db	0x00
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           r0x0a	res	1
                                           r0x0b	res	1
                                           r0x0c	res	1
                                           r0x0d	res	1
                                           r0x0e	res	1
                                           r0x0f	res	1
                                           r0x10	res	1
                                           r0x11	res	1
                                           r0x12	res	1
                                           r0x13	res	1
                                           r0x14	res	1
                                           r0x15	res	1
                                           
                                           udata_reveil_0	udata
                                           _chandelle	res	1
                                           
                                           udata_reveil_1	udata
                                           _sec	res	4
                                           
                                           udata_reveil_2	udata
                                           _decisec	res	4
                                           
                                           udata_reveil_3	udata
                                           _ds	res	1
                                           
                                           udata_reveil_4	udata
                                           _h	res	1
                                           
                                           udata_reveil_5	udata
                                           _m	res	1
                                           
                                           udata_reveil_6	udata
                                           _s	res	1
                                           
                                           udata_reveil_7	udata
                                           _display	res	32
                                           
                                           ;--------------------------------------------------------
                                           ; interrupt vector 
                                           ;--------------------------------------------------------
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; ; Starting pCode block for absolute section
                                           ; ;-----------------------------------------
                                           S_reveil_ivec_0x1_high_isr	code	0X000008
                                           ivec_0x1_high_isr:
000008   ef1b     goto	0x2236              	GOTO	_high_isr
00000a   f011
                                           
                                           ; ; Starting pCode block for absolute section
                                           ; ;-----------------------------------------
                                           S_reveil_ivec_0x2_low_isr	code	0X000018
                                           ivec_0x2_low_isr:
000018   effb     goto	0x3ff6              	GOTO	_low_isr
00001a   f01f
                                           
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_reveil__main	code
                                           _main:
                                           ;	.line	154; reveil.c	RCONbits.IPEN       = 1; //enable interrupts priority levels
004200   8ed0     bsf	0xd0, 0x7, 0         	BSF	_RCONbits, 7
                                           ;	.line	155; reveil.c	INTCONbits.GIE      = 1; //enables all high-priority interrupts
004202   8ef2     bsf	0xf2, 0x7, 0         	BSF	_INTCONbits, 7
                                           ;	.line	156; reveil.c	INTCONbits.PEIE     = 1; //enables all low-priority peripheral interrupts
004204   8cf2     bsf	0xf2, 0x6, 0         	BSF	_INTCONbits, 6
                                           ;	.line	159; reveil.c	T0CONbits.TMR0ON    = 1; //enables Timer0
004206   8ed5     bsf	0xd5, 0x7, 0         	BSF	_T0CONbits, 7
                                           ;	.line	160; reveil.c	INTCONbits.TMR0IE   = 1; //enables the TMR0 overflow interrupt
004208   8af2     bsf	0xf2, 0x5, 0         	BSF	_INTCONbits, 5
                                           ;	.line	161; reveil.c	INTCONbits.TMR0IF   = 0; //clear Timer0 overflow bit
00420a   94f2     bcf	0xf2, 0x2, 0         	BCF	_INTCONbits, 2
                                           ;	.line	162; reveil.c	INTCON2bits.TMR0IP  = 1; //high priority
00420c   84f1     bsf	0xf1, 0x2, 0         	BSF	_INTCON2bits, 2
                                           ;	.line	163; reveil.c	T0CONbits.T08BIT    = 0; //timer0 is configured as a 16-bit timer/counter
00420e   9cd5     bcf	0xd5, 0x6, 0         	BCF	_T0CONbits, 6
                                           ;	.line	164; reveil.c	T0CONbits.T0CS      = 0; //internal instruction cycle clock (CLKO)
004210   9ad5     bcf	0xd5, 0x5, 0         	BCF	_T0CONbits, 5
                                           ;	.line	165; reveil.c	T0CONbits.PSA       = 1; //timer0 prescaler is not assigned
004212   86d5     bsf	0xd5, 0x3, 0         	BSF	_T0CONbits, 3
                                           ;	.line	166; reveil.c	TMR0L = 0;    TMR0H = 0;
004214   6ad6     clrf	0xd6, 0             	CLRF	_TMR0L
004216   6ad7     clrf	0xd7, 0             	CLRF	_TMR0H
                                           ;	.line	169; reveil.c	LED0_TRIS = 0; //configure 1st led pin as output (yellow)
004218   909a     bcf	0x9a, 0, 0           	BCF	_TRISJbits, 0
                                           ;	.line	170; reveil.c	LED1_TRIS = 0; //configure 2nd led pin as output (red)
00421a   929a     bcf	0x9a, 0x1, 0         	BCF	_TRISJbits, 1
                                           ;	.line	171; reveil.c	LED2_TRIS = 0; //configure 3rd led pin as output (red)
00421c   949a     bcf	0x9a, 0x2, 0         	BCF	_TRISJbits, 2
                                           ;	.line	172; reveil.c	LATJbits.LATJ0 = 0; // switch LED 1 off
00421e   9091     bcf	0x91, 0, 0           	BCF	_LATJbits, 0
                                           ;	.line	173; reveil.c	LATJbits.LATJ1 = 0; // switch LED 2 off
004220   9291     bcf	0x91, 0x1, 0         	BCF	_LATJbits, 1
                                           ;	.line	174; reveil.c	LATJbits.LATJ2 = 0; // switch LED 3 off
004222   9491     bcf	0x91, 0x2, 0         	BCF	_LATJbits, 2
                                           ;	.line	177; reveil.c	BUTTON0_TRIS        = 1; //configure 1st button as input
004224   8693     bsf	0x93, 0x3, 0         	BSF	_TRISBbits, 3
                                           ;	.line	178; reveil.c	BUTTON1_TRIS        = 1; //configure 2nd button as input
004226   8293     bsf	0x93, 0x1, 0         	BSF	_TRISBbits, 1
                                           ;	.line	179; reveil.c	INTCON3bits.INT3E   = 1; //enable INT3 interrupt (button 1)
004228   8af0     bsf	0xf0, 0x5, 0         	BSF	_INTCON3bits, 5
                                           ;	.line	180; reveil.c	INTCON3bits.INT3F   = 0; //clear INT3 flag
00422a   94f0     bcf	0xf0, 0x2, 0         	BCF	_INTCON3bits, 2
                                           ;	.line	181; reveil.c	INTCON3bits.INT1E   = 1; //enable INT1 interrupt (button 2)
00422c   86f0     bsf	0xf0, 0x3, 0         	BSF	_INTCON3bits, 3
                                           ;	.line	182; reveil.c	INTCON3bits.INT1F   = 0; //clear INT1 flag
00422e   90f0     bcf	0xf0, 0, 0           	BCF	_INTCON3bits, 0
                                           ;	.line	183; reveil.c	INTCON3bits.INT1IP  = 0; //low priority
004230   9cf0     bcf	0xf0, 0x6, 0         	BCF	_INTCON3bits, 6
                                           ;	.line	184; reveil.c	INTCON2bits.INT3IP  = 0; //low priority
004232   92f1     bcf	0xf1, 0x1, 0         	BCF	_INTCON2bits, 1
                                           ;	.line	186; reveil.c	LCDInit();
004234   ecaa     call	0x2754, 0           	CALL	_LCDInit
004236   f013
                                           ;	.line	187; reveil.c	whereami = TIME_MENU;
004238   0e01     movlw	0x1                	MOVLW	0x01
00423a   010f     movlb	0xf                	BANKSEL	_whereami
00423c   6f51     movwf	0x51, 0x1          	MOVWF	_whereami, B
00423e   010e     movlb	0xe                	BANKSEL	_chandelle
                                           ;	.line	189; reveil.c	chandelle++; // ##### BIZARRE ####
004240   2b68     incf	0x68, 0x1, 0x1      	INCF	_chandelle, F, B
                                           ;	.line	191; reveil.c	T0CONbits.TMR0ON = 1; // start timer0
004242   8ed5     bsf	0xd5, 0x7, 0         	BSF	_T0CONbits, 7
                                           _00123_DS_:
                                           ;	.line	194; reveil.c	time();
004244   ecc2     call	0x1b84, 0           	CALL	_time
004246   f00d
                                           ;	.line	195; reveil.c	refresh_lcd();
004248   ec23     call	0xe46, 0            	CALL	_refresh_lcd
00424a   f007
                                           ;	.line	196; reveil.c	alarm();
00424c   ec76     call	0x3eec, 0           	CALL	_alarm
00424e   f01f
                                           ;	.line	197; reveil.c	button();
004250   ec29     call	0x852, 0            	CALL	_button
004252   f004
004254   d7f7     bra	0x4244               	BRA	_00123_DS_
004256   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_reveil__strlcpy	code
                                           _strlcpy:
                                           ;	.line	538; reveil.c	strlcpy(char *dst, const char *src, size_t siz)
002bc4   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002bc6   ffe5
002bc8   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002bca   ffd9
002bcc   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002bce   ffe5
002bd0   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002bd2   ffe5
002bd4   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
002bd6   ffe5
002bd8   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002bda   ffe5
002bdc   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
002bde   ffe5
002be0   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
002be2   ffe5
002be4   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
002be6   ffe5
002be8   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
002bea   ffe5
002bec   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
002bee   ffe5
002bf0   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
002bf2   ffe5
002bf4   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
002bf6   ffe5
002bf8   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
002bfa   ffe5
002bfc   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
002bfe   ffe5
002c00   c00d     movff	0xd, 0xfe5         	MOVFF	r0x0d, POSTDEC1
002c02   ffe5
002c04   c00e     movff	0xe, 0xfe5         	MOVFF	r0x0e, POSTDEC1
002c06   ffe5
002c08   c00f     movff	0xf, 0xfe5         	MOVFF	r0x0f, POSTDEC1
002c0a   ffe5
002c0c   c010     movff	0x10, 0xfe5        	MOVFF	r0x10, POSTDEC1
002c0e   ffe5
002c10   c011     movff	0x11, 0xfe5        	MOVFF	r0x11, POSTDEC1
002c12   ffe5
002c14   c012     movff	0x12, 0xfe5        	MOVFF	r0x12, POSTDEC1
002c16   ffe5
002c18   c013     movff	0x13, 0xfe5        	MOVFF	r0x13, POSTDEC1
002c1a   ffe5
002c1c   c014     movff	0x14, 0xfe5        	MOVFF	r0x14, POSTDEC1
002c1e   ffe5
002c20   c015     movff	0x15, 0xfe5        	MOVFF	r0x15, POSTDEC1
002c22   ffe5
002c24   0e02     movlw	0x2                	MOVLW	0x02
002c26   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
002c28   f000
002c2a   0e03     movlw	0x3                	MOVLW	0x03
002c2c   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
002c2e   f001
002c30   0e04     movlw	0x4                	MOVLW	0x04
002c32   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
002c34   f002
002c36   0e05     movlw	0x5                	MOVLW	0x05
002c38   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
002c3a   f003
002c3c   0e06     movlw	0x6                	MOVLW	0x06
002c3e   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
002c40   f004
002c42   0e07     movlw	0x7                	MOVLW	0x07
002c44   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
002c46   f005
002c48   0e08     movlw	0x8                	MOVLW	0x08
002c4a   cfdb     movff	0xfdb, 0x6         	MOVFF	PLUSW2, r0x06
002c4c   f006
002c4e   0e09     movlw	0x9                	MOVLW	0x09
002c50   cfdb     movff	0xfdb, 0x7         	MOVFF	PLUSW2, r0x07
002c52   f007
                                           ;	.line	540; reveil.c	char       *d = dst;
002c54   c000     movff	0, 0x8             	MOVFF	r0x00, r0x08
002c56   f008
002c58   c001     movff	0x1, 0x9           	MOVFF	r0x01, r0x09
002c5a   f009
002c5c   c002     movff	0x2, 0xa           	MOVFF	r0x02, r0x0a
002c5e   f00a
                                           ;	.line	541; reveil.c	const char *s = src;
002c60   c003     movff	0x3, 0xb           	MOVFF	r0x03, r0x0b
002c62   f00b
002c64   c004     movff	0x4, 0xc           	MOVFF	r0x04, r0x0c
002c66   f00c
002c68   c005     movff	0x5, 0xd           	MOVFF	r0x05, r0x0d
002c6a   f00d
                                           ;	.line	542; reveil.c	size_t      n = siz;
002c6c   c006     movff	0x6, 0xe           	MOVFF	r0x06, r0x0e
002c6e   f00e
002c70   c007     movff	0x7, 0xf           	MOVFF	r0x07, r0x0f
002c72   f00f
                                           ;	.line	545; reveil.c	if (n != 0)
002c74   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
002c76   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
002c78   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
002c7a   d03e     bra	0x2cf8               	BRA	_00353_DS_
                                           ;	.line	547; reveil.c	while (--n != 0)
002c7c   c003     movff	0x3, 0x10          	MOVFF	r0x03, r0x10
002c7e   f010
002c80   c004     movff	0x4, 0x11          	MOVFF	r0x04, r0x11
002c82   f011
002c84   c005     movff	0x5, 0x12          	MOVFF	r0x05, r0x12
002c86   f012
002c88   c006     movff	0x6, 0x13          	MOVFF	r0x06, r0x13
002c8a   f013
002c8c   c007     movff	0x7, 0x14          	MOVFF	r0x07, r0x14
002c8e   f014
                                           _00349_DS_:
002c90   0eff     movlw	0xff               	MOVLW	0xff
002c92   2613     addwf	0x13, 0x1, 0       	ADDWF	r0x13, F
002c94   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
002c96   0614     decf	0x14, 0x1, 0        	DECF	r0x14, F
002c98   5013     movf	0x13, 0, 0          	MOVF	r0x13, W
002c9a   1014     iorwf	0x14, 0, 0         	IORWF	r0x14, W
002c9c   e01d     bz	0x2cd8                	BZ	_00368_DS_
                                           ;	.line	549; reveil.c	if ((*d++ = *s++) == '\0')
002c9e   c010     movff	0x10, 0xfe9        	MOVFF	r0x10, FSR0L
002ca0   ffe9
002ca2   c011     movff	0x11, 0xff3        	MOVFF	r0x11, PRODL
002ca4   fff3
002ca6   5012     movf	0x12, 0, 0          	MOVF	r0x12, W
002ca8   ec94     call	0x4328, 0           	CALL	__gptrget1
002caa   f021
002cac   6e15     movwf	0x15, 0            	MOVWF	r0x15
002cae   2a10     incf	0x10, 0x1, 0        	INCF	r0x10, F
002cb0   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
002cb2   2a11     incf	0x11, 0x1, 0        	INCF	r0x11, F
002cb4   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
002cb6   2a12     incf	0x12, 0x1, 0        	INCF	r0x12, F
002cb8   c015     movff	0x15, 0xfe5        	MOVFF	r0x15, POSTDEC1
002cba   ffe5
002cbc   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
002cbe   ffe9
002cc0   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
002cc2   fff3
002cc4   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002cc6   ecc9     call	0x4392, 0           	CALL	__gptrput1
002cc8   f021
002cca   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
002ccc   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
002cce   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
002cd0   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
002cd2   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
002cd4   5015     movf	0x15, 0, 0          	MOVF	r0x15, W
002cd6   e1dc     bnz	0x2c90               	BNZ	_00349_DS_
                                           _00368_DS_:
                                           ;	.line	550; reveil.c	break;
002cd8   c010     movff	0x10, 0xb          	MOVFF	r0x10, r0x0b
002cda   f00b
002cdc   c011     movff	0x11, 0xc          	MOVFF	r0x11, r0x0c
002cde   f00c
002ce0   c012     movff	0x12, 0xd          	MOVFF	r0x12, r0x0d
002ce2   f00d
002ce4   c000     movff	0, 0x8             	MOVFF	r0x00, r0x08
002ce6   f008
002ce8   c001     movff	0x1, 0x9           	MOVFF	r0x01, r0x09
002cea   f009
002cec   c002     movff	0x2, 0xa           	MOVFF	r0x02, r0x0a
002cee   f00a
002cf0   c013     movff	0x13, 0xe          	MOVFF	r0x13, r0x0e
002cf2   f00e
002cf4   c014     movff	0x14, 0xf          	MOVFF	r0x14, r0x0f
002cf6   f00f
                                           _00353_DS_:
                                           ;	.line	555; reveil.c	if (n == 0)
002cf8   500e     movf	0xe, 0, 0           	MOVF	r0x0e, W
002cfa   100f     iorwf	0xf, 0, 0          	IORWF	r0x0f, W
002cfc   e127     bnz	0x2d4c               	BNZ	_00360_DS_
                                           ;	.line	557; reveil.c	if (siz != 0)
002cfe   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
002d00   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
002d02   e009     bz	0x2d16                	BZ	_00367_DS_
                                           ;	.line	558; reveil.c	*d = '\0';          /* NUL-terminate dst */
002d04   0e00     movlw	0                  	MOVLW	0x00
002d06   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002d08   c008     movff	0x8, 0xfe9         	MOVFF	r0x08, FSR0L
002d0a   ffe9
002d0c   c009     movff	0x9, 0xff3         	MOVFF	r0x09, PRODL
002d0e   fff3
002d10   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
002d12   ecc9     call	0x4392, 0           	CALL	__gptrput1
002d14   f021
                                           _00367_DS_:
                                           ;	.line	559; reveil.c	while (*s++)
002d16   c00b     movff	0xb, 0             	MOVFF	r0x0b, r0x00
002d18   f000
002d1a   c00c     movff	0xc, 0x1           	MOVFF	r0x0c, r0x01
002d1c   f001
002d1e   c00d     movff	0xd, 0x2           	MOVFF	r0x0d, r0x02
002d20   f002
                                           _00356_DS_:
002d22   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
002d24   ffe9
002d26   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
002d28   fff3
002d2a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002d2c   ec94     call	0x4328, 0           	CALL	__gptrget1
002d2e   f021
002d30   6e06     movwf	0x6, 0             	MOVWF	r0x06
002d32   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
002d34   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
002d36   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
002d38   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
002d3a   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
002d3c   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
002d3e   e1f1     bnz	0x2d22               	BNZ	_00356_DS_
002d40   c000     movff	0, 0xb             	MOVFF	r0x00, r0x0b
002d42   f00b
002d44   c001     movff	0x1, 0xc           	MOVFF	r0x01, r0x0c
002d46   f00c
002d48   c002     movff	0x2, 0xd           	MOVFF	r0x02, r0x0d
002d4a   f00d
                                           _00360_DS_:
                                           ;	.line	565; reveil.c	return (s - src - 1);       /* count does not include NUL */
002d4c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002d4e   5c0b     subwf	0xb, 0, 0          	SUBWF	r0x0b, W
002d50   6e03     movwf	0x3, 0             	MOVWF	r0x03
002d52   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002d54   580c     subwfb	0xc, 0, 0         	SUBWFB	r0x0c, W
002d56   6e04     movwf	0x4, 0             	MOVWF	r0x04
002d58   0eff     movlw	0xff               	MOVLW	0xff
002d5a   2603     addwf	0x3, 0x1, 0        	ADDWF	r0x03, F
002d5c   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
002d5e   0604     decf	0x4, 0x1, 0         	DECF	r0x04, F
002d60   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
002d62   fff3
002d64   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002d66   cfe4     movff	0xfe4, 0x15        	MOVFF	PREINC1, r0x15
002d68   f015
002d6a   cfe4     movff	0xfe4, 0x14        	MOVFF	PREINC1, r0x14
002d6c   f014
002d6e   cfe4     movff	0xfe4, 0x13        	MOVFF	PREINC1, r0x13
002d70   f013
002d72   cfe4     movff	0xfe4, 0x12        	MOVFF	PREINC1, r0x12
002d74   f012
002d76   cfe4     movff	0xfe4, 0x11        	MOVFF	PREINC1, r0x11
002d78   f011
002d7a   cfe4     movff	0xfe4, 0x10        	MOVFF	PREINC1, r0x10
002d7c   f010
002d7e   cfe4     movff	0xfe4, 0xf         	MOVFF	PREINC1, r0x0f
002d80   f00f
002d82   cfe4     movff	0xfe4, 0xe         	MOVFF	PREINC1, r0x0e
002d84   f00e
002d86   cfe4     movff	0xfe4, 0xd         	MOVFF	PREINC1, r0x0d
002d88   f00d
002d8a   cfe4     movff	0xfe4, 0xc         	MOVFF	PREINC1, r0x0c
002d8c   f00c
002d8e   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
002d90   f00b
002d92   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
002d94   f00a
002d96   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
002d98   f009
002d9a   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
002d9c   f008
002d9e   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
002da0   f007
002da2   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
002da4   f006
002da6   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
002da8   f005
002daa   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
002dac   f004
002dae   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
002db0   f003
002db2   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
002db4   f002
002db6   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
002db8   f001
002dba   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002dbc   f000
002dbe   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002dc0   ffd9
002dc2   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_reveil__DisplayString	code
                                           _DisplayString:
                                           ;	.line	493; reveil.c	void DisplayString(BYTE pos, char* text)
003938   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00393a   ffe5
00393c   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00393e   ffd9
003940   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
003942   ffe5
003944   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
003946   ffe5
003948   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00394a   ffe5
00394c   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00394e   ffe5
003950   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
003952   ffe5
003954   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
003956   ffe5
003958   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
00395a   ffe5
00395c   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
00395e   ffe5
003960   0e02     movlw	0x2                	MOVLW	0x02
003962   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
003964   f000
003966   0e03     movlw	0x3                	MOVLW	0x03
003968   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
00396a   f001
00396c   0e04     movlw	0x4                	MOVLW	0x04
00396e   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
003970   f002
003972   0e05     movlw	0x5                	MOVLW	0x05
003974   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
003976   f003
                                           ;	.line	495; reveil.c	BYTE l= strlen(text)+1;
003978   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00397a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00397c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00397e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003980   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
003982   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003984   ecbb     call	0x3f76, 0           	CALL	_strlen
003986   f01f
003988   6e04     movwf	0x4, 0             	MOVWF	r0x04
00398a   cff3     movff	0xff3, 0x5         	MOVFF	PRODL, r0x05
00398c   f005
00398e   0e03     movlw	0x3                	MOVLW	0x03
003990   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
003992   2a04     incf	0x4, 0x1, 0         	INCF	r0x04, F
                                           ;	.line	496; reveil.c	BYTE max= 32-pos;
003994   5000     movf	0, 0, 0             	MOVF	r0x00, W
003996   0820     sublw	0x20               	SUBLW	0x20
003998   6e05     movwf	0x5, 0             	MOVWF	r0x05
                                           ;	.line	497; reveil.c	strlcpy((char*)&LCDText[pos], text,(l<max)?l:max );
00399a   6a06     clrf	0x6, 0              	CLRF	r0x06
00399c   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
00399e   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0039a0   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
0039a2   2206     addwfc	0x6, 0x1, 0       	ADDWFC	r0x06, F
0039a4   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0039a6   6e06     movwf	0x6, 0             	MOVWF	r0x06
0039a8   5000     movf	0, 0, 0             	MOVF	r0x00, W
0039aa   6e00     movwf	0, 0               	MOVWF	r0x00
0039ac   0e80     movlw	0x80               	MOVLW	0x80
0039ae   6e07     movwf	0x7, 0             	MOVWF	r0x07
0039b0   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0039b2   5c04     subwf	0x4, 0, 0          	SUBWF	r0x04, W
0039b4   e302     bnc	0x39ba               	BNC	_00340_DS_
0039b6   c005     movff	0x5, 0x4           	MOVFF	r0x05, r0x04
0039b8   f004
                                           _00340_DS_:
0039ba   6a05     clrf	0x5, 0              	CLRF	r0x05
0039bc   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0039be   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0039c0   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0039c2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0039c4   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0039c6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0039c8   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0039ca   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0039cc   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0039ce   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0039d0   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0039d2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0039d4   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0039d6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0039d8   5000     movf	0, 0, 0             	MOVF	r0x00, W
0039da   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0039dc   ece2     call	0x2bc4, 0           	CALL	_strlcpy
0039de   f015
0039e0   0e08     movlw	0x8                	MOVLW	0x08
0039e2   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	498; reveil.c	LCDUpdate();
0039e4   ec75     call	0x24ea, 0           	CALL	_LCDUpdate
0039e6   f012
0039e8   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
0039ea   f007
0039ec   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0039ee   f006
0039f0   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0039f2   f005
0039f4   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0039f6   f004
0039f8   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0039fa   f003
0039fc   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0039fe   f002
003a00   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
003a02   f001
003a04   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
003a06   f000
003a08   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
003a0a   ffd9
003a0c   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_reveil__inc_amin	code
                                           _inc_amin:
                                           ;	.line	474; reveil.c	void inc_amin(BYTE val)
003db2   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
003db4   ffe5
003db6   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
003db8   ffd9
003dba   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
003dbc   ffe5
003dbe   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
003dc0   ffe5
003dc2   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
003dc4   ffe5
003dc6   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
003dc8   ffe5
003dca   0e02     movlw	0x2                	MOVLW	0x02
003dcc   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
003dce   f000
                                           ;	.line	478; reveil.c	mod_amin = (amin + val) / 60;
003dd0   cf4b     movff	0xf4b, 0x1         	MOVFF	_amin, r0x01
003dd2   f001
003dd4   6a02     clrf	0x2, 0              	CLRF	r0x02
003dd6   6a03     clrf	0x3, 0              	CLRF	r0x03
003dd8   5000     movf	0, 0, 0             	MOVF	r0x00, W
003dda   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
003ddc   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
003dde   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
003de0   0e00     movlw	0                  	MOVLW	0x00
003de2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003de4   0e3c     movlw	0x3c               	MOVLW	0x3c
003de6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003de8   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
003dea   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003dec   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
003dee   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003df0   ecc4     call	0x3588, 0           	CALL	__divsint
003df2   f01a
003df4   6e01     movwf	0x1, 0             	MOVWF	r0x01
003df6   cff3     movff	0xff3, 0x2         	MOVFF	PRODL, r0x02
003df8   f002
003dfa   0e04     movlw	0x4                	MOVLW	0x04
003dfc   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	479; reveil.c	if (mod_amin) {
003dfe   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
003e00   e005     bz	0x3e0c                	BZ	_00331_DS_
                                           ;	.line	480; reveil.c	inc_ahour(mod_amin);
003e02   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
003e04   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003e06   ec6a     call	0x40d4, 0           	CALL	_inc_ahour
003e08   f020
003e0a   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           _00331_DS_:
                                           ;	.line	483; reveil.c	amin = (amin + val) % 60;
003e0c   cf4b     movff	0xf4b, 0x1         	MOVFF	_amin, r0x01
003e0e   f001
003e10   6a02     clrf	0x2, 0              	CLRF	r0x02
003e12   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
003e14   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
003e16   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
003e18   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
003e1a   0e00     movlw	0                  	MOVLW	0x00
003e1c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003e1e   0e3c     movlw	0x3c               	MOVLW	0x3c
003e20   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003e22   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
003e24   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003e26   5000     movf	0, 0, 0             	MOVF	r0x00, W
003e28   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003e2a   ec2a     call	0x3854, 0           	CALL	__modsint
003e2c   f01c
003e2e   6e00     movwf	0, 0               	MOVWF	r0x00
003e30   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
003e32   f001
003e34   0e04     movlw	0x4                	MOVLW	0x04
003e36   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
003e38   5000     movf	0, 0, 0             	MOVF	r0x00, W
003e3a   010f     movlb	0xf                	BANKSEL	_amin
003e3c   6f4b     movwf	0x4b, 0x1          	MOVWF	_amin, B
003e3e   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
003e40   f003
003e42   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
003e44   f002
003e46   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
003e48   f001
003e4a   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
003e4c   f000
003e4e   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
003e50   ffd9
003e52   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_reveil__inc_ahour	code
                                           _inc_ahour:
                                           ;	.line	468; reveil.c	void inc_ahour(BYTE val)
0040d4   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0040d6   ffe5
0040d8   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0040da   ffd9
0040dc   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0040de   ffe5
0040e0   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0040e2   ffe5
0040e4   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0040e6   ffe5
0040e8   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0040ea   ffe5
0040ec   0e02     movlw	0x2                	MOVLW	0x02
0040ee   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0040f0   f000
                                           ;	.line	470; reveil.c	ahour = (ahour + val) % 24;
0040f2   cf4a     movff	0xf4a, 0x1         	MOVFF	_ahour, r0x01
0040f4   f001
0040f6   6a02     clrf	0x2, 0              	CLRF	r0x02
0040f8   6a03     clrf	0x3, 0              	CLRF	r0x03
0040fa   5000     movf	0, 0, 0             	MOVF	r0x00, W
0040fc   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
0040fe   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
004100   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
004102   0e00     movlw	0                  	MOVLW	0x00
004104   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004106   0e18     movlw	0x18               	MOVLW	0x18
004108   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00410a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00410c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00410e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
004110   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004112   ec2a     call	0x3854, 0           	CALL	__modsint
004114   f01c
004116   6e00     movwf	0, 0               	MOVWF	r0x00
004118   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
00411a   f001
00411c   0e04     movlw	0x4                	MOVLW	0x04
00411e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
004120   5000     movf	0, 0, 0             	MOVF	r0x00, W
004122   010f     movlb	0xf                	BANKSEL	_ahour
004124   6f4a     movwf	0x4a, 0x1          	MOVWF	_ahour, B
004126   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
004128   f003
00412a   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00412c   f002
00412e   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
004130   f001
004132   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
004134   f000
004136   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
004138   ffd9
00413a   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_reveil__button	code
                                           _button:
                                           ;	.line	341; reveil.c	void button(void)
000852   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000854   ffe5
000856   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000858   ffd9
00085a   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00085c   ffe5
00085e   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000860   ffe5
000862   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
000864   ffe5
000866   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
000868   ffe5
00086a   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00086c   ffe5
00086e   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
000870   ffe5
000872   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
000874   ffe5
000876   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
000878   ffe5
00087a   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
00087c   ffe5
                                           ;	.line	345; reveil.c	BYTE incmin = tmin;
00087e   cf48     movff	0xf48, 0           	MOVFF	_tmin, r0x00
000880   f000
                                           ;	.line	346; reveil.c	BYTE incsec = tsec;
000882   cf49     movff	0xf49, 0x1         	MOVFF	_tsec, r0x01
000884   f001
000886   010f     movlb	0xf                	BANKSEL	_button1
                                           ;	.line	349; reveil.c	if (button1) {
000888   5141     movf	0x41, 0, 0x1        	MOVF	_button1, W, B
00088a   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
00088c   d07d     bra	0x988                	BRA	_00294_DS_
                                           ;	.line	350; reveil.c	switch (whereami) {
00088e   0e01     movlw	0x1                	MOVLW	0x01
000890   010f     movlb	0xf                	BANKSEL	_whereami
000892   5d51     subwf	0x51, 0, 0x1       	SUBWF	_whereami, W, B
000894   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
000896   d074     bra	0x980                	BRA	_00267_DS_
000898   0e0c     movlw	0xc                	MOVLW	0x0c
00089a   010f     movlb	0xf                	BANKSEL	_whereami
00089c   5d51     subwf	0x51, 0, 0x1       	SUBWF	_whereami, W, B
00089e   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0008a0   d06f     bra	0x980                	BRA	_00267_DS_
0008a2   010f     movlb	0xf                	BANKSEL	_whereami
0008a4   0551     decf	0x51, 0, 0x1        	DECF	_whereami, W, B
0008a6   6e02     movwf	0x2, 0             	MOVWF	r0x02
0008a8   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
0008aa   ffe5
0008ac   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
0008ae   ffe5
0008b0   6a0a     clrf	0xa, 0              	CLRF	r0x0a
0008b2   3402     rlcf	0x2, 0, 0           	RLCF	r0x02, W
0008b4   360a     rlcf	0xa, 0x1, 0         	RLCF	r0x0a, F
0008b6   34e8     rlcf	0xe8, 0, 0          	RLCF	WREG, W
0008b8   360a     rlcf	0xa, 0x1, 0         	RLCF	r0x0a, F
0008ba   0bfc     andlw	0xfc               	ANDLW	0xfc
0008bc   6e09     movwf	0x9, 0             	MOVWF	r0x09
0008be   0e00     movlw	0                  	MOVLW	UPPER(_00310_DS_)
0008c0   6efb     movwf	0xfb, 0            	MOVWF	PCLATU
0008c2   0e08     movlw	0x8                	MOVLW	HIGH(_00310_DS_)
0008c4   6efa     movwf	0xfa, 0            	MOVWF	PCLATH
0008c6   0ede     movlw	0xde               	MOVLW	LOW(_00310_DS_)
0008c8   2609     addwf	0x9, 0x1, 0        	ADDWF	r0x09, F
0008ca   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
0008cc   22fa     addwfc	0xfa, 0x1, 0      	ADDWFC	PCLATH, F
0008ce   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0008d0   2afb     incf	0xfb, 0x1, 0        	INCF	PCLATU, F
0008d2   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
0008d4   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
0008d6   f00a
0008d8   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
0008da   f009
0008dc   6ef9     movwf	0xf9, 0            	MOVWF	PCL
                                           _00310_DS_:
0008de   ef85     goto	0x90a               	GOTO	_00255_DS_
0008e0   f004
0008e2   ef89     goto	0x912               	GOTO	_00256_DS_
0008e4   f004
0008e6   ef8d     goto	0x91a               	GOTO	_00257_DS_
0008e8   f004
0008ea   ef91     goto	0x922               	GOTO	_00258_DS_
0008ec   f004
0008ee   ef95     goto	0x92a               	GOTO	_00259_DS_
0008f0   f004
0008f2   ef99     goto	0x932               	GOTO	_00260_DS_
0008f4   f004
0008f6   ef9d     goto	0x93a               	GOTO	_00261_DS_
0008f8   f004
0008fa   efa1     goto	0x942               	GOTO	_00262_DS_
0008fc   f004
0008fe   efa5     goto	0x94a               	GOTO	_00263_DS_
000900   f004
000902   efa9     goto	0x952               	GOTO	_00264_DS_
000904   f004
000906   efb2     goto	0x964               	GOTO	_00265_DS_
000908   f004
                                           _00255_DS_:
                                           ;	.line	352; reveil.c	whereami = ALARM_MENU;
00090a   0e05     movlw	0x5                	MOVLW	0x05
00090c   010f     movlb	0xf                	BANKSEL	_whereami
00090e   6f51     movwf	0x51, 0x1          	MOVWF	_whereami, B
                                           ;	.line	353; reveil.c	break;
000910   d037     bra	0x980                	BRA	_00267_DS_
                                           _00256_DS_:
                                           ;	.line	355; reveil.c	whereami = SET_MINUTE;
000912   0e03     movlw	0x3                	MOVLW	0x03
000914   010f     movlb	0xf                	BANKSEL	_whereami
000916   6f51     movwf	0x51, 0x1          	MOVWF	_whereami, B
                                           ;	.line	356; reveil.c	break;
000918   d033     bra	0x980                	BRA	_00267_DS_
                                           _00257_DS_:
                                           ;	.line	358; reveil.c	whereami = SET_SECOND;
00091a   0e04     movlw	0x4                	MOVLW	0x04
00091c   010f     movlb	0xf                	BANKSEL	_whereami
00091e   6f51     movwf	0x51, 0x1          	MOVWF	_whereami, B
                                           ;	.line	359; reveil.c	break;
000920   d02f     bra	0x980                	BRA	_00267_DS_
                                           _00258_DS_:
                                           ;	.line	361; reveil.c	whereami = ALARM_MENU;
000922   0e05     movlw	0x5                	MOVLW	0x05
000924   010f     movlb	0xf                	BANKSEL	_whereami
000926   6f51     movwf	0x51, 0x1          	MOVWF	_whereami, B
                                           ;	.line	362; reveil.c	break;
000928   d02b     bra	0x980                	BRA	_00267_DS_
                                           _00259_DS_:
                                           ;	.line	364; reveil.c	whereami = DISPLAY;
00092a   0e09     movlw	0x9                	MOVLW	0x09
00092c   010f     movlb	0xf                	BANKSEL	_whereami
00092e   6f51     movwf	0x51, 0x1          	MOVWF	_whereami, B
                                           ;	.line	365; reveil.c	break;
000930   d027     bra	0x980                	BRA	_00267_DS_
                                           _00260_DS_:
                                           ;	.line	367; reveil.c	whereami = SET_A_HOUR;
000932   0e07     movlw	0x7                	MOVLW	0x07
000934   010f     movlb	0xf                	BANKSEL	_whereami
000936   6f51     movwf	0x51, 0x1          	MOVWF	_whereami, B
                                           ;	.line	368; reveil.c	break;
000938   d023     bra	0x980                	BRA	_00267_DS_
                                           _00261_DS_:
                                           ;	.line	370; reveil.c	whereami = SET_A_MIN;
00093a   0e08     movlw	0x8                	MOVLW	0x08
00093c   010f     movlb	0xf                	BANKSEL	_whereami
00093e   6f51     movwf	0x51, 0x1          	MOVWF	_whereami, B
                                           ;	.line	371; reveil.c	break;
000940   d01f     bra	0x980                	BRA	_00267_DS_
                                           _00262_DS_:
                                           ;	.line	373; reveil.c	whereami = DISPLAY;
000942   0e09     movlw	0x9                	MOVLW	0x09
000944   010f     movlb	0xf                	BANKSEL	_whereami
000946   6f51     movwf	0x51, 0x1          	MOVWF	_whereami, B
                                           ;	.line	374; reveil.c	break;
000948   d01b     bra	0x980                	BRA	_00267_DS_
                                           _00263_DS_:
                                           ;	.line	376; reveil.c	whereami = TIME_MENU;
00094a   0e01     movlw	0x1                	MOVLW	0x01
00094c   010f     movlb	0xf                	BANKSEL	_whereami
00094e   6f51     movwf	0x51, 0x1          	MOVWF	_whereami, B
                                           ;	.line	377; reveil.c	break;
000950   d017     bra	0x980                	BRA	_00267_DS_
                                           _00264_DS_:
                                           ;	.line	379; reveil.c	stop_ringing = 1;
000952   0e01     movlw	0x1                	MOVLW	0x01
000954   010f     movlb	0xf                	BANKSEL	_stop_ringing
000956   6f50     movwf	0x50, 0x1          	MOVWF	_stop_ringing, B
                                           ;	.line	380; reveil.c	LATJbits.LATJ1 = 0; // switch LED 2 off
000958   9291     bcf	0x91, 0x1, 0         	BCF	_LATJbits, 1
                                           ;	.line	381; reveil.c	LATJbits.LATJ2 = 0; // switch LED 3 off
00095a   9491     bcf	0x91, 0x2, 0         	BCF	_LATJbits, 2
                                           ;	.line	382; reveil.c	whereami = DISPLAY;
00095c   0e09     movlw	0x9                	MOVLW	0x09
00095e   010f     movlb	0xf                	BANKSEL	_whereami
000960   6f51     movwf	0x51, 0x1          	MOVWF	_whereami, B
                                           ;	.line	383; reveil.c	break;
000962   d00e     bra	0x980                	BRA	_00267_DS_
                                           _00265_DS_:
                                           ;	.line	385; reveil.c	stop_ringing = 1; // le réveil ne doit plus sonner
000964   0e01     movlw	0x1                	MOVLW	0x01
000966   010f     movlb	0xf                	BANKSEL	_stop_ringing
000968   6f50     movwf	0x50, 0x1          	MOVWF	_stop_ringing, B
                                           ;	.line	386; reveil.c	amin = amin_o; // remet le réveil à l'heure d'origine
00096a   cf4d     movff	0xf4d, 0xf4b       	MOVFF	_amin_o, _amin
00096c   ff4b
                                           ;	.line	387; reveil.c	ahour = ahour_o;
00096e   cf4c     movff	0xf4c, 0xf4a       	MOVFF	_ahour_o, _ahour
000970   ff4a
000972   010f     movlb	0xf                	BANKSEL	_snooze
                                           ;	.line	388; reveil.c	snooze = 0;
000974   6b4f     clrf	0x4f, 0x1           	CLRF	_snooze, B
                                           ;	.line	389; reveil.c	LATJbits.LATJ1 = 0; // switch LED 2 off
000976   9291     bcf	0x91, 0x1, 0         	BCF	_LATJbits, 1
                                           ;	.line	390; reveil.c	LATJbits.LATJ2 = 0; // switch LED 3 off
000978   9491     bcf	0x91, 0x2, 0         	BCF	_LATJbits, 2
                                           ;	.line	391; reveil.c	whereami = DISPLAY;
00097a   0e09     movlw	0x9                	MOVLW	0x09
00097c   010f     movlb	0xf                	BANKSEL	_whereami
00097e   6f51     movwf	0x51, 0x1          	MOVWF	_whereami, B
                                           _00267_DS_:
000980   010f     movlb	0xf                	BANKSEL	_button1
                                           ;	.line	396; reveil.c	button1 = 0; // remet le flag du bouton 1 à 0
000982   6b41     clrf	0x41, 0x1           	CLRF	_button1, B
000984   ef0e     goto	0xe1c               	GOTO	_00296_DS_
000986   f007
                                           _00294_DS_:
000988   010f     movlb	0xf                	BANKSEL	_button2
                                           ;	.line	399; reveil.c	} else if (button2) {
00098a   5142     movf	0x42, 0, 0x1        	MOVF	_button2, W, B
00098c   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
00098e   ef0e     goto	0xe1c               	GOTO	_00296_DS_
000990   f007
                                           ;	.line	400; reveil.c	switch (whereami) {
000992   0e01     movlw	0x1                	MOVLW	0x01
000994   010f     movlb	0xf                	BANKSEL	_whereami
000996   5d51     subwf	0x51, 0, 0x1       	SUBWF	_whereami, W, B
000998   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
00099a   ef0c     goto	0xe18               	GOTO	_00290_DS_
00099c   f007
00099e   0e0c     movlw	0xc                	MOVLW	0x0c
0009a0   010f     movlb	0xf                	BANKSEL	_whereami
0009a2   5d51     subwf	0x51, 0, 0x1       	SUBWF	_whereami, W, B
0009a4   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0009a6   ef0c     goto	0xe18               	GOTO	_00290_DS_
0009a8   f007
0009aa   010f     movlb	0xf                	BANKSEL	_whereami
0009ac   0551     decf	0x51, 0, 0x1        	DECF	_whereami, W, B
0009ae   6e02     movwf	0x2, 0             	MOVWF	r0x02
0009b0   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
0009b2   ffe5
0009b4   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
0009b6   ffe5
0009b8   6a0a     clrf	0xa, 0              	CLRF	r0x0a
0009ba   3402     rlcf	0x2, 0, 0           	RLCF	r0x02, W
0009bc   360a     rlcf	0xa, 0x1, 0         	RLCF	r0x0a, F
0009be   34e8     rlcf	0xe8, 0, 0          	RLCF	WREG, W
0009c0   360a     rlcf	0xa, 0x1, 0         	RLCF	r0x0a, F
0009c2   0bfc     andlw	0xfc               	ANDLW	0xfc
0009c4   6e09     movwf	0x9, 0             	MOVWF	r0x09
0009c6   0e00     movlw	0                  	MOVLW	UPPER(_00313_DS_)
0009c8   6efb     movwf	0xfb, 0            	MOVWF	PCLATU
0009ca   0e09     movlw	0x9                	MOVLW	HIGH(_00313_DS_)
0009cc   6efa     movwf	0xfa, 0            	MOVWF	PCLATH
0009ce   0ee6     movlw	0xe6               	MOVLW	LOW(_00313_DS_)
0009d0   2609     addwf	0x9, 0x1, 0        	ADDWF	r0x09, F
0009d2   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
0009d4   22fa     addwfc	0xfa, 0x1, 0      	ADDWFC	PCLATH, F
0009d6   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0009d8   2afb     incf	0xfb, 0x1, 0        	INCF	PCLATU, F
0009da   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
0009dc   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
0009de   f00a
0009e0   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
0009e2   f009
0009e4   6ef9     movwf	0xf9, 0            	MOVWF	PCL
                                           _00313_DS_:
0009e6   ef09     goto	0xa12               	GOTO	_00268_DS_
0009e8   f005
0009ea   ef0e     goto	0xa1c               	GOTO	_00269_DS_
0009ec   f005
0009ee   ef55     goto	0xaaa               	GOTO	_00270_DS_
0009f0   f005
0009f2   ef12     goto	0xc24               	GOTO	_00271_DS_
0009f4   f006
0009f6   efcf     goto	0xd9e               	GOTO	_00272_DS_
0009f8   f006
0009fa   efd3     goto	0xda6               	GOTO	_00273_DS_
0009fc   f006
0009fe   efd7     goto	0xdae               	GOTO	_00274_DS_
000a00   f006
000a02   efe3     goto	0xdc6               	GOTO	_00278_DS_
000a04   f006
000a06   efef     goto	0xdde               	GOTO	_00282_DS_
000a08   f006
000a0a   eff0     goto	0xde0               	GOTO	_00283_DS_
000a0c   f006
000a0e   ef01     goto	0xe02               	GOTO	_00286_DS_
000a10   f007
                                           _00268_DS_:
                                           ;	.line	402; reveil.c	whereami = SET_HOUR;
000a12   0e02     movlw	0x2                	MOVLW	0x02
000a14   010f     movlb	0xf                	BANKSEL	_whereami
000a16   6f51     movwf	0x51, 0x1          	MOVWF	_whereami, B
                                           ;	.line	403; reveil.c	break;
000a18   ef0c     goto	0xe18               	GOTO	_00290_DS_
000a1a   f007
                                           _00269_DS_:
000a1c   010f     movlb	0xf                	BANKSEL	(_overflows + 3)
                                           ;	.line	405; reveil.c	overflows += F*3600;
000a1e   5146     movf	0x46, 0, 0x1        	MOVF	(_overflows + 3), W, B
000a20   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a22   010f     movlb	0xf                	BANKSEL	(_overflows + 2)
000a24   5145     movf	0x45, 0, 0x1        	MOVF	(_overflows + 2), W, B
000a26   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a28   010f     movlb	0xf                	BANKSEL	(_overflows + 1)
000a2a   5144     movf	0x44, 0, 0x1        	MOVF	(_overflows + 1), W, B
000a2c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a2e   010f     movlb	0xf                	BANKSEL	_overflows
000a30   5143     movf	0x43, 0, 0x1        	MOVF	_overflows, W, B
000a32   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a34   ecbe     call	0x2f7c, 0           	CALL	___ulong2fs
000a36   f017
000a38   6e02     movwf	0x2, 0             	MOVWF	r0x02
000a3a   cff3     movff	0xff3, 0x3         	MOVFF	PRODL, r0x03
000a3c   f003
000a3e   cff4     movff	0xff4, 0x4         	MOVFF	PRODH, r0x04
000a40   f004
000a42   cfe9     movff	0xfe9, 0x5         	MOVFF	FSR0L, r0x05
000a44   f005
000a46   0e04     movlw	0x4                	MOVLW	0x04
000a48   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000a4a   0e48     movlw	0x48               	MOVLW	0x48
000a4c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a4e   0ea7     movlw	0xa7               	MOVLW	0xa7
000a50   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a52   0ea2     movlw	0xa2               	MOVLW	0xa2
000a54   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a56   0e80     movlw	0x80               	MOVLW	0x80
000a58   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a5a   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000a5c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a5e   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000a60   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a62   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000a64   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a66   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000a68   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a6a   ecfa     call	0x17f4, 0           	CALL	___fsadd
000a6c   f00b
000a6e   6e02     movwf	0x2, 0             	MOVWF	r0x02
000a70   cff3     movff	0xff3, 0x3         	MOVFF	PRODL, r0x03
000a72   f003
000a74   cff4     movff	0xff4, 0x4         	MOVFF	PRODH, r0x04
000a76   f004
000a78   cfe9     movff	0xfe9, 0x5         	MOVFF	FSR0L, r0x05
000a7a   f005
000a7c   0e08     movlw	0x8                	MOVLW	0x08
000a7e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000a80   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000a82   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a84   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000a86   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a88   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000a8a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a8c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000a8e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a90   ec3f     call	0x367e, 0           	CALL	___fs2ulong
000a92   f01b
000a94   010f     movlb	0xf                	BANKSEL	_overflows
000a96   6f43     movwf	0x43, 0x1          	MOVWF	_overflows, B
000a98   cff3     movff	0xff3, 0xf44       	MOVFF	PRODL, (_overflows + 1)
000a9a   ff44
000a9c   cff4     movff	0xff4, 0xf45       	MOVFF	PRODH, (_overflows + 2)
000a9e   ff45
000aa0   cfe9     movff	0xfe9, 0xf46       	MOVFF	FSR0L, (_overflows + 3)
000aa2   ff46
000aa4   0e04     movlw	0x4                	MOVLW	0x04
000aa6   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	407; reveil.c	break;
000aa8   d1b7     bra	0xe18                	BRA	_00290_DS_
                                           _00270_DS_:
000aaa   010f     movlb	0xf                	BANKSEL	(_overflows + 3)
                                           ;	.line	409; reveil.c	overflows += F*60;
000aac   5146     movf	0x46, 0, 0x1        	MOVF	(_overflows + 3), W, B
000aae   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ab0   010f     movlb	0xf                	BANKSEL	(_overflows + 2)
000ab2   5145     movf	0x45, 0, 0x1        	MOVF	(_overflows + 2), W, B
000ab4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ab6   010f     movlb	0xf                	BANKSEL	(_overflows + 1)
000ab8   5144     movf	0x44, 0, 0x1        	MOVF	(_overflows + 1), W, B
000aba   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000abc   010f     movlb	0xf                	BANKSEL	_overflows
000abe   5143     movf	0x43, 0, 0x1        	MOVF	_overflows, W, B
000ac0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ac2   ecbe     call	0x2f7c, 0           	CALL	___ulong2fs
000ac4   f017
000ac6   6e02     movwf	0x2, 0             	MOVWF	r0x02
000ac8   cff3     movff	0xff3, 0x3         	MOVFF	PRODL, r0x03
000aca   f003
000acc   cff4     movff	0xff4, 0x4         	MOVFF	PRODH, r0x04
000ace   f004
000ad0   cfe9     movff	0xfe9, 0x5         	MOVFF	FSR0L, r0x05
000ad2   f005
000ad4   0e04     movlw	0x4                	MOVLW	0x04
000ad6   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000ad8   0e45     movlw	0x45               	MOVLW	0x45
000ada   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000adc   0eb2     movlw	0xb2               	MOVLW	0xb2
000ade   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ae0   0ecf     movlw	0xcf               	MOVLW	0xcf
000ae2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ae4   0e77     movlw	0x77               	MOVLW	0x77
000ae6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ae8   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000aea   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000aec   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000aee   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000af0   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000af2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000af4   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000af6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000af8   ecfa     call	0x17f4, 0           	CALL	___fsadd
000afa   f00b
000afc   6e02     movwf	0x2, 0             	MOVWF	r0x02
000afe   cff3     movff	0xff3, 0x3         	MOVFF	PRODL, r0x03
000b00   f003
000b02   cff4     movff	0xff4, 0x4         	MOVFF	PRODH, r0x04
000b04   f004
000b06   cfe9     movff	0xfe9, 0x5         	MOVFF	FSR0L, r0x05
000b08   f005
000b0a   0e08     movlw	0x8                	MOVLW	0x08
000b0c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000b0e   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000b10   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b12   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000b14   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b16   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000b18   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b1a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000b1c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b1e   ec3f     call	0x367e, 0           	CALL	___fs2ulong
000b20   f01b
000b22   010f     movlb	0xf                	BANKSEL	_overflows
000b24   6f43     movwf	0x43, 0x1          	MOVWF	_overflows, B
000b26   cff3     movff	0xff3, 0xf44       	MOVFF	PRODL, (_overflows + 1)
000b28   ff44
000b2a   cff4     movff	0xff4, 0xf45       	MOVFF	PRODH, (_overflows + 2)
000b2c   ff45
000b2e   cfe9     movff	0xfe9, 0xf46       	MOVFF	FSR0L, (_overflows + 3)
000b30   ff46
000b32   0e04     movlw	0x4                	MOVLW	0x04
000b34   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	410; reveil.c	overflows -= (incmin/60)*F*3600;
000b36   0e3c     movlw	0x3c               	MOVLW	0x3c
000b38   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b3a   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000b3c   ffe5
000b3e   ec33     call	0x4066, 0           	CALL	__divuchar
000b40   f020
000b42   6e00     movwf	0, 0               	MOVWF	r0x00
000b44   50e4     movf	0xe4, 0, 0          	MOVF	PREINC1, W
000b46   50e4     movf	0xe4, 0, 0          	MOVF	PREINC1, W
000b48   5000     movf	0, 0, 0             	MOVF	r0x00, W
000b4a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b4c   eccf     call	0x419e, 0           	CALL	___uchar2fs
000b4e   f020
000b50   6e00     movwf	0, 0               	MOVWF	r0x00
000b52   cff3     movff	0xff3, 0x2         	MOVFF	PRODL, r0x02
000b54   f002
000b56   cff4     movff	0xff4, 0x3         	MOVFF	PRODH, r0x03
000b58   f003
000b5a   cfe9     movff	0xfe9, 0x4         	MOVFF	FSR0L, r0x04
000b5c   f004
000b5e   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
000b60   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000b62   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b64   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000b66   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b68   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000b6a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b6c   5000     movf	0, 0, 0             	MOVF	r0x00, W
000b6e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b70   0e48     movlw	0x48               	MOVLW	0x48
000b72   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b74   0ea7     movlw	0xa7               	MOVLW	0xa7
000b76   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b78   0ea2     movlw	0xa2               	MOVLW	0xa2
000b7a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b7c   0e80     movlw	0x80               	MOVLW	0x80
000b7e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b80   ec19     call	0x1432, 0           	CALL	___fsmul
000b82   f00a
000b84   6e00     movwf	0, 0               	MOVWF	r0x00
000b86   cff3     movff	0xff3, 0x2         	MOVFF	PRODL, r0x02
000b88   f002
000b8a   cff4     movff	0xff4, 0x3         	MOVFF	PRODH, r0x03
000b8c   f003
000b8e   cfe9     movff	0xfe9, 0x4         	MOVFF	FSR0L, r0x04
000b90   f004
000b92   0e08     movlw	0x8                	MOVLW	0x08
000b94   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000b96   010f     movlb	0xf                	BANKSEL	(_overflows + 3)
000b98   5146     movf	0x46, 0, 0x1        	MOVF	(_overflows + 3), W, B
000b9a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b9c   010f     movlb	0xf                	BANKSEL	(_overflows + 2)
000b9e   5145     movf	0x45, 0, 0x1        	MOVF	(_overflows + 2), W, B
000ba0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ba2   010f     movlb	0xf                	BANKSEL	(_overflows + 1)
000ba4   5144     movf	0x44, 0, 0x1        	MOVF	(_overflows + 1), W, B
000ba6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ba8   010f     movlb	0xf                	BANKSEL	_overflows
000baa   5143     movf	0x43, 0, 0x1        	MOVF	_overflows, W, B
000bac   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000bae   ecbe     call	0x2f7c, 0           	CALL	___ulong2fs
000bb0   f017
000bb2   6e05     movwf	0x5, 0             	MOVWF	r0x05
000bb4   cff3     movff	0xff3, 0x6         	MOVFF	PRODL, r0x06
000bb6   f006
000bb8   cff4     movff	0xff4, 0x7         	MOVFF	PRODH, r0x07
000bba   f007
000bbc   cfe9     movff	0xfe9, 0x8         	MOVFF	FSR0L, r0x08
000bbe   f008
000bc0   0e04     movlw	0x4                	MOVLW	0x04
000bc2   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000bc4   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000bc6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000bc8   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000bca   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000bcc   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000bce   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000bd0   5000     movf	0, 0, 0             	MOVF	r0x00, W
000bd2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000bd4   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
000bd6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000bd8   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
000bda   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000bdc   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000bde   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000be0   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000be2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000be4   ec7c     call	0x30f8, 0           	CALL	___fssub
000be6   f018
000be8   6e00     movwf	0, 0               	MOVWF	r0x00
000bea   cff3     movff	0xff3, 0x2         	MOVFF	PRODL, r0x02
000bec   f002
000bee   cff4     movff	0xff4, 0x3         	MOVFF	PRODH, r0x03
000bf0   f003
000bf2   cfe9     movff	0xfe9, 0x4         	MOVFF	FSR0L, r0x04
000bf4   f004
000bf6   0e08     movlw	0x8                	MOVLW	0x08
000bf8   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000bfa   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000bfc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000bfe   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000c00   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c02   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000c04   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c06   5000     movf	0, 0, 0             	MOVF	r0x00, W
000c08   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c0a   ec3f     call	0x367e, 0           	CALL	___fs2ulong
000c0c   f01b
000c0e   010f     movlb	0xf                	BANKSEL	_overflows
000c10   6f43     movwf	0x43, 0x1          	MOVWF	_overflows, B
000c12   cff3     movff	0xff3, 0xf44       	MOVFF	PRODL, (_overflows + 1)
000c14   ff44
000c16   cff4     movff	0xff4, 0xf45       	MOVFF	PRODH, (_overflows + 2)
000c18   ff45
000c1a   cfe9     movff	0xfe9, 0xf46       	MOVFF	FSR0L, (_overflows + 3)
000c1c   ff46
000c1e   0e04     movlw	0x4                	MOVLW	0x04
000c20   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	411; reveil.c	break;
000c22   d0fa     bra	0xe18                	BRA	_00290_DS_
                                           _00271_DS_:
000c24   010f     movlb	0xf                	BANKSEL	(_overflows + 3)
                                           ;	.line	413; reveil.c	overflows += F;
000c26   5146     movf	0x46, 0, 0x1        	MOVF	(_overflows + 3), W, B
000c28   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c2a   010f     movlb	0xf                	BANKSEL	(_overflows + 2)
000c2c   5145     movf	0x45, 0, 0x1        	MOVF	(_overflows + 2), W, B
000c2e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c30   010f     movlb	0xf                	BANKSEL	(_overflows + 1)
000c32   5144     movf	0x44, 0, 0x1        	MOVF	(_overflows + 1), W, B
000c34   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c36   010f     movlb	0xf                	BANKSEL	_overflows
000c38   5143     movf	0x43, 0, 0x1        	MOVF	_overflows, W, B
000c3a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c3c   ecbe     call	0x2f7c, 0           	CALL	___ulong2fs
000c3e   f017
000c40   6e00     movwf	0, 0               	MOVWF	r0x00
000c42   cff3     movff	0xff3, 0x2         	MOVFF	PRODL, r0x02
000c44   f002
000c46   cff4     movff	0xff4, 0x3         	MOVFF	PRODH, r0x03
000c48   f003
000c4a   cfe9     movff	0xfe9, 0x4         	MOVFF	FSR0L, r0x04
000c4c   f004
000c4e   0e04     movlw	0x4                	MOVLW	0x04
000c50   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000c52   0e42     movlw	0x42               	MOVLW	0x42
000c54   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c56   0ebe     movlw	0xbe               	MOVLW	0xbe
000c58   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c5a   0ebb     movlw	0xbb               	MOVLW	0xbb
000c5c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c5e   0e2a     movlw	0x2a               	MOVLW	0x2a
000c60   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c62   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000c64   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c66   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000c68   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c6a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000c6c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c6e   5000     movf	0, 0, 0             	MOVF	r0x00, W
000c70   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c72   ecfa     call	0x17f4, 0           	CALL	___fsadd
000c74   f00b
000c76   6e00     movwf	0, 0               	MOVWF	r0x00
000c78   cff3     movff	0xff3, 0x2         	MOVFF	PRODL, r0x02
000c7a   f002
000c7c   cff4     movff	0xff4, 0x3         	MOVFF	PRODH, r0x03
000c7e   f003
000c80   cfe9     movff	0xfe9, 0x4         	MOVFF	FSR0L, r0x04
000c82   f004
000c84   0e08     movlw	0x8                	MOVLW	0x08
000c86   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000c88   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000c8a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c8c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000c8e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c90   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000c92   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c94   5000     movf	0, 0, 0             	MOVF	r0x00, W
000c96   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c98   ec3f     call	0x367e, 0           	CALL	___fs2ulong
000c9a   f01b
000c9c   010f     movlb	0xf                	BANKSEL	_overflows
000c9e   6f43     movwf	0x43, 0x1          	MOVWF	_overflows, B
000ca0   cff3     movff	0xff3, 0xf44       	MOVFF	PRODL, (_overflows + 1)
000ca2   ff44
000ca4   cff4     movff	0xff4, 0xf45       	MOVFF	PRODH, (_overflows + 2)
000ca6   ff45
000ca8   cfe9     movff	0xfe9, 0xf46       	MOVFF	FSR0L, (_overflows + 3)
000caa   ff46
000cac   0e04     movlw	0x4                	MOVLW	0x04
000cae   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	414; reveil.c	overflows -= (incsec/60)*F*60;
000cb0   0e3c     movlw	0x3c               	MOVLW	0x3c
000cb2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000cb4   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000cb6   ffe5
000cb8   ec33     call	0x4066, 0           	CALL	__divuchar
000cba   f020
000cbc   6e01     movwf	0x1, 0             	MOVWF	r0x01
000cbe   50e4     movf	0xe4, 0, 0          	MOVF	PREINC1, W
000cc0   50e4     movf	0xe4, 0, 0          	MOVF	PREINC1, W
000cc2   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000cc4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000cc6   eccf     call	0x419e, 0           	CALL	___uchar2fs
000cc8   f020
000cca   6e00     movwf	0, 0               	MOVWF	r0x00
000ccc   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
000cce   f001
000cd0   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
000cd2   f002
000cd4   cfe9     movff	0xfe9, 0x3         	MOVFF	FSR0L, r0x03
000cd6   f003
000cd8   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
000cda   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000cdc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000cde   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000ce0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ce2   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000ce4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ce6   5000     movf	0, 0, 0             	MOVF	r0x00, W
000ce8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000cea   0e45     movlw	0x45               	MOVLW	0x45
000cec   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000cee   0eb2     movlw	0xb2               	MOVLW	0xb2
000cf0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000cf2   0ecf     movlw	0xcf               	MOVLW	0xcf
000cf4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000cf6   0e77     movlw	0x77               	MOVLW	0x77
000cf8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000cfa   ec19     call	0x1432, 0           	CALL	___fsmul
000cfc   f00a
000cfe   6e00     movwf	0, 0               	MOVWF	r0x00
000d00   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
000d02   f001
000d04   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
000d06   f002
000d08   cfe9     movff	0xfe9, 0x3         	MOVFF	FSR0L, r0x03
000d0a   f003
000d0c   0e08     movlw	0x8                	MOVLW	0x08
000d0e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000d10   010f     movlb	0xf                	BANKSEL	(_overflows + 3)
000d12   5146     movf	0x46, 0, 0x1        	MOVF	(_overflows + 3), W, B
000d14   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d16   010f     movlb	0xf                	BANKSEL	(_overflows + 2)
000d18   5145     movf	0x45, 0, 0x1        	MOVF	(_overflows + 2), W, B
000d1a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d1c   010f     movlb	0xf                	BANKSEL	(_overflows + 1)
000d1e   5144     movf	0x44, 0, 0x1        	MOVF	(_overflows + 1), W, B
000d20   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d22   010f     movlb	0xf                	BANKSEL	_overflows
000d24   5143     movf	0x43, 0, 0x1        	MOVF	_overflows, W, B
000d26   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d28   ecbe     call	0x2f7c, 0           	CALL	___ulong2fs
000d2a   f017
000d2c   6e04     movwf	0x4, 0             	MOVWF	r0x04
000d2e   cff3     movff	0xff3, 0x5         	MOVFF	PRODL, r0x05
000d30   f005
000d32   cff4     movff	0xff4, 0x6         	MOVFF	PRODH, r0x06
000d34   f006
000d36   cfe9     movff	0xfe9, 0x7         	MOVFF	FSR0L, r0x07
000d38   f007
000d3a   0e04     movlw	0x4                	MOVLW	0x04
000d3c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000d3e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000d40   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d42   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000d44   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d46   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000d48   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d4a   5000     movf	0, 0, 0             	MOVF	r0x00, W
000d4c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d4e   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
000d50   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d52   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000d54   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d56   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000d58   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d5a   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000d5c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d5e   ec7c     call	0x30f8, 0           	CALL	___fssub
000d60   f018
000d62   6e00     movwf	0, 0               	MOVWF	r0x00
000d64   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
000d66   f001
000d68   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
000d6a   f002
000d6c   cfe9     movff	0xfe9, 0x3         	MOVFF	FSR0L, r0x03
000d6e   f003
000d70   0e08     movlw	0x8                	MOVLW	0x08
000d72   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000d74   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000d76   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d78   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000d7a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d7c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000d7e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d80   5000     movf	0, 0, 0             	MOVF	r0x00, W
000d82   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d84   ec3f     call	0x367e, 0           	CALL	___fs2ulong
000d86   f01b
000d88   010f     movlb	0xf                	BANKSEL	_overflows
000d8a   6f43     movwf	0x43, 0x1          	MOVWF	_overflows, B
000d8c   cff3     movff	0xff3, 0xf44       	MOVFF	PRODL, (_overflows + 1)
000d8e   ff44
000d90   cff4     movff	0xff4, 0xf45       	MOVFF	PRODH, (_overflows + 2)
000d92   ff45
000d94   cfe9     movff	0xfe9, 0xf46       	MOVFF	FSR0L, (_overflows + 3)
000d96   ff46
000d98   0e04     movlw	0x4                	MOVLW	0x04
000d9a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	415; reveil.c	break;
000d9c   d03d     bra	0xe18                	BRA	_00290_DS_
                                           _00272_DS_:
                                           ;	.line	417; reveil.c	whereami = SET_ALARM;
000d9e   0e06     movlw	0x6                	MOVLW	0x06
000da0   010f     movlb	0xf                	BANKSEL	_whereami
000da2   6f51     movwf	0x51, 0x1          	MOVWF	_whereami, B
                                           ;	.line	418; reveil.c	break;
000da4   d039     bra	0xe18                	BRA	_00290_DS_
                                           _00273_DS_:
                                           ;	.line	420; reveil.c	alarm_set ^= 1;
000da6   0e01     movlw	0x1                	MOVLW	0x01
000da8   010f     movlb	0xf                	BANKSEL	_alarm_set
000daa   1b4e     xorwf	0x4e, 0x1, 0x1     	XORWF	_alarm_set, F, B
                                           ;	.line	421; reveil.c	break;
000dac   d035     bra	0xe18                	BRA	_00290_DS_
                                           _00274_DS_:
000dae   010f     movlb	0xf                	BANKSEL	_ahour
                                           ;	.line	423; reveil.c	if (ahour == 23) {
000db0   514a     movf	0x4a, 0, 0x1        	MOVF	_ahour, W, B
000db2   0a17     xorlw	0x17               	XORLW	0x17
000db4   e103     bnz	0xdbc                	BNZ	_00276_DS_
                                           _00316_DS_:
000db6   010f     movlb	0xf                	BANKSEL	_ahour
                                           ;	.line	424; reveil.c	ahour = 0;
000db8   6b4a     clrf	0x4a, 0x1           	CLRF	_ahour, B
000dba   d002     bra	0xdc0                	BRA	_00277_DS_
                                           _00276_DS_:
000dbc   010f     movlb	0xf                	BANKSEL	_ahour
                                           ;	.line	426; reveil.c	ahour++;
000dbe   2b4a     incf	0x4a, 0x1, 0x1      	INCF	_ahour, F, B
                                           _00277_DS_:
                                           ;	.line	428; reveil.c	ahour_o = ahour;
000dc0   cf4a     movff	0xf4a, 0xf4c       	MOVFF	_ahour, _ahour_o
000dc2   ff4c
                                           ;	.line	429; reveil.c	break;
000dc4   d029     bra	0xe18                	BRA	_00290_DS_
                                           _00278_DS_:
000dc6   010f     movlb	0xf                	BANKSEL	_amin
                                           ;	.line	431; reveil.c	if (amin == 59) {
000dc8   514b     movf	0x4b, 0, 0x1        	MOVF	_amin, W, B
000dca   0a3b     xorlw	0x3b               	XORLW	0x3b
000dcc   e103     bnz	0xdd4                	BNZ	_00280_DS_
                                           _00318_DS_:
000dce   010f     movlb	0xf                	BANKSEL	_amin
                                           ;	.line	432; reveil.c	amin = 0;
000dd0   6b4b     clrf	0x4b, 0x1           	CLRF	_amin, B
000dd2   d002     bra	0xdd8                	BRA	_00281_DS_
                                           _00280_DS_:
000dd4   010f     movlb	0xf                	BANKSEL	_amin
                                           ;	.line	434; reveil.c	amin++;
000dd6   2b4b     incf	0x4b, 0x1, 0x1      	INCF	_amin, F, B
                                           _00281_DS_:
                                           ;	.line	436; reveil.c	amin_o = amin;
000dd8   cf4b     movff	0xf4b, 0xf4d       	MOVFF	_amin, _amin_o
000dda   ff4d
                                           ;	.line	437; reveil.c	break;
000ddc   d01d     bra	0xe18                	BRA	_00290_DS_
                                           _00282_DS_:
                                           ;	.line	440; reveil.c	break;
000dde   d01c     bra	0xe18                	BRA	_00290_DS_
                                           _00283_DS_:
                                           ;	.line	443; reveil.c	if (snooze < SNOOZE_MAX) {
000de0   0e0c     movlw	0xc                	MOVLW	0x0c
000de2   010f     movlb	0xf                	BANKSEL	_snooze
000de4   5d4f     subwf	0x4f, 0, 0x1       	SUBWF	_snooze, W, B
000de6   e218     bc	0xe18                 	BC	_00290_DS_
                                           ;	.line	444; reveil.c	inc_amin(SNOOZE_MINUTE); // modifie le réveil
000de8   0e05     movlw	0x5                	MOVLW	0x05
000dea   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000dec   ecd9     call	0x3db2, 0           	CALL	_inc_amin
000dee   f01e
000df0   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
000df2   010f     movlb	0xf                	BANKSEL	_snooze
                                           ;	.line	445; reveil.c	snooze++; // augmente le compteur de snooze
000df4   2b4f     incf	0x4f, 0x1, 0x1      	INCF	_snooze, F, B
                                           ;	.line	446; reveil.c	LATJbits.LATJ1 = 0; // switch LED 2 off
000df6   9291     bcf	0x91, 0x1, 0         	BCF	_LATJbits, 1
                                           ;	.line	447; reveil.c	LATJbits.LATJ2 = 0; // switch LED 3 off
000df8   9491     bcf	0x91, 0x2, 0         	BCF	_LATJbits, 2
                                           ;	.line	448; reveil.c	whereami = SNOOZE;
000dfa   0e0b     movlw	0xb                	MOVLW	0x0b
000dfc   010f     movlb	0xf                	BANKSEL	_whereami
000dfe   6f51     movwf	0x51, 0x1          	MOVWF	_whereami, B
                                           ;	.line	451; reveil.c	break;
000e00   d00b     bra	0xe18                	BRA	_00290_DS_
                                           _00286_DS_:
                                           ;	.line	454; reveil.c	if (snooze < SNOOZE_MAX) {
000e02   0e0c     movlw	0xc                	MOVLW	0x0c
000e04   010f     movlb	0xf                	BANKSEL	_snooze
000e06   5d4f     subwf	0x4f, 0, 0x1       	SUBWF	_snooze, W, B
000e08   e207     bc	0xe18                 	BC	_00290_DS_
                                           ;	.line	455; reveil.c	inc_amin(SNOOZE_MINUTE); // modifie le réveil
000e0a   0e05     movlw	0x5                	MOVLW	0x05
000e0c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e0e   ecd9     call	0x3db2, 0           	CALL	_inc_amin
000e10   f01e
000e12   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
000e14   010f     movlb	0xf                	BANKSEL	_snooze
                                           ;	.line	456; reveil.c	snooze++; // augmente le compteur de snooze
000e16   2b4f     incf	0x4f, 0x1, 0x1      	INCF	_snooze, F, B
                                           _00290_DS_:
000e18   010f     movlb	0xf                	BANKSEL	_button2
                                           ;	.line	463; reveil.c	button2 = 0; // remet le flag du bouton 2 à 0
000e1a   6b42     clrf	0x42, 0x1           	CLRF	_button2, B
                                           _00296_DS_:
000e1c   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
000e1e   f008
000e20   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
000e22   f007
000e24   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
000e26   f006
000e28   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
000e2a   f005
000e2c   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
000e2e   f004
000e30   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
000e32   f003
000e34   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
000e36   f002
000e38   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
000e3a   f001
000e3c   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000e3e   f000
000e40   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000e42   ffd9
000e44   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_reveil__alarm	code
                                           _alarm:
                                           ;	.line	311; reveil.c	void alarm(void)
003eec   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
003eee   ffe5
003ef0   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
003ef2   ffd9
003ef4   010f     movlb	0xf                	BANKSEL	_thour
                                           ;	.line	314; reveil.c	if ((thour == ahour) && (tmin == amin) && alarm_set) {
003ef6   5147     movf	0x47, 0, 0x1        	MOVF	_thour, W, B
003ef8   010f     movlb	0xf                	BANKSEL	_ahour
003efa   194a     xorwf	0x4a, 0, 0x1       	XORWF	_ahour, W, B
003efc   e001     bz	0x3f00                	BZ	_00240_DS_
003efe   d038     bra	0x3f70               	BRA	_00228_DS_
                                           _00240_DS_:
003f00   010f     movlb	0xf                	BANKSEL	_tmin
003f02   5148     movf	0x48, 0, 0x1        	MOVF	_tmin, W, B
003f04   010f     movlb	0xf                	BANKSEL	_amin
003f06   194b     xorwf	0x4b, 0, 0x1       	XORWF	_amin, W, B
003f08   e001     bz	0x3f0c                	BZ	_00242_DS_
003f0a   d032     bra	0x3f70               	BRA	_00228_DS_
                                           _00242_DS_:
003f0c   010f     movlb	0xf                	BANKSEL	_alarm_set
003f0e   514e     movf	0x4e, 0, 0x1        	MOVF	_alarm_set, W, B
003f10   e02f     bz	0x3f70                	BZ	_00228_DS_
                                           ;	.line	317; reveil.c	if ((tsec < 31) && (stop_ringing == 0)) {
003f12   0e1f     movlw	0x1f               	MOVLW	0x1f
003f14   010f     movlb	0xf                	BANKSEL	_tsec
003f16   5d49     subwf	0x49, 0, 0x1       	SUBWF	_tsec, W, B
003f18   e20f     bc	0x3f38                	BC	_00221_DS_
003f1a   010f     movlb	0xf                	BANKSEL	_stop_ringing
003f1c   5150     movf	0x50, 0, 0x1        	MOVF	_stop_ringing, W, B
003f1e   e10c     bnz	0x3f38               	BNZ	_00221_DS_
003f20   010f     movlb	0xf                	BANKSEL	_whereami
                                           ;	.line	318; reveil.c	if ((whereami == DISPLAY) || (whereami == SNOOZE)) {
003f22   5151     movf	0x51, 0, 0x1        	MOVF	_whereami, W, B
003f24   0a09     xorlw	0x9                	XORLW	0x09
003f26   e004     bz	0x3f30                	BZ	_00210_DS_
                                           _00245_DS_:
003f28   010f     movlb	0xf                	BANKSEL	_whereami
003f2a   5151     movf	0x51, 0, 0x1        	MOVF	_whereami, W, B
003f2c   0a0b     xorlw	0xb                	XORLW	0x0b
003f2e   e120     bnz	0x3f70               	BNZ	_00228_DS_
                                           _00210_DS_:
                                           ;	.line	319; reveil.c	whereami = ALARM;
003f30   0e0a     movlw	0xa                	MOVLW	0x0a
003f32   010f     movlb	0xf                	BANKSEL	_whereami
003f34   6f51     movwf	0x51, 0x1          	MOVWF	_whereami, B
003f36   d01c     bra	0x3f70               	BRA	_00228_DS_
                                           _00221_DS_:
                                           ;	.line	322; reveil.c	} else if (tsec > 30) {
003f38   0e1f     movlw	0x1f               	MOVLW	0x1f
003f3a   010f     movlb	0xf                	BANKSEL	_tsec
003f3c   5d49     subwf	0x49, 0, 0x1       	SUBWF	_tsec, W, B
003f3e   e318     bnc	0x3f70               	BNC	_00228_DS_
003f40   010f     movlb	0xf                	BANKSEL	_stop_ringing
                                           ;	.line	323; reveil.c	stop_ringing = 0; // remet à 0 si l'alarme a été éteinte à la main
003f42   6b50     clrf	0x50, 0x1           	CLRF	_stop_ringing, B
                                           ;	.line	324; reveil.c	LATJbits.LATJ1 = 0; // switch LED 2 off
003f44   9291     bcf	0x91, 0x1, 0         	BCF	_LATJbits, 1
                                           ;	.line	325; reveil.c	LATJbits.LATJ2 = 0; // switch LED 3 off
003f46   9491     bcf	0x91, 0x2, 0         	BCF	_LATJbits, 2
003f48   010f     movlb	0xf                	BANKSEL	_snooze
                                           ;	.line	327; reveil.c	if (snooze) {
003f4a   514f     movf	0x4f, 0, 0x1        	MOVF	_snooze, W, B
003f4c   e00a     bz	0x3f62                	BZ	_00216_DS_
                                           ;	.line	328; reveil.c	ahour = ahour_o; // remet le réveil
003f4e   cf4c     movff	0xf4c, 0xf4a       	MOVFF	_ahour_o, _ahour
003f50   ff4a
                                           ;	.line	329; reveil.c	amin = amin_o;
003f52   cf4d     movff	0xf4d, 0xf4b       	MOVFF	_amin_o, _amin
003f54   ff4b
003f56   010f     movlb	0xf                	BANKSEL	_snooze
                                           ;	.line	330; reveil.c	snooze = 0;
003f58   6b4f     clrf	0x4f, 0x1           	CLRF	_snooze, B
                                           ;	.line	331; reveil.c	whereami = DISPLAY;
003f5a   0e09     movlw	0x9                	MOVLW	0x09
003f5c   010f     movlb	0xf                	BANKSEL	_whereami
003f5e   6f51     movwf	0x51, 0x1          	MOVWF	_whereami, B
003f60   d007     bra	0x3f70               	BRA	_00228_DS_
                                           _00216_DS_:
003f62   010f     movlb	0xf                	BANKSEL	_whereami
                                           ;	.line	332; reveil.c	} else if (whereami == ALARM) { // si l'alarme sonnait toujours, on
003f64   5151     movf	0x51, 0, 0x1        	MOVF	_whereami, W, B
003f66   0a0a     xorlw	0xa                	XORLW	0x0a
003f68   e103     bnz	0x3f70               	BNZ	_00228_DS_
                                           ;	.line	333; reveil.c	whereami = DISPLAY;         // revient à l'affichage de l'heure
003f6a   0e09     movlw	0x9                	MOVLW	0x09
003f6c   010f     movlb	0xf                	BANKSEL	_whereami
003f6e   6f51     movwf	0x51, 0x1          	MOVWF	_whereami, B
                                           _00228_DS_:
003f70   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
003f72   ffd9
003f74   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_reveil__refresh_lcd	code
                                           _refresh_lcd:
                                           ;	.line	243; reveil.c	void refresh_lcd(void)
000e46   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000e48   ffe5
000e4a   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000e4c   ffd9
000e4e   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000e50   ffe5
000e52   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000e54   ffe5
000e56   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
000e58   ffe5
000e5a   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
000e5c   ffe5
000e5e   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
000e60   ffe5
000e62   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
000e64   ffe5
000e66   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
000e68   ffe5
000e6a   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
000e6c   ffe5
000e6e   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
000e70   ffe5
000e72   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
000e74   ffe5
000e76   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
000e78   ffe5
000e7a   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
000e7c   ffe5
000e7e   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
000e80   ffe5
000e82   c00d     movff	0xd, 0xfe5         	MOVFF	r0x0d, POSTDEC1
000e84   ffe5
000e86   c00e     movff	0xe, 0xfe5         	MOVFF	r0x0e, POSTDEC1
000e88   ffe5
                                           ;	.line	246; reveil.c	switch (whereami) {
000e8a   0e01     movlw	0x1                	MOVLW	0x01
000e8c   010f     movlb	0xf                	BANKSEL	_whereami
000e8e   5d51     subwf	0x51, 0, 0x1       	SUBWF	_whereami, W, B
000e90   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
000e92   efd0     goto	0x13a0              	GOTO	_00193_DS_
000e94   f009
000e96   0e0c     movlw	0xc                	MOVLW	0x0c
000e98   010f     movlb	0xf                	BANKSEL	_whereami
000e9a   5d51     subwf	0x51, 0, 0x1       	SUBWF	_whereami, W, B
000e9c   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000e9e   efd0     goto	0x13a0              	GOTO	_00193_DS_
000ea0   f009
000ea2   010f     movlb	0xf                	BANKSEL	_whereami
000ea4   0551     decf	0x51, 0, 0x1        	DECF	_whereami, W, B
000ea6   6e00     movwf	0, 0               	MOVWF	r0x00
000ea8   c00f     movff	0xf, 0xfe5         	MOVFF	r0x0f, POSTDEC1
000eaa   ffe5
000eac   c010     movff	0x10, 0xfe5        	MOVFF	r0x10, POSTDEC1
000eae   ffe5
000eb0   6a10     clrf	0x10, 0             	CLRF	r0x10
000eb2   3400     rlcf	0, 0, 0             	RLCF	r0x00, W
000eb4   3610     rlcf	0x10, 0x1, 0        	RLCF	r0x10, F
000eb6   34e8     rlcf	0xe8, 0, 0          	RLCF	WREG, W
000eb8   3610     rlcf	0x10, 0x1, 0        	RLCF	r0x10, F
000eba   0bfc     andlw	0xfc               	ANDLW	0xfc
000ebc   6e0f     movwf	0xf, 0             	MOVWF	r0x0f
000ebe   0e00     movlw	0                  	MOVLW	UPPER(_00204_DS_)
000ec0   6efb     movwf	0xfb, 0            	MOVWF	PCLATU
000ec2   0e0e     movlw	0xe                	MOVLW	HIGH(_00204_DS_)
000ec4   6efa     movwf	0xfa, 0            	MOVWF	PCLATH
000ec6   0ede     movlw	0xde               	MOVLW	LOW(_00204_DS_)
000ec8   260f     addwf	0xf, 0x1, 0        	ADDWF	r0x0f, F
000eca   5010     movf	0x10, 0, 0          	MOVF	r0x10, W
000ecc   22fa     addwfc	0xfa, 0x1, 0      	ADDWFC	PCLATH, F
000ece   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000ed0   2afb     incf	0xfb, 0x1, 0        	INCF	PCLATU, F
000ed2   500f     movf	0xf, 0, 0           	MOVF	r0x0f, W
000ed4   cfe4     movff	0xfe4, 0x10        	MOVFF	PREINC1, r0x10
000ed6   f010
000ed8   cfe4     movff	0xfe4, 0xf         	MOVFF	PREINC1, r0x0f
000eda   f00f
000edc   6ef9     movwf	0xf9, 0            	MOVWF	PCL
                                           _00204_DS_:
000ede   ef85     goto	0xf0a               	GOTO	_00173_DS_
000ee0   f007
000ee2   ef9d     goto	0xf3a               	GOTO	_00174_DS_
000ee4   f007
000ee6   efca     goto	0xf94               	GOTO	_00175_DS_
000ee8   f007
000eea   eff6     goto	0xfec               	GOTO	_00176_DS_
000eec   f007
000eee   ef22     goto	0x1044              	GOTO	_00177_DS_
000ef0   f008
000ef2   ef39     goto	0x1072              	GOTO	_00178_DS_
000ef4   f008
000ef6   ef6a     goto	0x10d4              	GOTO	_00182_DS_
000ef8   f008
000efa   ef8f     goto	0x111e              	GOTO	_00183_DS_
000efc   f008
000efe   efb4     goto	0x1168              	GOTO	_00184_DS_
000f00   f008
000f02   ef1d     goto	0x123a              	GOTO	_00188_DS_
000f04   f009
000f06   ef49     goto	0x1292              	GOTO	_00189_DS_
000f08   f009
                                           _00173_DS_:
                                           ;	.line	248; reveil.c	sprintf(display, "Do you want to  set the time ?  ");
000f0a   0e0f     movlw	0xf                	MOVLW	HIGH(_display)
000f0c   6e01     movwf	0x1, 0             	MOVWF	r0x01
000f0e   0e21     movlw	0x21               	MOVLW	LOW(_display)
000f10   6e00     movwf	0, 0               	MOVWF	r0x00
000f12   0e80     movlw	0x80               	MOVLW	0x80
000f14   6e02     movwf	0x2, 0             	MOVWF	r0x02
000f16   0e00     movlw	0                  	MOVLW	UPPER(__str_0)
000f18   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f1a   0e22     movlw	0x22               	MOVLW	HIGH(__str_0)
000f1c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f1e   0ea8     movlw	0xa8               	MOVLW	LOW(__str_0)
000f20   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f22   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000f24   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f26   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000f28   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f2a   5000     movf	0, 0, 0             	MOVF	r0x00, W
000f2c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f2e   ecb5     call	0x376a, 0           	CALL	_sprintf
000f30   f01b
000f32   0e06     movlw	0x6                	MOVLW	0x06
000f34   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	249; reveil.c	break;
000f36   efe6     goto	0x13cc              	GOTO	_00194_DS_
000f38   f009
                                           _00174_DS_:
                                           ;	.line	252; reveil.c	thour, tmin, tsec);
000f3a   cf49     movff	0xf49, 0           	MOVFF	_tsec, r0x00
000f3c   f000
000f3e   6a01     clrf	0x1, 0              	CLRF	r0x01
000f40   cf48     movff	0xf48, 0x2         	MOVFF	_tmin, r0x02
000f42   f002
000f44   6a03     clrf	0x3, 0              	CLRF	r0x03
000f46   cf47     movff	0xf47, 0x4         	MOVFF	_thour, r0x04
000f48   f004
000f4a   6a05     clrf	0x5, 0              	CLRF	r0x05
                                           ;	.line	251; reveil.c	sprintf(display, " [%02u]: %02u : %02u                  ",
000f4c   0e0f     movlw	0xf                	MOVLW	HIGH(_display)
000f4e   6e07     movwf	0x7, 0             	MOVWF	r0x07
000f50   0e21     movlw	0x21               	MOVLW	LOW(_display)
000f52   6e06     movwf	0x6, 0             	MOVWF	r0x06
000f54   0e80     movlw	0x80               	MOVLW	0x80
000f56   6e08     movwf	0x8, 0             	MOVWF	r0x08
000f58   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000f5a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f5c   5000     movf	0, 0, 0             	MOVF	r0x00, W
000f5e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f60   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000f62   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f64   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000f66   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f68   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000f6a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f6c   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000f6e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f70   0e00     movlw	0                  	MOVLW	UPPER(__str_1)
000f72   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f74   0e22     movlw	0x22               	MOVLW	HIGH(__str_1)
000f76   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f78   0eca     movlw	0xca               	MOVLW	LOW(__str_1)
000f7a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f7c   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
000f7e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f80   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
000f82   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f84   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000f86   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f88   ecb5     call	0x376a, 0           	CALL	_sprintf
000f8a   f01b
000f8c   0e0c     movlw	0xc                	MOVLW	0x0c
000f8e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	253; reveil.c	break;
000f90   efe6     goto	0x13cc              	GOTO	_00194_DS_
000f92   f009
                                           _00175_DS_:
                                           ;	.line	256; reveil.c	thour, tmin, tsec);
000f94   cf49     movff	0xf49, 0           	MOVFF	_tsec, r0x00
000f96   f000
000f98   6a01     clrf	0x1, 0              	CLRF	r0x01
000f9a   cf48     movff	0xf48, 0x2         	MOVFF	_tmin, r0x02
000f9c   f002
000f9e   6a03     clrf	0x3, 0              	CLRF	r0x03
000fa0   cf47     movff	0xf47, 0x4         	MOVFF	_thour, r0x04
000fa2   f004
000fa4   6a05     clrf	0x5, 0              	CLRF	r0x05
                                           ;	.line	255; reveil.c	sprintf(display, "  %02u :[%02u]: %02u                  ",
000fa6   0e0f     movlw	0xf                	MOVLW	HIGH(_display)
000fa8   6e07     movwf	0x7, 0             	MOVWF	r0x07
000faa   0e21     movlw	0x21               	MOVLW	LOW(_display)
000fac   6e06     movwf	0x6, 0             	MOVWF	r0x06
000fae   0e80     movlw	0x80               	MOVLW	0x80
000fb0   6e08     movwf	0x8, 0             	MOVWF	r0x08
000fb2   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000fb4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000fb6   5000     movf	0, 0, 0             	MOVF	r0x00, W
000fb8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000fba   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000fbc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000fbe   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000fc0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000fc2   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000fc4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000fc6   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000fc8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000fca   0e00     movlw	0                  	MOVLW	UPPER(__str_2)
000fcc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000fce   0e22     movlw	0x22               	MOVLW	HIGH(__str_2)
000fd0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000fd2   0ef2     movlw	0xf2               	MOVLW	LOW(__str_2)
000fd4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000fd6   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
000fd8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000fda   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
000fdc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000fde   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000fe0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000fe2   ecb5     call	0x376a, 0           	CALL	_sprintf
000fe4   f01b
000fe6   0e0c     movlw	0xc                	MOVLW	0x0c
000fe8   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	257; reveil.c	break;
000fea   d1f0     bra	0x13cc               	BRA	_00194_DS_
                                           _00176_DS_:
                                           ;	.line	260; reveil.c	thour, tmin, tsec);
000fec   cf49     movff	0xf49, 0           	MOVFF	_tsec, r0x00
000fee   f000
000ff0   6a01     clrf	0x1, 0              	CLRF	r0x01
000ff2   cf48     movff	0xf48, 0x2         	MOVFF	_tmin, r0x02
000ff4   f002
000ff6   6a03     clrf	0x3, 0              	CLRF	r0x03
000ff8   cf47     movff	0xf47, 0x4         	MOVFF	_thour, r0x04
000ffa   f004
000ffc   6a05     clrf	0x5, 0              	CLRF	r0x05
                                           ;	.line	259; reveil.c	sprintf(display, "  %02u : %02u :[%02u]                 ",
000ffe   0e0f     movlw	0xf                	MOVLW	HIGH(_display)
001000   6e07     movwf	0x7, 0             	MOVWF	r0x07
001002   0e21     movlw	0x21               	MOVLW	LOW(_display)
001004   6e06     movwf	0x6, 0             	MOVWF	r0x06
001006   0e80     movlw	0x80               	MOVLW	0x80
001008   6e08     movwf	0x8, 0             	MOVWF	r0x08
00100a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00100c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00100e   5000     movf	0, 0, 0             	MOVF	r0x00, W
001010   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001012   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001014   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001016   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001018   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00101a   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00101c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00101e   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001020   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001022   0e00     movlw	0                  	MOVLW	UPPER(__str_3)
001024   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001026   0e23     movlw	0x23               	MOVLW	HIGH(__str_3)
001028   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00102a   0e1a     movlw	0x1a               	MOVLW	LOW(__str_3)
00102c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00102e   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
001030   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001032   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
001034   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001036   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
001038   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00103a   ecb5     call	0x376a, 0           	CALL	_sprintf
00103c   f01b
00103e   0e0c     movlw	0xc                	MOVLW	0x0c
001040   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	261; reveil.c	break;
001042   d1c4     bra	0x13cc               	BRA	_00194_DS_
                                           _00177_DS_:
                                           ;	.line	263; reveil.c	sprintf(display, "Do you want to  set the alarm ? ");
001044   0e0f     movlw	0xf                	MOVLW	HIGH(_display)
001046   6e01     movwf	0x1, 0             	MOVWF	r0x01
001048   0e21     movlw	0x21               	MOVLW	LOW(_display)
00104a   6e00     movwf	0, 0               	MOVWF	r0x00
00104c   0e80     movlw	0x80               	MOVLW	0x80
00104e   6e02     movwf	0x2, 0             	MOVWF	r0x02
001050   0e00     movlw	0                  	MOVLW	UPPER(__str_4)
001052   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001054   0e23     movlw	0x23               	MOVLW	HIGH(__str_4)
001056   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001058   0e42     movlw	0x42               	MOVLW	LOW(__str_4)
00105a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00105c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00105e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001060   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001062   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001064   5000     movf	0, 0, 0             	MOVF	r0x00, W
001066   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001068   ecb5     call	0x376a, 0           	CALL	_sprintf
00106a   f01b
00106c   0e06     movlw	0x6                	MOVLW	0x06
00106e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	264; reveil.c	break;
001070   d1ad     bra	0x13cc               	BRA	_00194_DS_
                                           _00178_DS_:
001072   010f     movlb	0xf                	BANKSEL	_alarm_set
                                           ;	.line	266; reveil.c	if (alarm_set) {
001074   514e     movf	0x4e, 0, 0x1        	MOVF	_alarm_set, W, B
001076   e017     bz	0x10a6                	BZ	_00180_DS_
                                           ;	.line	267; reveil.c	sprintf(display, "  Alarm [ON ]                   ");
001078   0e0f     movlw	0xf                	MOVLW	HIGH(_display)
00107a   6e01     movwf	0x1, 0             	MOVWF	r0x01
00107c   0e21     movlw	0x21               	MOVLW	LOW(_display)
00107e   6e00     movwf	0, 0               	MOVWF	r0x00
001080   0e80     movlw	0x80               	MOVLW	0x80
001082   6e02     movwf	0x2, 0             	MOVWF	r0x02
001084   0e00     movlw	0                  	MOVLW	UPPER(__str_5)
001086   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001088   0e23     movlw	0x23               	MOVLW	HIGH(__str_5)
00108a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00108c   0e64     movlw	0x64               	MOVLW	LOW(__str_5)
00108e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001090   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001092   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001094   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001096   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001098   5000     movf	0, 0, 0             	MOVF	r0x00, W
00109a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00109c   ecb5     call	0x376a, 0           	CALL	_sprintf
00109e   f01b
0010a0   0e06     movlw	0x6                	MOVLW	0x06
0010a2   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0010a4   d193     bra	0x13cc               	BRA	_00194_DS_
                                           _00180_DS_:
                                           ;	.line	269; reveil.c	sprintf(display, "  Alarm [OFF]                   ");
0010a6   0e0f     movlw	0xf                	MOVLW	HIGH(_display)
0010a8   6e01     movwf	0x1, 0             	MOVWF	r0x01
0010aa   0e21     movlw	0x21               	MOVLW	LOW(_display)
0010ac   6e00     movwf	0, 0               	MOVWF	r0x00
0010ae   0e80     movlw	0x80               	MOVLW	0x80
0010b0   6e02     movwf	0x2, 0             	MOVWF	r0x02
0010b2   0e00     movlw	0                  	MOVLW	UPPER(__str_6)
0010b4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0010b6   0e23     movlw	0x23               	MOVLW	HIGH(__str_6)
0010b8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0010ba   0e86     movlw	0x86               	MOVLW	LOW(__str_6)
0010bc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0010be   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0010c0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0010c2   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0010c4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0010c6   5000     movf	0, 0, 0             	MOVF	r0x00, W
0010c8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0010ca   ecb5     call	0x376a, 0           	CALL	_sprintf
0010cc   f01b
0010ce   0e06     movlw	0x6                	MOVLW	0x06
0010d0   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	271; reveil.c	break;
0010d2   d17c     bra	0x13cc               	BRA	_00194_DS_
                                           _00182_DS_:
                                           ;	.line	274; reveil.c	ahour, amin);
0010d4   cf4b     movff	0xf4b, 0           	MOVFF	_amin, r0x00
0010d6   f000
0010d8   6a01     clrf	0x1, 0              	CLRF	r0x01
0010da   cf4a     movff	0xf4a, 0x2         	MOVFF	_ahour, r0x02
0010dc   f002
0010de   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           ;	.line	273; reveil.c	sprintf(display, "    Alarm at        [%02u]: %02u    ",
0010e0   0e0f     movlw	0xf                	MOVLW	HIGH(_display)
0010e2   6e05     movwf	0x5, 0             	MOVWF	r0x05
0010e4   0e21     movlw	0x21               	MOVLW	LOW(_display)
0010e6   6e04     movwf	0x4, 0             	MOVWF	r0x04
0010e8   0e80     movlw	0x80               	MOVLW	0x80
0010ea   6e06     movwf	0x6, 0             	MOVWF	r0x06
0010ec   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0010ee   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0010f0   5000     movf	0, 0, 0             	MOVF	r0x00, W
0010f2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0010f4   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0010f6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0010f8   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0010fa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0010fc   0e00     movlw	0                  	MOVLW	UPPER(__str_7)
0010fe   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001100   0e23     movlw	0x23               	MOVLW	HIGH(__str_7)
001102   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001104   0ea8     movlw	0xa8               	MOVLW	LOW(__str_7)
001106   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001108   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
00110a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00110c   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00110e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001110   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001112   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001114   ecb5     call	0x376a, 0           	CALL	_sprintf
001116   f01b
001118   0e0a     movlw	0xa                	MOVLW	0x0a
00111a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	275; reveil.c	break;
00111c   d157     bra	0x13cc               	BRA	_00194_DS_
                                           _00183_DS_:
                                           ;	.line	278; reveil.c	ahour, amin);
00111e   cf4b     movff	0xf4b, 0           	MOVFF	_amin, r0x00
001120   f000
001122   6a01     clrf	0x1, 0              	CLRF	r0x01
001124   cf4a     movff	0xf4a, 0x2         	MOVFF	_ahour, r0x02
001126   f002
001128   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           ;	.line	277; reveil.c	sprintf(display, "    Alarm at         %02u :[%02u]   ",
00112a   0e0f     movlw	0xf                	MOVLW	HIGH(_display)
00112c   6e05     movwf	0x5, 0             	MOVWF	r0x05
00112e   0e21     movlw	0x21               	MOVLW	LOW(_display)
001130   6e04     movwf	0x4, 0             	MOVWF	r0x04
001132   0e80     movlw	0x80               	MOVLW	0x80
001134   6e06     movwf	0x6, 0             	MOVWF	r0x06
001136   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001138   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00113a   5000     movf	0, 0, 0             	MOVF	r0x00, W
00113c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00113e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001140   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001142   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001144   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001146   0e00     movlw	0                  	MOVLW	UPPER(__str_8)
001148   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00114a   0e23     movlw	0x23               	MOVLW	HIGH(__str_8)
00114c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00114e   0ece     movlw	0xce               	MOVLW	LOW(__str_8)
001150   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001152   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
001154   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001156   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001158   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00115a   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00115c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00115e   ecb5     call	0x376a, 0           	CALL	_sprintf
001160   f01b
001162   0e0a     movlw	0xa                	MOVLW	0x0a
001164   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	279; reveil.c	break;
001166   d132     bra	0x13cc               	BRA	_00194_DS_
                                           _00184_DS_:
001168   010f     movlb	0xf                	BANKSEL	_alarm_set
                                           ;	.line	281; reveil.c	if (alarm_set) {
00116a   514e     movf	0x4e, 0, 0x1        	MOVF	_alarm_set, W, B
00116c   e03a     bz	0x11e2                	BZ	_00186_DS_
                                           ;	.line	283; reveil.c	thour, tmin, tsec, ahour, amin);
00116e   cf4b     movff	0xf4b, 0           	MOVFF	_amin, r0x00
001170   f000
001172   6a01     clrf	0x1, 0              	CLRF	r0x01
001174   cf4a     movff	0xf4a, 0x2         	MOVFF	_ahour, r0x02
001176   f002
001178   6a03     clrf	0x3, 0              	CLRF	r0x03
00117a   cf49     movff	0xf49, 0x4         	MOVFF	_tsec, r0x04
00117c   f004
00117e   6a05     clrf	0x5, 0              	CLRF	r0x05
001180   cf48     movff	0xf48, 0x6         	MOVFF	_tmin, r0x06
001182   f006
001184   6a07     clrf	0x7, 0              	CLRF	r0x07
001186   cf47     movff	0xf47, 0x8         	MOVFF	_thour, r0x08
001188   f008
00118a   6a09     clrf	0x9, 0              	CLRF	r0x09
                                           ;	.line	282; reveil.c	sprintf(display, "    %02u:%02u:%02u    Alarm ON  %02u:%02u ",
00118c   0e0f     movlw	0xf                	MOVLW	HIGH(_display)
00118e   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
001190   0e21     movlw	0x21               	MOVLW	LOW(_display)
001192   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
001194   0e80     movlw	0x80               	MOVLW	0x80
001196   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
001198   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00119a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00119c   5000     movf	0, 0, 0             	MOVF	r0x00, W
00119e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0011a0   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0011a2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0011a4   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0011a6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0011a8   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0011aa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0011ac   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0011ae   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0011b0   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0011b2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0011b4   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0011b6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0011b8   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
0011ba   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0011bc   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
0011be   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0011c0   0e00     movlw	0                  	MOVLW	UPPER(__str_9)
0011c2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0011c4   0e23     movlw	0x23               	MOVLW	HIGH(__str_9)
0011c6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0011c8   0ef4     movlw	0xf4               	MOVLW	LOW(__str_9)
0011ca   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0011cc   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
0011ce   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0011d0   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
0011d2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0011d4   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
0011d6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0011d8   ecb5     call	0x376a, 0           	CALL	_sprintf
0011da   f01b
0011dc   0e10     movlw	0x10               	MOVLW	0x10
0011de   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0011e0   d0f5     bra	0x13cc               	BRA	_00194_DS_
                                           _00186_DS_:
                                           ;	.line	286; reveil.c	thour, tmin, tsec);
0011e2   cf49     movff	0xf49, 0           	MOVFF	_tsec, r0x00
0011e4   f000
0011e6   6a01     clrf	0x1, 0              	CLRF	r0x01
0011e8   cf48     movff	0xf48, 0x2         	MOVFF	_tmin, r0x02
0011ea   f002
0011ec   6a03     clrf	0x3, 0              	CLRF	r0x03
0011ee   cf47     movff	0xf47, 0x4         	MOVFF	_thour, r0x04
0011f0   f004
0011f2   6a05     clrf	0x5, 0              	CLRF	r0x05
                                           ;	.line	285; reveil.c	sprintf(display, "    %02u:%02u:%02u       Alarm  OFF   ",
0011f4   0e0f     movlw	0xf                	MOVLW	HIGH(_display)
0011f6   6e07     movwf	0x7, 0             	MOVWF	r0x07
0011f8   0e21     movlw	0x21               	MOVLW	LOW(_display)
0011fa   6e06     movwf	0x6, 0             	MOVWF	r0x06
0011fc   0e80     movlw	0x80               	MOVLW	0x80
0011fe   6e08     movwf	0x8, 0             	MOVWF	r0x08
001200   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001202   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001204   5000     movf	0, 0, 0             	MOVF	r0x00, W
001206   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001208   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00120a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00120c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00120e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001210   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001212   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001214   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001216   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001218   0e00     movlw	0                  	MOVLW	UPPER(__str_10)
00121a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00121c   0e24     movlw	0x24               	MOVLW	HIGH(__str_10)
00121e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001220   0e20     movlw	0x20               	MOVLW	LOW(__str_10)
001222   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001224   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
001226   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001228   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
00122a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00122c   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
00122e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001230   ecb5     call	0x376a, 0           	CALL	_sprintf
001232   f01b
001234   0e0c     movlw	0xc                	MOVLW	0x0c
001236   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	288; reveil.c	break;
001238   d0c9     bra	0x13cc               	BRA	_00194_DS_
                                           _00188_DS_:
                                           ;	.line	291; reveil.c	thour, tmin, tsec); // ***blink***
00123a   cf49     movff	0xf49, 0           	MOVFF	_tsec, r0x00
00123c   f000
00123e   6a01     clrf	0x1, 0              	CLRF	r0x01
001240   cf48     movff	0xf48, 0x2         	MOVFF	_tmin, r0x02
001242   f002
001244   6a03     clrf	0x3, 0              	CLRF	r0x03
001246   cf47     movff	0xf47, 0x4         	MOVFF	_thour, r0x04
001248   f004
00124a   6a05     clrf	0x5, 0              	CLRF	r0x05
                                           ;	.line	290; reveil.c	sprintf(display, "    %02u:%02u:%02u      I am ringing! ",
00124c   0e0f     movlw	0xf                	MOVLW	HIGH(_display)
00124e   6e07     movwf	0x7, 0             	MOVWF	r0x07
001250   0e21     movlw	0x21               	MOVLW	LOW(_display)
001252   6e06     movwf	0x6, 0             	MOVWF	r0x06
001254   0e80     movlw	0x80               	MOVLW	0x80
001256   6e08     movwf	0x8, 0             	MOVWF	r0x08
001258   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00125a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00125c   5000     movf	0, 0, 0             	MOVF	r0x00, W
00125e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001260   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001262   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001264   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001266   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001268   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00126a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00126c   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00126e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001270   0e00     movlw	0                  	MOVLW	UPPER(__str_11)
001272   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001274   0e24     movlw	0x24               	MOVLW	HIGH(__str_11)
001276   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001278   0e48     movlw	0x48               	MOVLW	LOW(__str_11)
00127a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00127c   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
00127e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001280   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
001282   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001284   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
001286   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001288   ecb5     call	0x376a, 0           	CALL	_sprintf
00128a   f01b
00128c   0e0c     movlw	0xc                	MOVLW	0x0c
00128e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	292; reveil.c	break;
001290   d09d     bra	0x13cc               	BRA	_00194_DS_
                                           _00189_DS_:
                                           ;	.line	294; reveil.c	if (snooze < 10) {
001292   0e0a     movlw	0xa                	MOVLW	0x0a
001294   010f     movlb	0xf                	BANKSEL	_snooze
001296   5d4f     subwf	0x4f, 0, 0x1       	SUBWF	_snooze, W, B
001298   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00129a   d041     bra	0x131e               	BRA	_00191_DS_
                                           ;	.line	296; reveil.c	thour, tmin, tsec, snooze, ahour_o, amin_o);
00129c   cf4d     movff	0xf4d, 0           	MOVFF	_amin_o, r0x00
00129e   f000
0012a0   6a01     clrf	0x1, 0              	CLRF	r0x01
0012a2   cf4c     movff	0xf4c, 0x2         	MOVFF	_ahour_o, r0x02
0012a4   f002
0012a6   6a03     clrf	0x3, 0              	CLRF	r0x03
0012a8   cf4f     movff	0xf4f, 0x4         	MOVFF	_snooze, r0x04
0012aa   f004
0012ac   6a05     clrf	0x5, 0              	CLRF	r0x05
0012ae   cf49     movff	0xf49, 0x6         	MOVFF	_tsec, r0x06
0012b0   f006
0012b2   6a07     clrf	0x7, 0              	CLRF	r0x07
0012b4   cf48     movff	0xf48, 0x8         	MOVFF	_tmin, r0x08
0012b6   f008
0012b8   6a09     clrf	0x9, 0              	CLRF	r0x09
0012ba   cf47     movff	0xf47, 0xa         	MOVFF	_thour, r0x0a
0012bc   f00a
0012be   6a0b     clrf	0xb, 0              	CLRF	r0x0b
                                           ;	.line	295; reveil.c	sprintf(display, "    %02u:%02u:%02u    Snooze %u  %02u:%02u ",
0012c0   0e0f     movlw	0xf                	MOVLW	HIGH(_display)
0012c2   6e0d     movwf	0xd, 0             	MOVWF	r0x0d
0012c4   0e21     movlw	0x21               	MOVLW	LOW(_display)
0012c6   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
0012c8   0e80     movlw	0x80               	MOVLW	0x80
0012ca   6e0e     movwf	0xe, 0             	MOVWF	r0x0e
0012cc   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0012ce   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0012d0   5000     movf	0, 0, 0             	MOVF	r0x00, W
0012d2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0012d4   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0012d6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0012d8   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0012da   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0012dc   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0012de   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0012e0   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0012e2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0012e4   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0012e6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0012e8   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0012ea   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0012ec   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
0012ee   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0012f0   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
0012f2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0012f4   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
0012f6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0012f8   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
0012fa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0012fc   0e00     movlw	0                  	MOVLW	UPPER(__str_12)
0012fe   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001300   0e24     movlw	0x24               	MOVLW	HIGH(__str_12)
001302   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001304   0e70     movlw	0x70               	MOVLW	LOW(__str_12)
001306   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001308   500e     movf	0xe, 0, 0           	MOVF	r0x0e, W
00130a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00130c   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
00130e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001310   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
001312   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001314   ecb5     call	0x376a, 0           	CALL	_sprintf
001316   f01b
001318   0e12     movlw	0x12               	MOVLW	0x12
00131a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00131c   d057     bra	0x13cc               	BRA	_00194_DS_
                                           _00191_DS_:
                                           ;	.line	299; reveil.c	thour, tmin, tsec, snooze, ahour_o, amin_o);
00131e   cf4d     movff	0xf4d, 0           	MOVFF	_amin_o, r0x00
001320   f000
001322   6a01     clrf	0x1, 0              	CLRF	r0x01
001324   cf4c     movff	0xf4c, 0x2         	MOVFF	_ahour_o, r0x02
001326   f002
001328   6a03     clrf	0x3, 0              	CLRF	r0x03
00132a   cf4f     movff	0xf4f, 0x4         	MOVFF	_snooze, r0x04
00132c   f004
00132e   6a05     clrf	0x5, 0              	CLRF	r0x05
001330   cf49     movff	0xf49, 0x6         	MOVFF	_tsec, r0x06
001332   f006
001334   6a07     clrf	0x7, 0              	CLRF	r0x07
001336   cf48     movff	0xf48, 0x8         	MOVFF	_tmin, r0x08
001338   f008
00133a   6a09     clrf	0x9, 0              	CLRF	r0x09
00133c   cf47     movff	0xf47, 0xa         	MOVFF	_thour, r0x0a
00133e   f00a
001340   6a0b     clrf	0xb, 0              	CLRF	r0x0b
                                           ;	.line	298; reveil.c	sprintf(display, "    %02u:%02u:%02u    Snooze %u %02u:%02u ",
001342   0e0f     movlw	0xf                	MOVLW	HIGH(_display)
001344   6e0d     movwf	0xd, 0             	MOVWF	r0x0d
001346   0e21     movlw	0x21               	MOVLW	LOW(_display)
001348   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
00134a   0e80     movlw	0x80               	MOVLW	0x80
00134c   6e0e     movwf	0xe, 0             	MOVWF	r0x0e
00134e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001350   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001352   5000     movf	0, 0, 0             	MOVF	r0x00, W
001354   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001356   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001358   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00135a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00135c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00135e   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001360   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001362   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001364   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001366   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
001368   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00136a   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
00136c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00136e   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
001370   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001372   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
001374   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001376   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
001378   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00137a   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
00137c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00137e   0e00     movlw	0                  	MOVLW	UPPER(__str_13)
001380   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001382   0e24     movlw	0x24               	MOVLW	HIGH(__str_13)
001384   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001386   0e9c     movlw	0x9c               	MOVLW	LOW(__str_13)
001388   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00138a   500e     movf	0xe, 0, 0           	MOVF	r0x0e, W
00138c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00138e   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
001390   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001392   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
001394   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001396   ecb5     call	0x376a, 0           	CALL	_sprintf
001398   f01b
00139a   0e12     movlw	0x12               	MOVLW	0x12
00139c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	301; reveil.c	break;
00139e   d016     bra	0x13cc               	BRA	_00194_DS_
                                           _00193_DS_:
                                           ;	.line	303; reveil.c	sprintf(display, "**** ERROR ********* ERROR *****");
0013a0   0e0f     movlw	0xf                	MOVLW	HIGH(_display)
0013a2   6e01     movwf	0x1, 0             	MOVWF	r0x01
0013a4   0e21     movlw	0x21               	MOVLW	LOW(_display)
0013a6   6e00     movwf	0, 0               	MOVWF	r0x00
0013a8   0e80     movlw	0x80               	MOVLW	0x80
0013aa   6e02     movwf	0x2, 0             	MOVWF	r0x02
0013ac   0e00     movlw	0                  	MOVLW	UPPER(__str_14)
0013ae   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0013b0   0e24     movlw	0x24               	MOVLW	HIGH(__str_14)
0013b2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0013b4   0ec8     movlw	0xc8               	MOVLW	LOW(__str_14)
0013b6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0013b8   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0013ba   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0013bc   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0013be   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0013c0   5000     movf	0, 0, 0             	MOVF	r0x00, W
0013c2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0013c4   ecb5     call	0x376a, 0           	CALL	_sprintf
0013c6   f01b
0013c8   0e06     movlw	0x6                	MOVLW	0x06
0013ca   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00194_DS_:
                                           ;	.line	306; reveil.c	DisplayString(0, display);
0013cc   0e0f     movlw	0xf                	MOVLW	HIGH(_display)
0013ce   6e01     movwf	0x1, 0             	MOVWF	r0x01
0013d0   0e21     movlw	0x21               	MOVLW	LOW(_display)
0013d2   6e00     movwf	0, 0               	MOVWF	r0x00
0013d4   0e80     movlw	0x80               	MOVLW	0x80
0013d6   6e02     movwf	0x2, 0             	MOVWF	r0x02
0013d8   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0013da   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0013dc   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0013de   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0013e0   5000     movf	0, 0, 0             	MOVF	r0x00, W
0013e2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0013e4   0e00     movlw	0                  	MOVLW	0x00
0013e6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0013e8   ec9c     call	0x3938, 0           	CALL	_DisplayString
0013ea   f01c
0013ec   0e04     movlw	0x4                	MOVLW	0x04
0013ee   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0013f0   cfe4     movff	0xfe4, 0xe         	MOVFF	PREINC1, r0x0e
0013f2   f00e
0013f4   cfe4     movff	0xfe4, 0xd         	MOVFF	PREINC1, r0x0d
0013f6   f00d
0013f8   cfe4     movff	0xfe4, 0xc         	MOVFF	PREINC1, r0x0c
0013fa   f00c
0013fc   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
0013fe   f00b
001400   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
001402   f00a
001404   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
001406   f009
001408   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
00140a   f008
00140c   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
00140e   f007
001410   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
001412   f006
001414   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
001416   f005
001418   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
00141a   f004
00141c   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00141e   f003
001420   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
001422   f002
001424   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
001426   f001
001428   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00142a   f000
00142c   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00142e   ffd9
001430   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_reveil__time	code
                                           _time:
                                           ;	.line	202; reveil.c	void time(void)
001b84   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
001b86   ffe5
001b88   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001b8a   ffd9
001b8c   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
001b8e   ffe5
001b90   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
001b92   ffe5
001b94   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
001b96   ffe5
001b98   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
001b9a   ffe5
001b9c   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
001b9e   ffe5
001ba0   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
001ba2   ffe5
001ba4   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
001ba6   ffe5
001ba8   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
001baa   ffe5
001bac   010f     movlb	0xf                	BANKSEL	(_overflows + 3)
                                           ;	.line	205; reveil.c	sec = overflows/F;
001bae   5146     movf	0x46, 0, 0x1        	MOVF	(_overflows + 3), W, B
001bb0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001bb2   010f     movlb	0xf                	BANKSEL	(_overflows + 2)
001bb4   5145     movf	0x45, 0, 0x1        	MOVF	(_overflows + 2), W, B
001bb6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001bb8   010f     movlb	0xf                	BANKSEL	(_overflows + 1)
001bba   5144     movf	0x44, 0, 0x1        	MOVF	(_overflows + 1), W, B
001bbc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001bbe   010f     movlb	0xf                	BANKSEL	_overflows
001bc0   5143     movf	0x43, 0, 0x1        	MOVF	_overflows, W, B
001bc2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001bc4   ecbe     call	0x2f7c, 0           	CALL	___ulong2fs
001bc6   f017
001bc8   6e00     movwf	0, 0               	MOVWF	r0x00
001bca   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
001bcc   f001
001bce   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
001bd0   f002
001bd2   cfe9     movff	0xfe9, 0x3         	MOVFF	FSR0L, r0x03
001bd4   f003
001bd6   0e04     movlw	0x4                	MOVLW	0x04
001bd8   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
001bda   0e42     movlw	0x42               	MOVLW	0x42
001bdc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001bde   0ebe     movlw	0xbe               	MOVLW	0xbe
001be0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001be2   0ebb     movlw	0xbb               	MOVLW	0xbb
001be4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001be6   0e2a     movlw	0x2a               	MOVLW	0x2a
001be8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001bea   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001bec   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001bee   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001bf0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001bf2   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001bf4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001bf6   5000     movf	0, 0, 0             	MOVF	r0x00, W
001bf8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001bfa   ec81     call	0x1f02, 0           	CALL	___fsdiv
001bfc   f00f
001bfe   6e00     movwf	0, 0               	MOVWF	r0x00
001c00   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
001c02   f001
001c04   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
001c06   f002
001c08   cfe9     movff	0xfe9, 0x3         	MOVFF	FSR0L, r0x03
001c0a   f003
001c0c   0e08     movlw	0x8                	MOVLW	0x08
001c0e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
001c10   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001c12   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c14   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001c16   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c18   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001c1a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c1c   5000     movf	0, 0, 0             	MOVF	r0x00, W
001c1e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c20   ec3f     call	0x367e, 0           	CALL	___fs2ulong
001c22   f01b
001c24   010f     movlb	0xf                	BANKSEL	_sec
001c26   6f54     movwf	0x54, 0x1          	MOVWF	_sec, B
001c28   cff3     movff	0xff3, 0xf55       	MOVFF	PRODL, (_sec + 1)
001c2a   ff55
001c2c   cff4     movff	0xff4, 0xf56       	MOVFF	PRODH, (_sec + 2)
001c2e   ff56
001c30   cfe9     movff	0xfe9, 0xf57       	MOVFF	FSR0L, (_sec + 3)
001c32   ff57
001c34   0e04     movlw	0x4                	MOVLW	0x04
001c36   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
001c38   010f     movlb	0xf                	BANKSEL	(_overflows + 3)
                                           ;	.line	206; reveil.c	decisec = ((10*overflows)/F);
001c3a   5146     movf	0x46, 0, 0x1        	MOVF	(_overflows + 3), W, B
001c3c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c3e   010f     movlb	0xf                	BANKSEL	(_overflows + 2)
001c40   5145     movf	0x45, 0, 0x1        	MOVF	(_overflows + 2), W, B
001c42   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c44   010f     movlb	0xf                	BANKSEL	(_overflows + 1)
001c46   5144     movf	0x44, 0, 0x1        	MOVF	(_overflows + 1), W, B
001c48   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c4a   010f     movlb	0xf                	BANKSEL	_overflows
001c4c   5143     movf	0x43, 0, 0x1        	MOVF	_overflows, W, B
001c4e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c50   0e00     movlw	0                  	MOVLW	0x00
001c52   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c54   0e00     movlw	0                  	MOVLW	0x00
001c56   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c58   0e00     movlw	0                  	MOVLW	0x00
001c5a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c5c   0e0a     movlw	0xa                	MOVLW	0x0a
001c5e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c60   ecd8     call	0x29b0, 0           	CALL	__mullong
001c62   f014
001c64   6e00     movwf	0, 0               	MOVWF	r0x00
001c66   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
001c68   f001
001c6a   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
001c6c   f002
001c6e   cfe9     movff	0xfe9, 0x3         	MOVFF	FSR0L, r0x03
001c70   f003
001c72   0e08     movlw	0x8                	MOVLW	0x08
001c74   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
001c76   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001c78   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c7a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001c7c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c7e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001c80   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c82   5000     movf	0, 0, 0             	MOVF	r0x00, W
001c84   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c86   ecbe     call	0x2f7c, 0           	CALL	___ulong2fs
001c88   f017
001c8a   6e00     movwf	0, 0               	MOVWF	r0x00
001c8c   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
001c8e   f001
001c90   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
001c92   f002
001c94   cfe9     movff	0xfe9, 0x3         	MOVFF	FSR0L, r0x03
001c96   f003
001c98   0e04     movlw	0x4                	MOVLW	0x04
001c9a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
001c9c   0e42     movlw	0x42               	MOVLW	0x42
001c9e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001ca0   0ebe     movlw	0xbe               	MOVLW	0xbe
001ca2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001ca4   0ebb     movlw	0xbb               	MOVLW	0xbb
001ca6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001ca8   0e2a     movlw	0x2a               	MOVLW	0x2a
001caa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001cac   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001cae   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001cb0   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001cb2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001cb4   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001cb6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001cb8   5000     movf	0, 0, 0             	MOVF	r0x00, W
001cba   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001cbc   ec81     call	0x1f02, 0           	CALL	___fsdiv
001cbe   f00f
001cc0   6e00     movwf	0, 0               	MOVWF	r0x00
001cc2   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
001cc4   f001
001cc6   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
001cc8   f002
001cca   cfe9     movff	0xfe9, 0x3         	MOVFF	FSR0L, r0x03
001ccc   f003
001cce   0e08     movlw	0x8                	MOVLW	0x08
001cd0   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
001cd2   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001cd4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001cd6   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001cd8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001cda   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001cdc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001cde   5000     movf	0, 0, 0             	MOVF	r0x00, W
001ce0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001ce2   ec3f     call	0x367e, 0           	CALL	___fs2ulong
001ce4   f01b
001ce6   010f     movlb	0xf                	BANKSEL	_decisec
001ce8   6f58     movwf	0x58, 0x1          	MOVWF	_decisec, B
001cea   cff3     movff	0xff3, 0xf59       	MOVFF	PRODL, (_decisec + 1)
001cec   ff59
001cee   cff4     movff	0xff4, 0xf5a       	MOVFF	PRODH, (_decisec + 2)
001cf0   ff5a
001cf2   cfe9     movff	0xfe9, 0xf5b       	MOVFF	FSR0L, (_decisec + 3)
001cf4   ff5b
001cf6   0e04     movlw	0x4                	MOVLW	0x04
001cf8   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	207; reveil.c	ds = decisec%10;
001cfa   0e00     movlw	0                  	MOVLW	0x00
001cfc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001cfe   0e00     movlw	0                  	MOVLW	0x00
001d00   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001d02   0e00     movlw	0                  	MOVLW	0x00
001d04   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001d06   0e0a     movlw	0xa                	MOVLW	0x0a
001d08   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001d0a   010f     movlb	0xf                	BANKSEL	(_decisec + 3)
001d0c   515b     movf	0x5b, 0, 0x1        	MOVF	(_decisec + 3), W, B
001d0e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001d10   010f     movlb	0xf                	BANKSEL	(_decisec + 2)
001d12   515a     movf	0x5a, 0, 0x1        	MOVF	(_decisec + 2), W, B
001d14   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001d16   010f     movlb	0xf                	BANKSEL	(_decisec + 1)
001d18   5159     movf	0x59, 0, 0x1        	MOVF	(_decisec + 1), W, B
001d1a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001d1c   010f     movlb	0xf                	BANKSEL	_decisec
001d1e   5158     movf	0x58, 0, 0x1        	MOVF	_decisec, W, B
001d20   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001d22   ec26     call	0x324c, 0           	CALL	__modulong
001d24   f019
001d26   6e00     movwf	0, 0               	MOVWF	r0x00
001d28   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
001d2a   f001
001d2c   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
001d2e   f002
001d30   cfe9     movff	0xfe9, 0x3         	MOVFF	FSR0L, r0x03
001d32   f003
001d34   0e08     movlw	0x8                	MOVLW	0x08
001d36   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
001d38   5000     movf	0, 0, 0             	MOVF	r0x00, W
001d3a   010e     movlb	0xe                	BANKSEL	_ds
001d3c   6f69     movwf	0x69, 0x1          	MOVWF	_ds, B
                                           ;	.line	208; reveil.c	h = (sec/3600)%24;
001d3e   0e00     movlw	0                  	MOVLW	0x00
001d40   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001d42   0e00     movlw	0                  	MOVLW	0x00
001d44   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001d46   0e0e     movlw	0xe                	MOVLW	0x0e
001d48   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001d4a   0e10     movlw	0x10               	MOVLW	0x10
001d4c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001d4e   010f     movlb	0xf                	BANKSEL	(_sec + 3)
001d50   5157     movf	0x57, 0, 0x1        	MOVF	(_sec + 3), W, B
001d52   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001d54   010f     movlb	0xf                	BANKSEL	(_sec + 2)
001d56   5156     movf	0x56, 0, 0x1        	MOVF	(_sec + 2), W, B
001d58   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001d5a   010f     movlb	0xf                	BANKSEL	(_sec + 1)
001d5c   5155     movf	0x55, 0, 0x1        	MOVF	(_sec + 1), W, B
001d5e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001d60   010f     movlb	0xf                	BANKSEL	_sec
001d62   5154     movf	0x54, 0, 0x1        	MOVF	_sec, W, B
001d64   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001d66   ecb8     call	0x3370, 0           	CALL	__divulong
001d68   f019
001d6a   6e00     movwf	0, 0               	MOVWF	r0x00
001d6c   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
001d6e   f001
001d70   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
001d72   f002
001d74   cfe9     movff	0xfe9, 0x3         	MOVFF	FSR0L, r0x03
001d76   f003
001d78   0e08     movlw	0x8                	MOVLW	0x08
001d7a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
001d7c   0e00     movlw	0                  	MOVLW	0x00
001d7e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001d80   0e00     movlw	0                  	MOVLW	0x00
001d82   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001d84   0e00     movlw	0                  	MOVLW	0x00
001d86   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001d88   0e18     movlw	0x18               	MOVLW	0x18
001d8a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001d8c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001d8e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001d90   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001d92   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001d94   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001d96   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001d98   5000     movf	0, 0, 0             	MOVF	r0x00, W
001d9a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001d9c   ec26     call	0x324c, 0           	CALL	__modulong
001d9e   f019
001da0   6e04     movwf	0x4, 0             	MOVWF	r0x04
001da2   cff3     movff	0xff3, 0x5         	MOVFF	PRODL, r0x05
001da4   f005
001da6   cff4     movff	0xff4, 0x6         	MOVFF	PRODH, r0x06
001da8   f006
001daa   cfe9     movff	0xfe9, 0x7         	MOVFF	FSR0L, r0x07
001dac   f007
001dae   0e08     movlw	0x8                	MOVLW	0x08
001db0   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
001db2   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001db4   010e     movlb	0xe                	BANKSEL	_h
001db6   6f6a     movwf	0x6a, 0x1          	MOVWF	_h, B
                                           ;	.line	209; reveil.c	m = (sec-(sec/3600)*3600)/60;
001db8   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001dba   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001dbc   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001dbe   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001dc0   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001dc2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001dc4   5000     movf	0, 0, 0             	MOVF	r0x00, W
001dc6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001dc8   0e00     movlw	0                  	MOVLW	0x00
001dca   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001dcc   0e00     movlw	0                  	MOVLW	0x00
001dce   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001dd0   0e0e     movlw	0xe                	MOVLW	0x0e
001dd2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001dd4   0e10     movlw	0x10               	MOVLW	0x10
001dd6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001dd8   ecd8     call	0x29b0, 0           	CALL	__mullong
001dda   f014
001ddc   6e00     movwf	0, 0               	MOVWF	r0x00
001dde   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
001de0   f001
001de2   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
001de4   f002
001de6   cfe9     movff	0xfe9, 0x3         	MOVFF	FSR0L, r0x03
001de8   f003
001dea   0e08     movlw	0x8                	MOVLW	0x08
001dec   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
001dee   5000     movf	0, 0, 0             	MOVF	r0x00, W
001df0   010f     movlb	0xf                	BANKSEL	_sec
001df2   5d54     subwf	0x54, 0, 0x1       	SUBWF	_sec, W, B
001df4   6e00     movwf	0, 0               	MOVWF	r0x00
001df6   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001df8   010f     movlb	0xf                	BANKSEL	(_sec + 1)
001dfa   5955     subwfb	0x55, 0, 0x1      	SUBWFB	(_sec + 1), W, B
001dfc   6e01     movwf	0x1, 0             	MOVWF	r0x01
001dfe   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001e00   010f     movlb	0xf                	BANKSEL	(_sec + 2)
001e02   5956     subwfb	0x56, 0, 0x1      	SUBWFB	(_sec + 2), W, B
001e04   6e02     movwf	0x2, 0             	MOVWF	r0x02
001e06   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001e08   010f     movlb	0xf                	BANKSEL	(_sec + 3)
001e0a   5957     subwfb	0x57, 0, 0x1      	SUBWFB	(_sec + 3), W, B
001e0c   6e03     movwf	0x3, 0             	MOVWF	r0x03
001e0e   0e00     movlw	0                  	MOVLW	0x00
001e10   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001e12   0e00     movlw	0                  	MOVLW	0x00
001e14   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001e16   0e00     movlw	0                  	MOVLW	0x00
001e18   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001e1a   0e3c     movlw	0x3c               	MOVLW	0x3c
001e1c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001e1e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001e20   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001e22   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001e24   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001e26   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001e28   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001e2a   5000     movf	0, 0, 0             	MOVF	r0x00, W
001e2c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001e2e   ecb8     call	0x3370, 0           	CALL	__divulong
001e30   f019
001e32   6e00     movwf	0, 0               	MOVWF	r0x00
001e34   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
001e36   f001
001e38   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
001e3a   f002
001e3c   cfe9     movff	0xfe9, 0x3         	MOVFF	FSR0L, r0x03
001e3e   f003
001e40   0e08     movlw	0x8                	MOVLW	0x08
001e42   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
001e44   5000     movf	0, 0, 0             	MOVF	r0x00, W
001e46   010e     movlb	0xe                	BANKSEL	_m
001e48   6f6b     movwf	0x6b, 0x1          	MOVWF	_m, B
001e4a   010f     movlb	0xf                	BANKSEL	_sec
                                           ;	.line	210; reveil.c	s = sec-h*3600-m*60;
001e4c   5154     movf	0x54, 0, 0x1        	MOVF	_sec, W, B
001e4e   6e00     movwf	0, 0               	MOVWF	r0x00
                                           ; ;multiply lit val:0x10 by variable _h and store in r0x01
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
001e50   010e     movlb	0xe                	BANKSEL	_h
001e52   516a     movf	0x6a, 0, 0x1        	MOVF	_h, W, B
001e54   0d10     mullw	0x10               	MULLW	0x10
001e56   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
001e58   f001
001e5a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001e5c   5e00     subwf	0, 0x1, 0          	SUBWF	r0x00, F
                                           ; ;multiply lit val:0x3c by variable _m and store in r0x01
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
001e5e   010e     movlb	0xe                	BANKSEL	_m
001e60   516b     movf	0x6b, 0, 0x1        	MOVF	_m, W, B
001e62   0d3c     mullw	0x3c               	MULLW	0x3c
001e64   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
001e66   f001
001e68   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001e6a   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
001e6c   010e     movlb	0xe                	BANKSEL	_s
001e6e   6f6c     movwf	0x6c, 0x1          	MOVWF	_s, B
001e70   010f     movlb	0xf                	BANKSEL	_tsec
                                           ;	.line	213; reveil.c	if (tsec != s)
001e72   5149     movf	0x49, 0, 0x1        	MOVF	_tsec, W, B
001e74   010e     movlb	0xe                	BANKSEL	_s
001e76   196c     xorwf	0x6c, 0, 0x1       	XORWF	_s, W, B
001e78   e002     bz	0x1e7e                	BZ	_00131_DS_
                                           ;	.line	214; reveil.c	tsec = s;
001e7a   ce6c     movff	0xe6c, 0xf49       	MOVFF	_s, _tsec
001e7c   ff49
                                           _00131_DS_:
001e7e   010f     movlb	0xf                	BANKSEL	_tmin
                                           ;	.line	215; reveil.c	if (tmin != m)
001e80   5148     movf	0x48, 0, 0x1        	MOVF	_tmin, W, B
001e82   010e     movlb	0xe                	BANKSEL	_m
001e84   196b     xorwf	0x6b, 0, 0x1       	XORWF	_m, W, B
001e86   e002     bz	0x1e8c                	BZ	_00133_DS_
                                           ;	.line	216; reveil.c	tmin = m;
001e88   ce6b     movff	0xe6b, 0xf48       	MOVFF	_m, _tmin
001e8a   ff48
                                           _00133_DS_:
001e8c   010f     movlb	0xf                	BANKSEL	_thour
                                           ;	.line	217; reveil.c	if (thour != h)
001e8e   5147     movf	0x47, 0, 0x1        	MOVF	_thour, W, B
001e90   010e     movlb	0xe                	BANKSEL	_h
001e92   196a     xorwf	0x6a, 0, 0x1       	XORWF	_h, W, B
001e94   e002     bz	0x1e9a                	BZ	_00135_DS_
                                           ;	.line	218; reveil.c	thour = h;
001e96   ce6a     movff	0xe6a, 0xf47       	MOVFF	_h, _thour
001e98   ff47
                                           _00135_DS_:
001e9a   010f     movlb	0xf                	BANKSEL	_on
                                           ;	.line	221; reveil.c	if (!on && ds < 5) {
001e9c   5152     movf	0x52, 0, 0x1        	MOVF	_on, W, B
001e9e   e10e     bnz	0x1ebc               	BNZ	_00139_DS_
001ea0   0e05     movlw	0x5                	MOVLW	0x05
001ea2   010e     movlb	0xe                	BANKSEL	_ds
001ea4   5d69     subwf	0x69, 0, 0x1       	SUBWF	_ds, W, B
001ea6   e20a     bc	0x1ebc                	BC	_00139_DS_
                                           ;	.line	222; reveil.c	LATJbits.LATJ0 = 1;
001ea8   8091     bsf	0x91, 0, 0           	BSF	_LATJbits, 0
001eaa   010f     movlb	0xf                	BANKSEL	_whereami
                                           ;	.line	223; reveil.c	if (whereami == ALARM) {
001eac   5151     movf	0x51, 0, 0x1        	MOVF	_whereami, W, B
001eae   0a0a     xorlw	0xa                	XORLW	0x0a
001eb0   e102     bnz	0x1eb6               	BNZ	_00137_DS_
                                           ;	.line	224; reveil.c	LATJbits.LATJ1 = 1;
001eb2   8291     bsf	0x91, 0x1, 0         	BSF	_LATJbits, 1
                                           ;	.line	225; reveil.c	LATJbits.LATJ2 = 1;
001eb4   8491     bsf	0x91, 0x2, 0         	BSF	_LATJbits, 2
                                           _00137_DS_:
                                           ;	.line	227; reveil.c	on = 1;
001eb6   0e01     movlw	0x1                	MOVLW	0x01
001eb8   010f     movlb	0xf                	BANKSEL	_on
001eba   6f52     movwf	0x52, 0x1          	MOVWF	_on, B
                                           _00139_DS_:
001ebc   010f     movlb	0xf                	BANKSEL	_on
                                           ;	.line	231; reveil.c	if (on && ds >= 5) {
001ebe   5152     movf	0x52, 0, 0x1        	MOVF	_on, W, B
001ec0   e00d     bz	0x1edc                	BZ	_00146_DS_
001ec2   0e05     movlw	0x5                	MOVLW	0x05
001ec4   010e     movlb	0xe                	BANKSEL	_ds
001ec6   5d69     subwf	0x69, 0, 0x1       	SUBWF	_ds, W, B
001ec8   e309     bnc	0x1edc               	BNC	_00146_DS_
                                           ;	.line	232; reveil.c	LATJbits.LATJ0 = 0;
001eca   9091     bcf	0x91, 0, 0           	BCF	_LATJbits, 0
001ecc   010f     movlb	0xf                	BANKSEL	_whereami
                                           ;	.line	233; reveil.c	if (whereami == ALARM) {
001ece   5151     movf	0x51, 0, 0x1        	MOVF	_whereami, W, B
001ed0   0a0a     xorlw	0xa                	XORLW	0x0a
001ed2   e102     bnz	0x1ed8               	BNZ	_00142_DS_
                                           ;	.line	234; reveil.c	LATJbits.LATJ1 = 0;
001ed4   9291     bcf	0x91, 0x1, 0         	BCF	_LATJbits, 1
                                           ;	.line	235; reveil.c	LATJbits.LATJ2 = 0;
001ed6   9491     bcf	0x91, 0x2, 0         	BCF	_LATJbits, 2
                                           _00142_DS_:
001ed8   010f     movlb	0xf                	BANKSEL	_on
                                           ;	.line	237; reveil.c	on = 0;
001eda   6b52     clrf	0x52, 0x1           	CLRF	_on, B
                                           _00146_DS_:
001edc   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
001ede   f007
001ee0   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
001ee2   f006
001ee4   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
001ee6   f005
001ee8   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
001eea   f004
001eec   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
001eee   f003
001ef0   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
001ef2   f002
001ef4   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
001ef6   f001
001ef8   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
001efa   f000
001efc   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001efe   ffd9
001f00   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_reveil__low_isr	code
                                           _low_isr:
                                           ;	.line	136; reveil.c	void low_isr (void) interrupt 2
003ff6   cfe8     movff	0xfe8, 0xfe5       	MOVFF	WREG, POSTDEC1
003ff8   ffe5
003ffa   cfd8     movff	0xfd8, 0xfe5       	MOVFF	STATUS, POSTDEC1
003ffc   ffe5
003ffe   cfe0     movff	0xfe0, 0xfe5       	MOVFF	BSR, POSTDEC1
004000   ffe5
004002   cff3     movff	0xff3, 0xfe5       	MOVFF	PRODL, POSTDEC1
004004   ffe5
004006   cff4     movff	0xff4, 0xfe5       	MOVFF	PRODH, POSTDEC1
004008   ffe5
00400a   cfe9     movff	0xfe9, 0xfe5       	MOVFF	FSR0L, POSTDEC1
00400c   ffe5
00400e   cfea     movff	0xfea, 0xfe5       	MOVFF	FSR0H, POSTDEC1
004010   ffe5
004012   cffa     movff	0xffa, 0xfe5       	MOVFF	PCLATH, POSTDEC1
004014   ffe5
004016   cffb     movff	0xffb, 0xfe5       	MOVFF	PCLATU, POSTDEC1
004018   ffe5
00401a   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00401c   ffe5
00401e   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
004020   ffd9
                                           ;	.line	139; reveil.c	if(INTCON3bits.INT3F) {
004022   a4f0     btfss	0xf0, 0x2, 0       	BTFSS	_INTCON3bits, 2
004024   d005     bra	0x4030               	BRA	_00115_DS_
                                           ;	.line	140; reveil.c	button1 = 1;
004026   0e01     movlw	0x1                	MOVLW	0x01
004028   010f     movlb	0xf                	BANKSEL	_button1
00402a   6f41     movwf	0x41, 0x1          	MOVWF	_button1, B
                                           ;	.line	141; reveil.c	INTCON3bits.INT3F = 0;
00402c   94f0     bcf	0xf0, 0x2, 0         	BCF	_INTCON3bits, 2
00402e   d006     bra	0x403c               	BRA	_00117_DS_
                                           _00115_DS_:
                                           ;	.line	144; reveil.c	} else if(INTCON3bits.INT1F) {
004030   a0f0     btfss	0xf0, 0, 0         	BTFSS	_INTCON3bits, 0
004032   d004     bra	0x403c               	BRA	_00117_DS_
                                           ;	.line	145; reveil.c	button2 = 1;
004034   0e01     movlw	0x1                	MOVLW	0x01
004036   010f     movlb	0xf                	BANKSEL	_button2
004038   6f42     movwf	0x42, 0x1          	MOVWF	_button2, B
                                           ;	.line	146; reveil.c	INTCON3bits.INT1F = 0;
00403a   90f0     bcf	0xf0, 0, 0           	BCF	_INTCON3bits, 0
                                           _00117_DS_:
00403c   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00403e   ffd9
004040   cfe4     movff	0xfe4, 0xffb       	MOVFF	PREINC1, PCLATU
004042   fffb
004044   cfe4     movff	0xfe4, 0xffa       	MOVFF	PREINC1, PCLATH
004046   fffa
004048   cfe4     movff	0xfe4, 0xfea       	MOVFF	PREINC1, FSR0H
00404a   ffea
00404c   cfe4     movff	0xfe4, 0xfe9       	MOVFF	PREINC1, FSR0L
00404e   ffe9
004050   cfe4     movff	0xfe4, 0xff4       	MOVFF	PREINC1, PRODH
004052   fff4
004054   cfe4     movff	0xfe4, 0xff3       	MOVFF	PREINC1, PRODL
004056   fff3
004058   cfe4     movff	0xfe4, 0xfe0       	MOVFF	PREINC1, BSR
00405a   ffe0
00405c   cfe4     movff	0xfe4, 0xfd8       	MOVFF	PREINC1, STATUS
00405e   ffd8
004060   cfe4     movff	0xfe4, 0xfe8       	MOVFF	PREINC1, WREG
004062   ffe8
004064   0010     retfie	0                 	RETFIE	
                                           
                                           ; ; Starting pCode block
                                           S_reveil__high_isr	code
                                           _high_isr:
                                           ;	.line	125; reveil.c	void high_isr (void) interrupt 1
002236   cfe8     movff	0xfe8, 0xfe5       	MOVFF	WREG, POSTDEC1
002238   ffe5
00223a   cfd8     movff	0xfd8, 0xfe5       	MOVFF	STATUS, POSTDEC1
00223c   ffe5
00223e   cfe0     movff	0xfe0, 0xfe5       	MOVFF	BSR, POSTDEC1
002240   ffe5
002242   cff3     movff	0xff3, 0xfe5       	MOVFF	PRODL, POSTDEC1
002244   ffe5
002246   cff4     movff	0xff4, 0xfe5       	MOVFF	PRODH, POSTDEC1
002248   ffe5
00224a   cfe9     movff	0xfe9, 0xfe5       	MOVFF	FSR0L, POSTDEC1
00224c   ffe5
00224e   cfea     movff	0xfea, 0xfe5       	MOVFF	FSR0H, POSTDEC1
002250   ffe5
002252   cffa     movff	0xffa, 0xfe5       	MOVFF	PCLATH, POSTDEC1
002254   ffe5
002256   cffb     movff	0xffb, 0xfe5       	MOVFF	PCLATU, POSTDEC1
002258   ffe5
00225a   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00225c   ffe5
00225e   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002260   ffd9
                                           ;	.line	128; reveil.c	if (INTCONbits.T0IF) {
002262   a4f2     btfss	0xf2, 0x2, 0       	BTFSS	_INTCONbits, 2
002264   d00c     bra	0x227e               	BRA	_00107_DS_
002266   010f     movlb	0xf                	BANKSEL	_overflows
                                           ;	.line	129; reveil.c	overflows++;
002268   2b43     incf	0x43, 0x1, 0x1      	INCF	_overflows, F, B
00226a   e302     bnc	0x2270               	BNC	_10347_DS_
00226c   010f     movlb	0xf                	BANKSEL	(_overflows + 1)
00226e   2b44     incf	0x44, 0x1, 0x1      	INCF	(_overflows + 1), F, B
                                           _10347_DS_:
002270   e302     bnc	0x2276               	BNC	_20348_DS_
002272   010f     movlb	0xf                	BANKSEL	(_overflows + 2)
002274   2b45     incf	0x45, 0x1, 0x1      	INCF	(_overflows + 2), F, B
                                           _20348_DS_:
002276   e302     bnc	0x227c               	BNC	_30349_DS_
002278   010f     movlb	0xf                	BANKSEL	(_overflows + 3)
00227a   2b46     incf	0x46, 0x1, 0x1      	INCF	(_overflows + 3), F, B
                                           _30349_DS_:
                                           ;	.line	130; reveil.c	INTCONbits.T0IF = 0;
00227c   94f2     bcf	0xf2, 0x2, 0         	BCF	_INTCONbits, 2
                                           _00107_DS_:
00227e   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002280   ffd9
002282   cfe4     movff	0xfe4, 0xffb       	MOVFF	PREINC1, PCLATU
002284   fffb
002286   cfe4     movff	0xfe4, 0xffa       	MOVFF	PREINC1, PCLATH
002288   fffa
00228a   cfe4     movff	0xfe4, 0xfea       	MOVFF	PREINC1, FSR0H
00228c   ffea
00228e   cfe4     movff	0xfe4, 0xfe9       	MOVFF	PREINC1, FSR0L
002290   ffe9
002292   cfe4     movff	0xfe4, 0xff4       	MOVFF	PREINC1, PRODH
002294   fff4
002296   cfe4     movff	0xfe4, 0xff3       	MOVFF	PREINC1, PRODL
002298   fff3
00229a   cfe4     movff	0xfe4, 0xfe0       	MOVFF	PREINC1, BSR
00229c   ffe0
00229e   cfe4     movff	0xfe4, 0xfd8       	MOVFF	PREINC1, STATUS
0022a0   ffd8
0022a2   cfe4     movff	0xfe4, 0xfe8       	MOVFF	PREINC1, WREG
0022a4   ffe8
0022a6   0010     retfie	0                 	RETFIE	
                                           
                                           ; ; Starting pCode block
                                           __str_0:
0022a8   6f44     movwf	0x44, 0x1          	DB	0x44, 0x6f, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x77, 0x61, 0x6e, 0x74, 0x20
0022aa   7920     btg	0x20, 0x4, 0x1       
0022ac   756f     btg	0x6f, 0x2, 0x1       
0022ae   7720     btg	0x20, 0x3, 0x1       
0022b0   6e61     movwf	0x61, 0            
0022b2   2074     addwfc	0x74, 0, 0        
0022b4   6f74     movwf	0x74, 0x1          	DB	0x74, 0x6f, 0x20, 0x20, 0x73, 0x65, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20
0022b6   2020     addwfc	0x20, 0, 0        
0022b8   6573     cpfsgt	0x73, 0x1         
0022ba   2074     addwfc	0x74, 0, 0        
0022bc   6874     setf	0x74, 0             
0022be   2065     addwfc	0x65, 0, 0        
0022c0   6974     setf	0x74, 0x1           	DB	0x74, 0x69, 0x6d, 0x65, 0x20, 0x3f, 0x20, 0x20, 0x00
0022c2   656d     cpfsgt	0x6d, 0x1         
0022c4   3f20     incfsz	0x20, 0x1, 0x1    
0022c6   2020     addwfc	0x20, 0, 0        
0022c8   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_1:
0022ca   5b20     subwfb	0x20, 0x1, 0x1    	DB	0x20, 0x5b, 0x25, 0x30, 0x32, 0x75, 0x5d, 0x3a, 0x20, 0x25, 0x30, 0x32
0022cc   3025     rrcf	0x25, 0, 0          
0022ce   7532     btg	0x32, 0x2, 0x1       
0022d0   3a5d     swapf	0x5d, 0x1, 0       
0022d2   2520     addwf	0x20, 0, 0x1       
0022d4   3230     rrcf	0x30, 0x1, 0        
0022d6   2075     addwfc	0x75, 0, 0        	DB	0x75, 0x20, 0x3a, 0x20, 0x25, 0x30, 0x32, 0x75, 0x20, 0x20, 0x20, 0x20
0022d8   203a     addwfc	0x3a, 0, 0        
0022da   3025     rrcf	0x25, 0, 0          
0022dc   7532     btg	0x32, 0x2, 0x1       
0022de   2020     addwfc	0x20, 0, 0        
0022e0   2020     addwfc	0x20, 0, 0        
0022e2   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
0022e4   2020     addwfc	0x20, 0, 0        
0022e6   2020     addwfc	0x20, 0, 0        
0022e8   2020     addwfc	0x20, 0, 0        
0022ea   2020     addwfc	0x20, 0, 0        
0022ec   2020     addwfc	0x20, 0, 0        
0022ee   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x00
0022f0   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_2:
0022f2   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x25, 0x30, 0x32, 0x75, 0x20, 0x3a, 0x5b, 0x25, 0x30, 0x32
0022f4   3025     rrcf	0x25, 0, 0          
0022f6   7532     btg	0x32, 0x2, 0x1       
0022f8   3a20     swapf	0x20, 0x1, 0       
0022fa   255b     addwf	0x5b, 0, 0x1       
0022fc   3230     rrcf	0x30, 0x1, 0        
0022fe   5d75     subwf	0x75, 0, 0x1       	DB	0x75, 0x5d, 0x3a, 0x20, 0x25, 0x30, 0x32, 0x75, 0x20, 0x20, 0x20, 0x20
002300   203a     addwfc	0x3a, 0, 0        
002302   3025     rrcf	0x25, 0, 0          
002304   7532     btg	0x32, 0x2, 0x1       
002306   2020     addwfc	0x20, 0, 0        
002308   2020     addwfc	0x20, 0, 0        
00230a   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
00230c   2020     addwfc	0x20, 0, 0        
00230e   2020     addwfc	0x20, 0, 0        
002310   2020     addwfc	0x20, 0, 0        
002312   2020     addwfc	0x20, 0, 0        
002314   2020     addwfc	0x20, 0, 0        
002316   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x00
002318   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_3:
00231a   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x25, 0x30, 0x32, 0x75, 0x20, 0x3a, 0x20, 0x25, 0x30, 0x32
00231c   3025     rrcf	0x25, 0, 0          
00231e   7532     btg	0x32, 0x2, 0x1       
002320   3a20     swapf	0x20, 0x1, 0       
002322   2520     addwf	0x20, 0, 0x1       
002324   3230     rrcf	0x30, 0x1, 0        
002326   2075     addwfc	0x75, 0, 0        	DB	0x75, 0x20, 0x3a, 0x5b, 0x25, 0x30, 0x32, 0x75, 0x5d, 0x20, 0x20, 0x20
002328   5b3a     subwfb	0x3a, 0x1, 0x1    
00232a   3025     rrcf	0x25, 0, 0          
00232c   7532     btg	0x32, 0x2, 0x1       
00232e   205d     addwfc	0x5d, 0, 0        
002330   2020     addwfc	0x20, 0, 0        
002332   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
002334   2020     addwfc	0x20, 0, 0        
002336   2020     addwfc	0x20, 0, 0        
002338   2020     addwfc	0x20, 0, 0        
00233a   2020     addwfc	0x20, 0, 0        
00233c   2020     addwfc	0x20, 0, 0        
00233e   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x00
002340   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_4:
002342   6f44     movwf	0x44, 0x1          	DB	0x44, 0x6f, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x77, 0x61, 0x6e, 0x74, 0x20
002344   7920     btg	0x20, 0x4, 0x1       
002346   756f     btg	0x6f, 0x2, 0x1       
002348   7720     btg	0x20, 0x3, 0x1       
00234a   6e61     movwf	0x61, 0            
00234c   2074     addwfc	0x74, 0, 0        
00234e   6f74     movwf	0x74, 0x1          	DB	0x74, 0x6f, 0x20, 0x20, 0x73, 0x65, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20
002350   2020     addwfc	0x20, 0, 0        
002352   6573     cpfsgt	0x73, 0x1         
002354   2074     addwfc	0x74, 0, 0        
002356   6874     setf	0x74, 0             
002358   2065     addwfc	0x65, 0, 0        
00235a   6c61     negf	0x61, 0             	DB	0x61, 0x6c, 0x61, 0x72, 0x6d, 0x20, 0x3f, 0x20, 0x00
00235c   7261     btg	0x61, 0x1, 0         
00235e   206d     addwfc	0x6d, 0, 0        
002360   203f     addwfc	0x3f, 0, 0        
002362   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_5:
002364   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x20, 0x5b, 0x4f, 0x4e, 0x20
002366   6c41     negf	0x41, 0             
002368   7261     btg	0x61, 0x1, 0         
00236a   206d     addwfc	0x6d, 0, 0        
00236c   4f5b     dcfsnz	0x5b, 0x1, 0x1    
00236e   204e     addwfc	0x4e, 0, 0        
002370   205d     addwfc	0x5d, 0, 0        	DB	0x5d, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
002372   2020     addwfc	0x20, 0, 0        
002374   2020     addwfc	0x20, 0, 0        
002376   2020     addwfc	0x20, 0, 0        
002378   2020     addwfc	0x20, 0, 0        
00237a   2020     addwfc	0x20, 0, 0        
00237c   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00
00237e   2020     addwfc	0x20, 0, 0        
002380   2020     addwfc	0x20, 0, 0        
002382   2020     addwfc	0x20, 0, 0        
002384   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_6:
002386   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x20, 0x5b, 0x4f, 0x46, 0x46
002388   6c41     negf	0x41, 0             
00238a   7261     btg	0x61, 0x1, 0         
00238c   206d     addwfc	0x6d, 0, 0        
00238e   4f5b     dcfsnz	0x5b, 0x1, 0x1    
002390   4646     rlncf	0x46, 0x1, 0       
002392   205d     addwfc	0x5d, 0, 0        	DB	0x5d, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
002394   2020     addwfc	0x20, 0, 0        
002396   2020     addwfc	0x20, 0, 0        
002398   2020     addwfc	0x20, 0, 0        
00239a   2020     addwfc	0x20, 0, 0        
00239c   2020     addwfc	0x20, 0, 0        
00239e   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00
0023a0   2020     addwfc	0x20, 0, 0        
0023a2   2020     addwfc	0x20, 0, 0        
0023a4   2020     addwfc	0x20, 0, 0        
0023a6   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_7:
0023a8   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x20, 0x61, 0x74
0023aa   2020     addwfc	0x20, 0, 0        
0023ac   6c41     negf	0x41, 0             
0023ae   7261     btg	0x61, 0x1, 0         
0023b0   206d     addwfc	0x6d, 0, 0        
0023b2   7461     btg	0x61, 0x2, 0         
0023b4   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5b, 0x25, 0x30, 0x32
0023b6   2020     addwfc	0x20, 0, 0        
0023b8   2020     addwfc	0x20, 0, 0        
0023ba   2020     addwfc	0x20, 0, 0        
0023bc   255b     addwf	0x5b, 0, 0x1       
0023be   3230     rrcf	0x30, 0x1, 0        
0023c0   5d75     subwf	0x75, 0, 0x1       	DB	0x75, 0x5d, 0x3a, 0x20, 0x25, 0x30, 0x32, 0x75, 0x20, 0x20, 0x20, 0x20
0023c2   203a     addwfc	0x3a, 0, 0        
0023c4   3025     rrcf	0x25, 0, 0          
0023c6   7532     btg	0x32, 0x2, 0x1       
0023c8   2020     addwfc	0x20, 0, 0        
0023ca   2020     addwfc	0x20, 0, 0        
0023cc   0000     nop                      	DB	0x00
                                           ; ; Starting pCode block
                                           __str_8:
0023ce   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x20, 0x61, 0x74
0023d0   2020     addwfc	0x20, 0, 0        
0023d2   6c41     negf	0x41, 0             
0023d4   7261     btg	0x61, 0x1, 0         
0023d6   206d     addwfc	0x6d, 0, 0        
0023d8   7461     btg	0x61, 0x2, 0         
0023da   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x25, 0x30, 0x32
0023dc   2020     addwfc	0x20, 0, 0        
0023de   2020     addwfc	0x20, 0, 0        
0023e0   2020     addwfc	0x20, 0, 0        
0023e2   2520     addwf	0x20, 0, 0x1       
0023e4   3230     rrcf	0x30, 0x1, 0        
0023e6   2075     addwfc	0x75, 0, 0        	DB	0x75, 0x20, 0x3a, 0x5b, 0x25, 0x30, 0x32, 0x75, 0x5d, 0x20, 0x20, 0x20
0023e8   5b3a     subwfb	0x3a, 0x1, 0x1    
0023ea   3025     rrcf	0x25, 0, 0          
0023ec   7532     btg	0x32, 0x2, 0x1       
0023ee   205d     addwfc	0x5d, 0, 0        
0023f0   2020     addwfc	0x20, 0, 0        
0023f2   0000     nop                      	DB	0x00
                                           ; ; Starting pCode block
                                           __str_9:
0023f4   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x25, 0x30, 0x32, 0x75, 0x3a, 0x25, 0x30, 0x32
0023f6   2020     addwfc	0x20, 0, 0        
0023f8   3025     rrcf	0x25, 0, 0          
0023fa   7532     btg	0x32, 0x2, 0x1       
0023fc   253a     addwf	0x3a, 0, 0x1       
0023fe   3230     rrcf	0x30, 0x1, 0        
002400   3a75     swapf	0x75, 0x1, 0       	DB	0x75, 0x3a, 0x25, 0x30, 0x32, 0x75, 0x20, 0x20, 0x20, 0x20, 0x41, 0x6c
002402   3025     rrcf	0x25, 0, 0          
002404   7532     btg	0x32, 0x2, 0x1       
002406   2020     addwfc	0x20, 0, 0        
002408   2020     addwfc	0x20, 0, 0        
00240a   6c41     negf	0x41, 0             
00240c   7261     btg	0x61, 0x1, 0         	DB	0x61, 0x72, 0x6d, 0x20, 0x4f, 0x4e, 0x20, 0x20, 0x25, 0x30, 0x32, 0x75
00240e   206d     addwfc	0x6d, 0, 0        
002410   4e4f     dcfsnz	0x4f, 0x1, 0      
002412   2020     addwfc	0x20, 0, 0        
002414   3025     rrcf	0x25, 0, 0          
002416   7532     btg	0x32, 0x2, 0x1       
002418   253a     addwf	0x3a, 0, 0x1       	DB	0x3a, 0x25, 0x30, 0x32, 0x75, 0x20, 0x00
00241a   3230     rrcf	0x30, 0x1, 0        
00241c   2075     addwfc	0x75, 0, 0        
00241e   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_10:
002420   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x25, 0x30, 0x32, 0x75, 0x3a, 0x25, 0x30, 0x32
002422   2020     addwfc	0x20, 0, 0        
002424   3025     rrcf	0x25, 0, 0          
002426   7532     btg	0x32, 0x2, 0x1       
002428   253a     addwf	0x3a, 0, 0x1       
00242a   3230     rrcf	0x30, 0x1, 0        
00242c   3a75     swapf	0x75, 0x1, 0       	DB	0x75, 0x3a, 0x25, 0x30, 0x32, 0x75, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
00242e   3025     rrcf	0x25, 0, 0          
002430   7532     btg	0x32, 0x2, 0x1       
002432   2020     addwfc	0x20, 0, 0        
002434   2020     addwfc	0x20, 0, 0        
002436   2020     addwfc	0x20, 0, 0        
002438   4120     rrncf	0x20, 0, 0x1       	DB	0x20, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x20, 0x20, 0x4f, 0x46, 0x46, 0x20
00243a   616c     cpfslt	0x6c, 0x1         
00243c   6d72     negf	0x72, 0x1           
00243e   2020     addwfc	0x20, 0, 0        
002440   464f     rlncf	0x4f, 0x1, 0       
002442   2046     addwfc	0x46, 0, 0        
002444   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x00
002446   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_11:
002448   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x25, 0x30, 0x32, 0x75, 0x3a, 0x25, 0x30, 0x32
00244a   2020     addwfc	0x20, 0, 0        
00244c   3025     rrcf	0x25, 0, 0          
00244e   7532     btg	0x32, 0x2, 0x1       
002450   253a     addwf	0x3a, 0, 0x1       
002452   3230     rrcf	0x30, 0x1, 0        
002454   3a75     swapf	0x75, 0x1, 0       	DB	0x75, 0x3a, 0x25, 0x30, 0x32, 0x75, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
002456   3025     rrcf	0x25, 0, 0          
002458   7532     btg	0x32, 0x2, 0x1       
00245a   2020     addwfc	0x20, 0, 0        
00245c   2020     addwfc	0x20, 0, 0        
00245e   2020     addwfc	0x20, 0, 0        
002460   2049     addwfc	0x49, 0, 0        	DB	0x49, 0x20, 0x61, 0x6d, 0x20, 0x72, 0x69, 0x6e, 0x67, 0x69, 0x6e, 0x67
002462   6d61     negf	0x61, 0x1           
002464   7220     btg	0x20, 0x1, 0         
002466   6e69     movwf	0x69, 0            
002468   6967     setf	0x67, 0x1           
00246a   676e     tstfsz	0x6e, 0x1         
00246c   2021     addwfc	0x21, 0, 0        	DB	0x21, 0x20, 0x00
00246e   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_12:
002470   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x25, 0x30, 0x32, 0x75, 0x3a, 0x25, 0x30, 0x32
002472   2020     addwfc	0x20, 0, 0        
002474   3025     rrcf	0x25, 0, 0          
002476   7532     btg	0x32, 0x2, 0x1       
002478   253a     addwf	0x3a, 0, 0x1       
00247a   3230     rrcf	0x30, 0x1, 0        
00247c   3a75     swapf	0x75, 0x1, 0       	DB	0x75, 0x3a, 0x25, 0x30, 0x32, 0x75, 0x20, 0x20, 0x20, 0x20, 0x53, 0x6e
00247e   3025     rrcf	0x25, 0, 0          
002480   7532     btg	0x32, 0x2, 0x1       
002482   2020     addwfc	0x20, 0, 0        
002484   2020     addwfc	0x20, 0, 0        
002486   6e53     movwf	0x53, 0            
002488   6f6f     movwf	0x6f, 0x1          	DB	0x6f, 0x6f, 0x7a, 0x65, 0x20, 0x25, 0x75, 0x20, 0x20, 0x25, 0x30, 0x32
00248a   657a     cpfsgt	0x7a, 0x1         
00248c   2520     addwf	0x20, 0, 0x1       
00248e   2075     addwfc	0x75, 0, 0        
002490   2520     addwf	0x20, 0, 0x1       
002492   3230     rrcf	0x30, 0x1, 0        
002494   3a75     swapf	0x75, 0x1, 0       	DB	0x75, 0x3a, 0x25, 0x30, 0x32, 0x75, 0x20, 0x00
002496   3025     rrcf	0x25, 0, 0          
002498   7532     btg	0x32, 0x2, 0x1       
00249a   0020     dw	0x20  ;unknown opcode 
                                           ; ; Starting pCode block
                                           __str_13:
00249c   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x25, 0x30, 0x32, 0x75, 0x3a, 0x25, 0x30, 0x32
00249e   2020     addwfc	0x20, 0, 0        
0024a0   3025     rrcf	0x25, 0, 0          
0024a2   7532     btg	0x32, 0x2, 0x1       
0024a4   253a     addwf	0x3a, 0, 0x1       
0024a6   3230     rrcf	0x30, 0x1, 0        
0024a8   3a75     swapf	0x75, 0x1, 0       	DB	0x75, 0x3a, 0x25, 0x30, 0x32, 0x75, 0x20, 0x20, 0x20, 0x20, 0x53, 0x6e
0024aa   3025     rrcf	0x25, 0, 0          
0024ac   7532     btg	0x32, 0x2, 0x1       
0024ae   2020     addwfc	0x20, 0, 0        
0024b0   2020     addwfc	0x20, 0, 0        
0024b2   6e53     movwf	0x53, 0            
0024b4   6f6f     movwf	0x6f, 0x1          	DB	0x6f, 0x6f, 0x7a, 0x65, 0x20, 0x25, 0x75, 0x20, 0x25, 0x30, 0x32, 0x75
0024b6   657a     cpfsgt	0x7a, 0x1         
0024b8   2520     addwf	0x20, 0, 0x1       
0024ba   2075     addwfc	0x75, 0, 0        
0024bc   3025     rrcf	0x25, 0, 0          
0024be   7532     btg	0x32, 0x2, 0x1       
0024c0   253a     addwf	0x3a, 0, 0x1       	DB	0x3a, 0x25, 0x30, 0x32, 0x75, 0x20, 0x00
0024c2   3230     rrcf	0x30, 0x1, 0        
0024c4   2075     addwfc	0x75, 0, 0        
0024c6   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_14:
0024c8   2a2a     incf	0x2a, 0x1, 0        	DB	0x2a, 0x2a, 0x2a, 0x2a, 0x20, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x20, 0x2a
0024ca   2a2a     incf	0x2a, 0x1, 0        
0024cc   4520     rlncf	0x20, 0, 0x1       
0024ce   5252     movf	0x52, 0x1, 0        
0024d0   524f     movf	0x4f, 0x1, 0        
0024d2   2a20     incf	0x20, 0x1, 0        
0024d4   2a2a     incf	0x2a, 0x1, 0        	DB	0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x20, 0x45, 0x52, 0x52
0024d6   2a2a     incf	0x2a, 0x1, 0        
0024d8   2a2a     incf	0x2a, 0x1, 0        
0024da   2a2a     incf	0x2a, 0x1, 0        
0024dc   4520     rlncf	0x20, 0, 0x1       
0024de   5252     movf	0x52, 0x1, 0        
0024e0   524f     movf	0x4f, 0x1, 0        	DB	0x4f, 0x52, 0x20, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x00
0024e2   2a20     incf	0x20, 0x1, 0        
0024e4   2a2a     incf	0x2a, 0x1, 0        
0024e6   2a2a     incf	0x2a, 0x1, 0        
0024e8   0000     nop                      
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 5492 (0x1574) bytes ( 4.19%)
                                           ;           	 2746 (0x0aba) words
                                           ; udata size:	   45 (0x002d) bytes ( 1.17%)
                                           ; access size:	   22 (0x0016) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Oct 15 2013) (Mac OS X ppc)
                                           ; This file was generated Sat Oct 26 16:23:24 2013
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _LCDInit
                                           	global _LCDUpdate
                                           	global _LCDErase
                                           	global _LCDText
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _AN0String
                                           	extern _AppConfig
                                           	extern _activeUDPSocket
                                           	extern _UDPSocketInfo
                                           	extern _UDPTxCount
                                           	extern _UDPRxCount
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _memset
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODH	equ	0xff4
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           
                                           udata_LCDBlocking_0	udata
                                           _LCDText	res	33
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDErase	code
                                           _LCDErase:
                                           ;	.line	392; TCPIP_Stack/LCDBlocking.c	void LCDErase(void)
003c58   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
003c5a   ffe5
003c5c   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
003c5e   ffd9
003c60   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
003c62   ffe5
003c64   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
003c66   ffe5
003c68   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
003c6a   ffe5
003c6c   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
003c6e   ffe5
003c70   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
003c72   ffe5
003c74   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
003c76   ffe5
003c78   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
003c7a   ffe5
003c7c   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
003c7e   ffe5
                                           ;	.line	395; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0x01);
003c80   0e01     movlw	0x1                	MOVLW	0x01
003c82   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003c84   0e00     movlw	0                  	MOVLW	0x00
003c86   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003c88   ec9e     call	0x413c, 0           	CALL	_LCDWrite
003c8a   f020
003c8c   0e02     movlw	0x2                	MOVLW	0x02
003c8e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	396; TCPIP_Stack/LCDBlocking.c	DelayMs(2);
003c90   0e48     movlw	0x48               	MOVLW	0x48
003c92   6e00     movwf	0, 0               	MOVWF	r0x00
003c94   0e0d     movlw	0xd                	MOVLW	0x0d
003c96   6e01     movwf	0x1, 0             	MOVWF	r0x01
003c98   6a02     clrf	0x2, 0              	CLRF	r0x02
003c9a   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00305_DS_:
003c9c   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
003c9e   f004
003ca0   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
003ca2   f005
003ca4   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
003ca6   f006
003ca8   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
003caa   f007
003cac   0eff     movlw	0xff               	MOVLW	0xff
003cae   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
003cb0   0eff     movlw	0xff               	MOVLW	0xff
003cb2   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
003cb4   0eff     movlw	0xff               	MOVLW	0xff
003cb6   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
003cb8   0eff     movlw	0xff               	MOVLW	0xff
003cba   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
003cbc   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
003cbe   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
003cc0   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
003cc2   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
003cc4   e1eb     bnz	0x3c9c               	BNZ	_00305_DS_
                                           ;	.line	399; TCPIP_Stack/LCDBlocking.c	memset(LCDText, ' ', 32);
003cc6   0e00     movlw	0                  	MOVLW	0x00
003cc8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003cca   0e20     movlw	0x20               	MOVLW	0x20
003ccc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003cce   0e20     movlw	0x20               	MOVLW	0x20
003cd0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003cd2   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
003cd4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003cd6   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
003cd8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003cda   ec07     call	0x3a0e, 0           	CALL	_memset
003cdc   f01d
003cde   0e05     movlw	0x5                	MOVLW	0x05
003ce0   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
003ce2   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
003ce4   f007
003ce6   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
003ce8   f006
003cea   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
003cec   f005
003cee   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
003cf0   f004
003cf2   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
003cf4   f003
003cf6   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
003cf8   f002
003cfa   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
003cfc   f001
003cfe   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
003d00   f000
003d02   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
003d04   ffd9
003d06   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDUpdate	code
                                           _LCDUpdate:
                                           ;	.line	332; TCPIP_Stack/LCDBlocking.c	void LCDUpdate(void)
0024ea   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0024ec   ffe5
0024ee   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0024f0   ffd9
0024f2   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0024f4   ffe5
0024f6   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0024f8   ffe5
0024fa   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0024fc   ffe5
0024fe   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002500   ffe5
002502   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
002504   ffe5
002506   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
002508   ffe5
00250a   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
00250c   ffe5
00250e   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
002510   ffe5
002512   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
002514   ffe5
                                           ;	.line	337; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0x02);
002516   0e02     movlw	0x2                	MOVLW	0x02
002518   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00251a   0e00     movlw	0                  	MOVLW	0x00
00251c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00251e   ec9e     call	0x413c, 0           	CALL	_LCDWrite
002520   f020
002522   0e02     movlw	0x2                	MOVLW	0x02
002524   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	338; TCPIP_Stack/LCDBlocking.c	DelayMs(2);
002526   0e48     movlw	0x48               	MOVLW	0x48
002528   6e00     movwf	0, 0               	MOVWF	r0x00
00252a   0e0d     movlw	0xd                	MOVLW	0x0d
00252c   6e01     movwf	0x1, 0             	MOVWF	r0x01
00252e   6a02     clrf	0x2, 0              	CLRF	r0x02
002530   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00225_DS_:
002532   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
002534   f004
002536   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
002538   f005
00253a   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
00253c   f006
00253e   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
002540   f007
002542   0eff     movlw	0xff               	MOVLW	0xff
002544   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
002546   0eff     movlw	0xff               	MOVLW	0xff
002548   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
00254a   0eff     movlw	0xff               	MOVLW	0xff
00254c   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
00254e   0eff     movlw	0xff               	MOVLW	0xff
002550   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
002552   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002554   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
002556   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
002558   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
00255a   e1eb     bnz	0x2532               	BNZ	_00225_DS_
                                           ;	.line	341; TCPIP_Stack/LCDBlocking.c	for(i = 0; i < 16u; i++)
00255c   6a00     clrf	0, 0                	CLRF	r0x00
                                           _00257_DS_:
00255e   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
002560   f001
002562   6a02     clrf	0x2, 0              	CLRF	r0x02
002564   0e00     movlw	0                  	MOVLW	0x00
002566   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
002568   e102     bnz	0x256e               	BNZ	_00297_DS_
00256a   0e10     movlw	0x10               	MOVLW	0x10
00256c   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00297_DS_:
00256e   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
002570   d057     bra	0x2620               	BRA	_00260_DS_
                                           ;	.line	345; TCPIP_Stack/LCDBlocking.c	if(LCDText[i] == 0u)
002572   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
002574   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
002576   6e01     movwf	0x1, 0             	MOVWF	r0x01
002578   6a02     clrf	0x2, 0              	CLRF	r0x02
00257a   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
00257c   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
00257e   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
002580   ffe9
002582   c002     movff	0x2, 0xfea         	MOVFF	r0x02, FSR0H
002584   ffea
002586   cfef     movff	0xfef, 0x1         	MOVFF	INDF0, r0x01
002588   f001
00258a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00258c   e119     bnz	0x25c0               	BNZ	_00232_DS_
                                           ;	.line	347; TCPIP_Stack/LCDBlocking.c	for(j=i; j < 16u; j++)
00258e   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
002590   f001
                                           _00253_DS_:
002592   c001     movff	0x1, 0x2           	MOVFF	r0x01, r0x02
002594   f002
002596   6a03     clrf	0x3, 0              	CLRF	r0x03
002598   0e00     movlw	0                  	MOVLW	0x00
00259a   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
00259c   e102     bnz	0x25a2               	BNZ	_00298_DS_
00259e   0e10     movlw	0x10               	MOVLW	0x10
0025a0   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
                                           _00298_DS_:
0025a2   e20e     bc	0x25c0                	BC	_00232_DS_
                                           ;	.line	349; TCPIP_Stack/LCDBlocking.c	LCDText[j] = ' ';
0025a4   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
0025a6   2401     addwf	0x1, 0, 0          	ADDWF	r0x01, W
0025a8   6e02     movwf	0x2, 0             	MOVWF	r0x02
0025aa   6a03     clrf	0x3, 0              	CLRF	r0x03
0025ac   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
0025ae   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
0025b0   c002     movff	0x2, 0xfe9         	MOVFF	r0x02, FSR0L
0025b2   ffe9
0025b4   c003     movff	0x3, 0xfea         	MOVFF	r0x03, FSR0H
0025b6   ffea
0025b8   0e20     movlw	0x20               	MOVLW	0x20
0025ba   6eef     movwf	0xef, 0            	MOVWF	INDF0
                                           ;	.line	347; TCPIP_Stack/LCDBlocking.c	for(j=i; j < 16u; j++)
0025bc   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
0025be   d7e9     bra	0x2592               	BRA	_00253_DS_
                                           _00232_DS_:
                                           ;	.line	352; TCPIP_Stack/LCDBlocking.c	LCDWrite(1, LCDText[i]);
0025c0   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
0025c2   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
0025c4   6e01     movwf	0x1, 0             	MOVWF	r0x01
0025c6   6a02     clrf	0x2, 0              	CLRF	r0x02
0025c8   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
0025ca   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0025cc   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
0025ce   ffe9
0025d0   c002     movff	0x2, 0xfea         	MOVFF	r0x02, FSR0H
0025d2   ffea
0025d4   cfef     movff	0xfef, 0x1         	MOVFF	INDF0, r0x01
0025d6   f001
0025d8   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0025da   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0025dc   0e01     movlw	0x1                	MOVLW	0x01
0025de   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0025e0   ec9e     call	0x413c, 0           	CALL	_LCDWrite
0025e2   f020
0025e4   0e02     movlw	0x2                	MOVLW	0x02
0025e6   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	353; TCPIP_Stack/LCDBlocking.c	Delay10us(5);
0025e8   0e55     movlw	0x55               	MOVLW	0x55
0025ea   6e01     movwf	0x1, 0             	MOVWF	r0x01
0025ec   6a02     clrf	0x2, 0              	CLRF	r0x02
0025ee   6a03     clrf	0x3, 0              	CLRF	r0x03
0025f0   6a04     clrf	0x4, 0              	CLRF	r0x04
                                           _00233_DS_:
0025f2   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
0025f4   f005
0025f6   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
0025f8   f006
0025fa   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
0025fc   f007
0025fe   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
002600   f008
002602   0eff     movlw	0xff               	MOVLW	0xff
002604   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
002606   0eff     movlw	0xff               	MOVLW	0xff
002608   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
00260a   0eff     movlw	0xff               	MOVLW	0xff
00260c   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
00260e   0eff     movlw	0xff               	MOVLW	0xff
002610   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
002612   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
002614   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
002616   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
002618   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
00261a   e1eb     bnz	0x25f2               	BNZ	_00233_DS_
                                           ;	.line	341; TCPIP_Stack/LCDBlocking.c	for(i = 0; i < 16u; i++)
00261c   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
00261e   d79f     bra	0x255e               	BRA	_00257_DS_
                                           _00260_DS_:
                                           ;	.line	357; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0xC0);
002620   0ec0     movlw	0xc0               	MOVLW	0xc0
002622   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002624   0e00     movlw	0                  	MOVLW	0x00
002626   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002628   ec9e     call	0x413c, 0           	CALL	_LCDWrite
00262a   f020
00262c   0e02     movlw	0x2                	MOVLW	0x02
00262e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	358; TCPIP_Stack/LCDBlocking.c	Delay10us(5);
002630   0e55     movlw	0x55               	MOVLW	0x55
002632   6e00     movwf	0, 0               	MOVWF	r0x00
002634   6a01     clrf	0x1, 0              	CLRF	r0x01
002636   6a02     clrf	0x2, 0              	CLRF	r0x02
002638   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00239_DS_:
00263a   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
00263c   f004
00263e   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
002640   f005
002642   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
002644   f006
002646   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
002648   f007
00264a   0eff     movlw	0xff               	MOVLW	0xff
00264c   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
00264e   0eff     movlw	0xff               	MOVLW	0xff
002650   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
002652   0eff     movlw	0xff               	MOVLW	0xff
002654   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
002656   0eff     movlw	0xff               	MOVLW	0xff
002658   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
00265a   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00265c   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
00265e   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
002660   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
002662   e1eb     bnz	0x263a               	BNZ	_00239_DS_
                                           ;	.line	361; TCPIP_Stack/LCDBlocking.c	for(i = 16; i < 32u; i++)
002664   0e10     movlw	0x10               	MOVLW	0x10
002666   6e00     movwf	0, 0               	MOVWF	r0x00
                                           _00265_DS_:
002668   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
00266a   f001
00266c   6a02     clrf	0x2, 0              	CLRF	r0x02
00266e   0e00     movlw	0                  	MOVLW	0x00
002670   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
002672   e102     bnz	0x2678               	BNZ	_00299_DS_
002674   0e20     movlw	0x20               	MOVLW	0x20
002676   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00299_DS_:
002678   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00267a   d057     bra	0x272a               	BRA	_00269_DS_
                                           ;	.line	365; TCPIP_Stack/LCDBlocking.c	if(LCDText[i] == 0u)
00267c   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
00267e   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
002680   6e01     movwf	0x1, 0             	MOVWF	r0x01
002682   6a02     clrf	0x2, 0              	CLRF	r0x02
002684   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
002686   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
002688   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
00268a   ffe9
00268c   c002     movff	0x2, 0xfea         	MOVFF	r0x02, FSR0H
00268e   ffea
002690   cfef     movff	0xfef, 0x1         	MOVFF	INDF0, r0x01
002692   f001
002694   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002696   e119     bnz	0x26ca               	BNZ	_00246_DS_
                                           ;	.line	367; TCPIP_Stack/LCDBlocking.c	for(j=i; j < 32u; j++)
002698   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
00269a   f001
                                           _00261_DS_:
00269c   c001     movff	0x1, 0x2           	MOVFF	r0x01, r0x02
00269e   f002
0026a0   6a03     clrf	0x3, 0              	CLRF	r0x03
0026a2   0e00     movlw	0                  	MOVLW	0x00
0026a4   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
0026a6   e102     bnz	0x26ac               	BNZ	_00300_DS_
0026a8   0e20     movlw	0x20               	MOVLW	0x20
0026aa   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
                                           _00300_DS_:
0026ac   e20e     bc	0x26ca                	BC	_00246_DS_
                                           ;	.line	369; TCPIP_Stack/LCDBlocking.c	LCDText[j] = ' ';
0026ae   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
0026b0   2401     addwf	0x1, 0, 0          	ADDWF	r0x01, W
0026b2   6e02     movwf	0x2, 0             	MOVWF	r0x02
0026b4   6a03     clrf	0x3, 0              	CLRF	r0x03
0026b6   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
0026b8   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
0026ba   c002     movff	0x2, 0xfe9         	MOVFF	r0x02, FSR0L
0026bc   ffe9
0026be   c003     movff	0x3, 0xfea         	MOVFF	r0x03, FSR0H
0026c0   ffea
0026c2   0e20     movlw	0x20               	MOVLW	0x20
0026c4   6eef     movwf	0xef, 0            	MOVWF	INDF0
                                           ;	.line	367; TCPIP_Stack/LCDBlocking.c	for(j=i; j < 32u; j++)
0026c6   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
0026c8   d7e9     bra	0x269c               	BRA	_00261_DS_
                                           _00246_DS_:
                                           ;	.line	372; TCPIP_Stack/LCDBlocking.c	LCDWrite(1, LCDText[i]);
0026ca   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
0026cc   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
0026ce   6e01     movwf	0x1, 0             	MOVWF	r0x01
0026d0   6a02     clrf	0x2, 0              	CLRF	r0x02
0026d2   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
0026d4   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0026d6   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
0026d8   ffe9
0026da   c002     movff	0x2, 0xfea         	MOVFF	r0x02, FSR0H
0026dc   ffea
0026de   cfef     movff	0xfef, 0x1         	MOVFF	INDF0, r0x01
0026e0   f001
0026e2   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0026e4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0026e6   0e01     movlw	0x1                	MOVLW	0x01
0026e8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0026ea   ec9e     call	0x413c, 0           	CALL	_LCDWrite
0026ec   f020
0026ee   0e02     movlw	0x2                	MOVLW	0x02
0026f0   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	373; TCPIP_Stack/LCDBlocking.c	Delay10us(5);
0026f2   0e55     movlw	0x55               	MOVLW	0x55
0026f4   6e01     movwf	0x1, 0             	MOVWF	r0x01
0026f6   6a02     clrf	0x2, 0              	CLRF	r0x02
0026f8   6a03     clrf	0x3, 0              	CLRF	r0x03
0026fa   6a04     clrf	0x4, 0              	CLRF	r0x04
                                           _00247_DS_:
0026fc   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
0026fe   f005
002700   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
002702   f006
002704   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
002706   f007
002708   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
00270a   f008
00270c   0eff     movlw	0xff               	MOVLW	0xff
00270e   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
002710   0eff     movlw	0xff               	MOVLW	0xff
002712   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
002714   0eff     movlw	0xff               	MOVLW	0xff
002716   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
002718   0eff     movlw	0xff               	MOVLW	0xff
00271a   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
00271c   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00271e   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
002720   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
002722   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
002724   e1eb     bnz	0x26fc               	BNZ	_00247_DS_
                                           ;	.line	361; TCPIP_Stack/LCDBlocking.c	for(i = 16; i < 32u; i++)
002726   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
002728   d79f     bra	0x2668               	BRA	_00265_DS_
                                           _00269_DS_:
00272a   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
00272c   f008
00272e   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
002730   f007
002732   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
002734   f006
002736   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
002738   f005
00273a   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
00273c   f004
00273e   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
002740   f003
002742   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
002744   f002
002746   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
002748   f001
00274a   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00274c   f000
00274e   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002750   ffd9
002752   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDInit	code
                                           _LCDInit:
                                           ;	.line	207; TCPIP_Stack/LCDBlocking.c	void LCDInit(void)
002754   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002756   ffe5
002758   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00275a   ffd9
00275c   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00275e   ffe5
002760   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002762   ffe5
002764   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
002766   ffe5
002768   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00276a   ffe5
00276c   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00276e   ffe5
002770   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
002772   ffe5
002774   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
002776   ffe5
002778   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
00277a   ffe5
00277c   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
00277e   ffe5
                                           ;	.line	211; TCPIP_Stack/LCDBlocking.c	memset(LCDText, ' ', sizeof(LCDText)-1);
002780   0e00     movlw	0                  	MOVLW	0x00
002782   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002784   0e20     movlw	0x20               	MOVLW	0x20
002786   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002788   0e20     movlw	0x20               	MOVLW	0x20
00278a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00278c   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
00278e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002790   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
002792   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002794   ec07     call	0x3a0e, 0           	CALL	_memset
002796   f01d
002798   0e05     movlw	0x5                	MOVLW	0x05
00279a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00279c   010f     movlb	0xf                	BANKSEL	(_LCDText + 32)
                                           ;	.line	212; TCPIP_Stack/LCDBlocking.c	LCDText[sizeof(LCDText)-1] = 0;
00279e   6b20     clrf	0x20, 0x1           	CLRF	(_LCDText + 32), B
                                           ;	.line	215; TCPIP_Stack/LCDBlocking.c	LCD_E_IO = 0;
0027a0   9090     bcf	0x90, 0, 0           	BCF	_LATHbits, 0
                                           ;	.line	216; TCPIP_Stack/LCDBlocking.c	LCD_RD_WR_IO = 0;
0027a2   9290     bcf	0x90, 0x1, 0         	BCF	_LATHbits, 1
                                           ;	.line	220; TCPIP_Stack/LCDBlocking.c	LCD_DATA_TRIS = 0x00;
0027a4   6a96     clrf	0x96, 0             	CLRF	_TRISE
                                           ;	.line	233; TCPIP_Stack/LCDBlocking.c	LCD_RD_WR_TRIS = 0;
0027a6   9299     bcf	0x99, 0x1, 0         	BCF	_TRISHbits, 1
                                           ;	.line	234; TCPIP_Stack/LCDBlocking.c	LCD_RS_TRIS = 0;
0027a8   9499     bcf	0x99, 0x2, 0         	BCF	_TRISHbits, 2
                                           ;	.line	235; TCPIP_Stack/LCDBlocking.c	LCD_E_TRIS = 0;
0027aa   9099     bcf	0x99, 0, 0           	BCF	_TRISHbits, 0
                                           ;	.line	239; TCPIP_Stack/LCDBlocking.c	DelayMs(40);
0027ac   0ea0     movlw	0xa0               	MOVLW	0xa0
0027ae   6e00     movwf	0, 0               	MOVWF	r0x00
0027b0   0e09     movlw	0x9                	MOVLW	0x09
0027b2   6e01     movwf	0x1, 0             	MOVWF	r0x01
0027b4   0e01     movlw	0x1                	MOVLW	0x01
0027b6   6e02     movwf	0x2, 0             	MOVWF	r0x02
0027b8   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00143_DS_:
0027ba   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
0027bc   f004
0027be   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
0027c0   f005
0027c2   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
0027c4   f006
0027c6   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
0027c8   f007
0027ca   0eff     movlw	0xff               	MOVLW	0xff
0027cc   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0027ce   0eff     movlw	0xff               	MOVLW	0xff
0027d0   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
0027d2   0eff     movlw	0xff               	MOVLW	0xff
0027d4   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0027d6   0eff     movlw	0xff               	MOVLW	0xff
0027d8   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
0027da   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0027dc   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
0027de   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
0027e0   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
0027e2   e1eb     bnz	0x27ba               	BNZ	_00143_DS_
                                           ;	.line	247; TCPIP_Stack/LCDBlocking.c	LCD_RS_IO = 0;
0027e4   9490     bcf	0x90, 0x2, 0         	BCF	_LATHbits, 2
                                           ;	.line	249; TCPIP_Stack/LCDBlocking.c	LCD_DATA_IO = 0x03;
0027e6   0e03     movlw	0x3                	MOVLW	0x03
0027e8   6e8d     movwf	0x8d, 0            	MOVWF	_LATE
0027ea   0000     nop                      	nop 
0027ec   0000     nop                      	nop 
                                           ;	.line	264; TCPIP_Stack/LCDBlocking.c	for(i = 0; i < 3u; i++)
0027ee   6a00     clrf	0, 0                	CLRF	r0x00
                                           _00191_DS_:
0027f0   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
0027f2   f001
0027f4   6a02     clrf	0x2, 0              	CLRF	r0x02
0027f6   0e00     movlw	0                  	MOVLW	0x00
0027f8   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
0027fa   e102     bnz	0x2800               	BNZ	_00220_DS_
0027fc   0e03     movlw	0x3                	MOVLW	0x03
0027fe   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00220_DS_:
002800   e239     bc	0x2874                	BC	_00194_DS_
                                           ;	.line	266; TCPIP_Stack/LCDBlocking.c	LCD_E_IO = 1;
002802   8090     bsf	0x90, 0, 0           	BSF	_LATHbits, 0
                                           ;	.line	267; TCPIP_Stack/LCDBlocking.c	Delay10us(1);	       	// Wait E Pulse width time (min 230ns)
002804   0e11     movlw	0x11               	MOVLW	0x11
002806   6e01     movwf	0x1, 0             	MOVWF	r0x01
002808   6a02     clrf	0x2, 0              	CLRF	r0x02
00280a   6a03     clrf	0x3, 0              	CLRF	r0x03
00280c   6a04     clrf	0x4, 0              	CLRF	r0x04
                                           _00155_DS_:
00280e   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
002810   f005
002812   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
002814   f006
002816   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
002818   f007
00281a   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
00281c   f008
00281e   0eff     movlw	0xff               	MOVLW	0xff
002820   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
002822   0eff     movlw	0xff               	MOVLW	0xff
002824   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
002826   0eff     movlw	0xff               	MOVLW	0xff
002828   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
00282a   0eff     movlw	0xff               	MOVLW	0xff
00282c   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
00282e   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
002830   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
002832   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
002834   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
002836   e1eb     bnz	0x280e               	BNZ	_00155_DS_
                                           ;	.line	268; TCPIP_Stack/LCDBlocking.c	LCD_E_IO = 0;
002838   9090     bcf	0x90, 0, 0           	BCF	_LATHbits, 0
                                           ;	.line	269; TCPIP_Stack/LCDBlocking.c	DelayMs(2);
00283a   0e48     movlw	0x48               	MOVLW	0x48
00283c   6e01     movwf	0x1, 0             	MOVWF	r0x01
00283e   0e0d     movlw	0xd                	MOVLW	0x0d
002840   6e02     movwf	0x2, 0             	MOVWF	r0x02
002842   6a03     clrf	0x3, 0              	CLRF	r0x03
002844   6a04     clrf	0x4, 0              	CLRF	r0x04
                                           _00161_DS_:
002846   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
002848   f005
00284a   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
00284c   f006
00284e   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
002850   f007
002852   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
002854   f008
002856   0eff     movlw	0xff               	MOVLW	0xff
002858   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
00285a   0eff     movlw	0xff               	MOVLW	0xff
00285c   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
00285e   0eff     movlw	0xff               	MOVLW	0xff
002860   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
002862   0eff     movlw	0xff               	MOVLW	0xff
002864   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
002866   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
002868   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
00286a   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
00286c   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
00286e   e1eb     bnz	0x2846               	BNZ	_00161_DS_
                                           ;	.line	264; TCPIP_Stack/LCDBlocking.c	for(i = 0; i < 3u; i++)
002870   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
002872   d7be     bra	0x27f0               	BRA	_00191_DS_
                                           _00194_DS_:
                                           ;	.line	295; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0x38);
002874   0e38     movlw	0x38               	MOVLW	0x38
002876   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002878   0e00     movlw	0                  	MOVLW	0x00
00287a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00287c   ec9e     call	0x413c, 0           	CALL	_LCDWrite
00287e   f020
002880   0e02     movlw	0x2                	MOVLW	0x02
002882   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	297; TCPIP_Stack/LCDBlocking.c	Delay10us(5);
002884   0e55     movlw	0x55               	MOVLW	0x55
002886   6e00     movwf	0, 0               	MOVWF	r0x00
002888   6a01     clrf	0x1, 0              	CLRF	r0x01
00288a   6a02     clrf	0x2, 0              	CLRF	r0x02
00288c   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00167_DS_:
00288e   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
002890   f004
002892   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
002894   f005
002896   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
002898   f006
00289a   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
00289c   f007
00289e   0eff     movlw	0xff               	MOVLW	0xff
0028a0   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0028a2   0eff     movlw	0xff               	MOVLW	0xff
0028a4   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
0028a6   0eff     movlw	0xff               	MOVLW	0xff
0028a8   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0028aa   0eff     movlw	0xff               	MOVLW	0xff
0028ac   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
0028ae   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0028b0   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
0028b2   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
0028b4   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
0028b6   e1eb     bnz	0x288e               	BNZ	_00167_DS_
                                           ;	.line	300; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0x06);	// Increment after each write, do not shift
0028b8   0e06     movlw	0x6                	MOVLW	0x06
0028ba   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0028bc   0e00     movlw	0                  	MOVLW	0x00
0028be   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0028c0   ec9e     call	0x413c, 0           	CALL	_LCDWrite
0028c2   f020
0028c4   0e02     movlw	0x2                	MOVLW	0x02
0028c6   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	301; TCPIP_Stack/LCDBlocking.c	Delay10us(5);
0028c8   0e55     movlw	0x55               	MOVLW	0x55
0028ca   6e00     movwf	0, 0               	MOVWF	r0x00
0028cc   6a01     clrf	0x1, 0              	CLRF	r0x01
0028ce   6a02     clrf	0x2, 0              	CLRF	r0x02
0028d0   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00173_DS_:
0028d2   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
0028d4   f004
0028d6   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
0028d8   f005
0028da   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
0028dc   f006
0028de   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
0028e0   f007
0028e2   0eff     movlw	0xff               	MOVLW	0xff
0028e4   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0028e6   0eff     movlw	0xff               	MOVLW	0xff
0028e8   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
0028ea   0eff     movlw	0xff               	MOVLW	0xff
0028ec   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0028ee   0eff     movlw	0xff               	MOVLW	0xff
0028f0   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
0028f2   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0028f4   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
0028f6   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
0028f8   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
0028fa   e1eb     bnz	0x28d2               	BNZ	_00173_DS_
                                           ;	.line	304; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0x0C);	// Turn display on, no cusor, no cursor blink
0028fc   0e0c     movlw	0xc                	MOVLW	0x0c
0028fe   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002900   0e00     movlw	0                  	MOVLW	0x00
002902   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002904   ec9e     call	0x413c, 0           	CALL	_LCDWrite
002906   f020
002908   0e02     movlw	0x2                	MOVLW	0x02
00290a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	305; TCPIP_Stack/LCDBlocking.c	Delay10us(5);
00290c   0e55     movlw	0x55               	MOVLW	0x55
00290e   6e00     movwf	0, 0               	MOVWF	r0x00
002910   6a01     clrf	0x1, 0              	CLRF	r0x01
002912   6a02     clrf	0x2, 0              	CLRF	r0x02
002914   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00179_DS_:
002916   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
002918   f004
00291a   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
00291c   f005
00291e   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
002920   f006
002922   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
002924   f007
002926   0eff     movlw	0xff               	MOVLW	0xff
002928   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
00292a   0eff     movlw	0xff               	MOVLW	0xff
00292c   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
00292e   0eff     movlw	0xff               	MOVLW	0xff
002930   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
002932   0eff     movlw	0xff               	MOVLW	0xff
002934   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
002936   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002938   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
00293a   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
00293c   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
00293e   e1eb     bnz	0x2916               	BNZ	_00179_DS_
                                           ;	.line	308; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0x01);	
002940   0e01     movlw	0x1                	MOVLW	0x01
002942   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002944   0e00     movlw	0                  	MOVLW	0x00
002946   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002948   ec9e     call	0x413c, 0           	CALL	_LCDWrite
00294a   f020
00294c   0e02     movlw	0x2                	MOVLW	0x02
00294e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	309; TCPIP_Stack/LCDBlocking.c	DelayMs(2);
002950   0e48     movlw	0x48               	MOVLW	0x48
002952   6e00     movwf	0, 0               	MOVWF	r0x00
002954   0e0d     movlw	0xd                	MOVLW	0x0d
002956   6e01     movwf	0x1, 0             	MOVWF	r0x01
002958   6a02     clrf	0x2, 0              	CLRF	r0x02
00295a   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00185_DS_:
00295c   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
00295e   f004
002960   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
002962   f005
002964   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
002966   f006
002968   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
00296a   f007
00296c   0eff     movlw	0xff               	MOVLW	0xff
00296e   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
002970   0eff     movlw	0xff               	MOVLW	0xff
002972   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
002974   0eff     movlw	0xff               	MOVLW	0xff
002976   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
002978   0eff     movlw	0xff               	MOVLW	0xff
00297a   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
00297c   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00297e   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
002980   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
002982   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
002984   e1eb     bnz	0x295c               	BNZ	_00185_DS_
002986   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
002988   f008
00298a   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
00298c   f007
00298e   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
002990   f006
002992   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
002994   f005
002996   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
002998   f004
00299a   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00299c   f003
00299e   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0029a0   f002
0029a2   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0029a4   f001
0029a6   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0029a8   f000
0029aa   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0029ac   ffd9
0029ae   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDWrite	code
                                           _LCDWrite:
                                           ;	.line	94; TCPIP_Stack/LCDBlocking.c	static void LCDWrite(BYTE RS, BYTE Data)
00413c   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00413e   ffe5
004140   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
004142   ffd9
004144   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
004146   ffe5
004148   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00414a   ffe5
00414c   0e02     movlw	0x2                	MOVLW	0x02
00414e   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
004150   f000
004152   0e03     movlw	0x3                	MOVLW	0x03
004154   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
004156   f001
                                           ;	.line	97; TCPIP_Stack/LCDBlocking.c	LCD_DATA_TRIS = 0x00;
004158   6a96     clrf	0x96, 0             	CLRF	_TRISE
                                           ;	.line	110; TCPIP_Stack/LCDBlocking.c	LCD_RS_TRIS = 0;
00415a   9499     bcf	0x99, 0x2, 0         	BCF	_TRISHbits, 2
                                           ;	.line	111; TCPIP_Stack/LCDBlocking.c	LCD_RD_WR_TRIS = 0;
00415c   9299     bcf	0x99, 0x1, 0         	BCF	_TRISHbits, 1
                                           ;	.line	112; TCPIP_Stack/LCDBlocking.c	LCD_RD_WR_IO = 0;
00415e   9290     bcf	0x90, 0x1, 0         	BCF	_LATHbits, 1
                                           ;	.line	113; TCPIP_Stack/LCDBlocking.c	LCD_RS_IO = RS;
004160   5000     movf	0, 0, 0             	MOVF	r0x00, W
004162   0b01     andlw	0x1                	ANDLW	0x01
004164   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
004166   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
004168   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
00416a   5090     movf	0x90, 0, 0          	MOVF	_LATHbits, W
00416c   0bfb     andlw	0xfb               	ANDLW	0xfb
00416e   10f4     iorwf	0xf4, 0, 0         	IORWF	PRODH, W
004170   6e90     movwf	0x90, 0            	MOVWF	_LATHbits
                                           ;	.line	140; TCPIP_Stack/LCDBlocking.c	LCD_DATA_IO = Data;
004172   c001     movff	0x1, 0xf8d         	MOVFF	r0x01, _LATE
004174   ff8d
004176   0000     nop                      	nop 
004178   0000     nop                      	nop 
                                           ;	.line	155; TCPIP_Stack/LCDBlocking.c	LCD_E_IO = 1;
00417a   8090     bsf	0x90, 0, 0           	BSF	_LATHbits, 0
00417c   0000     nop                      	nop 
00417e   0000     nop                      	nop 
004180   0000     nop                      	nop 
004182   0000     nop                      	nop 
004184   0000     nop                      	nop 
004186   0000     nop                      	nop 
004188   0000     nop                      	nop 
00418a   0000     nop                      	nop 
00418c   0000     nop                      	nop 
                                           ;	.line	165; TCPIP_Stack/LCDBlocking.c	LCD_E_IO = 0;
00418e   9090     bcf	0x90, 0, 0           	BCF	_LATHbits, 0
004190   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
004192   f001
004194   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
004196   f000
004198   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00419a   ffd9
00419c   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 1496 (0x05d8) bytes ( 1.14%)
                                           ;           	  748 (0x02ec) words
                                           ; udata size:	   33 (0x0021) bytes ( 0.86%)
                                           ; access size:	    9 (0x0009) bytes
                                           
                                           
                                           	end
