gplink-0.13.7 beta
Copyright (c) 1998-2005 gputils project
Listing File Generated: 10-26-2013  15:30:39
 
 
Address  Value    Disassembly              Source
-------  -----    -----------              ------
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Oct 15 2013) (Mac OS X ppc)
                                           ; This file was generated Sat Oct 26 15:30:39 2013
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _inc_ahour
                                           	global _inc_amin
                                           	global _dec_ahour
                                           	global _dec_amin
                                           	global _refresh_lcd
                                           	global _alarm
                                           	global _button
                                           	global _DisplayString
                                           	global _strlcpy
                                           	global _chandelle
                                           	global _overflows
                                           	global _sec
                                           	global _decisec
                                           	global _ds
                                           	global _h
                                           	global _m
                                           	global _s
                                           	global _thour
                                           	global _tmin
                                           	global _tsec
                                           	global _ahour
                                           	global _amin
                                           	global _ahour_o
                                           	global _amin_o
                                           	global _alarm_set
                                           	global _snooze
                                           	global _stop_ringing
                                           	global _whereami
                                           	global _on
                                           	global _button1
                                           	global _button2
                                           	global _display
                                           	global _high_isr
                                           	global _low_isr
                                           	global _main
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern __gptrget1
                                           	extern __gptrput1
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _LCDText
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _sprintf
                                           	extern _strlen
                                           	extern _LCDInit
                                           	extern _LCDUpdate
                                           	extern __modsint
                                           	extern __divsint
                                           	extern ___ulong2fs
                                           	extern ___fsdiv
                                           	extern ___fs2ulong
                                           	extern __mullong
                                           	extern __modulong
                                           	extern __divulong
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           PCL	equ	0xff9
                                           PCLATH	equ	0xffa
                                           PCLATU	equ	0xffb
                                           WREG	equ	0xfe8
                                           BSR	equ	0xfe0
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           	idata
                                           _chandelle	db	0x01
                                           _overflows	db	0x00, 0x00, 0x00, 0x00
                                           _thour	db	0x00
                                           _tmin	db	0x00
                                           _tsec	db	0x00
                                           _ahour	db	0x00
                                           _amin	db	0x00
                                           _ahour_o	db	0x00
                                           _amin_o	db	0x00
                                           _alarm_set	db	0x00
                                           _snooze	db	0x00
                                           _stop_ringing	db	0x00
                                           _whereami	db	0x00
                                           _on	db	0x00
                                           _button1	db	0x00
                                           _button2	db	0x00
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           r0x0a	res	1
                                           r0x0b	res	1
                                           r0x0c	res	1
                                           r0x0d	res	1
                                           r0x0e	res	1
                                           r0x0f	res	1
                                           r0x10	res	1
                                           r0x11	res	1
                                           r0x12	res	1
                                           r0x13	res	1
                                           r0x14	res	1
                                           r0x15	res	1
                                           
                                           udata_lena_0	udata
                                           _sec	res	4
                                           
                                           udata_lena_1	udata
                                           _decisec	res	4
                                           
                                           udata_lena_2	udata
                                           _ds	res	2
                                           
                                           udata_lena_3	udata
                                           _h	res	1
                                           
                                           udata_lena_4	udata
                                           _m	res	1
                                           
                                           udata_lena_5	udata
                                           _s	res	1
                                           
                                           udata_lena_6	udata
                                           _display	res	32
                                           
                                           ;--------------------------------------------------------
                                           ; interrupt vector 
                                           ;--------------------------------------------------------
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; ; Starting pCode block for absolute section
                                           ; ;-----------------------------------------
                                           S_lena_ivec_0x1_high_isr	code	0X000008
                                           ivec_0x1_high_isr:
000008   ef9d     goto	0x153a              	GOTO	_high_isr
00000a   f00a
                                           
                                           ; ; Starting pCode block for absolute section
                                           ; ;-----------------------------------------
                                           S_lena_ivec_0x2_low_isr	code	0X000018
                                           ivec_0x2_low_isr:
000018   ef00     goto	0x3400              	GOTO	_low_isr
00001a   f01a
                                           
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_lena__main	code
                                           _main:
                                           ;	.line	133; lena.c	RCONbits.IPEN       = 1; //enable interrupts priority levels
00353a   8ed0     bsf	0xd0, 0x7, 0         	BSF	_RCONbits, 7
                                           ;	.line	134; lena.c	INTCONbits.GIE      = 1; //enables all high-priority interrupts
00353c   8ef2     bsf	0xf2, 0x7, 0         	BSF	_INTCONbits, 7
                                           ;	.line	135; lena.c	INTCONbits.PEIE     = 1; //enables all low-priority peripheral interrupts
00353e   8cf2     bsf	0xf2, 0x6, 0         	BSF	_INTCONbits, 6
                                           ;	.line	138; lena.c	T0CONbits.TMR0ON    = 1; //enables Timer0
003540   8ed5     bsf	0xd5, 0x7, 0         	BSF	_T0CONbits, 7
                                           ;	.line	139; lena.c	INTCONbits.TMR0IE   = 1; //enables the TMR0 overflow interrupt
003542   8af2     bsf	0xf2, 0x5, 0         	BSF	_INTCONbits, 5
                                           ;	.line	140; lena.c	INTCONbits.TMR0IF   = 0; //clear Timer0 overflow bit
003544   94f2     bcf	0xf2, 0x2, 0         	BCF	_INTCONbits, 2
                                           ;	.line	141; lena.c	INTCON2bits.TMR0IP  = 1; //high priority
003546   84f1     bsf	0xf1, 0x2, 0         	BSF	_INTCON2bits, 2
                                           ;	.line	142; lena.c	T0CONbits.T08BIT    = 0; //timer0 is configured as a 16-bit timer/counter
003548   9cd5     bcf	0xd5, 0x6, 0         	BCF	_T0CONbits, 6
                                           ;	.line	143; lena.c	T0CONbits.T0CS      = 0; //internal instruction cycle clock (CLKO)
00354a   9ad5     bcf	0xd5, 0x5, 0         	BCF	_T0CONbits, 5
                                           ;	.line	144; lena.c	T0CONbits.PSA       = 1; //timer0 prescaler is not assigned
00354c   86d5     bsf	0xd5, 0x3, 0         	BSF	_T0CONbits, 3
                                           ;	.line	145; lena.c	TMR0L = 0;    TMR0H = 0;
00354e   6ad6     clrf	0xd6, 0             	CLRF	_TMR0L
003550   6ad7     clrf	0xd7, 0             	CLRF	_TMR0H
                                           ;	.line	148; lena.c	LED0_TRIS = 0; //configure 1st led pin as output (yellow)
003552   909a     bcf	0x9a, 0, 0           	BCF	_TRISJbits, 0
                                           ;	.line	149; lena.c	LED1_TRIS = 0; //configure 2nd led pin as output (red)
003554   929a     bcf	0x9a, 0x1, 0         	BCF	_TRISJbits, 1
                                           ;	.line	150; lena.c	LED2_TRIS = 0; //configure 3rd led pin as output (red)
003556   949a     bcf	0x9a, 0x2, 0         	BCF	_TRISJbits, 2
                                           ;	.line	151; lena.c	LATJbits.LATJ0 = 0; // switch LED 1 off
003558   9091     bcf	0x91, 0, 0           	BCF	_LATJbits, 0
                                           ;	.line	152; lena.c	LATJbits.LATJ1 = 0; // switch LED 2 off
00355a   9291     bcf	0x91, 0x1, 0         	BCF	_LATJbits, 1
                                           ;	.line	153; lena.c	LATJbits.LATJ2 = 0; // switch LED 3 off
00355c   9491     bcf	0x91, 0x2, 0         	BCF	_LATJbits, 2
                                           ;	.line	156; lena.c	BUTTON0_TRIS        = 1; //configure 1st button as input
00355e   8693     bsf	0x93, 0x3, 0         	BSF	_TRISBbits, 3
                                           ;	.line	157; lena.c	BUTTON1_TRIS        = 1; //configure 2nd button as input
003560   8293     bsf	0x93, 0x1, 0         	BSF	_TRISBbits, 1
                                           ;	.line	158; lena.c	INTCON3bits.INT3E   = 1; //enable INT3 interrupt (button 1)
003562   8af0     bsf	0xf0, 0x5, 0         	BSF	_INTCON3bits, 5
                                           ;	.line	159; lena.c	INTCON3bits.INT3F   = 0; //clear INT3 flag
003564   94f0     bcf	0xf0, 0x2, 0         	BCF	_INTCON3bits, 2
                                           ;	.line	160; lena.c	INTCON3bits.INT1E   = 1; //enable INT1 interrupt (button 2)
003566   86f0     bsf	0xf0, 0x3, 0         	BSF	_INTCON3bits, 3
                                           ;	.line	161; lena.c	INTCON3bits.INT1F   = 0; //clear INT1 flag
003568   90f0     bcf	0xf0, 0, 0           	BCF	_INTCON3bits, 0
                                           ;	.line	162; lena.c	INTCON3bits.INT1IP  = 0; //low priority
00356a   9cf0     bcf	0xf0, 0x6, 0         	BCF	_INTCON3bits, 6
                                           ;	.line	163; lena.c	INTCON2bits.INT3IP  = 0; //low priority
00356c   92f1     bcf	0xf1, 0x1, 0         	BCF	_INTCON2bits, 1
                                           ;	.line	167; lena.c	LCDInit();
00356e   ec2c     call	0x1a58, 0           	CALL	_LCDInit
003570   f00d
                                           ;	.line	168; lena.c	whereami = TIME_MENU;
003572   0e01     movlw	0x1                	MOVLW	0x01
003574   010f     movlb	0xf                	BANKSEL	_whereami
003576   6f50     movwf	0x50, 0x1          	MOVWF	_whereami, B
003578   010f     movlb	0xf                	BANKSEL	_chandelle
                                           ;	.line	170; lena.c	chandelle++; // ##### BIZARRE ####
00357a   2b41     incf	0x41, 0x1, 0x1      	INCF	_chandelle, F, B
                                           ;	.line	172; lena.c	T0CONbits.TMR0ON = 1; // start timer0
00357c   8ed5     bsf	0xd5, 0x7, 0         	BSF	_T0CONbits, 7
                                           _00123_DS_:
                                           ;	.line	174; lena.c	refresh_lcd();
00357e   ec0e     call	0x1c, 0             	CALL	_refresh_lcd
003580   f000
                                           ;	.line	175; lena.c	alarm();
003582   ec7b     call	0x32f6, 0           	CALL	_alarm
003584   f019
                                           ;	.line	176; lena.c	button();
003586   ec5a     call	0x1cb4, 0           	CALL	_button
003588   f00e
00358a   d7f9     bra	0x357e               	BRA	_00123_DS_
00358c   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_lena__strlcpy	code
                                           _strlcpy:
                                           ;	.line	542; lena.c	strlcpy(char *dst, const char *src, size_t siz)
002122   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002124   ffe5
002126   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002128   ffd9
00212a   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00212c   ffe5
00212e   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002130   ffe5
002132   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
002134   ffe5
002136   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002138   ffe5
00213a   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00213c   ffe5
00213e   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
002140   ffe5
002142   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
002144   ffe5
002146   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
002148   ffe5
00214a   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
00214c   ffe5
00214e   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
002150   ffe5
002152   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
002154   ffe5
002156   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
002158   ffe5
00215a   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
00215c   ffe5
00215e   c00d     movff	0xd, 0xfe5         	MOVFF	r0x0d, POSTDEC1
002160   ffe5
002162   c00e     movff	0xe, 0xfe5         	MOVFF	r0x0e, POSTDEC1
002164   ffe5
002166   c00f     movff	0xf, 0xfe5         	MOVFF	r0x0f, POSTDEC1
002168   ffe5
00216a   c010     movff	0x10, 0xfe5        	MOVFF	r0x10, POSTDEC1
00216c   ffe5
00216e   c011     movff	0x11, 0xfe5        	MOVFF	r0x11, POSTDEC1
002170   ffe5
002172   c012     movff	0x12, 0xfe5        	MOVFF	r0x12, POSTDEC1
002174   ffe5
002176   c013     movff	0x13, 0xfe5        	MOVFF	r0x13, POSTDEC1
002178   ffe5
00217a   c014     movff	0x14, 0xfe5        	MOVFF	r0x14, POSTDEC1
00217c   ffe5
00217e   c015     movff	0x15, 0xfe5        	MOVFF	r0x15, POSTDEC1
002180   ffe5
002182   0e02     movlw	0x2                	MOVLW	0x02
002184   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
002186   f000
002188   0e03     movlw	0x3                	MOVLW	0x03
00218a   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
00218c   f001
00218e   0e04     movlw	0x4                	MOVLW	0x04
002190   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
002192   f002
002194   0e05     movlw	0x5                	MOVLW	0x05
002196   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
002198   f003
00219a   0e06     movlw	0x6                	MOVLW	0x06
00219c   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
00219e   f004
0021a0   0e07     movlw	0x7                	MOVLW	0x07
0021a2   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
0021a4   f005
0021a6   0e08     movlw	0x8                	MOVLW	0x08
0021a8   cfdb     movff	0xfdb, 0x6         	MOVFF	PLUSW2, r0x06
0021aa   f006
0021ac   0e09     movlw	0x9                	MOVLW	0x09
0021ae   cfdb     movff	0xfdb, 0x7         	MOVFF	PLUSW2, r0x07
0021b0   f007
                                           ;	.line	544; lena.c	char       *d = dst;
0021b2   c000     movff	0, 0x8             	MOVFF	r0x00, r0x08
0021b4   f008
0021b6   c001     movff	0x1, 0x9           	MOVFF	r0x01, r0x09
0021b8   f009
0021ba   c002     movff	0x2, 0xa           	MOVFF	r0x02, r0x0a
0021bc   f00a
                                           ;	.line	545; lena.c	const char *s = src;
0021be   c003     movff	0x3, 0xb           	MOVFF	r0x03, r0x0b
0021c0   f00b
0021c2   c004     movff	0x4, 0xc           	MOVFF	r0x04, r0x0c
0021c4   f00c
0021c6   c005     movff	0x5, 0xd           	MOVFF	r0x05, r0x0d
0021c8   f00d
                                           ;	.line	546; lena.c	size_t      n = siz;
0021ca   c006     movff	0x6, 0xe           	MOVFF	r0x06, r0x0e
0021cc   f00e
0021ce   c007     movff	0x7, 0xf           	MOVFF	r0x07, r0x0f
0021d0   f00f
                                           ;	.line	549; lena.c	if (n != 0)
0021d2   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0021d4   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
0021d6   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
0021d8   d03e     bra	0x2256               	BRA	_00392_DS_
                                           ;	.line	551; lena.c	while (--n != 0)
0021da   c003     movff	0x3, 0x10          	MOVFF	r0x03, r0x10
0021dc   f010
0021de   c004     movff	0x4, 0x11          	MOVFF	r0x04, r0x11
0021e0   f011
0021e2   c005     movff	0x5, 0x12          	MOVFF	r0x05, r0x12
0021e4   f012
0021e6   c006     movff	0x6, 0x13          	MOVFF	r0x06, r0x13
0021e8   f013
0021ea   c007     movff	0x7, 0x14          	MOVFF	r0x07, r0x14
0021ec   f014
                                           _00388_DS_:
0021ee   0eff     movlw	0xff               	MOVLW	0xff
0021f0   2613     addwf	0x13, 0x1, 0       	ADDWF	r0x13, F
0021f2   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
0021f4   0614     decf	0x14, 0x1, 0        	DECF	r0x14, F
0021f6   5013     movf	0x13, 0, 0          	MOVF	r0x13, W
0021f8   1014     iorwf	0x14, 0, 0         	IORWF	r0x14, W
0021fa   e01d     bz	0x2236                	BZ	_00407_DS_
                                           ;	.line	553; lena.c	if ((*d++ = *s++) == '\0')
0021fc   c010     movff	0x10, 0xfe9        	MOVFF	r0x10, FSR0L
0021fe   ffe9
002200   c011     movff	0x11, 0xff3        	MOVFF	r0x11, PRODL
002202   fff3
002204   5012     movf	0x12, 0, 0          	MOVF	r0x12, W
002206   ec78     call	0x36f0, 0           	CALL	__gptrget1
002208   f01b
00220a   6e15     movwf	0x15, 0            	MOVWF	r0x15
00220c   2a10     incf	0x10, 0x1, 0        	INCF	r0x10, F
00220e   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
002210   2a11     incf	0x11, 0x1, 0        	INCF	r0x11, F
002212   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
002214   2a12     incf	0x12, 0x1, 0        	INCF	r0x12, F
002216   c015     movff	0x15, 0xfe5        	MOVFF	r0x15, POSTDEC1
002218   ffe5
00221a   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
00221c   ffe9
00221e   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
002220   fff3
002222   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002224   ecad     call	0x375a, 0           	CALL	__gptrput1
002226   f01b
002228   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
00222a   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00222c   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
00222e   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
002230   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
002232   5015     movf	0x15, 0, 0          	MOVF	r0x15, W
002234   e1dc     bnz	0x21ee               	BNZ	_00388_DS_
                                           _00407_DS_:
                                           ;	.line	554; lena.c	break;
002236   c010     movff	0x10, 0xb          	MOVFF	r0x10, r0x0b
002238   f00b
00223a   c011     movff	0x11, 0xc          	MOVFF	r0x11, r0x0c
00223c   f00c
00223e   c012     movff	0x12, 0xd          	MOVFF	r0x12, r0x0d
002240   f00d
002242   c000     movff	0, 0x8             	MOVFF	r0x00, r0x08
002244   f008
002246   c001     movff	0x1, 0x9           	MOVFF	r0x01, r0x09
002248   f009
00224a   c002     movff	0x2, 0xa           	MOVFF	r0x02, r0x0a
00224c   f00a
00224e   c013     movff	0x13, 0xe          	MOVFF	r0x13, r0x0e
002250   f00e
002252   c014     movff	0x14, 0xf          	MOVFF	r0x14, r0x0f
002254   f00f
                                           _00392_DS_:
                                           ;	.line	559; lena.c	if (n == 0)
002256   500e     movf	0xe, 0, 0           	MOVF	r0x0e, W
002258   100f     iorwf	0xf, 0, 0          	IORWF	r0x0f, W
00225a   e127     bnz	0x22aa               	BNZ	_00399_DS_
                                           ;	.line	561; lena.c	if (siz != 0)
00225c   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
00225e   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
002260   e009     bz	0x2274                	BZ	_00406_DS_
                                           ;	.line	562; lena.c	*d = '\0';          /* NUL-terminate dst */
002262   0e00     movlw	0                  	MOVLW	0x00
002264   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002266   c008     movff	0x8, 0xfe9         	MOVFF	r0x08, FSR0L
002268   ffe9
00226a   c009     movff	0x9, 0xff3         	MOVFF	r0x09, PRODL
00226c   fff3
00226e   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
002270   ecad     call	0x375a, 0           	CALL	__gptrput1
002272   f01b
                                           _00406_DS_:
                                           ;	.line	563; lena.c	while (*s++)
002274   c00b     movff	0xb, 0             	MOVFF	r0x0b, r0x00
002276   f000
002278   c00c     movff	0xc, 0x1           	MOVFF	r0x0c, r0x01
00227a   f001
00227c   c00d     movff	0xd, 0x2           	MOVFF	r0x0d, r0x02
00227e   f002
                                           _00395_DS_:
002280   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
002282   ffe9
002284   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
002286   fff3
002288   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00228a   ec78     call	0x36f0, 0           	CALL	__gptrget1
00228c   f01b
00228e   6e06     movwf	0x6, 0             	MOVWF	r0x06
002290   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
002292   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
002294   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
002296   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
002298   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
00229a   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
00229c   e1f1     bnz	0x2280               	BNZ	_00395_DS_
00229e   c000     movff	0, 0xb             	MOVFF	r0x00, r0x0b
0022a0   f00b
0022a2   c001     movff	0x1, 0xc           	MOVFF	r0x01, r0x0c
0022a4   f00c
0022a6   c002     movff	0x2, 0xd           	MOVFF	r0x02, r0x0d
0022a8   f00d
                                           _00399_DS_:
                                           ;	.line	569; lena.c	return (s - src - 1);       /* count does not include NUL */
0022aa   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0022ac   5c0b     subwf	0xb, 0, 0          	SUBWF	r0x0b, W
0022ae   6e03     movwf	0x3, 0             	MOVWF	r0x03
0022b0   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0022b2   580c     subwfb	0xc, 0, 0         	SUBWFB	r0x0c, W
0022b4   6e04     movwf	0x4, 0             	MOVWF	r0x04
0022b6   0eff     movlw	0xff               	MOVLW	0xff
0022b8   2603     addwf	0x3, 0x1, 0        	ADDWF	r0x03, F
0022ba   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
0022bc   0604     decf	0x4, 0x1, 0         	DECF	r0x04, F
0022be   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
0022c0   fff3
0022c2   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0022c4   cfe4     movff	0xfe4, 0x15        	MOVFF	PREINC1, r0x15
0022c6   f015
0022c8   cfe4     movff	0xfe4, 0x14        	MOVFF	PREINC1, r0x14
0022ca   f014
0022cc   cfe4     movff	0xfe4, 0x13        	MOVFF	PREINC1, r0x13
0022ce   f013
0022d0   cfe4     movff	0xfe4, 0x12        	MOVFF	PREINC1, r0x12
0022d2   f012
0022d4   cfe4     movff	0xfe4, 0x11        	MOVFF	PREINC1, r0x11
0022d6   f011
0022d8   cfe4     movff	0xfe4, 0x10        	MOVFF	PREINC1, r0x10
0022da   f010
0022dc   cfe4     movff	0xfe4, 0xf         	MOVFF	PREINC1, r0x0f
0022de   f00f
0022e0   cfe4     movff	0xfe4, 0xe         	MOVFF	PREINC1, r0x0e
0022e2   f00e
0022e4   cfe4     movff	0xfe4, 0xd         	MOVFF	PREINC1, r0x0d
0022e6   f00d
0022e8   cfe4     movff	0xfe4, 0xc         	MOVFF	PREINC1, r0x0c
0022ea   f00c
0022ec   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
0022ee   f00b
0022f0   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
0022f2   f00a
0022f4   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
0022f6   f009
0022f8   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
0022fa   f008
0022fc   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
0022fe   f007
002300   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
002302   f006
002304   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
002306   f005
002308   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
00230a   f004
00230c   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00230e   f003
002310   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
002312   f002
002314   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
002316   f001
002318   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00231a   f000
00231c   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00231e   ffd9
002320   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_lena__DisplayString	code
                                           _DisplayString:
                                           ;	.line	496; lena.c	void DisplayString(BYTE pos, char* text)
002d42   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002d44   ffe5
002d46   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002d48   ffd9
002d4a   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002d4c   ffe5
002d4e   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002d50   ffe5
002d52   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
002d54   ffe5
002d56   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002d58   ffe5
002d5a   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
002d5c   ffe5
002d5e   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
002d60   ffe5
002d62   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
002d64   ffe5
002d66   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
002d68   ffe5
002d6a   0e02     movlw	0x2                	MOVLW	0x02
002d6c   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
002d6e   f000
002d70   0e03     movlw	0x3                	MOVLW	0x03
002d72   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
002d74   f001
002d76   0e04     movlw	0x4                	MOVLW	0x04
002d78   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
002d7a   f002
002d7c   0e05     movlw	0x5                	MOVLW	0x05
002d7e   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
002d80   f003
                                           ;	.line	498; lena.c	BYTE l= strlen(text)+1;
002d82   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002d84   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002d86   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002d88   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002d8a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002d8c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002d8e   ecc0     call	0x3380, 0           	CALL	_strlen
002d90   f019
002d92   6e04     movwf	0x4, 0             	MOVWF	r0x04
002d94   cff3     movff	0xff3, 0x5         	MOVFF	PRODL, r0x05
002d96   f005
002d98   0e03     movlw	0x3                	MOVLW	0x03
002d9a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
002d9c   2a04     incf	0x4, 0x1, 0         	INCF	r0x04, F
                                           ;	.line	499; lena.c	BYTE max= 32-pos;
002d9e   5000     movf	0, 0, 0             	MOVF	r0x00, W
002da0   0820     sublw	0x20               	SUBLW	0x20
002da2   6e05     movwf	0x5, 0             	MOVWF	r0x05
                                           ;	.line	500; lena.c	strlcpy((char*)&LCDText[pos], text,(l<max)?l:max );
002da4   6a06     clrf	0x6, 0              	CLRF	r0x06
002da6   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
002da8   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
002daa   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
002dac   2206     addwfc	0x6, 0x1, 0       	ADDWFC	r0x06, F
002dae   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
002db0   6e06     movwf	0x6, 0             	MOVWF	r0x06
002db2   5000     movf	0, 0, 0             	MOVF	r0x00, W
002db4   6e00     movwf	0, 0               	MOVWF	r0x00
002db6   0e80     movlw	0x80               	MOVLW	0x80
002db8   6e07     movwf	0x7, 0             	MOVWF	r0x07
002dba   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
002dbc   5c04     subwf	0x4, 0, 0          	SUBWF	r0x04, W
002dbe   e302     bnc	0x2dc4               	BNC	_00379_DS_
002dc0   c005     movff	0x5, 0x4           	MOVFF	r0x05, r0x04
002dc2   f004
                                           _00379_DS_:
002dc4   6a05     clrf	0x5, 0              	CLRF	r0x05
002dc6   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
002dc8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002dca   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002dcc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002dce   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002dd0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002dd2   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002dd4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002dd6   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002dd8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002dda   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
002ddc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002dde   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
002de0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002de2   5000     movf	0, 0, 0             	MOVF	r0x00, W
002de4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002de6   ec91     call	0x2122, 0           	CALL	_strlcpy
002de8   f010
002dea   0e08     movlw	0x8                	MOVLW	0x08
002dec   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	501; lena.c	LCDUpdate();
002dee   ecf7     call	0x17ee, 0           	CALL	_LCDUpdate
002df0   f00b
002df2   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
002df4   f007
002df6   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
002df8   f006
002dfa   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
002dfc   f005
002dfe   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
002e00   f004
002e02   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
002e04   f003
002e06   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
002e08   f002
002e0a   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
002e0c   f001
002e0e   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002e10   f000
002e12   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002e14   ffd9
002e16   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_lena__button	code
                                           _button:
                                           ;	.line	361; lena.c	void button(void)
001cb4   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
001cb6   ffe5
001cb8   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001cba   ffd9
001cbc   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
001cbe   ffe5
001cc0   010f     movlb	0xf                	BANKSEL	_button1
                                           ;	.line	364; lena.c	if (button1) {
001cc2   5152     movf	0x52, 0, 0x1        	MOVF	_button1, W, B
001cc4   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
001cc6   d07b     bra	0x1dbe               	BRA	_00336_DS_
                                           ;	.line	365; lena.c	switch (whereami) {
001cc8   0e01     movlw	0x1                	MOVLW	0x01
001cca   010f     movlb	0xf                	BANKSEL	_whereami
001ccc   5d50     subwf	0x50, 0, 0x1       	SUBWF	_whereami, W, B
001cce   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
001cd0   d073     bra	0x1db8               	BRA	_00301_DS_
001cd2   0e0c     movlw	0xc                	MOVLW	0x0c
001cd4   010f     movlb	0xf                	BANKSEL	_whereami
001cd6   5d50     subwf	0x50, 0, 0x1       	SUBWF	_whereami, W, B
001cd8   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001cda   d06e     bra	0x1db8               	BRA	_00301_DS_
001cdc   010f     movlb	0xf                	BANKSEL	_whereami
001cde   0550     decf	0x50, 0, 0x1        	DECF	_whereami, W, B
001ce0   6e00     movwf	0, 0               	MOVWF	r0x00
001ce2   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
001ce4   ffe5
001ce6   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
001ce8   ffe5
001cea   6a02     clrf	0x2, 0              	CLRF	r0x02
001cec   3400     rlcf	0, 0, 0             	RLCF	r0x00, W
001cee   3602     rlcf	0x2, 0x1, 0         	RLCF	r0x02, F
001cf0   34e8     rlcf	0xe8, 0, 0          	RLCF	WREG, W
001cf2   3602     rlcf	0x2, 0x1, 0         	RLCF	r0x02, F
001cf4   0bfc     andlw	0xfc               	ANDLW	0xfc
001cf6   6e01     movwf	0x1, 0             	MOVWF	r0x01
001cf8   0e00     movlw	0                  	MOVLW	UPPER(_00355_DS_)
001cfa   6efb     movwf	0xfb, 0            	MOVWF	PCLATU
001cfc   0e1d     movlw	0x1d               	MOVLW	HIGH(_00355_DS_)
001cfe   6efa     movwf	0xfa, 0            	MOVWF	PCLATH
001d00   0e18     movlw	0x18               	MOVLW	LOW(_00355_DS_)
001d02   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
001d04   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001d06   22fa     addwfc	0xfa, 0x1, 0      	ADDWFC	PCLATH, F
001d08   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001d0a   2afb     incf	0xfb, 0x1, 0        	INCF	PCLATU, F
001d0c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001d0e   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
001d10   f002
001d12   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
001d14   f001
001d16   6ef9     movwf	0xf9, 0            	MOVWF	PCL
                                           _00355_DS_:
001d18   efa2     goto	0x1d44              	GOTO	_00289_DS_
001d1a   f00e
001d1c   efa6     goto	0x1d4c              	GOTO	_00290_DS_
001d1e   f00e
001d20   efaa     goto	0x1d54              	GOTO	_00291_DS_
001d22   f00e
001d24   efae     goto	0x1d5c              	GOTO	_00292_DS_
001d26   f00e
001d28   efb2     goto	0x1d64              	GOTO	_00293_DS_
001d2a   f00e
001d2c   efb6     goto	0x1d6c              	GOTO	_00294_DS_
001d2e   f00e
001d30   efba     goto	0x1d74              	GOTO	_00295_DS_
001d32   f00e
001d34   efbe     goto	0x1d7c              	GOTO	_00296_DS_
001d36   f00e
001d38   efc2     goto	0x1d84              	GOTO	_00297_DS_
001d3a   f00e
001d3c   efc6     goto	0x1d8c              	GOTO	_00298_DS_
001d3e   f00e
001d40   efcf     goto	0x1d9e              	GOTO	_00299_DS_
001d42   f00e
                                           _00289_DS_:
                                           ;	.line	367; lena.c	whereami = ALARM_MENU;
001d44   0e05     movlw	0x5                	MOVLW	0x05
001d46   010f     movlb	0xf                	BANKSEL	_whereami
001d48   6f50     movwf	0x50, 0x1          	MOVWF	_whereami, B
                                           ;	.line	368; lena.c	break;
001d4a   d036     bra	0x1db8               	BRA	_00301_DS_
                                           _00290_DS_:
                                           ;	.line	370; lena.c	whereami = SET_MINUTE;
001d4c   0e03     movlw	0x3                	MOVLW	0x03
001d4e   010f     movlb	0xf                	BANKSEL	_whereami
001d50   6f50     movwf	0x50, 0x1          	MOVWF	_whereami, B
                                           ;	.line	371; lena.c	break;
001d52   d032     bra	0x1db8               	BRA	_00301_DS_
                                           _00291_DS_:
                                           ;	.line	373; lena.c	whereami = SET_SECOND;
001d54   0e04     movlw	0x4                	MOVLW	0x04
001d56   010f     movlb	0xf                	BANKSEL	_whereami
001d58   6f50     movwf	0x50, 0x1          	MOVWF	_whereami, B
                                           ;	.line	374; lena.c	break;
001d5a   d02e     bra	0x1db8               	BRA	_00301_DS_
                                           _00292_DS_:
                                           ;	.line	376; lena.c	whereami = ALARM_MENU;
001d5c   0e05     movlw	0x5                	MOVLW	0x05
001d5e   010f     movlb	0xf                	BANKSEL	_whereami
001d60   6f50     movwf	0x50, 0x1          	MOVWF	_whereami, B
                                           ;	.line	377; lena.c	break;
001d62   d02a     bra	0x1db8               	BRA	_00301_DS_
                                           _00293_DS_:
                                           ;	.line	379; lena.c	whereami = DISPLAY;
001d64   0e09     movlw	0x9                	MOVLW	0x09
001d66   010f     movlb	0xf                	BANKSEL	_whereami
001d68   6f50     movwf	0x50, 0x1          	MOVWF	_whereami, B
                                           ;	.line	380; lena.c	break;
001d6a   d026     bra	0x1db8               	BRA	_00301_DS_
                                           _00294_DS_:
                                           ;	.line	382; lena.c	whereami = SET_A_HOUR;
001d6c   0e07     movlw	0x7                	MOVLW	0x07
001d6e   010f     movlb	0xf                	BANKSEL	_whereami
001d70   6f50     movwf	0x50, 0x1          	MOVWF	_whereami, B
                                           ;	.line	383; lena.c	break;
001d72   d022     bra	0x1db8               	BRA	_00301_DS_
                                           _00295_DS_:
                                           ;	.line	385; lena.c	whereami = SET_A_MIN;
001d74   0e08     movlw	0x8                	MOVLW	0x08
001d76   010f     movlb	0xf                	BANKSEL	_whereami
001d78   6f50     movwf	0x50, 0x1          	MOVWF	_whereami, B
                                           ;	.line	386; lena.c	break;
001d7a   d01e     bra	0x1db8               	BRA	_00301_DS_
                                           _00296_DS_:
                                           ;	.line	388; lena.c	whereami = DISPLAY;
001d7c   0e09     movlw	0x9                	MOVLW	0x09
001d7e   010f     movlb	0xf                	BANKSEL	_whereami
001d80   6f50     movwf	0x50, 0x1          	MOVWF	_whereami, B
                                           ;	.line	389; lena.c	break;
001d82   d01a     bra	0x1db8               	BRA	_00301_DS_
                                           _00297_DS_:
                                           ;	.line	391; lena.c	whereami = TIME_MENU;
001d84   0e01     movlw	0x1                	MOVLW	0x01
001d86   010f     movlb	0xf                	BANKSEL	_whereami
001d88   6f50     movwf	0x50, 0x1          	MOVWF	_whereami, B
                                           ;	.line	392; lena.c	break;
001d8a   d016     bra	0x1db8               	BRA	_00301_DS_
                                           _00298_DS_:
                                           ;	.line	394; lena.c	stop_ringing = 1;
001d8c   0e01     movlw	0x1                	MOVLW	0x01
001d8e   010f     movlb	0xf                	BANKSEL	_stop_ringing
001d90   6f4f     movwf	0x4f, 0x1          	MOVWF	_stop_ringing, B
                                           ;	.line	395; lena.c	LATJbits.LATJ1 = 0; // switch LED 2 off
001d92   9291     bcf	0x91, 0x1, 0         	BCF	_LATJbits, 1
                                           ;	.line	396; lena.c	LATJbits.LATJ2 = 0; // switch LED 3 off
001d94   9491     bcf	0x91, 0x2, 0         	BCF	_LATJbits, 2
                                           ;	.line	397; lena.c	whereami = DISPLAY;
001d96   0e09     movlw	0x9                	MOVLW	0x09
001d98   010f     movlb	0xf                	BANKSEL	_whereami
001d9a   6f50     movwf	0x50, 0x1          	MOVWF	_whereami, B
                                           ;	.line	398; lena.c	break;
001d9c   d00d     bra	0x1db8               	BRA	_00301_DS_
                                           _00299_DS_:
                                           ;	.line	400; lena.c	amin = amin_o; // remet le réveil
001d9e   cf4c     movff	0xf4c, 0xf4a       	MOVFF	_amin_o, _amin
001da0   ff4a
                                           ;	.line	401; lena.c	ahour = ahour_o;
001da2   cf4b     movff	0xf4b, 0xf49       	MOVFF	_ahour_o, _ahour
001da4   ff49
001da6   010f     movlb	0xf                	BANKSEL	_snooze
                                           ;	.line	402; lena.c	snooze = 0;
001da8   6b4e     clrf	0x4e, 0x1           	CLRF	_snooze, B
001daa   010f     movlb	0xf                	BANKSEL	_stop_ringing
                                           ;	.line	403; lena.c	stop_ringing = 0; // le réveil doit sonner à nouveau 
001dac   6b4f     clrf	0x4f, 0x1           	CLRF	_stop_ringing, B
                                           ;	.line	404; lena.c	LATJbits.LATJ1 = 0; // switch LED 2 off
001dae   9291     bcf	0x91, 0x1, 0         	BCF	_LATJbits, 1
                                           ;	.line	405; lena.c	LATJbits.LATJ2 = 0; // switch LED 3 off
001db0   9491     bcf	0x91, 0x2, 0         	BCF	_LATJbits, 2
                                           ;	.line	406; lena.c	whereami = DISPLAY;
001db2   0e09     movlw	0x9                	MOVLW	0x09
001db4   010f     movlb	0xf                	BANKSEL	_whereami
001db6   6f50     movwf	0x50, 0x1          	MOVWF	_whereami, B
                                           _00301_DS_:
001db8   010f     movlb	0xf                	BANKSEL	_button1
                                           ;	.line	411; lena.c	button1 = 0; // remet le flag du boutton 1 à 0
001dba   6b52     clrf	0x52, 0x1           	CLRF	_button1, B
001dbc   d0a3     bra	0x1f04               	BRA	_00338_DS_
                                           _00336_DS_:
001dbe   010f     movlb	0xf                	BANKSEL	_button2
                                           ;	.line	414; lena.c	} else if (button2) {
001dc0   5153     movf	0x53, 0, 0x1        	MOVF	_button2, W, B
001dc2   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
001dc4   d09f     bra	0x1f04               	BRA	_00338_DS_
                                           ;	.line	415; lena.c	switch (whereami) {
001dc6   0e01     movlw	0x1                	MOVLW	0x01
001dc8   010f     movlb	0xf                	BANKSEL	_whereami
001dca   5d50     subwf	0x50, 0, 0x1       	SUBWF	_whereami, W, B
001dcc   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
001dce   d098     bra	0x1f00               	BRA	_00332_DS_
001dd0   0e0c     movlw	0xc                	MOVLW	0x0c
001dd2   010f     movlb	0xf                	BANKSEL	_whereami
001dd4   5d50     subwf	0x50, 0, 0x1       	SUBWF	_whereami, W, B
001dd6   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001dd8   d093     bra	0x1f00               	BRA	_00332_DS_
001dda   010f     movlb	0xf                	BANKSEL	_whereami
001ddc   0550     decf	0x50, 0, 0x1        	DECF	_whereami, W, B
001dde   6e00     movwf	0, 0               	MOVWF	r0x00
001de0   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
001de2   ffe5
001de4   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
001de6   ffe5
001de8   6a02     clrf	0x2, 0              	CLRF	r0x02
001dea   3400     rlcf	0, 0, 0             	RLCF	r0x00, W
001dec   3602     rlcf	0x2, 0x1, 0         	RLCF	r0x02, F
001dee   34e8     rlcf	0xe8, 0, 0          	RLCF	WREG, W
001df0   3602     rlcf	0x2, 0x1, 0         	RLCF	r0x02, F
001df2   0bfc     andlw	0xfc               	ANDLW	0xfc
001df4   6e01     movwf	0x1, 0             	MOVWF	r0x01
001df6   0e00     movlw	0                  	MOVLW	UPPER(_00358_DS_)
001df8   6efb     movwf	0xfb, 0            	MOVWF	PCLATU
001dfa   0e1e     movlw	0x1e               	MOVLW	HIGH(_00358_DS_)
001dfc   6efa     movwf	0xfa, 0            	MOVWF	PCLATH
001dfe   0e16     movlw	0x16               	MOVLW	LOW(_00358_DS_)
001e00   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
001e02   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001e04   22fa     addwfc	0xfa, 0x1, 0      	ADDWFC	PCLATH, F
001e06   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001e08   2afb     incf	0xfb, 0x1, 0        	INCF	PCLATU, F
001e0a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001e0c   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
001e0e   f002
001e10   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
001e12   f001
001e14   6ef9     movwf	0xf9, 0            	MOVWF	PCL
                                           _00358_DS_:
001e16   ef21     goto	0x1e42              	GOTO	_00302_DS_
001e18   f00f
001e1a   ef25     goto	0x1e4a              	GOTO	_00303_DS_
001e1c   f00f
001e1e   ef2f     goto	0x1e5e              	GOTO	_00306_DS_
001e20   f00f
001e22   ef39     goto	0x1e72              	GOTO	_00310_DS_
001e24   f00f
001e26   ef43     goto	0x1e86              	GOTO	_00314_DS_
001e28   f00f
001e2a   ef47     goto	0x1e8e              	GOTO	_00315_DS_
001e2c   f00f
001e2e   ef4b     goto	0x1e96              	GOTO	_00316_DS_
001e30   f00f
001e32   ef57     goto	0x1eae              	GOTO	_00320_DS_
001e34   f00f
001e36   ef63     goto	0x1ec6              	GOTO	_00324_DS_
001e38   f00f
001e3a   ef64     goto	0x1ec8              	GOTO	_00325_DS_
001e3c   f00f
001e3e   ef75     goto	0x1eea              	GOTO	_00328_DS_
001e40   f00f
                                           _00302_DS_:
                                           ;	.line	417; lena.c	whereami = SET_HOUR;
001e42   0e02     movlw	0x2                	MOVLW	0x02
001e44   010f     movlb	0xf                	BANKSEL	_whereami
001e46   6f50     movwf	0x50, 0x1          	MOVWF	_whereami, B
                                           ;	.line	418; lena.c	break;
001e48   d05b     bra	0x1f00               	BRA	_00332_DS_
                                           _00303_DS_:
001e4a   010f     movlb	0xf                	BANKSEL	_thour
                                           ;	.line	420; lena.c	thour++;
001e4c   2b46     incf	0x46, 0x1, 0x1      	INCF	_thour, F, B
001e4e   010f     movlb	0xf                	BANKSEL	_thour
                                           ;	.line	421; lena.c	if (thour == 24) {
001e50   5146     movf	0x46, 0, 0x1        	MOVF	_thour, W, B
001e52   0a18     xorlw	0x18               	XORLW	0x18
001e54   e001     bz	0x1e58                	BZ	_00360_DS_
001e56   d054     bra	0x1f00               	BRA	_00332_DS_
                                           _00360_DS_:
001e58   010f     movlb	0xf                	BANKSEL	_thour
                                           ;	.line	422; lena.c	thour = 0;
001e5a   6b46     clrf	0x46, 0x1           	CLRF	_thour, B
                                           ;	.line	424; lena.c	break;
001e5c   d051     bra	0x1f00               	BRA	_00332_DS_
                                           _00306_DS_:
001e5e   010f     movlb	0xf                	BANKSEL	_tmin
                                           ;	.line	426; lena.c	if (tmin == 59) {
001e60   5147     movf	0x47, 0, 0x1        	MOVF	_tmin, W, B
001e62   0a3b     xorlw	0x3b               	XORLW	0x3b
001e64   e103     bnz	0x1e6c               	BNZ	_00308_DS_
                                           _00362_DS_:
001e66   010f     movlb	0xf                	BANKSEL	_tmin
                                           ;	.line	427; lena.c	tmin = 0;
001e68   6b47     clrf	0x47, 0x1           	CLRF	_tmin, B
001e6a   d04a     bra	0x1f00               	BRA	_00332_DS_
                                           _00308_DS_:
001e6c   010f     movlb	0xf                	BANKSEL	_tmin
                                           ;	.line	429; lena.c	tmin++;
001e6e   2b47     incf	0x47, 0x1, 0x1      	INCF	_tmin, F, B
                                           ;	.line	431; lena.c	break;
001e70   d047     bra	0x1f00               	BRA	_00332_DS_
                                           _00310_DS_:
001e72   010f     movlb	0xf                	BANKSEL	_tsec
                                           ;	.line	433; lena.c	if (tsec == 59) {
001e74   5148     movf	0x48, 0, 0x1        	MOVF	_tsec, W, B
001e76   0a3b     xorlw	0x3b               	XORLW	0x3b
001e78   e103     bnz	0x1e80               	BNZ	_00312_DS_
                                           _00364_DS_:
001e7a   010f     movlb	0xf                	BANKSEL	_tsec
                                           ;	.line	434; lena.c	tsec = 0;
001e7c   6b48     clrf	0x48, 0x1           	CLRF	_tsec, B
001e7e   d040     bra	0x1f00               	BRA	_00332_DS_
                                           _00312_DS_:
001e80   010f     movlb	0xf                	BANKSEL	_tsec
                                           ;	.line	436; lena.c	tsec++;
001e82   2b48     incf	0x48, 0x1, 0x1      	INCF	_tsec, F, B
                                           ;	.line	438; lena.c	break;
001e84   d03d     bra	0x1f00               	BRA	_00332_DS_
                                           _00314_DS_:
                                           ;	.line	440; lena.c	whereami = SET_ALARM;
001e86   0e06     movlw	0x6                	MOVLW	0x06
001e88   010f     movlb	0xf                	BANKSEL	_whereami
001e8a   6f50     movwf	0x50, 0x1          	MOVWF	_whereami, B
                                           ;	.line	441; lena.c	break;
001e8c   d039     bra	0x1f00               	BRA	_00332_DS_
                                           _00315_DS_:
                                           ;	.line	443; lena.c	alarm_set ^= 1;
001e8e   0e01     movlw	0x1                	MOVLW	0x01
001e90   010f     movlb	0xf                	BANKSEL	_alarm_set
001e92   1b4d     xorwf	0x4d, 0x1, 0x1     	XORWF	_alarm_set, F, B
                                           ;	.line	444; lena.c	break;
001e94   d035     bra	0x1f00               	BRA	_00332_DS_
                                           _00316_DS_:
001e96   010f     movlb	0xf                	BANKSEL	_ahour
                                           ;	.line	446; lena.c	if (ahour == 23) {
001e98   5149     movf	0x49, 0, 0x1        	MOVF	_ahour, W, B
001e9a   0a17     xorlw	0x17               	XORLW	0x17
001e9c   e103     bnz	0x1ea4               	BNZ	_00318_DS_
                                           _00367_DS_:
001e9e   010f     movlb	0xf                	BANKSEL	_ahour
                                           ;	.line	447; lena.c	ahour = 0;
001ea0   6b49     clrf	0x49, 0x1           	CLRF	_ahour, B
001ea2   d002     bra	0x1ea8               	BRA	_00319_DS_
                                           _00318_DS_:
001ea4   010f     movlb	0xf                	BANKSEL	_ahour
                                           ;	.line	449; lena.c	ahour++;
001ea6   2b49     incf	0x49, 0x1, 0x1      	INCF	_ahour, F, B
                                           _00319_DS_:
                                           ;	.line	451; lena.c	ahour_o = ahour;
001ea8   cf49     movff	0xf49, 0xf4b       	MOVFF	_ahour, _ahour_o
001eaa   ff4b
                                           ;	.line	452; lena.c	break;
001eac   d029     bra	0x1f00               	BRA	_00332_DS_
                                           _00320_DS_:
001eae   010f     movlb	0xf                	BANKSEL	_amin
                                           ;	.line	454; lena.c	if (amin == 59) {
001eb0   514a     movf	0x4a, 0, 0x1        	MOVF	_amin, W, B
001eb2   0a3b     xorlw	0x3b               	XORLW	0x3b
001eb4   e103     bnz	0x1ebc               	BNZ	_00322_DS_
                                           _00369_DS_:
001eb6   010f     movlb	0xf                	BANKSEL	_amin
                                           ;	.line	455; lena.c	amin = 0;
001eb8   6b4a     clrf	0x4a, 0x1           	CLRF	_amin, B
001eba   d002     bra	0x1ec0               	BRA	_00323_DS_
                                           _00322_DS_:
001ebc   010f     movlb	0xf                	BANKSEL	_amin
                                           ;	.line	457; lena.c	amin++;
001ebe   2b4a     incf	0x4a, 0x1, 0x1      	INCF	_amin, F, B
                                           _00323_DS_:
                                           ;	.line	459; lena.c	amin_o = amin;
001ec0   cf4a     movff	0xf4a, 0xf4c       	MOVFF	_amin, _amin_o
001ec2   ff4c
                                           ;	.line	460; lena.c	break;
001ec4   d01d     bra	0x1f00               	BRA	_00332_DS_
                                           _00324_DS_:
                                           ;	.line	463; lena.c	break;
001ec6   d01c     bra	0x1f00               	BRA	_00332_DS_
                                           _00325_DS_:
                                           ;	.line	466; lena.c	if (snooze < SNOOZE_MAX) {
001ec8   0e0c     movlw	0xc                	MOVLW	0x0c
001eca   010f     movlb	0xf                	BANKSEL	_snooze
001ecc   5d4e     subwf	0x4e, 0, 0x1       	SUBWF	_snooze, W, B
001ece   e218     bc	0x1f00                	BC	_00332_DS_
                                           ;	.line	467; lena.c	inc_amin(SNOOZE_MINUTE); // modifie le réveil
001ed0   0e05     movlw	0x5                	MOVLW	0x05
001ed2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001ed4   ecde     call	0x31bc, 0           	CALL	_inc_amin
001ed6   f018
001ed8   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
001eda   010f     movlb	0xf                	BANKSEL	_snooze
                                           ;	.line	468; lena.c	snooze++; // augmente le compteur de snooze
001edc   2b4e     incf	0x4e, 0x1, 0x1      	INCF	_snooze, F, B
                                           ;	.line	469; lena.c	LATJbits.LATJ1 = 0; // switch LED 2 off
001ede   9291     bcf	0x91, 0x1, 0         	BCF	_LATJbits, 1
                                           ;	.line	470; lena.c	LATJbits.LATJ2 = 0; // switch LED 3 off
001ee0   9491     bcf	0x91, 0x2, 0         	BCF	_LATJbits, 2
                                           ;	.line	471; lena.c	whereami = SNOOZE;
001ee2   0e0b     movlw	0xb                	MOVLW	0x0b
001ee4   010f     movlb	0xf                	BANKSEL	_whereami
001ee6   6f50     movwf	0x50, 0x1          	MOVWF	_whereami, B
                                           ;	.line	474; lena.c	break;
001ee8   d00b     bra	0x1f00               	BRA	_00332_DS_
                                           _00328_DS_:
                                           ;	.line	477; lena.c	if (snooze < SNOOZE_MAX) {
001eea   0e0c     movlw	0xc                	MOVLW	0x0c
001eec   010f     movlb	0xf                	BANKSEL	_snooze
001eee   5d4e     subwf	0x4e, 0, 0x1       	SUBWF	_snooze, W, B
001ef0   e207     bc	0x1f00                	BC	_00332_DS_
                                           ;	.line	478; lena.c	inc_amin(SNOOZE_MINUTE); // modifie le réveil
001ef2   0e05     movlw	0x5                	MOVLW	0x05
001ef4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001ef6   ecde     call	0x31bc, 0           	CALL	_inc_amin
001ef8   f018
001efa   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
001efc   010f     movlb	0xf                	BANKSEL	_snooze
                                           ;	.line	479; lena.c	snooze++; // augmente le compteur de snooze
001efe   2b4e     incf	0x4e, 0x1, 0x1      	INCF	_snooze, F, B
                                           _00332_DS_:
001f00   010f     movlb	0xf                	BANKSEL	_button2
                                           ;	.line	486; lena.c	button2 = 0; // remet le flag du boutton 2 à 0
001f02   6b53     clrf	0x53, 0x1           	CLRF	_button2, B
                                           _00338_DS_:
001f04   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
001f06   f000
001f08   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001f0a   ffd9
001f0c   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_lena__alarm	code
                                           _alarm:
                                           ;	.line	322; lena.c	void alarm(void)
0032f6   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0032f8   ffe5
0032fa   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0032fc   ffd9
0032fe   010f     movlb	0xf                	BANKSEL	_thour
                                           ;	.line	326; lena.c	if ((thour == ahour) && (tmin == amin) && alarm_set) {
003300   5146     movf	0x46, 0, 0x1        	MOVF	_thour, W, B
003302   010f     movlb	0xf                	BANKSEL	_ahour
003304   1949     xorwf	0x49, 0, 0x1       	XORWF	_ahour, W, B
003306   e001     bz	0x330a                	BZ	_00274_DS_
003308   d038     bra	0x337a               	BRA	_00262_DS_
                                           _00274_DS_:
00330a   010f     movlb	0xf                	BANKSEL	_tmin
00330c   5147     movf	0x47, 0, 0x1        	MOVF	_tmin, W, B
00330e   010f     movlb	0xf                	BANKSEL	_amin
003310   194a     xorwf	0x4a, 0, 0x1       	XORWF	_amin, W, B
003312   e001     bz	0x3316                	BZ	_00276_DS_
003314   d032     bra	0x337a               	BRA	_00262_DS_
                                           _00276_DS_:
003316   010f     movlb	0xf                	BANKSEL	_alarm_set
003318   514d     movf	0x4d, 0, 0x1        	MOVF	_alarm_set, W, B
00331a   e02f     bz	0x337a                	BZ	_00262_DS_
                                           ;	.line	329; lena.c	if ((tsec < 31) && (stop_ringing == 0)) {
00331c   0e1f     movlw	0x1f               	MOVLW	0x1f
00331e   010f     movlb	0xf                	BANKSEL	_tsec
003320   5d48     subwf	0x48, 0, 0x1       	SUBWF	_tsec, W, B
003322   e20f     bc	0x3342                	BC	_00255_DS_
003324   010f     movlb	0xf                	BANKSEL	_stop_ringing
003326   514f     movf	0x4f, 0, 0x1        	MOVF	_stop_ringing, W, B
003328   e10c     bnz	0x3342               	BNZ	_00255_DS_
00332a   010f     movlb	0xf                	BANKSEL	_whereami
                                           ;	.line	330; lena.c	if ((whereami == DISPLAY) || (whereami == SNOOZE)) {
00332c   5150     movf	0x50, 0, 0x1        	MOVF	_whereami, W, B
00332e   0a09     xorlw	0x9                	XORLW	0x09
003330   e004     bz	0x333a                	BZ	_00244_DS_
                                           _00279_DS_:
003332   010f     movlb	0xf                	BANKSEL	_whereami
003334   5150     movf	0x50, 0, 0x1        	MOVF	_whereami, W, B
003336   0a0b     xorlw	0xb                	XORLW	0x0b
003338   e120     bnz	0x337a               	BNZ	_00262_DS_
                                           _00244_DS_:
                                           ;	.line	331; lena.c	whereami = ALARM;
00333a   0e0a     movlw	0xa                	MOVLW	0x0a
00333c   010f     movlb	0xf                	BANKSEL	_whereami
00333e   6f50     movwf	0x50, 0x1          	MOVWF	_whereami, B
003340   d01c     bra	0x337a               	BRA	_00262_DS_
                                           _00255_DS_:
                                           ;	.line	334; lena.c	} else if (tsec > 30) {
003342   0e1f     movlw	0x1f               	MOVLW	0x1f
003344   010f     movlb	0xf                	BANKSEL	_tsec
003346   5d48     subwf	0x48, 0, 0x1       	SUBWF	_tsec, W, B
003348   e318     bnc	0x337a               	BNC	_00262_DS_
00334a   010f     movlb	0xf                	BANKSEL	_stop_ringing
                                           ;	.line	335; lena.c	stop_ringing = 0; // remet à 0 si l'alarme a été éteinte à la main
00334c   6b4f     clrf	0x4f, 0x1           	CLRF	_stop_ringing, B
                                           ;	.line	336; lena.c	LATJbits.LATJ1 = 0; // switch LED 2 off
00334e   9291     bcf	0x91, 0x1, 0         	BCF	_LATJbits, 1
                                           ;	.line	337; lena.c	LATJbits.LATJ2 = 0; // switch LED 3 off
003350   9491     bcf	0x91, 0x2, 0         	BCF	_LATJbits, 2
003352   010f     movlb	0xf                	BANKSEL	_snooze
                                           ;	.line	339; lena.c	if (snooze) {
003354   514e     movf	0x4e, 0, 0x1        	MOVF	_snooze, W, B
003356   e00a     bz	0x336c                	BZ	_00250_DS_
                                           ;	.line	340; lena.c	ahour = ahour_o; // remet le réveil
003358   cf4b     movff	0xf4b, 0xf49       	MOVFF	_ahour_o, _ahour
00335a   ff49
                                           ;	.line	341; lena.c	amin = amin_o;
00335c   cf4c     movff	0xf4c, 0xf4a       	MOVFF	_amin_o, _amin
00335e   ff4a
003360   010f     movlb	0xf                	BANKSEL	_snooze
                                           ;	.line	342; lena.c	snooze = 0;
003362   6b4e     clrf	0x4e, 0x1           	CLRF	_snooze, B
                                           ;	.line	343; lena.c	whereami = DISPLAY;
003364   0e09     movlw	0x9                	MOVLW	0x09
003366   010f     movlb	0xf                	BANKSEL	_whereami
003368   6f50     movwf	0x50, 0x1          	MOVWF	_whereami, B
00336a   d007     bra	0x337a               	BRA	_00262_DS_
                                           _00250_DS_:
00336c   010f     movlb	0xf                	BANKSEL	_whereami
                                           ;	.line	344; lena.c	} else if (whereami == ALARM) { // si l'alarme sonnait toujours, on
00336e   5150     movf	0x50, 0, 0x1        	MOVF	_whereami, W, B
003370   0a0a     xorlw	0xa                	XORLW	0x0a
003372   e103     bnz	0x337a               	BNZ	_00262_DS_
                                           ;	.line	345; lena.c	whereami = DISPLAY;         // revient à l'affichage de l'heure
003374   0e09     movlw	0x9                	MOVLW	0x09
003376   010f     movlb	0xf                	BANKSEL	_whereami
003378   6f50     movwf	0x50, 0x1          	MOVWF	_whereami, B
                                           _00262_DS_:
00337a   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00337c   ffd9
00337e   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_lena__refresh_lcd	code
                                           _refresh_lcd:
                                           ;	.line	223; lena.c	void refresh_lcd(void)
00001c   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00001e   ffe5
000020   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000022   ffd9
000024   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000026   ffe5
000028   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00002a   ffe5
00002c   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00002e   ffe5
000030   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
000032   ffe5
000034   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
000036   ffe5
000038   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
00003a   ffe5
00003c   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
00003e   ffe5
000040   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
000042   ffe5
000044   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
000046   ffe5
000048   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
00004a   ffe5
00004c   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
00004e   ffe5
000050   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
000052   ffe5
000054   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
000056   ffe5
000058   c00d     movff	0xd, 0xfe5         	MOVFF	r0x0d, POSTDEC1
00005a   ffe5
00005c   c00e     movff	0xe, 0xfe5         	MOVFF	r0x0e, POSTDEC1
00005e   ffe5
000060   010f     movlb	0xf                	BANKSEL	(_overflows + 3)
                                           ;	.line	225; lena.c	sec = overflows/F;
000062   5145     movf	0x45, 0, 0x1        	MOVF	(_overflows + 3), W, B
000064   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000066   010f     movlb	0xf                	BANKSEL	(_overflows + 2)
000068   5144     movf	0x44, 0, 0x1        	MOVF	(_overflows + 2), W, B
00006a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00006c   010f     movlb	0xf                	BANKSEL	(_overflows + 1)
00006e   5143     movf	0x43, 0, 0x1        	MOVF	(_overflows + 1), W, B
000070   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000072   010f     movlb	0xf                	BANKSEL	_overflows
000074   5142     movf	0x42, 0, 0x1        	MOVF	_overflows, W, B
000076   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000078   ec6d     call	0x24da, 0           	CALL	___ulong2fs
00007a   f012
00007c   6e00     movwf	0, 0               	MOVWF	r0x00
00007e   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
000080   f001
000082   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
000084   f002
000086   cfe9     movff	0xfe9, 0x3         	MOVFF	FSR0L, r0x03
000088   f003
00008a   0e04     movlw	0x4                	MOVLW	0x04
00008c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00008e   0e42     movlw	0x42               	MOVLW	0x42
000090   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000092   0ebe     movlw	0xbe               	MOVLW	0xbe
000094   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000096   0ebb     movlw	0xbb               	MOVLW	0xbb
000098   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00009a   0e2a     movlw	0x2a               	MOVLW	0x2a
00009c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00009e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0000a0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0000a2   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0000a4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0000a6   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0000a8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0000aa   5000     movf	0, 0, 0             	MOVF	r0x00, W
0000ac   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0000ae   ec03     call	0x1206, 0           	CALL	___fsdiv
0000b0   f009
0000b2   6e00     movwf	0, 0               	MOVWF	r0x00
0000b4   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
0000b6   f001
0000b8   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
0000ba   f002
0000bc   cfe9     movff	0xfe9, 0x3         	MOVFF	FSR0L, r0x03
0000be   f003
0000c0   0e08     movlw	0x8                	MOVLW	0x08
0000c2   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0000c4   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0000c6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0000c8   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0000ca   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0000cc   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0000ce   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0000d0   5000     movf	0, 0, 0             	MOVF	r0x00, W
0000d2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0000d4   ec44     call	0x2a88, 0           	CALL	___fs2ulong
0000d6   f015
0000d8   010f     movlb	0xf                	BANKSEL	_sec
0000da   6f55     movwf	0x55, 0x1          	MOVWF	_sec, B
0000dc   cff3     movff	0xff3, 0xf56       	MOVFF	PRODL, (_sec + 1)
0000de   ff56
0000e0   cff4     movff	0xff4, 0xf57       	MOVFF	PRODH, (_sec + 2)
0000e2   ff57
0000e4   cfe9     movff	0xfe9, 0xf58       	MOVFF	FSR0L, (_sec + 3)
0000e6   ff58
0000e8   0e04     movlw	0x4                	MOVLW	0x04
0000ea   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0000ec   010f     movlb	0xf                	BANKSEL	(_overflows + 3)
                                           ;	.line	226; lena.c	decisec = ((10*overflows)/F);
0000ee   5145     movf	0x45, 0, 0x1        	MOVF	(_overflows + 3), W, B
0000f0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0000f2   010f     movlb	0xf                	BANKSEL	(_overflows + 2)
0000f4   5144     movf	0x44, 0, 0x1        	MOVF	(_overflows + 2), W, B
0000f6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0000f8   010f     movlb	0xf                	BANKSEL	(_overflows + 1)
0000fa   5143     movf	0x43, 0, 0x1        	MOVF	(_overflows + 1), W, B
0000fc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0000fe   010f     movlb	0xf                	BANKSEL	_overflows
000100   5142     movf	0x42, 0, 0x1        	MOVF	_overflows, W, B
000102   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000104   0e00     movlw	0                  	MOVLW	0x00
000106   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000108   0e00     movlw	0                  	MOVLW	0x00
00010a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00010c   0e00     movlw	0                  	MOVLW	0x00
00010e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000110   0e0a     movlw	0xa                	MOVLW	0x0a
000112   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000114   ec87     call	0x1f0e, 0           	CALL	__mullong
000116   f00f
000118   6e00     movwf	0, 0               	MOVWF	r0x00
00011a   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
00011c   f001
00011e   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
000120   f002
000122   cfe9     movff	0xfe9, 0x3         	MOVFF	FSR0L, r0x03
000124   f003
000126   0e08     movlw	0x8                	MOVLW	0x08
000128   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00012a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00012c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00012e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000130   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000132   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000134   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000136   5000     movf	0, 0, 0             	MOVF	r0x00, W
000138   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00013a   ec6d     call	0x24da, 0           	CALL	___ulong2fs
00013c   f012
00013e   6e00     movwf	0, 0               	MOVWF	r0x00
000140   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
000142   f001
000144   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
000146   f002
000148   cfe9     movff	0xfe9, 0x3         	MOVFF	FSR0L, r0x03
00014a   f003
00014c   0e04     movlw	0x4                	MOVLW	0x04
00014e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000150   0e42     movlw	0x42               	MOVLW	0x42
000152   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000154   0ebe     movlw	0xbe               	MOVLW	0xbe
000156   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000158   0ebb     movlw	0xbb               	MOVLW	0xbb
00015a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00015c   0e2a     movlw	0x2a               	MOVLW	0x2a
00015e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000160   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000162   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000164   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000166   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000168   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00016a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00016c   5000     movf	0, 0, 0             	MOVF	r0x00, W
00016e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000170   ec03     call	0x1206, 0           	CALL	___fsdiv
000172   f009
000174   6e00     movwf	0, 0               	MOVWF	r0x00
000176   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
000178   f001
00017a   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
00017c   f002
00017e   cfe9     movff	0xfe9, 0x3         	MOVFF	FSR0L, r0x03
000180   f003
000182   0e08     movlw	0x8                	MOVLW	0x08
000184   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000186   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000188   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00018a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00018c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00018e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000190   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000192   5000     movf	0, 0, 0             	MOVF	r0x00, W
000194   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000196   ec44     call	0x2a88, 0           	CALL	___fs2ulong
000198   f015
00019a   010f     movlb	0xf                	BANKSEL	_decisec
00019c   6f59     movwf	0x59, 0x1          	MOVWF	_decisec, B
00019e   cff3     movff	0xff3, 0xf5a       	MOVFF	PRODL, (_decisec + 1)
0001a0   ff5a
0001a2   cff4     movff	0xff4, 0xf5b       	MOVFF	PRODH, (_decisec + 2)
0001a4   ff5b
0001a6   cfe9     movff	0xfe9, 0xf5c       	MOVFF	FSR0L, (_decisec + 3)
0001a8   ff5c
0001aa   0e04     movlw	0x4                	MOVLW	0x04
0001ac   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	227; lena.c	ds = decisec%10;
0001ae   0e00     movlw	0                  	MOVLW	0x00
0001b0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0001b2   0e00     movlw	0                  	MOVLW	0x00
0001b4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0001b6   0e00     movlw	0                  	MOVLW	0x00
0001b8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0001ba   0e0a     movlw	0xa                	MOVLW	0x0a
0001bc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0001be   010f     movlb	0xf                	BANKSEL	(_decisec + 3)
0001c0   515c     movf	0x5c, 0, 0x1        	MOVF	(_decisec + 3), W, B
0001c2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0001c4   010f     movlb	0xf                	BANKSEL	(_decisec + 2)
0001c6   515b     movf	0x5b, 0, 0x1        	MOVF	(_decisec + 2), W, B
0001c8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0001ca   010f     movlb	0xf                	BANKSEL	(_decisec + 1)
0001cc   515a     movf	0x5a, 0, 0x1        	MOVF	(_decisec + 1), W, B
0001ce   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0001d0   010f     movlb	0xf                	BANKSEL	_decisec
0001d2   5159     movf	0x59, 0, 0x1        	MOVF	_decisec, W, B
0001d4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0001d6   ec2b     call	0x2656, 0           	CALL	__modulong
0001d8   f013
0001da   6e00     movwf	0, 0               	MOVWF	r0x00
0001dc   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
0001de   f001
0001e0   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
0001e2   f002
0001e4   cfe9     movff	0xfe9, 0x3         	MOVFF	FSR0L, r0x03
0001e6   f003
0001e8   0e08     movlw	0x8                	MOVLW	0x08
0001ea   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0001ec   5000     movf	0, 0, 0             	MOVF	r0x00, W
0001ee   010e     movlb	0xe                	BANKSEL	_ds
0001f0   6f51     movwf	0x51, 0x1          	MOVWF	_ds, B
0001f2   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0001f4   010e     movlb	0xe                	BANKSEL	(_ds + 1)
0001f6   6f52     movwf	0x52, 0x1          	MOVWF	(_ds + 1), B
                                           ;	.line	228; lena.c	h = (sec/3600)%24;
0001f8   0e00     movlw	0                  	MOVLW	0x00
0001fa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0001fc   0e00     movlw	0                  	MOVLW	0x00
0001fe   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000200   0e0e     movlw	0xe                	MOVLW	0x0e
000202   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000204   0e10     movlw	0x10               	MOVLW	0x10
000206   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000208   010f     movlb	0xf                	BANKSEL	(_sec + 3)
00020a   5158     movf	0x58, 0, 0x1        	MOVF	(_sec + 3), W, B
00020c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00020e   010f     movlb	0xf                	BANKSEL	(_sec + 2)
000210   5157     movf	0x57, 0, 0x1        	MOVF	(_sec + 2), W, B
000212   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000214   010f     movlb	0xf                	BANKSEL	(_sec + 1)
000216   5156     movf	0x56, 0, 0x1        	MOVF	(_sec + 1), W, B
000218   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00021a   010f     movlb	0xf                	BANKSEL	_sec
00021c   5155     movf	0x55, 0, 0x1        	MOVF	_sec, W, B
00021e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000220   ecbd     call	0x277a, 0           	CALL	__divulong
000222   f013
000224   6e00     movwf	0, 0               	MOVWF	r0x00
000226   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
000228   f001
00022a   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
00022c   f002
00022e   cfe9     movff	0xfe9, 0x3         	MOVFF	FSR0L, r0x03
000230   f003
000232   0e08     movlw	0x8                	MOVLW	0x08
000234   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000236   0e00     movlw	0                  	MOVLW	0x00
000238   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00023a   0e00     movlw	0                  	MOVLW	0x00
00023c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00023e   0e00     movlw	0                  	MOVLW	0x00
000240   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000242   0e18     movlw	0x18               	MOVLW	0x18
000244   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000246   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000248   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00024a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00024c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00024e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000250   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000252   5000     movf	0, 0, 0             	MOVF	r0x00, W
000254   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000256   ec2b     call	0x2656, 0           	CALL	__modulong
000258   f013
00025a   6e04     movwf	0x4, 0             	MOVWF	r0x04
00025c   cff3     movff	0xff3, 0x5         	MOVFF	PRODL, r0x05
00025e   f005
000260   cff4     movff	0xff4, 0x6         	MOVFF	PRODH, r0x06
000262   f006
000264   cfe9     movff	0xfe9, 0x7         	MOVFF	FSR0L, r0x07
000266   f007
000268   0e08     movlw	0x8                	MOVLW	0x08
00026a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00026c   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00026e   010e     movlb	0xe                	BANKSEL	_h
000270   6f53     movwf	0x53, 0x1          	MOVWF	_h, B
                                           ;	.line	229; lena.c	m = (sec-(sec/3600)*3600)/60;
000272   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000274   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000276   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000278   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00027a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00027c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00027e   5000     movf	0, 0, 0             	MOVF	r0x00, W
000280   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000282   0e00     movlw	0                  	MOVLW	0x00
000284   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000286   0e00     movlw	0                  	MOVLW	0x00
000288   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00028a   0e0e     movlw	0xe                	MOVLW	0x0e
00028c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00028e   0e10     movlw	0x10               	MOVLW	0x10
000290   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000292   ec87     call	0x1f0e, 0           	CALL	__mullong
000294   f00f
000296   6e00     movwf	0, 0               	MOVWF	r0x00
000298   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
00029a   f001
00029c   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
00029e   f002
0002a0   cfe9     movff	0xfe9, 0x3         	MOVFF	FSR0L, r0x03
0002a2   f003
0002a4   0e08     movlw	0x8                	MOVLW	0x08
0002a6   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0002a8   5000     movf	0, 0, 0             	MOVF	r0x00, W
0002aa   010f     movlb	0xf                	BANKSEL	_sec
0002ac   5d55     subwf	0x55, 0, 0x1       	SUBWF	_sec, W, B
0002ae   6e00     movwf	0, 0               	MOVWF	r0x00
0002b0   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0002b2   010f     movlb	0xf                	BANKSEL	(_sec + 1)
0002b4   5956     subwfb	0x56, 0, 0x1      	SUBWFB	(_sec + 1), W, B
0002b6   6e01     movwf	0x1, 0             	MOVWF	r0x01
0002b8   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0002ba   010f     movlb	0xf                	BANKSEL	(_sec + 2)
0002bc   5957     subwfb	0x57, 0, 0x1      	SUBWFB	(_sec + 2), W, B
0002be   6e02     movwf	0x2, 0             	MOVWF	r0x02
0002c0   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0002c2   010f     movlb	0xf                	BANKSEL	(_sec + 3)
0002c4   5958     subwfb	0x58, 0, 0x1      	SUBWFB	(_sec + 3), W, B
0002c6   6e03     movwf	0x3, 0             	MOVWF	r0x03
0002c8   0e00     movlw	0                  	MOVLW	0x00
0002ca   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0002cc   0e00     movlw	0                  	MOVLW	0x00
0002ce   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0002d0   0e00     movlw	0                  	MOVLW	0x00
0002d2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0002d4   0e3c     movlw	0x3c               	MOVLW	0x3c
0002d6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0002d8   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0002da   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0002dc   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0002de   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0002e0   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0002e2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0002e4   5000     movf	0, 0, 0             	MOVF	r0x00, W
0002e6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0002e8   ecbd     call	0x277a, 0           	CALL	__divulong
0002ea   f013
0002ec   6e00     movwf	0, 0               	MOVWF	r0x00
0002ee   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
0002f0   f001
0002f2   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
0002f4   f002
0002f6   cfe9     movff	0xfe9, 0x3         	MOVFF	FSR0L, r0x03
0002f8   f003
0002fa   0e08     movlw	0x8                	MOVLW	0x08
0002fc   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0002fe   5000     movf	0, 0, 0             	MOVF	r0x00, W
000300   010e     movlb	0xe                	BANKSEL	_m
000302   6f54     movwf	0x54, 0x1          	MOVWF	_m, B
000304   010f     movlb	0xf                	BANKSEL	_sec
                                           ;	.line	230; lena.c	s = sec-m*60;
000306   5155     movf	0x55, 0, 0x1        	MOVF	_sec, W, B
000308   6e00     movwf	0, 0               	MOVWF	r0x00
                                           ; ;multiply lit val:0x3c by variable _m and store in r0x01
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
00030a   010e     movlb	0xe                	BANKSEL	_m
00030c   5154     movf	0x54, 0, 0x1        	MOVF	_m, W, B
00030e   0d3c     mullw	0x3c               	MULLW	0x3c
000310   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
000312   f001
000314   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000316   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
000318   010e     movlb	0xe                	BANKSEL	_s
00031a   6f55     movwf	0x55, 0x1          	MOVWF	_s, B
00031c   010f     movlb	0xf                	BANKSEL	_on
                                           ;	.line	232; lena.c	if (!on && ds < 5) {
00031e   5151     movf	0x51, 0, 0x1        	MOVF	_on, W, B
000320   e136     bnz	0x38e                	BNZ	_00167_DS_
000322   0e00     movlw	0                  	MOVLW	0x00
000324   010e     movlb	0xe                	BANKSEL	(_ds + 1)
000326   5d52     subwf	0x52, 0, 0x1       	SUBWF	(_ds + 1), W, B
000328   e103     bnz	0x330                	BNZ	_00218_DS_
00032a   0e05     movlw	0x5                	MOVLW	0x05
00032c   010e     movlb	0xe                	BANKSEL	_ds
00032e   5d51     subwf	0x51, 0, 0x1       	SUBWF	_ds, W, B
                                           _00218_DS_:
000330   e22e     bc	0x38e                 	BC	_00167_DS_
                                           ;	.line	233; lena.c	LED0_IO ^= 1;
000332   6a00     clrf	0, 0                	CLRF	r0x00
000334   b091     btfsc	0x91, 0, 0         	BTFSC	_LATJbits, 0
000336   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
000338   0e01     movlw	0x1                	MOVLW	0x01
00033a   1a00     xorwf	0, 0x1, 0          	XORWF	r0x00, F
00033c   5000     movf	0, 0, 0             	MOVF	r0x00, W
00033e   0b01     andlw	0x1                	ANDLW	0x01
000340   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
000342   5091     movf	0x91, 0, 0          	MOVF	_LATJbits, W
000344   0bfe     andlw	0xfe               	ANDLW	0xfe
000346   10f4     iorwf	0xf4, 0, 0         	IORWF	PRODH, W
000348   6e91     movwf	0x91, 0            	MOVWF	_LATJbits
00034a   010f     movlb	0xf                	BANKSEL	_whereami
                                           ;	.line	234; lena.c	if (whereami == ALARM) {
00034c   5150     movf	0x50, 0, 0x1        	MOVF	_whereami, W, B
00034e   0a0a     xorlw	0xa                	XORLW	0x0a
000350   e11b     bnz	0x388                	BNZ	_00165_DS_
                                           ;	.line	235; lena.c	LED1_IO ^= 1;
000352   6a00     clrf	0, 0                	CLRF	r0x00
000354   b291     btfsc	0x91, 0x1, 0       	BTFSC	_LATJbits, 1
000356   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
000358   0e01     movlw	0x1                	MOVLW	0x01
00035a   1a00     xorwf	0, 0x1, 0          	XORWF	r0x00, F
00035c   5000     movf	0, 0, 0             	MOVF	r0x00, W
00035e   0b01     andlw	0x1                	ANDLW	0x01
000360   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
000362   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
000364   5091     movf	0x91, 0, 0          	MOVF	_LATJbits, W
000366   0bfd     andlw	0xfd               	ANDLW	0xfd
000368   10f4     iorwf	0xf4, 0, 0         	IORWF	PRODH, W
00036a   6e91     movwf	0x91, 0            	MOVWF	_LATJbits
                                           ;	.line	236; lena.c	LED2_IO ^= 1;
00036c   6a00     clrf	0, 0                	CLRF	r0x00
00036e   b491     btfsc	0x91, 0x2, 0       	BTFSC	_LATJbits, 2
000370   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
000372   0e01     movlw	0x1                	MOVLW	0x01
000374   1a00     xorwf	0, 0x1, 0          	XORWF	r0x00, F
000376   5000     movf	0, 0, 0             	MOVF	r0x00, W
000378   0b01     andlw	0x1                	ANDLW	0x01
00037a   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
00037c   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
00037e   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
000380   5091     movf	0x91, 0, 0          	MOVF	_LATJbits, W
000382   0bfb     andlw	0xfb               	ANDLW	0xfb
000384   10f4     iorwf	0xf4, 0, 0         	IORWF	PRODH, W
000386   6e91     movwf	0x91, 0            	MOVWF	_LATJbits
                                           _00165_DS_:
                                           ;	.line	238; lena.c	on = 1;
000388   0e01     movlw	0x1                	MOVLW	0x01
00038a   010f     movlb	0xf                	BANKSEL	_on
00038c   6f51     movwf	0x51, 0x1          	MOVWF	_on, B
                                           _00167_DS_:
00038e   010f     movlb	0xf                	BANKSEL	_on
                                           ;	.line	240; lena.c	if (on && ds >= 5) {
000390   5151     movf	0x51, 0, 0x1        	MOVF	_on, W, B
000392   e035     bz	0x3fe                 	BZ	_00172_DS_
000394   0e00     movlw	0                  	MOVLW	0x00
000396   010e     movlb	0xe                	BANKSEL	(_ds + 1)
000398   5d52     subwf	0x52, 0, 0x1       	SUBWF	(_ds + 1), W, B
00039a   e103     bnz	0x3a2                	BNZ	_00224_DS_
00039c   0e05     movlw	0x5                	MOVLW	0x05
00039e   010e     movlb	0xe                	BANKSEL	_ds
0003a0   5d51     subwf	0x51, 0, 0x1       	SUBWF	_ds, W, B
                                           _00224_DS_:
0003a2   e32d     bnc	0x3fe                	BNC	_00172_DS_
                                           ;	.line	241; lena.c	LED0_IO ^= 1;
0003a4   6a00     clrf	0, 0                	CLRF	r0x00
0003a6   b091     btfsc	0x91, 0, 0         	BTFSC	_LATJbits, 0
0003a8   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
0003aa   0e01     movlw	0x1                	MOVLW	0x01
0003ac   1a00     xorwf	0, 0x1, 0          	XORWF	r0x00, F
0003ae   5000     movf	0, 0, 0             	MOVF	r0x00, W
0003b0   0b01     andlw	0x1                	ANDLW	0x01
0003b2   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
0003b4   5091     movf	0x91, 0, 0          	MOVF	_LATJbits, W
0003b6   0bfe     andlw	0xfe               	ANDLW	0xfe
0003b8   10f4     iorwf	0xf4, 0, 0         	IORWF	PRODH, W
0003ba   6e91     movwf	0x91, 0            	MOVWF	_LATJbits
0003bc   010f     movlb	0xf                	BANKSEL	_whereami
                                           ;	.line	242; lena.c	if (whereami == ALARM) {
0003be   5150     movf	0x50, 0, 0x1        	MOVF	_whereami, W, B
0003c0   0a0a     xorlw	0xa                	XORLW	0x0a
0003c2   e11b     bnz	0x3fa                	BNZ	_00170_DS_
                                           ;	.line	243; lena.c	LED1_IO ^= 1;
0003c4   6a00     clrf	0, 0                	CLRF	r0x00
0003c6   b291     btfsc	0x91, 0x1, 0       	BTFSC	_LATJbits, 1
0003c8   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
0003ca   0e01     movlw	0x1                	MOVLW	0x01
0003cc   1a00     xorwf	0, 0x1, 0          	XORWF	r0x00, F
0003ce   5000     movf	0, 0, 0             	MOVF	r0x00, W
0003d0   0b01     andlw	0x1                	ANDLW	0x01
0003d2   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
0003d4   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
0003d6   5091     movf	0x91, 0, 0          	MOVF	_LATJbits, W
0003d8   0bfd     andlw	0xfd               	ANDLW	0xfd
0003da   10f4     iorwf	0xf4, 0, 0         	IORWF	PRODH, W
0003dc   6e91     movwf	0x91, 0            	MOVWF	_LATJbits
                                           ;	.line	244; lena.c	LED2_IO ^= 1;
0003de   6a00     clrf	0, 0                	CLRF	r0x00
0003e0   b491     btfsc	0x91, 0x2, 0       	BTFSC	_LATJbits, 2
0003e2   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
0003e4   0e01     movlw	0x1                	MOVLW	0x01
0003e6   1a00     xorwf	0, 0x1, 0          	XORWF	r0x00, F
0003e8   5000     movf	0, 0, 0             	MOVF	r0x00, W
0003ea   0b01     andlw	0x1                	ANDLW	0x01
0003ec   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
0003ee   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
0003f0   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
0003f2   5091     movf	0x91, 0, 0          	MOVF	_LATJbits, W
0003f4   0bfb     andlw	0xfb               	ANDLW	0xfb
0003f6   10f4     iorwf	0xf4, 0, 0         	IORWF	PRODH, W
0003f8   6e91     movwf	0x91, 0            	MOVWF	_LATJbits
                                           _00170_DS_:
0003fa   010f     movlb	0xf                	BANKSEL	_on
                                           ;	.line	246; lena.c	on = 0;
0003fc   6b51     clrf	0x51, 0x1           	CLRF	_on, B
                                           _00172_DS_:
0003fe   010f     movlb	0xf                	BANKSEL	_tsec
                                           ;	.line	249; lena.c	if (tsec != s)
000400   5148     movf	0x48, 0, 0x1        	MOVF	_tsec, W, B
000402   010e     movlb	0xe                	BANKSEL	_s
000404   1955     xorwf	0x55, 0, 0x1       	XORWF	_s, W, B
000406   e002     bz	0x40c                 	BZ	_00175_DS_
                                           ;	.line	250; lena.c	tsec = s;
000408   ce55     movff	0xe55, 0xf48       	MOVFF	_s, _tsec
00040a   ff48
                                           _00175_DS_:
00040c   010f     movlb	0xf                	BANKSEL	_tmin
                                           ;	.line	251; lena.c	if (tmin != m)
00040e   5147     movf	0x47, 0, 0x1        	MOVF	_tmin, W, B
000410   010e     movlb	0xe                	BANKSEL	_m
000412   1954     xorwf	0x54, 0, 0x1       	XORWF	_m, W, B
000414   e002     bz	0x41a                 	BZ	_00177_DS_
                                           ;	.line	252; lena.c	tmin = m;
000416   ce54     movff	0xe54, 0xf47       	MOVFF	_m, _tmin
000418   ff47
                                           _00177_DS_:
00041a   010f     movlb	0xf                	BANKSEL	_thour
                                           ;	.line	253; lena.c	if (thour != h)
00041c   5146     movf	0x46, 0, 0x1        	MOVF	_thour, W, B
00041e   010e     movlb	0xe                	BANKSEL	_h
000420   1953     xorwf	0x53, 0, 0x1       	XORWF	_h, W, B
000422   e002     bz	0x428                 	BZ	_00179_DS_
                                           ;	.line	254; lena.c	thour = h;
000424   ce53     movff	0xe53, 0xf46       	MOVFF	_h, _thour
000426   ff46
                                           _00179_DS_:
                                           ;	.line	256; lena.c	switch (whereami) {
000428   0e01     movlw	0x1                	MOVLW	0x01
00042a   010f     movlb	0xf                	BANKSEL	_whereami
00042c   5d50     subwf	0x50, 0, 0x1       	SUBWF	_whereami, W, B
00042e   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
000430   ef9f     goto	0x93e               	GOTO	_00200_DS_
000432   f004
000434   0e0c     movlw	0xc                	MOVLW	0x0c
000436   010f     movlb	0xf                	BANKSEL	_whereami
000438   5d50     subwf	0x50, 0, 0x1       	SUBWF	_whereami, W, B
00043a   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00043c   ef9f     goto	0x93e               	GOTO	_00200_DS_
00043e   f004
000440   010f     movlb	0xf                	BANKSEL	_whereami
000442   0550     decf	0x50, 0, 0x1        	DECF	_whereami, W, B
000444   6e00     movwf	0, 0               	MOVWF	r0x00
000446   c00f     movff	0xf, 0xfe5         	MOVFF	r0x0f, POSTDEC1
000448   ffe5
00044a   c010     movff	0x10, 0xfe5        	MOVFF	r0x10, POSTDEC1
00044c   ffe5
00044e   6a10     clrf	0x10, 0             	CLRF	r0x10
000450   3400     rlcf	0, 0, 0             	RLCF	r0x00, W
000452   3610     rlcf	0x10, 0x1, 0        	RLCF	r0x10, F
000454   34e8     rlcf	0xe8, 0, 0          	RLCF	WREG, W
000456   3610     rlcf	0x10, 0x1, 0        	RLCF	r0x10, F
000458   0bfc     andlw	0xfc               	ANDLW	0xfc
00045a   6e0f     movwf	0xf, 0             	MOVWF	r0x0f
00045c   0e00     movlw	0                  	MOVLW	UPPER(_00238_DS_)
00045e   6efb     movwf	0xfb, 0            	MOVWF	PCLATU
000460   0e04     movlw	0x4                	MOVLW	HIGH(_00238_DS_)
000462   6efa     movwf	0xfa, 0            	MOVWF	PCLATH
000464   0e7c     movlw	0x7c               	MOVLW	LOW(_00238_DS_)
000466   260f     addwf	0xf, 0x1, 0        	ADDWF	r0x0f, F
000468   5010     movf	0x10, 0, 0          	MOVF	r0x10, W
00046a   22fa     addwfc	0xfa, 0x1, 0      	ADDWFC	PCLATH, F
00046c   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00046e   2afb     incf	0xfb, 0x1, 0        	INCF	PCLATU, F
000470   500f     movf	0xf, 0, 0           	MOVF	r0x0f, W
000472   cfe4     movff	0xfe4, 0x10        	MOVFF	PREINC1, r0x10
000474   f010
000476   cfe4     movff	0xfe4, 0xf         	MOVFF	PREINC1, r0x0f
000478   f00f
00047a   6ef9     movwf	0xf9, 0            	MOVWF	PCL
                                           _00238_DS_:
00047c   ef54     goto	0x4a8               	GOTO	_00180_DS_
00047e   f002
000480   ef6c     goto	0x4d8               	GOTO	_00181_DS_
000482   f002
000484   ef99     goto	0x532               	GOTO	_00182_DS_
000486   f002
000488   efc5     goto	0x58a               	GOTO	_00183_DS_
00048a   f002
00048c   eff1     goto	0x5e2               	GOTO	_00184_DS_
00048e   f002
000490   ef08     goto	0x610               	GOTO	_00185_DS_
000492   f003
000494   ef39     goto	0x672               	GOTO	_00189_DS_
000496   f003
000498   ef5e     goto	0x6bc               	GOTO	_00190_DS_
00049a   f003
00049c   ef83     goto	0x706               	GOTO	_00191_DS_
00049e   f003
0004a0   efec     goto	0x7d8               	GOTO	_00195_DS_
0004a2   f003
0004a4   ef18     goto	0x830               	GOTO	_00196_DS_
0004a6   f004
                                           _00180_DS_:
                                           ;	.line	258; lena.c	sprintf(display, "Do you want to  set the time ?  ");
0004a8   0e0f     movlw	0xf                	MOVLW	HIGH(_display)
0004aa   6e01     movwf	0x1, 0             	MOVWF	r0x01
0004ac   0e21     movlw	0x21               	MOVLW	LOW(_display)
0004ae   6e00     movwf	0, 0               	MOVWF	r0x00
0004b0   0e80     movlw	0x80               	MOVLW	0x80
0004b2   6e02     movwf	0x2, 0             	MOVWF	r0x02
0004b4   0e00     movlw	0                  	MOVLW	UPPER(__str_0)
0004b6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0004b8   0e15     movlw	0x15               	MOVLW	HIGH(__str_0)
0004ba   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0004bc   0eac     movlw	0xac               	MOVLW	LOW(__str_0)
0004be   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0004c0   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0004c2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0004c4   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0004c6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0004c8   5000     movf	0, 0, 0             	MOVF	r0x00, W
0004ca   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0004cc   ecba     call	0x2b74, 0           	CALL	_sprintf
0004ce   f015
0004d0   0e06     movlw	0x6                	MOVLW	0x06
0004d2   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	259; lena.c	break;
0004d4   efb5     goto	0x96a               	GOTO	_00201_DS_
0004d6   f004
                                           _00181_DS_:
                                           ;	.line	262; lena.c	thour, tmin, tsec);
0004d8   cf48     movff	0xf48, 0           	MOVFF	_tsec, r0x00
0004da   f000
0004dc   6a01     clrf	0x1, 0              	CLRF	r0x01
0004de   cf47     movff	0xf47, 0x2         	MOVFF	_tmin, r0x02
0004e0   f002
0004e2   6a03     clrf	0x3, 0              	CLRF	r0x03
0004e4   cf46     movff	0xf46, 0x4         	MOVFF	_thour, r0x04
0004e6   f004
0004e8   6a05     clrf	0x5, 0              	CLRF	r0x05
                                           ;	.line	261; lena.c	sprintf(display, " [%02u]: %02u : %02u                  ",
0004ea   0e0f     movlw	0xf                	MOVLW	HIGH(_display)
0004ec   6e07     movwf	0x7, 0             	MOVWF	r0x07
0004ee   0e21     movlw	0x21               	MOVLW	LOW(_display)
0004f0   6e06     movwf	0x6, 0             	MOVWF	r0x06
0004f2   0e80     movlw	0x80               	MOVLW	0x80
0004f4   6e08     movwf	0x8, 0             	MOVWF	r0x08
0004f6   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0004f8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0004fa   5000     movf	0, 0, 0             	MOVF	r0x00, W
0004fc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0004fe   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000500   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000502   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000504   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000506   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000508   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00050a   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00050c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00050e   0e00     movlw	0                  	MOVLW	UPPER(__str_1)
000510   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000512   0e15     movlw	0x15               	MOVLW	HIGH(__str_1)
000514   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000516   0ece     movlw	0xce               	MOVLW	LOW(__str_1)
000518   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00051a   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
00051c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00051e   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
000520   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000522   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000524   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000526   ecba     call	0x2b74, 0           	CALL	_sprintf
000528   f015
00052a   0e0c     movlw	0xc                	MOVLW	0x0c
00052c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	263; lena.c	break;
00052e   efb5     goto	0x96a               	GOTO	_00201_DS_
000530   f004
                                           _00182_DS_:
                                           ;	.line	266; lena.c	thour, tmin, tsec);
000532   cf48     movff	0xf48, 0           	MOVFF	_tsec, r0x00
000534   f000
000536   6a01     clrf	0x1, 0              	CLRF	r0x01
000538   cf47     movff	0xf47, 0x2         	MOVFF	_tmin, r0x02
00053a   f002
00053c   6a03     clrf	0x3, 0              	CLRF	r0x03
00053e   cf46     movff	0xf46, 0x4         	MOVFF	_thour, r0x04
000540   f004
000542   6a05     clrf	0x5, 0              	CLRF	r0x05
                                           ;	.line	265; lena.c	sprintf(display, "  %02u :[%02u]: %02u                  ",
000544   0e0f     movlw	0xf                	MOVLW	HIGH(_display)
000546   6e07     movwf	0x7, 0             	MOVWF	r0x07
000548   0e21     movlw	0x21               	MOVLW	LOW(_display)
00054a   6e06     movwf	0x6, 0             	MOVWF	r0x06
00054c   0e80     movlw	0x80               	MOVLW	0x80
00054e   6e08     movwf	0x8, 0             	MOVWF	r0x08
000550   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000552   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000554   5000     movf	0, 0, 0             	MOVF	r0x00, W
000556   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000558   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00055a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00055c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00055e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000560   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000562   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000564   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000566   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000568   0e00     movlw	0                  	MOVLW	UPPER(__str_2)
00056a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00056c   0e15     movlw	0x15               	MOVLW	HIGH(__str_2)
00056e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000570   0ef6     movlw	0xf6               	MOVLW	LOW(__str_2)
000572   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000574   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
000576   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000578   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
00057a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00057c   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
00057e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000580   ecba     call	0x2b74, 0           	CALL	_sprintf
000582   f015
000584   0e0c     movlw	0xc                	MOVLW	0x0c
000586   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	267; lena.c	break;
000588   d1f0     bra	0x96a                	BRA	_00201_DS_
                                           _00183_DS_:
                                           ;	.line	270; lena.c	thour, tmin, tsec);
00058a   cf48     movff	0xf48, 0           	MOVFF	_tsec, r0x00
00058c   f000
00058e   6a01     clrf	0x1, 0              	CLRF	r0x01
000590   cf47     movff	0xf47, 0x2         	MOVFF	_tmin, r0x02
000592   f002
000594   6a03     clrf	0x3, 0              	CLRF	r0x03
000596   cf46     movff	0xf46, 0x4         	MOVFF	_thour, r0x04
000598   f004
00059a   6a05     clrf	0x5, 0              	CLRF	r0x05
                                           ;	.line	269; lena.c	sprintf(display, "  %02u : %02u :[%02u]                 ",
00059c   0e0f     movlw	0xf                	MOVLW	HIGH(_display)
00059e   6e07     movwf	0x7, 0             	MOVWF	r0x07
0005a0   0e21     movlw	0x21               	MOVLW	LOW(_display)
0005a2   6e06     movwf	0x6, 0             	MOVWF	r0x06
0005a4   0e80     movlw	0x80               	MOVLW	0x80
0005a6   6e08     movwf	0x8, 0             	MOVWF	r0x08
0005a8   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0005aa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0005ac   5000     movf	0, 0, 0             	MOVF	r0x00, W
0005ae   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0005b0   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0005b2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0005b4   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0005b6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0005b8   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0005ba   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0005bc   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0005be   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0005c0   0e00     movlw	0                  	MOVLW	UPPER(__str_3)
0005c2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0005c4   0e16     movlw	0x16               	MOVLW	HIGH(__str_3)
0005c6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0005c8   0e1e     movlw	0x1e               	MOVLW	LOW(__str_3)
0005ca   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0005cc   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
0005ce   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0005d0   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0005d2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0005d4   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0005d6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0005d8   ecba     call	0x2b74, 0           	CALL	_sprintf
0005da   f015
0005dc   0e0c     movlw	0xc                	MOVLW	0x0c
0005de   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	271; lena.c	break;
0005e0   d1c4     bra	0x96a                	BRA	_00201_DS_
                                           _00184_DS_:
                                           ;	.line	273; lena.c	sprintf(display, "Do you want to  set the alarm ? ");
0005e2   0e0f     movlw	0xf                	MOVLW	HIGH(_display)
0005e4   6e01     movwf	0x1, 0             	MOVWF	r0x01
0005e6   0e21     movlw	0x21               	MOVLW	LOW(_display)
0005e8   6e00     movwf	0, 0               	MOVWF	r0x00
0005ea   0e80     movlw	0x80               	MOVLW	0x80
0005ec   6e02     movwf	0x2, 0             	MOVWF	r0x02
0005ee   0e00     movlw	0                  	MOVLW	UPPER(__str_4)
0005f0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0005f2   0e16     movlw	0x16               	MOVLW	HIGH(__str_4)
0005f4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0005f6   0e46     movlw	0x46               	MOVLW	LOW(__str_4)
0005f8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0005fa   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0005fc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0005fe   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000600   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000602   5000     movf	0, 0, 0             	MOVF	r0x00, W
000604   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000606   ecba     call	0x2b74, 0           	CALL	_sprintf
000608   f015
00060a   0e06     movlw	0x6                	MOVLW	0x06
00060c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	274; lena.c	break;
00060e   d1ad     bra	0x96a                	BRA	_00201_DS_
                                           _00185_DS_:
000610   010f     movlb	0xf                	BANKSEL	_alarm_set
                                           ;	.line	276; lena.c	if (alarm_set) {
000612   514d     movf	0x4d, 0, 0x1        	MOVF	_alarm_set, W, B
000614   e017     bz	0x644                 	BZ	_00187_DS_
                                           ;	.line	277; lena.c	sprintf(display, "  Alarm [ON ]                   ");
000616   0e0f     movlw	0xf                	MOVLW	HIGH(_display)
000618   6e01     movwf	0x1, 0             	MOVWF	r0x01
00061a   0e21     movlw	0x21               	MOVLW	LOW(_display)
00061c   6e00     movwf	0, 0               	MOVWF	r0x00
00061e   0e80     movlw	0x80               	MOVLW	0x80
000620   6e02     movwf	0x2, 0             	MOVWF	r0x02
000622   0e00     movlw	0                  	MOVLW	UPPER(__str_5)
000624   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000626   0e16     movlw	0x16               	MOVLW	HIGH(__str_5)
000628   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00062a   0e68     movlw	0x68               	MOVLW	LOW(__str_5)
00062c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00062e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000630   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000632   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000634   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000636   5000     movf	0, 0, 0             	MOVF	r0x00, W
000638   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00063a   ecba     call	0x2b74, 0           	CALL	_sprintf
00063c   f015
00063e   0e06     movlw	0x6                	MOVLW	0x06
000640   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000642   d193     bra	0x96a                	BRA	_00201_DS_
                                           _00187_DS_:
                                           ;	.line	279; lena.c	sprintf(display, "  Alarm [OFF]                   ");
000644   0e0f     movlw	0xf                	MOVLW	HIGH(_display)
000646   6e01     movwf	0x1, 0             	MOVWF	r0x01
000648   0e21     movlw	0x21               	MOVLW	LOW(_display)
00064a   6e00     movwf	0, 0               	MOVWF	r0x00
00064c   0e80     movlw	0x80               	MOVLW	0x80
00064e   6e02     movwf	0x2, 0             	MOVWF	r0x02
000650   0e00     movlw	0                  	MOVLW	UPPER(__str_6)
000652   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000654   0e16     movlw	0x16               	MOVLW	HIGH(__str_6)
000656   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000658   0e8a     movlw	0x8a               	MOVLW	LOW(__str_6)
00065a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00065c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00065e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000660   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000662   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000664   5000     movf	0, 0, 0             	MOVF	r0x00, W
000666   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000668   ecba     call	0x2b74, 0           	CALL	_sprintf
00066a   f015
00066c   0e06     movlw	0x6                	MOVLW	0x06
00066e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	281; lena.c	break;
000670   d17c     bra	0x96a                	BRA	_00201_DS_
                                           _00189_DS_:
                                           ;	.line	284; lena.c	ahour, amin);
000672   cf4a     movff	0xf4a, 0           	MOVFF	_amin, r0x00
000674   f000
000676   6a01     clrf	0x1, 0              	CLRF	r0x01
000678   cf49     movff	0xf49, 0x2         	MOVFF	_ahour, r0x02
00067a   f002
00067c   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           ;	.line	283; lena.c	sprintf(display, "    Alarm at        [%02u]: %02u    ",
00067e   0e0f     movlw	0xf                	MOVLW	HIGH(_display)
000680   6e05     movwf	0x5, 0             	MOVWF	r0x05
000682   0e21     movlw	0x21               	MOVLW	LOW(_display)
000684   6e04     movwf	0x4, 0             	MOVWF	r0x04
000686   0e80     movlw	0x80               	MOVLW	0x80
000688   6e06     movwf	0x6, 0             	MOVWF	r0x06
00068a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00068c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00068e   5000     movf	0, 0, 0             	MOVF	r0x00, W
000690   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000692   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000694   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000696   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000698   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00069a   0e00     movlw	0                  	MOVLW	UPPER(__str_7)
00069c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00069e   0e16     movlw	0x16               	MOVLW	HIGH(__str_7)
0006a0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0006a2   0eac     movlw	0xac               	MOVLW	LOW(__str_7)
0006a4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0006a6   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0006a8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0006aa   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0006ac   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0006ae   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0006b0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0006b2   ecba     call	0x2b74, 0           	CALL	_sprintf
0006b4   f015
0006b6   0e0a     movlw	0xa                	MOVLW	0x0a
0006b8   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	285; lena.c	break;
0006ba   d157     bra	0x96a                	BRA	_00201_DS_
                                           _00190_DS_:
                                           ;	.line	288; lena.c	ahour, amin);
0006bc   cf4a     movff	0xf4a, 0           	MOVFF	_amin, r0x00
0006be   f000
0006c0   6a01     clrf	0x1, 0              	CLRF	r0x01
0006c2   cf49     movff	0xf49, 0x2         	MOVFF	_ahour, r0x02
0006c4   f002
0006c6   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           ;	.line	287; lena.c	sprintf(display, "    Alarm at         %02u :[%02u]   ",
0006c8   0e0f     movlw	0xf                	MOVLW	HIGH(_display)
0006ca   6e05     movwf	0x5, 0             	MOVWF	r0x05
0006cc   0e21     movlw	0x21               	MOVLW	LOW(_display)
0006ce   6e04     movwf	0x4, 0             	MOVWF	r0x04
0006d0   0e80     movlw	0x80               	MOVLW	0x80
0006d2   6e06     movwf	0x6, 0             	MOVWF	r0x06
0006d4   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0006d6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0006d8   5000     movf	0, 0, 0             	MOVF	r0x00, W
0006da   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0006dc   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0006de   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0006e0   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0006e2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0006e4   0e00     movlw	0                  	MOVLW	UPPER(__str_8)
0006e6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0006e8   0e16     movlw	0x16               	MOVLW	HIGH(__str_8)
0006ea   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0006ec   0ed2     movlw	0xd2               	MOVLW	LOW(__str_8)
0006ee   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0006f0   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0006f2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0006f4   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0006f6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0006f8   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0006fa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0006fc   ecba     call	0x2b74, 0           	CALL	_sprintf
0006fe   f015
000700   0e0a     movlw	0xa                	MOVLW	0x0a
000702   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	289; lena.c	break;
000704   d132     bra	0x96a                	BRA	_00201_DS_
                                           _00191_DS_:
000706   010f     movlb	0xf                	BANKSEL	_alarm_set
                                           ;	.line	291; lena.c	if (alarm_set) {
000708   514d     movf	0x4d, 0, 0x1        	MOVF	_alarm_set, W, B
00070a   e03a     bz	0x780                 	BZ	_00193_DS_
                                           ;	.line	293; lena.c	thour, tmin, tsec, ahour, amin);
00070c   cf4a     movff	0xf4a, 0           	MOVFF	_amin, r0x00
00070e   f000
000710   6a01     clrf	0x1, 0              	CLRF	r0x01
000712   cf49     movff	0xf49, 0x2         	MOVFF	_ahour, r0x02
000714   f002
000716   6a03     clrf	0x3, 0              	CLRF	r0x03
000718   cf48     movff	0xf48, 0x4         	MOVFF	_tsec, r0x04
00071a   f004
00071c   6a05     clrf	0x5, 0              	CLRF	r0x05
00071e   cf47     movff	0xf47, 0x6         	MOVFF	_tmin, r0x06
000720   f006
000722   6a07     clrf	0x7, 0              	CLRF	r0x07
000724   cf46     movff	0xf46, 0x8         	MOVFF	_thour, r0x08
000726   f008
000728   6a09     clrf	0x9, 0              	CLRF	r0x09
                                           ;	.line	292; lena.c	sprintf(display, "    %02u:%02u:%02u    Alarm ON  %02u:%02u ",
00072a   0e0f     movlw	0xf                	MOVLW	HIGH(_display)
00072c   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
00072e   0e21     movlw	0x21               	MOVLW	LOW(_display)
000730   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
000732   0e80     movlw	0x80               	MOVLW	0x80
000734   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
000736   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000738   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00073a   5000     movf	0, 0, 0             	MOVF	r0x00, W
00073c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00073e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000740   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000742   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000744   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000746   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000748   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00074a   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00074c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00074e   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
000750   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000752   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000754   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000756   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
000758   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00075a   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
00075c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00075e   0e00     movlw	0                  	MOVLW	UPPER(__str_9)
000760   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000762   0e16     movlw	0x16               	MOVLW	HIGH(__str_9)
000764   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000766   0ef8     movlw	0xf8               	MOVLW	LOW(__str_9)
000768   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00076a   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
00076c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00076e   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
000770   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000772   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
000774   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000776   ecba     call	0x2b74, 0           	CALL	_sprintf
000778   f015
00077a   0e10     movlw	0x10               	MOVLW	0x10
00077c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00077e   d0f5     bra	0x96a                	BRA	_00201_DS_
                                           _00193_DS_:
                                           ;	.line	296; lena.c	thour, tmin, tsec);
000780   cf48     movff	0xf48, 0           	MOVFF	_tsec, r0x00
000782   f000
000784   6a01     clrf	0x1, 0              	CLRF	r0x01
000786   cf47     movff	0xf47, 0x2         	MOVFF	_tmin, r0x02
000788   f002
00078a   6a03     clrf	0x3, 0              	CLRF	r0x03
00078c   cf46     movff	0xf46, 0x4         	MOVFF	_thour, r0x04
00078e   f004
000790   6a05     clrf	0x5, 0              	CLRF	r0x05
                                           ;	.line	295; lena.c	sprintf(display, "    %02u:%02u:%02u       Alarm  OFF   ",
000792   0e0f     movlw	0xf                	MOVLW	HIGH(_display)
000794   6e07     movwf	0x7, 0             	MOVWF	r0x07
000796   0e21     movlw	0x21               	MOVLW	LOW(_display)
000798   6e06     movwf	0x6, 0             	MOVWF	r0x06
00079a   0e80     movlw	0x80               	MOVLW	0x80
00079c   6e08     movwf	0x8, 0             	MOVWF	r0x08
00079e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0007a0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0007a2   5000     movf	0, 0, 0             	MOVF	r0x00, W
0007a4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0007a6   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0007a8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0007aa   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0007ac   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0007ae   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0007b0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0007b2   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0007b4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0007b6   0e00     movlw	0                  	MOVLW	UPPER(__str_10)
0007b8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0007ba   0e17     movlw	0x17               	MOVLW	HIGH(__str_10)
0007bc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0007be   0e24     movlw	0x24               	MOVLW	LOW(__str_10)
0007c0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0007c2   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
0007c4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0007c6   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0007c8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0007ca   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0007cc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0007ce   ecba     call	0x2b74, 0           	CALL	_sprintf
0007d0   f015
0007d2   0e0c     movlw	0xc                	MOVLW	0x0c
0007d4   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	298; lena.c	break;
0007d6   d0c9     bra	0x96a                	BRA	_00201_DS_
                                           _00195_DS_:
                                           ;	.line	301; lena.c	thour, tmin, tsec); // ***blink***
0007d8   cf48     movff	0xf48, 0           	MOVFF	_tsec, r0x00
0007da   f000
0007dc   6a01     clrf	0x1, 0              	CLRF	r0x01
0007de   cf47     movff	0xf47, 0x2         	MOVFF	_tmin, r0x02
0007e0   f002
0007e2   6a03     clrf	0x3, 0              	CLRF	r0x03
0007e4   cf46     movff	0xf46, 0x4         	MOVFF	_thour, r0x04
0007e6   f004
0007e8   6a05     clrf	0x5, 0              	CLRF	r0x05
                                           ;	.line	300; lena.c	sprintf(display, "    %02u:%02u:%02u      I am ringing! ",
0007ea   0e0f     movlw	0xf                	MOVLW	HIGH(_display)
0007ec   6e07     movwf	0x7, 0             	MOVWF	r0x07
0007ee   0e21     movlw	0x21               	MOVLW	LOW(_display)
0007f0   6e06     movwf	0x6, 0             	MOVWF	r0x06
0007f2   0e80     movlw	0x80               	MOVLW	0x80
0007f4   6e08     movwf	0x8, 0             	MOVWF	r0x08
0007f6   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0007f8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0007fa   5000     movf	0, 0, 0             	MOVF	r0x00, W
0007fc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0007fe   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000800   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000802   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000804   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000806   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000808   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00080a   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00080c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00080e   0e00     movlw	0                  	MOVLW	UPPER(__str_11)
000810   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000812   0e17     movlw	0x17               	MOVLW	HIGH(__str_11)
000814   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000816   0e4c     movlw	0x4c               	MOVLW	LOW(__str_11)
000818   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00081a   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
00081c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00081e   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
000820   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000822   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000824   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000826   ecba     call	0x2b74, 0           	CALL	_sprintf
000828   f015
00082a   0e0c     movlw	0xc                	MOVLW	0x0c
00082c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	302; lena.c	break;
00082e   d09d     bra	0x96a                	BRA	_00201_DS_
                                           _00196_DS_:
                                           ;	.line	304; lena.c	if (snooze < 10) {
000830   0e0a     movlw	0xa                	MOVLW	0x0a
000832   010f     movlb	0xf                	BANKSEL	_snooze
000834   5d4e     subwf	0x4e, 0, 0x1       	SUBWF	_snooze, W, B
000836   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000838   d041     bra	0x8bc                	BRA	_00198_DS_
                                           ;	.line	306; lena.c	thour, tmin, tsec, snooze, ahour_o, amin_o);
00083a   cf4c     movff	0xf4c, 0           	MOVFF	_amin_o, r0x00
00083c   f000
00083e   6a01     clrf	0x1, 0              	CLRF	r0x01
000840   cf4b     movff	0xf4b, 0x2         	MOVFF	_ahour_o, r0x02
000842   f002
000844   6a03     clrf	0x3, 0              	CLRF	r0x03
000846   cf4e     movff	0xf4e, 0x4         	MOVFF	_snooze, r0x04
000848   f004
00084a   6a05     clrf	0x5, 0              	CLRF	r0x05
00084c   cf48     movff	0xf48, 0x6         	MOVFF	_tsec, r0x06
00084e   f006
000850   6a07     clrf	0x7, 0              	CLRF	r0x07
000852   cf47     movff	0xf47, 0x8         	MOVFF	_tmin, r0x08
000854   f008
000856   6a09     clrf	0x9, 0              	CLRF	r0x09
000858   cf46     movff	0xf46, 0xa         	MOVFF	_thour, r0x0a
00085a   f00a
00085c   6a0b     clrf	0xb, 0              	CLRF	r0x0b
                                           ;	.line	305; lena.c	sprintf(display, "    %02u:%02u:%02u    Snooze %u  %02u:%02u ",
00085e   0e0f     movlw	0xf                	MOVLW	HIGH(_display)
000860   6e0d     movwf	0xd, 0             	MOVWF	r0x0d
000862   0e21     movlw	0x21               	MOVLW	LOW(_display)
000864   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
000866   0e80     movlw	0x80               	MOVLW	0x80
000868   6e0e     movwf	0xe, 0             	MOVWF	r0x0e
00086a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00086c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00086e   5000     movf	0, 0, 0             	MOVF	r0x00, W
000870   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000872   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000874   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000876   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000878   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00087a   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00087c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00087e   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000880   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000882   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
000884   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000886   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000888   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00088a   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
00088c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00088e   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
000890   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000892   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
000894   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000896   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
000898   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00089a   0e00     movlw	0                  	MOVLW	UPPER(__str_12)
00089c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00089e   0e17     movlw	0x17               	MOVLW	HIGH(__str_12)
0008a0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0008a2   0e74     movlw	0x74               	MOVLW	LOW(__str_12)
0008a4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0008a6   500e     movf	0xe, 0, 0           	MOVF	r0x0e, W
0008a8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0008aa   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
0008ac   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0008ae   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
0008b0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0008b2   ecba     call	0x2b74, 0           	CALL	_sprintf
0008b4   f015
0008b6   0e12     movlw	0x12               	MOVLW	0x12
0008b8   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0008ba   d057     bra	0x96a                	BRA	_00201_DS_
                                           _00198_DS_:
                                           ;	.line	309; lena.c	thour, tmin, tsec, snooze, ahour_o, amin_o);
0008bc   cf4c     movff	0xf4c, 0           	MOVFF	_amin_o, r0x00
0008be   f000
0008c0   6a01     clrf	0x1, 0              	CLRF	r0x01
0008c2   cf4b     movff	0xf4b, 0x2         	MOVFF	_ahour_o, r0x02
0008c4   f002
0008c6   6a03     clrf	0x3, 0              	CLRF	r0x03
0008c8   cf4e     movff	0xf4e, 0x4         	MOVFF	_snooze, r0x04
0008ca   f004
0008cc   6a05     clrf	0x5, 0              	CLRF	r0x05
0008ce   cf48     movff	0xf48, 0x6         	MOVFF	_tsec, r0x06
0008d0   f006
0008d2   6a07     clrf	0x7, 0              	CLRF	r0x07
0008d4   cf47     movff	0xf47, 0x8         	MOVFF	_tmin, r0x08
0008d6   f008
0008d8   6a09     clrf	0x9, 0              	CLRF	r0x09
0008da   cf46     movff	0xf46, 0xa         	MOVFF	_thour, r0x0a
0008dc   f00a
0008de   6a0b     clrf	0xb, 0              	CLRF	r0x0b
                                           ;	.line	308; lena.c	sprintf(display, "    %02u:%02u:%02u    Snooze %u %02u:%02u ",
0008e0   0e0f     movlw	0xf                	MOVLW	HIGH(_display)
0008e2   6e0d     movwf	0xd, 0             	MOVWF	r0x0d
0008e4   0e21     movlw	0x21               	MOVLW	LOW(_display)
0008e6   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
0008e8   0e80     movlw	0x80               	MOVLW	0x80
0008ea   6e0e     movwf	0xe, 0             	MOVWF	r0x0e
0008ec   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0008ee   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0008f0   5000     movf	0, 0, 0             	MOVF	r0x00, W
0008f2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0008f4   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0008f6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0008f8   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0008fa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0008fc   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0008fe   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000900   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000902   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000904   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
000906   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000908   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
00090a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00090c   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
00090e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000910   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
000912   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000914   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
000916   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000918   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
00091a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00091c   0e00     movlw	0                  	MOVLW	UPPER(__str_13)
00091e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000920   0e17     movlw	0x17               	MOVLW	HIGH(__str_13)
000922   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000924   0ea0     movlw	0xa0               	MOVLW	LOW(__str_13)
000926   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000928   500e     movf	0xe, 0, 0           	MOVF	r0x0e, W
00092a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00092c   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
00092e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000930   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
000932   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000934   ecba     call	0x2b74, 0           	CALL	_sprintf
000936   f015
000938   0e12     movlw	0x12               	MOVLW	0x12
00093a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	312; lena.c	break;
00093c   d016     bra	0x96a                	BRA	_00201_DS_
                                           _00200_DS_:
                                           ;	.line	314; lena.c	sprintf(display, "**** ERROR ********* ERROR *****");
00093e   0e0f     movlw	0xf                	MOVLW	HIGH(_display)
000940   6e01     movwf	0x1, 0             	MOVWF	r0x01
000942   0e21     movlw	0x21               	MOVLW	LOW(_display)
000944   6e00     movwf	0, 0               	MOVWF	r0x00
000946   0e80     movlw	0x80               	MOVLW	0x80
000948   6e02     movwf	0x2, 0             	MOVWF	r0x02
00094a   0e00     movlw	0                  	MOVLW	UPPER(__str_14)
00094c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00094e   0e17     movlw	0x17               	MOVLW	HIGH(__str_14)
000950   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000952   0ecc     movlw	0xcc               	MOVLW	LOW(__str_14)
000954   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000956   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000958   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00095a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00095c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00095e   5000     movf	0, 0, 0             	MOVF	r0x00, W
000960   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000962   ecba     call	0x2b74, 0           	CALL	_sprintf
000964   f015
000966   0e06     movlw	0x6                	MOVLW	0x06
000968   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00201_DS_:
                                           ;	.line	317; lena.c	DisplayString(0, display);
00096a   0e0f     movlw	0xf                	MOVLW	HIGH(_display)
00096c   6e01     movwf	0x1, 0             	MOVWF	r0x01
00096e   0e21     movlw	0x21               	MOVLW	LOW(_display)
000970   6e00     movwf	0, 0               	MOVWF	r0x00
000972   0e80     movlw	0x80               	MOVLW	0x80
000974   6e02     movwf	0x2, 0             	MOVWF	r0x02
000976   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000978   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00097a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00097c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00097e   5000     movf	0, 0, 0             	MOVF	r0x00, W
000980   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000982   0e00     movlw	0                  	MOVLW	0x00
000984   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000986   eca1     call	0x2d42, 0           	CALL	_DisplayString
000988   f016
00098a   0e04     movlw	0x4                	MOVLW	0x04
00098c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00098e   cfe4     movff	0xfe4, 0xe         	MOVFF	PREINC1, r0x0e
000990   f00e
000992   cfe4     movff	0xfe4, 0xd         	MOVFF	PREINC1, r0x0d
000994   f00d
000996   cfe4     movff	0xfe4, 0xc         	MOVFF	PREINC1, r0x0c
000998   f00c
00099a   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
00099c   f00b
00099e   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
0009a0   f00a
0009a2   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
0009a4   f009
0009a6   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
0009a8   f008
0009aa   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
0009ac   f007
0009ae   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0009b0   f006
0009b2   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0009b4   f005
0009b6   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0009b8   f004
0009ba   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0009bc   f003
0009be   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0009c0   f002
0009c2   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0009c4   f001
0009c6   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0009c8   f000
0009ca   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0009cc   ffd9
0009ce   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_lena__dec_amin	code
                                           _dec_amin:
                                           ;	.line	212; lena.c	void dec_amin(BYTE val)
00358e   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
003590   ffe5
003592   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
003594   ffd9
003596   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
003598   ffe5
00359a   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00359c   ffe5
00359e   0e02     movlw	0x2                	MOVLW	0x02
0035a0   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0035a2   f000
                                           ;	.line	215; lena.c	if (val > amin) {
0035a4   5000     movf	0, 0, 0             	MOVF	r0x00, W
0035a6   010f     movlb	0xf                	BANKSEL	_amin
0035a8   5d4a     subwf	0x4a, 0, 0x1       	SUBWF	_amin, W, B
0035aa   e20e     bc	0x35c8                	BC	_00154_DS_
                                           ;	.line	216; lena.c	dec_ahour(1);
0035ac   0e01     movlw	0x1                	MOVLW	0x01
0035ae   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0035b0   ecee     call	0x35dc, 0           	CALL	_dec_ahour
0035b2   f01a
0035b4   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	217; lena.c	amin = (60+amin) - val;
0035b6   0e3c     movlw	0x3c               	MOVLW	0x3c
0035b8   010f     movlb	0xf                	BANKSEL	_amin
0035ba   254a     addwf	0x4a, 0, 0x1       	ADDWF	_amin, W, B
0035bc   6e01     movwf	0x1, 0             	MOVWF	r0x01
0035be   5000     movf	0, 0, 0             	MOVF	r0x00, W
0035c0   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
0035c2   010f     movlb	0xf                	BANKSEL	_amin
0035c4   6f4a     movwf	0x4a, 0x1          	MOVWF	_amin, B
0035c6   d003     bra	0x35ce               	BRA	_00156_DS_
                                           _00154_DS_:
                                           ;	.line	219; lena.c	amin  = amin - val;
0035c8   5000     movf	0, 0, 0             	MOVF	r0x00, W
0035ca   010f     movlb	0xf                	BANKSEL	_amin
0035cc   5f4a     subwf	0x4a, 0x1, 0x1     	SUBWF	_amin, F, B
                                           _00156_DS_:
0035ce   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0035d0   f001
0035d2   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0035d4   f000
0035d6   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0035d8   ffd9
0035da   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_lena__dec_ahour	code
                                           _dec_ahour:
                                           ;	.line	200; lena.c	void dec_ahour(BYTE val)
0035dc   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0035de   ffe5
0035e0   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0035e2   ffd9
0035e4   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0035e6   ffe5
0035e8   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0035ea   ffe5
0035ec   0e02     movlw	0x2                	MOVLW	0x02
0035ee   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0035f0   f000
                                           ;	.line	203; lena.c	if (val > ahour) {
0035f2   5000     movf	0, 0, 0             	MOVF	r0x00, W
0035f4   010f     movlb	0xf                	BANKSEL	_ahour
0035f6   5d49     subwf	0x49, 0, 0x1       	SUBWF	_ahour, W, B
0035f8   e209     bc	0x360c                	BC	_00143_DS_
                                           ;	.line	204; lena.c	ahour = (24+ahour) - val;
0035fa   0e18     movlw	0x18               	MOVLW	0x18
0035fc   010f     movlb	0xf                	BANKSEL	_ahour
0035fe   2549     addwf	0x49, 0, 0x1       	ADDWF	_ahour, W, B
003600   6e01     movwf	0x1, 0             	MOVWF	r0x01
003602   5000     movf	0, 0, 0             	MOVF	r0x00, W
003604   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
003606   010f     movlb	0xf                	BANKSEL	_ahour
003608   6f49     movwf	0x49, 0x1          	MOVWF	_ahour, B
00360a   d003     bra	0x3612               	BRA	_00145_DS_
                                           _00143_DS_:
                                           ;	.line	206; lena.c	ahour = ahour - val;
00360c   5000     movf	0, 0, 0             	MOVF	r0x00, W
00360e   010f     movlb	0xf                	BANKSEL	_ahour
003610   5f49     subwf	0x49, 0x1, 0x1     	SUBWF	_ahour, F, B
                                           _00145_DS_:
003612   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
003614   f001
003616   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
003618   f000
00361a   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00361c   ffd9
00361e   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_lena__inc_amin	code
                                           _inc_amin:
                                           ;	.line	187; lena.c	void inc_amin(BYTE val)
0031bc   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0031be   ffe5
0031c0   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0031c2   ffd9
0031c4   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0031c6   ffe5
0031c8   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0031ca   ffe5
0031cc   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0031ce   ffe5
0031d0   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0031d2   ffe5
0031d4   0e02     movlw	0x2                	MOVLW	0x02
0031d6   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0031d8   f000
                                           ;	.line	191; lena.c	mod_amin = (amin + val) / 60;
0031da   cf4a     movff	0xf4a, 0x1         	MOVFF	_amin, r0x01
0031dc   f001
0031de   6a02     clrf	0x2, 0              	CLRF	r0x02
0031e0   6a03     clrf	0x3, 0              	CLRF	r0x03
0031e2   5000     movf	0, 0, 0             	MOVF	r0x00, W
0031e4   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
0031e6   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0031e8   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0031ea   0e00     movlw	0                  	MOVLW	0x00
0031ec   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0031ee   0e3c     movlw	0x3c               	MOVLW	0x3c
0031f0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0031f2   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0031f4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0031f6   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0031f8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0031fa   ecc9     call	0x2992, 0           	CALL	__divsint
0031fc   f014
0031fe   6e01     movwf	0x1, 0             	MOVWF	r0x01
003200   cff3     movff	0xff3, 0x2         	MOVFF	PRODL, r0x02
003202   f002
003204   0e04     movlw	0x4                	MOVLW	0x04
003206   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	192; lena.c	if (mod_amin) {
003208   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00320a   e005     bz	0x3216                	BZ	_00136_DS_
                                           ;	.line	193; lena.c	inc_ahour(mod_amin);
00320c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00320e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003210   ec38     call	0x3470, 0           	CALL	_inc_ahour
003212   f01a
003214   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           _00136_DS_:
                                           ;	.line	196; lena.c	amin = (amin + val) % 60;
003216   cf4a     movff	0xf4a, 0x1         	MOVFF	_amin, r0x01
003218   f001
00321a   6a02     clrf	0x2, 0              	CLRF	r0x02
00321c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00321e   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
003220   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
003222   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
003224   0e00     movlw	0                  	MOVLW	0x00
003226   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003228   0e3c     movlw	0x3c               	MOVLW	0x3c
00322a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00322c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00322e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003230   5000     movf	0, 0, 0             	MOVF	r0x00, W
003232   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003234   ec2f     call	0x2c5e, 0           	CALL	__modsint
003236   f016
003238   6e00     movwf	0, 0               	MOVWF	r0x00
00323a   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
00323c   f001
00323e   0e04     movlw	0x4                	MOVLW	0x04
003240   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
003242   5000     movf	0, 0, 0             	MOVF	r0x00, W
003244   010f     movlb	0xf                	BANKSEL	_amin
003246   6f4a     movwf	0x4a, 0x1          	MOVWF	_amin, B
003248   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00324a   f003
00324c   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00324e   f002
003250   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
003252   f001
003254   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
003256   f000
003258   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00325a   ffd9
00325c   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_lena__inc_ahour	code
                                           _inc_ahour:
                                           ;	.line	181; lena.c	void inc_ahour(BYTE val)
003470   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
003472   ffe5
003474   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
003476   ffd9
003478   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00347a   ffe5
00347c   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00347e   ffe5
003480   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
003482   ffe5
003484   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
003486   ffe5
003488   0e02     movlw	0x2                	MOVLW	0x02
00348a   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
00348c   f000
                                           ;	.line	183; lena.c	ahour = (ahour + val) % 24;
00348e   cf49     movff	0xf49, 0x1         	MOVFF	_ahour, r0x01
003490   f001
003492   6a02     clrf	0x2, 0              	CLRF	r0x02
003494   6a03     clrf	0x3, 0              	CLRF	r0x03
003496   5000     movf	0, 0, 0             	MOVF	r0x00, W
003498   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
00349a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00349c   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
00349e   0e00     movlw	0                  	MOVLW	0x00
0034a0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0034a2   0e18     movlw	0x18               	MOVLW	0x18
0034a4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0034a6   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0034a8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0034aa   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0034ac   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0034ae   ec2f     call	0x2c5e, 0           	CALL	__modsint
0034b0   f016
0034b2   6e00     movwf	0, 0               	MOVWF	r0x00
0034b4   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
0034b6   f001
0034b8   0e04     movlw	0x4                	MOVLW	0x04
0034ba   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0034bc   5000     movf	0, 0, 0             	MOVF	r0x00, W
0034be   010f     movlb	0xf                	BANKSEL	_ahour
0034c0   6f49     movwf	0x49, 0x1          	MOVWF	_ahour, B
0034c2   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0034c4   f003
0034c6   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0034c8   f002
0034ca   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0034cc   f001
0034ce   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0034d0   f000
0034d2   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0034d4   ffd9
0034d6   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_lena__low_isr	code
                                           _low_isr:
                                           ;	.line	115; lena.c	void low_isr (void) interrupt 2
003400   cfe8     movff	0xfe8, 0xfe5       	MOVFF	WREG, POSTDEC1
003402   ffe5
003404   cfd8     movff	0xfd8, 0xfe5       	MOVFF	STATUS, POSTDEC1
003406   ffe5
003408   cfe0     movff	0xfe0, 0xfe5       	MOVFF	BSR, POSTDEC1
00340a   ffe5
00340c   cff3     movff	0xff3, 0xfe5       	MOVFF	PRODL, POSTDEC1
00340e   ffe5
003410   cff4     movff	0xff4, 0xfe5       	MOVFF	PRODH, POSTDEC1
003412   ffe5
003414   cfe9     movff	0xfe9, 0xfe5       	MOVFF	FSR0L, POSTDEC1
003416   ffe5
003418   cfea     movff	0xfea, 0xfe5       	MOVFF	FSR0H, POSTDEC1
00341a   ffe5
00341c   cffa     movff	0xffa, 0xfe5       	MOVFF	PCLATH, POSTDEC1
00341e   ffe5
003420   cffb     movff	0xffb, 0xfe5       	MOVFF	PCLATU, POSTDEC1
003422   ffe5
003424   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
003426   ffe5
003428   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00342a   ffd9
                                           ;	.line	118; lena.c	if(INTCON3bits.INT3F) {
00342c   a4f0     btfss	0xf0, 0x2, 0       	BTFSS	_INTCON3bits, 2
00342e   d005     bra	0x343a               	BRA	_00115_DS_
                                           ;	.line	119; lena.c	button1 = 1;
003430   0e01     movlw	0x1                	MOVLW	0x01
003432   010f     movlb	0xf                	BANKSEL	_button1
003434   6f52     movwf	0x52, 0x1          	MOVWF	_button1, B
                                           ;	.line	120; lena.c	INTCON3bits.INT3F = 0;   //clear INT1 flag
003436   94f0     bcf	0xf0, 0x2, 0         	BCF	_INTCON3bits, 2
003438   d006     bra	0x3446               	BRA	_00117_DS_
                                           _00115_DS_:
                                           ;	.line	123; lena.c	} else if(INTCON3bits.INT1F) {
00343a   a0f0     btfss	0xf0, 0, 0         	BTFSS	_INTCON3bits, 0
00343c   d004     bra	0x3446               	BRA	_00117_DS_
                                           ;	.line	124; lena.c	button2 = 1;
00343e   0e01     movlw	0x1                	MOVLW	0x01
003440   010f     movlb	0xf                	BANKSEL	_button2
003442   6f53     movwf	0x53, 0x1          	MOVWF	_button2, B
                                           ;	.line	125; lena.c	INTCON3bits.INT1F = 0;
003444   90f0     bcf	0xf0, 0, 0           	BCF	_INTCON3bits, 0
                                           _00117_DS_:
003446   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
003448   ffd9
00344a   cfe4     movff	0xfe4, 0xffb       	MOVFF	PREINC1, PCLATU
00344c   fffb
00344e   cfe4     movff	0xfe4, 0xffa       	MOVFF	PREINC1, PCLATH
003450   fffa
003452   cfe4     movff	0xfe4, 0xfea       	MOVFF	PREINC1, FSR0H
003454   ffea
003456   cfe4     movff	0xfe4, 0xfe9       	MOVFF	PREINC1, FSR0L
003458   ffe9
00345a   cfe4     movff	0xfe4, 0xff4       	MOVFF	PREINC1, PRODH
00345c   fff4
00345e   cfe4     movff	0xfe4, 0xff3       	MOVFF	PREINC1, PRODL
003460   fff3
003462   cfe4     movff	0xfe4, 0xfe0       	MOVFF	PREINC1, BSR
003464   ffe0
003466   cfe4     movff	0xfe4, 0xfd8       	MOVFF	PREINC1, STATUS
003468   ffd8
00346a   cfe4     movff	0xfe4, 0xfe8       	MOVFF	PREINC1, WREG
00346c   ffe8
00346e   0010     retfie	0                 	RETFIE	
                                           
                                           ; ; Starting pCode block
                                           S_lena__high_isr	code
                                           _high_isr:
                                           ;	.line	104; lena.c	void high_isr (void) interrupt 1
00153a   cfe8     movff	0xfe8, 0xfe5       	MOVFF	WREG, POSTDEC1
00153c   ffe5
00153e   cfd8     movff	0xfd8, 0xfe5       	MOVFF	STATUS, POSTDEC1
001540   ffe5
001542   cfe0     movff	0xfe0, 0xfe5       	MOVFF	BSR, POSTDEC1
001544   ffe5
001546   cff3     movff	0xff3, 0xfe5       	MOVFF	PRODL, POSTDEC1
001548   ffe5
00154a   cff4     movff	0xff4, 0xfe5       	MOVFF	PRODH, POSTDEC1
00154c   ffe5
00154e   cfe9     movff	0xfe9, 0xfe5       	MOVFF	FSR0L, POSTDEC1
001550   ffe5
001552   cfea     movff	0xfea, 0xfe5       	MOVFF	FSR0H, POSTDEC1
001554   ffe5
001556   cffa     movff	0xffa, 0xfe5       	MOVFF	PCLATH, POSTDEC1
001558   ffe5
00155a   cffb     movff	0xffb, 0xfe5       	MOVFF	PCLATU, POSTDEC1
00155c   ffe5
00155e   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
001560   ffe5
001562   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001564   ffd9
                                           ;	.line	107; lena.c	if (INTCONbits.T0IF) {
001566   a4f2     btfss	0xf2, 0x2, 0       	BTFSS	_INTCONbits, 2
001568   d00c     bra	0x1582               	BRA	_00107_DS_
00156a   010f     movlb	0xf                	BANKSEL	_overflows
                                           ;	.line	108; lena.c	overflows++;
00156c   2b42     incf	0x42, 0x1, 0x1      	INCF	_overflows, F, B
00156e   e302     bnc	0x1574               	BNC	_10386_DS_
001570   010f     movlb	0xf                	BANKSEL	(_overflows + 1)
001572   2b43     incf	0x43, 0x1, 0x1      	INCF	(_overflows + 1), F, B
                                           _10386_DS_:
001574   e302     bnc	0x157a               	BNC	_20387_DS_
001576   010f     movlb	0xf                	BANKSEL	(_overflows + 2)
001578   2b44     incf	0x44, 0x1, 0x1      	INCF	(_overflows + 2), F, B
                                           _20387_DS_:
00157a   e302     bnc	0x1580               	BNC	_30388_DS_
00157c   010f     movlb	0xf                	BANKSEL	(_overflows + 3)
00157e   2b45     incf	0x45, 0x1, 0x1      	INCF	(_overflows + 3), F, B
                                           _30388_DS_:
                                           ;	.line	109; lena.c	INTCONbits.T0IF = 0;
001580   94f2     bcf	0xf2, 0x2, 0         	BCF	_INTCONbits, 2
                                           _00107_DS_:
001582   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001584   ffd9
001586   cfe4     movff	0xfe4, 0xffb       	MOVFF	PREINC1, PCLATU
001588   fffb
00158a   cfe4     movff	0xfe4, 0xffa       	MOVFF	PREINC1, PCLATH
00158c   fffa
00158e   cfe4     movff	0xfe4, 0xfea       	MOVFF	PREINC1, FSR0H
001590   ffea
001592   cfe4     movff	0xfe4, 0xfe9       	MOVFF	PREINC1, FSR0L
001594   ffe9
001596   cfe4     movff	0xfe4, 0xff4       	MOVFF	PREINC1, PRODH
001598   fff4
00159a   cfe4     movff	0xfe4, 0xff3       	MOVFF	PREINC1, PRODL
00159c   fff3
00159e   cfe4     movff	0xfe4, 0xfe0       	MOVFF	PREINC1, BSR
0015a0   ffe0
0015a2   cfe4     movff	0xfe4, 0xfd8       	MOVFF	PREINC1, STATUS
0015a4   ffd8
0015a6   cfe4     movff	0xfe4, 0xfe8       	MOVFF	PREINC1, WREG
0015a8   ffe8
0015aa   0010     retfie	0                 	RETFIE	
                                           
                                           ; ; Starting pCode block
                                           __str_0:
0015ac   6f44     movwf	0x44, 0x1          	DB	0x44, 0x6f, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x77, 0x61, 0x6e, 0x74, 0x20
0015ae   7920     btg	0x20, 0x4, 0x1       
0015b0   756f     btg	0x6f, 0x2, 0x1       
0015b2   7720     btg	0x20, 0x3, 0x1       
0015b4   6e61     movwf	0x61, 0            
0015b6   2074     addwfc	0x74, 0, 0        
0015b8   6f74     movwf	0x74, 0x1          	DB	0x74, 0x6f, 0x20, 0x20, 0x73, 0x65, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20
0015ba   2020     addwfc	0x20, 0, 0        
0015bc   6573     cpfsgt	0x73, 0x1         
0015be   2074     addwfc	0x74, 0, 0        
0015c0   6874     setf	0x74, 0             
0015c2   2065     addwfc	0x65, 0, 0        
0015c4   6974     setf	0x74, 0x1           	DB	0x74, 0x69, 0x6d, 0x65, 0x20, 0x3f, 0x20, 0x20, 0x00
0015c6   656d     cpfsgt	0x6d, 0x1         
0015c8   3f20     incfsz	0x20, 0x1, 0x1    
0015ca   2020     addwfc	0x20, 0, 0        
0015cc   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_1:
0015ce   5b20     subwfb	0x20, 0x1, 0x1    	DB	0x20, 0x5b, 0x25, 0x30, 0x32, 0x75, 0x5d, 0x3a, 0x20, 0x25, 0x30, 0x32
0015d0   3025     rrcf	0x25, 0, 0          
0015d2   7532     btg	0x32, 0x2, 0x1       
0015d4   3a5d     swapf	0x5d, 0x1, 0       
0015d6   2520     addwf	0x20, 0, 0x1       
0015d8   3230     rrcf	0x30, 0x1, 0        
0015da   2075     addwfc	0x75, 0, 0        	DB	0x75, 0x20, 0x3a, 0x20, 0x25, 0x30, 0x32, 0x75, 0x20, 0x20, 0x20, 0x20
0015dc   203a     addwfc	0x3a, 0, 0        
0015de   3025     rrcf	0x25, 0, 0          
0015e0   7532     btg	0x32, 0x2, 0x1       
0015e2   2020     addwfc	0x20, 0, 0        
0015e4   2020     addwfc	0x20, 0, 0        
0015e6   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
0015e8   2020     addwfc	0x20, 0, 0        
0015ea   2020     addwfc	0x20, 0, 0        
0015ec   2020     addwfc	0x20, 0, 0        
0015ee   2020     addwfc	0x20, 0, 0        
0015f0   2020     addwfc	0x20, 0, 0        
0015f2   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x00
0015f4   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_2:
0015f6   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x25, 0x30, 0x32, 0x75, 0x20, 0x3a, 0x5b, 0x25, 0x30, 0x32
0015f8   3025     rrcf	0x25, 0, 0          
0015fa   7532     btg	0x32, 0x2, 0x1       
0015fc   3a20     swapf	0x20, 0x1, 0       
0015fe   255b     addwf	0x5b, 0, 0x1       
001600   3230     rrcf	0x30, 0x1, 0        
001602   5d75     subwf	0x75, 0, 0x1       	DB	0x75, 0x5d, 0x3a, 0x20, 0x25, 0x30, 0x32, 0x75, 0x20, 0x20, 0x20, 0x20
001604   203a     addwfc	0x3a, 0, 0        
001606   3025     rrcf	0x25, 0, 0          
001608   7532     btg	0x32, 0x2, 0x1       
00160a   2020     addwfc	0x20, 0, 0        
00160c   2020     addwfc	0x20, 0, 0        
00160e   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
001610   2020     addwfc	0x20, 0, 0        
001612   2020     addwfc	0x20, 0, 0        
001614   2020     addwfc	0x20, 0, 0        
001616   2020     addwfc	0x20, 0, 0        
001618   2020     addwfc	0x20, 0, 0        
00161a   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x00
00161c   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_3:
00161e   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x25, 0x30, 0x32, 0x75, 0x20, 0x3a, 0x20, 0x25, 0x30, 0x32
001620   3025     rrcf	0x25, 0, 0          
001622   7532     btg	0x32, 0x2, 0x1       
001624   3a20     swapf	0x20, 0x1, 0       
001626   2520     addwf	0x20, 0, 0x1       
001628   3230     rrcf	0x30, 0x1, 0        
00162a   2075     addwfc	0x75, 0, 0        	DB	0x75, 0x20, 0x3a, 0x5b, 0x25, 0x30, 0x32, 0x75, 0x5d, 0x20, 0x20, 0x20
00162c   5b3a     subwfb	0x3a, 0x1, 0x1    
00162e   3025     rrcf	0x25, 0, 0          
001630   7532     btg	0x32, 0x2, 0x1       
001632   205d     addwfc	0x5d, 0, 0        
001634   2020     addwfc	0x20, 0, 0        
001636   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
001638   2020     addwfc	0x20, 0, 0        
00163a   2020     addwfc	0x20, 0, 0        
00163c   2020     addwfc	0x20, 0, 0        
00163e   2020     addwfc	0x20, 0, 0        
001640   2020     addwfc	0x20, 0, 0        
001642   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x00
001644   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_4:
001646   6f44     movwf	0x44, 0x1          	DB	0x44, 0x6f, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x77, 0x61, 0x6e, 0x74, 0x20
001648   7920     btg	0x20, 0x4, 0x1       
00164a   756f     btg	0x6f, 0x2, 0x1       
00164c   7720     btg	0x20, 0x3, 0x1       
00164e   6e61     movwf	0x61, 0            
001650   2074     addwfc	0x74, 0, 0        
001652   6f74     movwf	0x74, 0x1          	DB	0x74, 0x6f, 0x20, 0x20, 0x73, 0x65, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20
001654   2020     addwfc	0x20, 0, 0        
001656   6573     cpfsgt	0x73, 0x1         
001658   2074     addwfc	0x74, 0, 0        
00165a   6874     setf	0x74, 0             
00165c   2065     addwfc	0x65, 0, 0        
00165e   6c61     negf	0x61, 0             	DB	0x61, 0x6c, 0x61, 0x72, 0x6d, 0x20, 0x3f, 0x20, 0x00
001660   7261     btg	0x61, 0x1, 0         
001662   206d     addwfc	0x6d, 0, 0        
001664   203f     addwfc	0x3f, 0, 0        
001666   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_5:
001668   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x20, 0x5b, 0x4f, 0x4e, 0x20
00166a   6c41     negf	0x41, 0             
00166c   7261     btg	0x61, 0x1, 0         
00166e   206d     addwfc	0x6d, 0, 0        
001670   4f5b     dcfsnz	0x5b, 0x1, 0x1    
001672   204e     addwfc	0x4e, 0, 0        
001674   205d     addwfc	0x5d, 0, 0        	DB	0x5d, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
001676   2020     addwfc	0x20, 0, 0        
001678   2020     addwfc	0x20, 0, 0        
00167a   2020     addwfc	0x20, 0, 0        
00167c   2020     addwfc	0x20, 0, 0        
00167e   2020     addwfc	0x20, 0, 0        
001680   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00
001682   2020     addwfc	0x20, 0, 0        
001684   2020     addwfc	0x20, 0, 0        
001686   2020     addwfc	0x20, 0, 0        
001688   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_6:
00168a   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x20, 0x5b, 0x4f, 0x46, 0x46
00168c   6c41     negf	0x41, 0             
00168e   7261     btg	0x61, 0x1, 0         
001690   206d     addwfc	0x6d, 0, 0        
001692   4f5b     dcfsnz	0x5b, 0x1, 0x1    
001694   4646     rlncf	0x46, 0x1, 0       
001696   205d     addwfc	0x5d, 0, 0        	DB	0x5d, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
001698   2020     addwfc	0x20, 0, 0        
00169a   2020     addwfc	0x20, 0, 0        
00169c   2020     addwfc	0x20, 0, 0        
00169e   2020     addwfc	0x20, 0, 0        
0016a0   2020     addwfc	0x20, 0, 0        
0016a2   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00
0016a4   2020     addwfc	0x20, 0, 0        
0016a6   2020     addwfc	0x20, 0, 0        
0016a8   2020     addwfc	0x20, 0, 0        
0016aa   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_7:
0016ac   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x20, 0x61, 0x74
0016ae   2020     addwfc	0x20, 0, 0        
0016b0   6c41     negf	0x41, 0             
0016b2   7261     btg	0x61, 0x1, 0         
0016b4   206d     addwfc	0x6d, 0, 0        
0016b6   7461     btg	0x61, 0x2, 0         
0016b8   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5b, 0x25, 0x30, 0x32
0016ba   2020     addwfc	0x20, 0, 0        
0016bc   2020     addwfc	0x20, 0, 0        
0016be   2020     addwfc	0x20, 0, 0        
0016c0   255b     addwf	0x5b, 0, 0x1       
0016c2   3230     rrcf	0x30, 0x1, 0        
0016c4   5d75     subwf	0x75, 0, 0x1       	DB	0x75, 0x5d, 0x3a, 0x20, 0x25, 0x30, 0x32, 0x75, 0x20, 0x20, 0x20, 0x20
0016c6   203a     addwfc	0x3a, 0, 0        
0016c8   3025     rrcf	0x25, 0, 0          
0016ca   7532     btg	0x32, 0x2, 0x1       
0016cc   2020     addwfc	0x20, 0, 0        
0016ce   2020     addwfc	0x20, 0, 0        
0016d0   0000     nop                      	DB	0x00
                                           ; ; Starting pCode block
                                           __str_8:
0016d2   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x20, 0x61, 0x74
0016d4   2020     addwfc	0x20, 0, 0        
0016d6   6c41     negf	0x41, 0             
0016d8   7261     btg	0x61, 0x1, 0         
0016da   206d     addwfc	0x6d, 0, 0        
0016dc   7461     btg	0x61, 0x2, 0         
0016de   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x25, 0x30, 0x32
0016e0   2020     addwfc	0x20, 0, 0        
0016e2   2020     addwfc	0x20, 0, 0        
0016e4   2020     addwfc	0x20, 0, 0        
0016e6   2520     addwf	0x20, 0, 0x1       
0016e8   3230     rrcf	0x30, 0x1, 0        
0016ea   2075     addwfc	0x75, 0, 0        	DB	0x75, 0x20, 0x3a, 0x5b, 0x25, 0x30, 0x32, 0x75, 0x5d, 0x20, 0x20, 0x20
0016ec   5b3a     subwfb	0x3a, 0x1, 0x1    
0016ee   3025     rrcf	0x25, 0, 0          
0016f0   7532     btg	0x32, 0x2, 0x1       
0016f2   205d     addwfc	0x5d, 0, 0        
0016f4   2020     addwfc	0x20, 0, 0        
0016f6   0000     nop                      	DB	0x00
                                           ; ; Starting pCode block
                                           __str_9:
0016f8   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x25, 0x30, 0x32, 0x75, 0x3a, 0x25, 0x30, 0x32
0016fa   2020     addwfc	0x20, 0, 0        
0016fc   3025     rrcf	0x25, 0, 0          
0016fe   7532     btg	0x32, 0x2, 0x1       
001700   253a     addwf	0x3a, 0, 0x1       
001702   3230     rrcf	0x30, 0x1, 0        
001704   3a75     swapf	0x75, 0x1, 0       	DB	0x75, 0x3a, 0x25, 0x30, 0x32, 0x75, 0x20, 0x20, 0x20, 0x20, 0x41, 0x6c
001706   3025     rrcf	0x25, 0, 0          
001708   7532     btg	0x32, 0x2, 0x1       
00170a   2020     addwfc	0x20, 0, 0        
00170c   2020     addwfc	0x20, 0, 0        
00170e   6c41     negf	0x41, 0             
001710   7261     btg	0x61, 0x1, 0         	DB	0x61, 0x72, 0x6d, 0x20, 0x4f, 0x4e, 0x20, 0x20, 0x25, 0x30, 0x32, 0x75
001712   206d     addwfc	0x6d, 0, 0        
001714   4e4f     dcfsnz	0x4f, 0x1, 0      
001716   2020     addwfc	0x20, 0, 0        
001718   3025     rrcf	0x25, 0, 0          
00171a   7532     btg	0x32, 0x2, 0x1       
00171c   253a     addwf	0x3a, 0, 0x1       	DB	0x3a, 0x25, 0x30, 0x32, 0x75, 0x20, 0x00
00171e   3230     rrcf	0x30, 0x1, 0        
001720   2075     addwfc	0x75, 0, 0        
001722   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_10:
001724   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x25, 0x30, 0x32, 0x75, 0x3a, 0x25, 0x30, 0x32
001726   2020     addwfc	0x20, 0, 0        
001728   3025     rrcf	0x25, 0, 0          
00172a   7532     btg	0x32, 0x2, 0x1       
00172c   253a     addwf	0x3a, 0, 0x1       
00172e   3230     rrcf	0x30, 0x1, 0        
001730   3a75     swapf	0x75, 0x1, 0       	DB	0x75, 0x3a, 0x25, 0x30, 0x32, 0x75, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
001732   3025     rrcf	0x25, 0, 0          
001734   7532     btg	0x32, 0x2, 0x1       
001736   2020     addwfc	0x20, 0, 0        
001738   2020     addwfc	0x20, 0, 0        
00173a   2020     addwfc	0x20, 0, 0        
00173c   4120     rrncf	0x20, 0, 0x1       	DB	0x20, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x20, 0x20, 0x4f, 0x46, 0x46, 0x20
00173e   616c     cpfslt	0x6c, 0x1         
001740   6d72     negf	0x72, 0x1           
001742   2020     addwfc	0x20, 0, 0        
001744   464f     rlncf	0x4f, 0x1, 0       
001746   2046     addwfc	0x46, 0, 0        
001748   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x00
00174a   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_11:
00174c   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x25, 0x30, 0x32, 0x75, 0x3a, 0x25, 0x30, 0x32
00174e   2020     addwfc	0x20, 0, 0        
001750   3025     rrcf	0x25, 0, 0          
001752   7532     btg	0x32, 0x2, 0x1       
001754   253a     addwf	0x3a, 0, 0x1       
001756   3230     rrcf	0x30, 0x1, 0        
001758   3a75     swapf	0x75, 0x1, 0       	DB	0x75, 0x3a, 0x25, 0x30, 0x32, 0x75, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
00175a   3025     rrcf	0x25, 0, 0          
00175c   7532     btg	0x32, 0x2, 0x1       
00175e   2020     addwfc	0x20, 0, 0        
001760   2020     addwfc	0x20, 0, 0        
001762   2020     addwfc	0x20, 0, 0        
001764   2049     addwfc	0x49, 0, 0        	DB	0x49, 0x20, 0x61, 0x6d, 0x20, 0x72, 0x69, 0x6e, 0x67, 0x69, 0x6e, 0x67
001766   6d61     negf	0x61, 0x1           
001768   7220     btg	0x20, 0x1, 0         
00176a   6e69     movwf	0x69, 0            
00176c   6967     setf	0x67, 0x1           
00176e   676e     tstfsz	0x6e, 0x1         
001770   2021     addwfc	0x21, 0, 0        	DB	0x21, 0x20, 0x00
001772   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_12:
001774   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x25, 0x30, 0x32, 0x75, 0x3a, 0x25, 0x30, 0x32
001776   2020     addwfc	0x20, 0, 0        
001778   3025     rrcf	0x25, 0, 0          
00177a   7532     btg	0x32, 0x2, 0x1       
00177c   253a     addwf	0x3a, 0, 0x1       
00177e   3230     rrcf	0x30, 0x1, 0        
001780   3a75     swapf	0x75, 0x1, 0       	DB	0x75, 0x3a, 0x25, 0x30, 0x32, 0x75, 0x20, 0x20, 0x20, 0x20, 0x53, 0x6e
001782   3025     rrcf	0x25, 0, 0          
001784   7532     btg	0x32, 0x2, 0x1       
001786   2020     addwfc	0x20, 0, 0        
001788   2020     addwfc	0x20, 0, 0        
00178a   6e53     movwf	0x53, 0            
00178c   6f6f     movwf	0x6f, 0x1          	DB	0x6f, 0x6f, 0x7a, 0x65, 0x20, 0x25, 0x75, 0x20, 0x20, 0x25, 0x30, 0x32
00178e   657a     cpfsgt	0x7a, 0x1         
001790   2520     addwf	0x20, 0, 0x1       
001792   2075     addwfc	0x75, 0, 0        
001794   2520     addwf	0x20, 0, 0x1       
001796   3230     rrcf	0x30, 0x1, 0        
001798   3a75     swapf	0x75, 0x1, 0       	DB	0x75, 0x3a, 0x25, 0x30, 0x32, 0x75, 0x20, 0x00
00179a   3025     rrcf	0x25, 0, 0          
00179c   7532     btg	0x32, 0x2, 0x1       
00179e   0020     dw	0x20  ;unknown opcode 
                                           ; ; Starting pCode block
                                           __str_13:
0017a0   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x25, 0x30, 0x32, 0x75, 0x3a, 0x25, 0x30, 0x32
0017a2   2020     addwfc	0x20, 0, 0        
0017a4   3025     rrcf	0x25, 0, 0          
0017a6   7532     btg	0x32, 0x2, 0x1       
0017a8   253a     addwf	0x3a, 0, 0x1       
0017aa   3230     rrcf	0x30, 0x1, 0        
0017ac   3a75     swapf	0x75, 0x1, 0       	DB	0x75, 0x3a, 0x25, 0x30, 0x32, 0x75, 0x20, 0x20, 0x20, 0x20, 0x53, 0x6e
0017ae   3025     rrcf	0x25, 0, 0          
0017b0   7532     btg	0x32, 0x2, 0x1       
0017b2   2020     addwfc	0x20, 0, 0        
0017b4   2020     addwfc	0x20, 0, 0        
0017b6   6e53     movwf	0x53, 0            
0017b8   6f6f     movwf	0x6f, 0x1          	DB	0x6f, 0x6f, 0x7a, 0x65, 0x20, 0x25, 0x75, 0x20, 0x25, 0x30, 0x32, 0x75
0017ba   657a     cpfsgt	0x7a, 0x1         
0017bc   2520     addwf	0x20, 0, 0x1       
0017be   2075     addwfc	0x75, 0, 0        
0017c0   3025     rrcf	0x25, 0, 0          
0017c2   7532     btg	0x32, 0x2, 0x1       
0017c4   253a     addwf	0x3a, 0, 0x1       	DB	0x3a, 0x25, 0x30, 0x32, 0x75, 0x20, 0x00
0017c6   3230     rrcf	0x30, 0x1, 0        
0017c8   2075     addwfc	0x75, 0, 0        
0017ca   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_14:
0017cc   2a2a     incf	0x2a, 0x1, 0        	DB	0x2a, 0x2a, 0x2a, 0x2a, 0x20, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x20, 0x2a
0017ce   2a2a     incf	0x2a, 0x1, 0        
0017d0   4520     rlncf	0x20, 0, 0x1       
0017d2   5252     movf	0x52, 0x1, 0        
0017d4   524f     movf	0x4f, 0x1, 0        
0017d6   2a20     incf	0x20, 0x1, 0        
0017d8   2a2a     incf	0x2a, 0x1, 0        	DB	0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x20, 0x45, 0x52, 0x52
0017da   2a2a     incf	0x2a, 0x1, 0        
0017dc   2a2a     incf	0x2a, 0x1, 0        
0017de   2a2a     incf	0x2a, 0x1, 0        
0017e0   4520     rlncf	0x20, 0, 0x1       
0017e2   5252     movf	0x52, 0x1, 0        
0017e4   524f     movf	0x4f, 0x1, 0        	DB	0x4f, 0x52, 0x20, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x00
0017e6   2a20     incf	0x20, 0x1, 0        
0017e8   2a2a     incf	0x2a, 0x1, 0        
0017ea   2a2a     incf	0x2a, 0x1, 0        
0017ec   0000     nop                      
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 4786 (0x12b2) bytes ( 3.65%)
                                           ;           	 2393 (0x0959) words
                                           ; udata size:	   45 (0x002d) bytes ( 1.17%)
                                           ; access size:	   22 (0x0016) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Oct 17 2013) (Mac OS X ppc)
                                           ; This file was generated Fri Oct 25 14:19:33 2013
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _LCDInit
                                           	global _LCDUpdate
                                           	global _LCDErase
                                           	global _LCDText
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _AN0String
                                           	extern _AppConfig
                                           	extern _activeUDPSocket
                                           	extern _UDPSocketInfo
                                           	extern _UDPTxCount
                                           	extern _UDPRxCount
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _memset
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODH	equ	0xff4
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           
                                           udata_LCDBlocking_0	udata
                                           _LCDText	res	33
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDErase	code
                                           _LCDErase:
                                           ;	.line	392; TCPIP_Stack/LCDBlocking.c	void LCDErase(void)
003062   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
003064   ffe5
003066   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
003068   ffd9
00306a   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00306c   ffe5
00306e   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
003070   ffe5
003072   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
003074   ffe5
003076   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
003078   ffe5
00307a   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00307c   ffe5
00307e   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
003080   ffe5
003082   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
003084   ffe5
003086   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
003088   ffe5
                                           ;	.line	395; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0x01);
00308a   0e01     movlw	0x1                	MOVLW	0x01
00308c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00308e   0e00     movlw	0                  	MOVLW	0x00
003090   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003092   ec6c     call	0x34d8, 0           	CALL	_LCDWrite
003094   f01a
003096   0e02     movlw	0x2                	MOVLW	0x02
003098   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	396; TCPIP_Stack/LCDBlocking.c	DelayMs(2);
00309a   0e48     movlw	0x48               	MOVLW	0x48
00309c   6e00     movwf	0, 0               	MOVWF	r0x00
00309e   0e0d     movlw	0xd                	MOVLW	0x0d
0030a0   6e01     movwf	0x1, 0             	MOVWF	r0x01
0030a2   6a02     clrf	0x2, 0              	CLRF	r0x02
0030a4   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00305_DS_:
0030a6   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
0030a8   f004
0030aa   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
0030ac   f005
0030ae   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
0030b0   f006
0030b2   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
0030b4   f007
0030b6   0eff     movlw	0xff               	MOVLW	0xff
0030b8   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0030ba   0eff     movlw	0xff               	MOVLW	0xff
0030bc   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
0030be   0eff     movlw	0xff               	MOVLW	0xff
0030c0   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0030c2   0eff     movlw	0xff               	MOVLW	0xff
0030c4   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
0030c6   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0030c8   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
0030ca   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
0030cc   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
0030ce   e1eb     bnz	0x30a6               	BNZ	_00305_DS_
                                           ;	.line	399; TCPIP_Stack/LCDBlocking.c	memset(LCDText, ' ', 32);
0030d0   0e00     movlw	0                  	MOVLW	0x00
0030d2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0030d4   0e20     movlw	0x20               	MOVLW	0x20
0030d6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0030d8   0e20     movlw	0x20               	MOVLW	0x20
0030da   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0030dc   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
0030de   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0030e0   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
0030e2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0030e4   ec0c     call	0x2e18, 0           	CALL	_memset
0030e6   f017
0030e8   0e05     movlw	0x5                	MOVLW	0x05
0030ea   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0030ec   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
0030ee   f007
0030f0   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0030f2   f006
0030f4   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0030f6   f005
0030f8   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0030fa   f004
0030fc   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0030fe   f003
003100   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
003102   f002
003104   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
003106   f001
003108   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00310a   f000
00310c   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00310e   ffd9
003110   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDUpdate	code
                                           _LCDUpdate:
                                           ;	.line	332; TCPIP_Stack/LCDBlocking.c	void LCDUpdate(void)
0017ee   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0017f0   ffe5
0017f2   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0017f4   ffd9
0017f6   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0017f8   ffe5
0017fa   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0017fc   ffe5
0017fe   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
001800   ffe5
001802   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
001804   ffe5
001806   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
001808   ffe5
00180a   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
00180c   ffe5
00180e   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
001810   ffe5
001812   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
001814   ffe5
001816   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
001818   ffe5
                                           ;	.line	337; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0x02);
00181a   0e02     movlw	0x2                	MOVLW	0x02
00181c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00181e   0e00     movlw	0                  	MOVLW	0x00
001820   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001822   ec6c     call	0x34d8, 0           	CALL	_LCDWrite
001824   f01a
001826   0e02     movlw	0x2                	MOVLW	0x02
001828   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	338; TCPIP_Stack/LCDBlocking.c	DelayMs(2);
00182a   0e48     movlw	0x48               	MOVLW	0x48
00182c   6e00     movwf	0, 0               	MOVWF	r0x00
00182e   0e0d     movlw	0xd                	MOVLW	0x0d
001830   6e01     movwf	0x1, 0             	MOVWF	r0x01
001832   6a02     clrf	0x2, 0              	CLRF	r0x02
001834   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00225_DS_:
001836   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
001838   f004
00183a   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
00183c   f005
00183e   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
001840   f006
001842   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
001844   f007
001846   0eff     movlw	0xff               	MOVLW	0xff
001848   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
00184a   0eff     movlw	0xff               	MOVLW	0xff
00184c   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
00184e   0eff     movlw	0xff               	MOVLW	0xff
001850   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
001852   0eff     movlw	0xff               	MOVLW	0xff
001854   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
001856   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001858   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
00185a   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
00185c   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
00185e   e1eb     bnz	0x1836               	BNZ	_00225_DS_
                                           ;	.line	341; TCPIP_Stack/LCDBlocking.c	for(i = 0; i < 16u; i++)
001860   6a00     clrf	0, 0                	CLRF	r0x00
                                           _00257_DS_:
001862   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
001864   f001
001866   6a02     clrf	0x2, 0              	CLRF	r0x02
001868   0e00     movlw	0                  	MOVLW	0x00
00186a   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
00186c   e102     bnz	0x1872               	BNZ	_00297_DS_
00186e   0e10     movlw	0x10               	MOVLW	0x10
001870   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00297_DS_:
001872   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001874   d057     bra	0x1924               	BRA	_00260_DS_
                                           ;	.line	345; TCPIP_Stack/LCDBlocking.c	if(LCDText[i] == 0u)
001876   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
001878   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
00187a   6e01     movwf	0x1, 0             	MOVWF	r0x01
00187c   6a02     clrf	0x2, 0              	CLRF	r0x02
00187e   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
001880   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
001882   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
001884   ffe9
001886   c002     movff	0x2, 0xfea         	MOVFF	r0x02, FSR0H
001888   ffea
00188a   cfef     movff	0xfef, 0x1         	MOVFF	INDF0, r0x01
00188c   f001
00188e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001890   e119     bnz	0x18c4               	BNZ	_00232_DS_
                                           ;	.line	347; TCPIP_Stack/LCDBlocking.c	for(j=i; j < 16u; j++)
001892   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
001894   f001
                                           _00253_DS_:
001896   c001     movff	0x1, 0x2           	MOVFF	r0x01, r0x02
001898   f002
00189a   6a03     clrf	0x3, 0              	CLRF	r0x03
00189c   0e00     movlw	0                  	MOVLW	0x00
00189e   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
0018a0   e102     bnz	0x18a6               	BNZ	_00298_DS_
0018a2   0e10     movlw	0x10               	MOVLW	0x10
0018a4   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
                                           _00298_DS_:
0018a6   e20e     bc	0x18c4                	BC	_00232_DS_
                                           ;	.line	349; TCPIP_Stack/LCDBlocking.c	LCDText[j] = ' ';
0018a8   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
0018aa   2401     addwf	0x1, 0, 0          	ADDWF	r0x01, W
0018ac   6e02     movwf	0x2, 0             	MOVWF	r0x02
0018ae   6a03     clrf	0x3, 0              	CLRF	r0x03
0018b0   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
0018b2   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
0018b4   c002     movff	0x2, 0xfe9         	MOVFF	r0x02, FSR0L
0018b6   ffe9
0018b8   c003     movff	0x3, 0xfea         	MOVFF	r0x03, FSR0H
0018ba   ffea
0018bc   0e20     movlw	0x20               	MOVLW	0x20
0018be   6eef     movwf	0xef, 0            	MOVWF	INDF0
                                           ;	.line	347; TCPIP_Stack/LCDBlocking.c	for(j=i; j < 16u; j++)
0018c0   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
0018c2   d7e9     bra	0x1896               	BRA	_00253_DS_
                                           _00232_DS_:
                                           ;	.line	352; TCPIP_Stack/LCDBlocking.c	LCDWrite(1, LCDText[i]);
0018c4   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
0018c6   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
0018c8   6e01     movwf	0x1, 0             	MOVWF	r0x01
0018ca   6a02     clrf	0x2, 0              	CLRF	r0x02
0018cc   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
0018ce   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0018d0   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
0018d2   ffe9
0018d4   c002     movff	0x2, 0xfea         	MOVFF	r0x02, FSR0H
0018d6   ffea
0018d8   cfef     movff	0xfef, 0x1         	MOVFF	INDF0, r0x01
0018da   f001
0018dc   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0018de   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0018e0   0e01     movlw	0x1                	MOVLW	0x01
0018e2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0018e4   ec6c     call	0x34d8, 0           	CALL	_LCDWrite
0018e6   f01a
0018e8   0e02     movlw	0x2                	MOVLW	0x02
0018ea   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	353; TCPIP_Stack/LCDBlocking.c	Delay10us(5);
0018ec   0e55     movlw	0x55               	MOVLW	0x55
0018ee   6e01     movwf	0x1, 0             	MOVWF	r0x01
0018f0   6a02     clrf	0x2, 0              	CLRF	r0x02
0018f2   6a03     clrf	0x3, 0              	CLRF	r0x03
0018f4   6a04     clrf	0x4, 0              	CLRF	r0x04
                                           _00233_DS_:
0018f6   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
0018f8   f005
0018fa   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
0018fc   f006
0018fe   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
001900   f007
001902   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
001904   f008
001906   0eff     movlw	0xff               	MOVLW	0xff
001908   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
00190a   0eff     movlw	0xff               	MOVLW	0xff
00190c   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
00190e   0eff     movlw	0xff               	MOVLW	0xff
001910   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
001912   0eff     movlw	0xff               	MOVLW	0xff
001914   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
001916   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001918   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
00191a   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
00191c   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
00191e   e1eb     bnz	0x18f6               	BNZ	_00233_DS_
                                           ;	.line	341; TCPIP_Stack/LCDBlocking.c	for(i = 0; i < 16u; i++)
001920   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
001922   d79f     bra	0x1862               	BRA	_00257_DS_
                                           _00260_DS_:
                                           ;	.line	357; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0xC0);
001924   0ec0     movlw	0xc0               	MOVLW	0xc0
001926   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001928   0e00     movlw	0                  	MOVLW	0x00
00192a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00192c   ec6c     call	0x34d8, 0           	CALL	_LCDWrite
00192e   f01a
001930   0e02     movlw	0x2                	MOVLW	0x02
001932   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	358; TCPIP_Stack/LCDBlocking.c	Delay10us(5);
001934   0e55     movlw	0x55               	MOVLW	0x55
001936   6e00     movwf	0, 0               	MOVWF	r0x00
001938   6a01     clrf	0x1, 0              	CLRF	r0x01
00193a   6a02     clrf	0x2, 0              	CLRF	r0x02
00193c   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00239_DS_:
00193e   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
001940   f004
001942   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
001944   f005
001946   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
001948   f006
00194a   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
00194c   f007
00194e   0eff     movlw	0xff               	MOVLW	0xff
001950   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
001952   0eff     movlw	0xff               	MOVLW	0xff
001954   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
001956   0eff     movlw	0xff               	MOVLW	0xff
001958   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
00195a   0eff     movlw	0xff               	MOVLW	0xff
00195c   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
00195e   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001960   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
001962   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
001964   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
001966   e1eb     bnz	0x193e               	BNZ	_00239_DS_
                                           ;	.line	361; TCPIP_Stack/LCDBlocking.c	for(i = 16; i < 32u; i++)
001968   0e10     movlw	0x10               	MOVLW	0x10
00196a   6e00     movwf	0, 0               	MOVWF	r0x00
                                           _00265_DS_:
00196c   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
00196e   f001
001970   6a02     clrf	0x2, 0              	CLRF	r0x02
001972   0e00     movlw	0                  	MOVLW	0x00
001974   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
001976   e102     bnz	0x197c               	BNZ	_00299_DS_
001978   0e20     movlw	0x20               	MOVLW	0x20
00197a   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00299_DS_:
00197c   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00197e   d057     bra	0x1a2e               	BRA	_00269_DS_
                                           ;	.line	365; TCPIP_Stack/LCDBlocking.c	if(LCDText[i] == 0u)
001980   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
001982   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
001984   6e01     movwf	0x1, 0             	MOVWF	r0x01
001986   6a02     clrf	0x2, 0              	CLRF	r0x02
001988   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
00198a   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
00198c   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
00198e   ffe9
001990   c002     movff	0x2, 0xfea         	MOVFF	r0x02, FSR0H
001992   ffea
001994   cfef     movff	0xfef, 0x1         	MOVFF	INDF0, r0x01
001996   f001
001998   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00199a   e119     bnz	0x19ce               	BNZ	_00246_DS_
                                           ;	.line	367; TCPIP_Stack/LCDBlocking.c	for(j=i; j < 32u; j++)
00199c   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
00199e   f001
                                           _00261_DS_:
0019a0   c001     movff	0x1, 0x2           	MOVFF	r0x01, r0x02
0019a2   f002
0019a4   6a03     clrf	0x3, 0              	CLRF	r0x03
0019a6   0e00     movlw	0                  	MOVLW	0x00
0019a8   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
0019aa   e102     bnz	0x19b0               	BNZ	_00300_DS_
0019ac   0e20     movlw	0x20               	MOVLW	0x20
0019ae   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
                                           _00300_DS_:
0019b0   e20e     bc	0x19ce                	BC	_00246_DS_
                                           ;	.line	369; TCPIP_Stack/LCDBlocking.c	LCDText[j] = ' ';
0019b2   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
0019b4   2401     addwf	0x1, 0, 0          	ADDWF	r0x01, W
0019b6   6e02     movwf	0x2, 0             	MOVWF	r0x02
0019b8   6a03     clrf	0x3, 0              	CLRF	r0x03
0019ba   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
0019bc   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
0019be   c002     movff	0x2, 0xfe9         	MOVFF	r0x02, FSR0L
0019c0   ffe9
0019c2   c003     movff	0x3, 0xfea         	MOVFF	r0x03, FSR0H
0019c4   ffea
0019c6   0e20     movlw	0x20               	MOVLW	0x20
0019c8   6eef     movwf	0xef, 0            	MOVWF	INDF0
                                           ;	.line	367; TCPIP_Stack/LCDBlocking.c	for(j=i; j < 32u; j++)
0019ca   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
0019cc   d7e9     bra	0x19a0               	BRA	_00261_DS_
                                           _00246_DS_:
                                           ;	.line	372; TCPIP_Stack/LCDBlocking.c	LCDWrite(1, LCDText[i]);
0019ce   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
0019d0   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
0019d2   6e01     movwf	0x1, 0             	MOVWF	r0x01
0019d4   6a02     clrf	0x2, 0              	CLRF	r0x02
0019d6   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
0019d8   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0019da   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
0019dc   ffe9
0019de   c002     movff	0x2, 0xfea         	MOVFF	r0x02, FSR0H
0019e0   ffea
0019e2   cfef     movff	0xfef, 0x1         	MOVFF	INDF0, r0x01
0019e4   f001
0019e6   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0019e8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0019ea   0e01     movlw	0x1                	MOVLW	0x01
0019ec   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0019ee   ec6c     call	0x34d8, 0           	CALL	_LCDWrite
0019f0   f01a
0019f2   0e02     movlw	0x2                	MOVLW	0x02
0019f4   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	373; TCPIP_Stack/LCDBlocking.c	Delay10us(5);
0019f6   0e55     movlw	0x55               	MOVLW	0x55
0019f8   6e01     movwf	0x1, 0             	MOVWF	r0x01
0019fa   6a02     clrf	0x2, 0              	CLRF	r0x02
0019fc   6a03     clrf	0x3, 0              	CLRF	r0x03
0019fe   6a04     clrf	0x4, 0              	CLRF	r0x04
                                           _00247_DS_:
001a00   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
001a02   f005
001a04   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
001a06   f006
001a08   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
001a0a   f007
001a0c   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
001a0e   f008
001a10   0eff     movlw	0xff               	MOVLW	0xff
001a12   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
001a14   0eff     movlw	0xff               	MOVLW	0xff
001a16   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
001a18   0eff     movlw	0xff               	MOVLW	0xff
001a1a   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
001a1c   0eff     movlw	0xff               	MOVLW	0xff
001a1e   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
001a20   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001a22   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
001a24   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
001a26   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
001a28   e1eb     bnz	0x1a00               	BNZ	_00247_DS_
                                           ;	.line	361; TCPIP_Stack/LCDBlocking.c	for(i = 16; i < 32u; i++)
001a2a   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
001a2c   d79f     bra	0x196c               	BRA	_00265_DS_
                                           _00269_DS_:
001a2e   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
001a30   f008
001a32   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
001a34   f007
001a36   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
001a38   f006
001a3a   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
001a3c   f005
001a3e   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
001a40   f004
001a42   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
001a44   f003
001a46   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
001a48   f002
001a4a   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
001a4c   f001
001a4e   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
001a50   f000
001a52   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001a54   ffd9
001a56   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDInit	code
                                           _LCDInit:
                                           ;	.line	207; TCPIP_Stack/LCDBlocking.c	void LCDInit(void)
001a58   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
001a5a   ffe5
001a5c   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001a5e   ffd9
001a60   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
001a62   ffe5
001a64   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
001a66   ffe5
001a68   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
001a6a   ffe5
001a6c   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
001a6e   ffe5
001a70   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
001a72   ffe5
001a74   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
001a76   ffe5
001a78   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
001a7a   ffe5
001a7c   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
001a7e   ffe5
001a80   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
001a82   ffe5
                                           ;	.line	211; TCPIP_Stack/LCDBlocking.c	memset(LCDText, ' ', sizeof(LCDText)-1);
001a84   0e00     movlw	0                  	MOVLW	0x00
001a86   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001a88   0e20     movlw	0x20               	MOVLW	0x20
001a8a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001a8c   0e20     movlw	0x20               	MOVLW	0x20
001a8e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001a90   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
001a92   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001a94   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
001a96   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001a98   ec0c     call	0x2e18, 0           	CALL	_memset
001a9a   f017
001a9c   0e05     movlw	0x5                	MOVLW	0x05
001a9e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
001aa0   010f     movlb	0xf                	BANKSEL	(_LCDText + 32)
                                           ;	.line	212; TCPIP_Stack/LCDBlocking.c	LCDText[sizeof(LCDText)-1] = 0;
001aa2   6b20     clrf	0x20, 0x1           	CLRF	(_LCDText + 32), B
                                           ;	.line	215; TCPIP_Stack/LCDBlocking.c	LCD_E_IO = 0;
001aa4   9090     bcf	0x90, 0, 0           	BCF	_LATHbits, 0
                                           ;	.line	216; TCPIP_Stack/LCDBlocking.c	LCD_RD_WR_IO = 0;
001aa6   9290     bcf	0x90, 0x1, 0         	BCF	_LATHbits, 1
                                           ;	.line	220; TCPIP_Stack/LCDBlocking.c	LCD_DATA_TRIS = 0x00;
001aa8   6a96     clrf	0x96, 0             	CLRF	_TRISE
                                           ;	.line	233; TCPIP_Stack/LCDBlocking.c	LCD_RD_WR_TRIS = 0;
001aaa   9299     bcf	0x99, 0x1, 0         	BCF	_TRISHbits, 1
                                           ;	.line	234; TCPIP_Stack/LCDBlocking.c	LCD_RS_TRIS = 0;
001aac   9499     bcf	0x99, 0x2, 0         	BCF	_TRISHbits, 2
                                           ;	.line	235; TCPIP_Stack/LCDBlocking.c	LCD_E_TRIS = 0;
001aae   9099     bcf	0x99, 0, 0           	BCF	_TRISHbits, 0
                                           ;	.line	239; TCPIP_Stack/LCDBlocking.c	DelayMs(40);
001ab0   0ea0     movlw	0xa0               	MOVLW	0xa0
001ab2   6e00     movwf	0, 0               	MOVWF	r0x00
001ab4   0e09     movlw	0x9                	MOVLW	0x09
001ab6   6e01     movwf	0x1, 0             	MOVWF	r0x01
001ab8   0e01     movlw	0x1                	MOVLW	0x01
001aba   6e02     movwf	0x2, 0             	MOVWF	r0x02
001abc   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00143_DS_:
001abe   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
001ac0   f004
001ac2   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
001ac4   f005
001ac6   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
001ac8   f006
001aca   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
001acc   f007
001ace   0eff     movlw	0xff               	MOVLW	0xff
001ad0   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
001ad2   0eff     movlw	0xff               	MOVLW	0xff
001ad4   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
001ad6   0eff     movlw	0xff               	MOVLW	0xff
001ad8   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
001ada   0eff     movlw	0xff               	MOVLW	0xff
001adc   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
001ade   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001ae0   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
001ae2   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
001ae4   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
001ae6   e1eb     bnz	0x1abe               	BNZ	_00143_DS_
                                           ;	.line	247; TCPIP_Stack/LCDBlocking.c	LCD_RS_IO = 0;
001ae8   9490     bcf	0x90, 0x2, 0         	BCF	_LATHbits, 2
                                           ;	.line	249; TCPIP_Stack/LCDBlocking.c	LCD_DATA_IO = 0x03;
001aea   0e03     movlw	0x3                	MOVLW	0x03
001aec   6e8d     movwf	0x8d, 0            	MOVWF	_LATE
001aee   0000     nop                      	nop 
001af0   0000     nop                      	nop 
                                           ;	.line	264; TCPIP_Stack/LCDBlocking.c	for(i = 0; i < 3u; i++)
001af2   6a00     clrf	0, 0                	CLRF	r0x00
                                           _00191_DS_:
001af4   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
001af6   f001
001af8   6a02     clrf	0x2, 0              	CLRF	r0x02
001afa   0e00     movlw	0                  	MOVLW	0x00
001afc   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
001afe   e102     bnz	0x1b04               	BNZ	_00220_DS_
001b00   0e03     movlw	0x3                	MOVLW	0x03
001b02   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00220_DS_:
001b04   e239     bc	0x1b78                	BC	_00194_DS_
                                           ;	.line	266; TCPIP_Stack/LCDBlocking.c	LCD_E_IO = 1;
001b06   8090     bsf	0x90, 0, 0           	BSF	_LATHbits, 0
                                           ;	.line	267; TCPIP_Stack/LCDBlocking.c	Delay10us(1);	       	// Wait E Pulse width time (min 230ns)
001b08   0e11     movlw	0x11               	MOVLW	0x11
001b0a   6e01     movwf	0x1, 0             	MOVWF	r0x01
001b0c   6a02     clrf	0x2, 0              	CLRF	r0x02
001b0e   6a03     clrf	0x3, 0              	CLRF	r0x03
001b10   6a04     clrf	0x4, 0              	CLRF	r0x04
                                           _00155_DS_:
001b12   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
001b14   f005
001b16   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
001b18   f006
001b1a   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
001b1c   f007
001b1e   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
001b20   f008
001b22   0eff     movlw	0xff               	MOVLW	0xff
001b24   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
001b26   0eff     movlw	0xff               	MOVLW	0xff
001b28   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
001b2a   0eff     movlw	0xff               	MOVLW	0xff
001b2c   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
001b2e   0eff     movlw	0xff               	MOVLW	0xff
001b30   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
001b32   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001b34   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
001b36   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
001b38   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
001b3a   e1eb     bnz	0x1b12               	BNZ	_00155_DS_
                                           ;	.line	268; TCPIP_Stack/LCDBlocking.c	LCD_E_IO = 0;
001b3c   9090     bcf	0x90, 0, 0           	BCF	_LATHbits, 0
                                           ;	.line	269; TCPIP_Stack/LCDBlocking.c	DelayMs(2);
001b3e   0e48     movlw	0x48               	MOVLW	0x48
001b40   6e01     movwf	0x1, 0             	MOVWF	r0x01
001b42   0e0d     movlw	0xd                	MOVLW	0x0d
001b44   6e02     movwf	0x2, 0             	MOVWF	r0x02
001b46   6a03     clrf	0x3, 0              	CLRF	r0x03
001b48   6a04     clrf	0x4, 0              	CLRF	r0x04
                                           _00161_DS_:
001b4a   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
001b4c   f005
001b4e   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
001b50   f006
001b52   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
001b54   f007
001b56   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
001b58   f008
001b5a   0eff     movlw	0xff               	MOVLW	0xff
001b5c   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
001b5e   0eff     movlw	0xff               	MOVLW	0xff
001b60   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
001b62   0eff     movlw	0xff               	MOVLW	0xff
001b64   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
001b66   0eff     movlw	0xff               	MOVLW	0xff
001b68   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
001b6a   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001b6c   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
001b6e   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
001b70   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
001b72   e1eb     bnz	0x1b4a               	BNZ	_00161_DS_
                                           ;	.line	264; TCPIP_Stack/LCDBlocking.c	for(i = 0; i < 3u; i++)
001b74   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
001b76   d7be     bra	0x1af4               	BRA	_00191_DS_
                                           _00194_DS_:
                                           ;	.line	295; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0x38);
001b78   0e38     movlw	0x38               	MOVLW	0x38
001b7a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001b7c   0e00     movlw	0                  	MOVLW	0x00
001b7e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001b80   ec6c     call	0x34d8, 0           	CALL	_LCDWrite
001b82   f01a
001b84   0e02     movlw	0x2                	MOVLW	0x02
001b86   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	297; TCPIP_Stack/LCDBlocking.c	Delay10us(5);
001b88   0e55     movlw	0x55               	MOVLW	0x55
001b8a   6e00     movwf	0, 0               	MOVWF	r0x00
001b8c   6a01     clrf	0x1, 0              	CLRF	r0x01
001b8e   6a02     clrf	0x2, 0              	CLRF	r0x02
001b90   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00167_DS_:
001b92   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
001b94   f004
001b96   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
001b98   f005
001b9a   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
001b9c   f006
001b9e   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
001ba0   f007
001ba2   0eff     movlw	0xff               	MOVLW	0xff
001ba4   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
001ba6   0eff     movlw	0xff               	MOVLW	0xff
001ba8   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
001baa   0eff     movlw	0xff               	MOVLW	0xff
001bac   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
001bae   0eff     movlw	0xff               	MOVLW	0xff
001bb0   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
001bb2   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001bb4   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
001bb6   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
001bb8   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
001bba   e1eb     bnz	0x1b92               	BNZ	_00167_DS_
                                           ;	.line	300; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0x06);	// Increment after each write, do not shift
001bbc   0e06     movlw	0x6                	MOVLW	0x06
001bbe   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001bc0   0e00     movlw	0                  	MOVLW	0x00
001bc2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001bc4   ec6c     call	0x34d8, 0           	CALL	_LCDWrite
001bc6   f01a
001bc8   0e02     movlw	0x2                	MOVLW	0x02
001bca   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	301; TCPIP_Stack/LCDBlocking.c	Delay10us(5);
001bcc   0e55     movlw	0x55               	MOVLW	0x55
001bce   6e00     movwf	0, 0               	MOVWF	r0x00
001bd0   6a01     clrf	0x1, 0              	CLRF	r0x01
001bd2   6a02     clrf	0x2, 0              	CLRF	r0x02
001bd4   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00173_DS_:
001bd6   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
001bd8   f004
001bda   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
001bdc   f005
001bde   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
001be0   f006
001be2   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
001be4   f007
001be6   0eff     movlw	0xff               	MOVLW	0xff
001be8   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
001bea   0eff     movlw	0xff               	MOVLW	0xff
001bec   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
001bee   0eff     movlw	0xff               	MOVLW	0xff
001bf0   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
001bf2   0eff     movlw	0xff               	MOVLW	0xff
001bf4   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
001bf6   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001bf8   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
001bfa   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
001bfc   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
001bfe   e1eb     bnz	0x1bd6               	BNZ	_00173_DS_
                                           ;	.line	304; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0x0C);	// Turn display on, no cusor, no cursor blink
001c00   0e0c     movlw	0xc                	MOVLW	0x0c
001c02   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c04   0e00     movlw	0                  	MOVLW	0x00
001c06   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c08   ec6c     call	0x34d8, 0           	CALL	_LCDWrite
001c0a   f01a
001c0c   0e02     movlw	0x2                	MOVLW	0x02
001c0e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	305; TCPIP_Stack/LCDBlocking.c	Delay10us(5);
001c10   0e55     movlw	0x55               	MOVLW	0x55
001c12   6e00     movwf	0, 0               	MOVWF	r0x00
001c14   6a01     clrf	0x1, 0              	CLRF	r0x01
001c16   6a02     clrf	0x2, 0              	CLRF	r0x02
001c18   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00179_DS_:
001c1a   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
001c1c   f004
001c1e   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
001c20   f005
001c22   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
001c24   f006
001c26   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
001c28   f007
001c2a   0eff     movlw	0xff               	MOVLW	0xff
001c2c   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
001c2e   0eff     movlw	0xff               	MOVLW	0xff
001c30   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
001c32   0eff     movlw	0xff               	MOVLW	0xff
001c34   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
001c36   0eff     movlw	0xff               	MOVLW	0xff
001c38   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
001c3a   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001c3c   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
001c3e   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
001c40   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
001c42   e1eb     bnz	0x1c1a               	BNZ	_00179_DS_
                                           ;	.line	308; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0x01);	
001c44   0e01     movlw	0x1                	MOVLW	0x01
001c46   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c48   0e00     movlw	0                  	MOVLW	0x00
001c4a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c4c   ec6c     call	0x34d8, 0           	CALL	_LCDWrite
001c4e   f01a
001c50   0e02     movlw	0x2                	MOVLW	0x02
001c52   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	309; TCPIP_Stack/LCDBlocking.c	DelayMs(2);
001c54   0e48     movlw	0x48               	MOVLW	0x48
001c56   6e00     movwf	0, 0               	MOVWF	r0x00
001c58   0e0d     movlw	0xd                	MOVLW	0x0d
001c5a   6e01     movwf	0x1, 0             	MOVWF	r0x01
001c5c   6a02     clrf	0x2, 0              	CLRF	r0x02
001c5e   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00185_DS_:
001c60   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
001c62   f004
001c64   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
001c66   f005
001c68   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
001c6a   f006
001c6c   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
001c6e   f007
001c70   0eff     movlw	0xff               	MOVLW	0xff
001c72   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
001c74   0eff     movlw	0xff               	MOVLW	0xff
001c76   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
001c78   0eff     movlw	0xff               	MOVLW	0xff
001c7a   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
001c7c   0eff     movlw	0xff               	MOVLW	0xff
001c7e   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
001c80   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001c82   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
001c84   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
001c86   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
001c88   e1eb     bnz	0x1c60               	BNZ	_00185_DS_
001c8a   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
001c8c   f008
001c8e   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
001c90   f007
001c92   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
001c94   f006
001c96   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
001c98   f005
001c9a   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
001c9c   f004
001c9e   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
001ca0   f003
001ca2   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
001ca4   f002
001ca6   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
001ca8   f001
001caa   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
001cac   f000
001cae   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001cb0   ffd9
001cb2   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDWrite	code
                                           _LCDWrite:
                                           ;	.line	94; TCPIP_Stack/LCDBlocking.c	static void LCDWrite(BYTE RS, BYTE Data)
0034d8   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0034da   ffe5
0034dc   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0034de   ffd9
0034e0   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0034e2   ffe5
0034e4   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0034e6   ffe5
0034e8   0e02     movlw	0x2                	MOVLW	0x02
0034ea   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0034ec   f000
0034ee   0e03     movlw	0x3                	MOVLW	0x03
0034f0   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0034f2   f001
                                           ;	.line	97; TCPIP_Stack/LCDBlocking.c	LCD_DATA_TRIS = 0x00;
0034f4   6a96     clrf	0x96, 0             	CLRF	_TRISE
                                           ;	.line	110; TCPIP_Stack/LCDBlocking.c	LCD_RS_TRIS = 0;
0034f6   9499     bcf	0x99, 0x2, 0         	BCF	_TRISHbits, 2
                                           ;	.line	111; TCPIP_Stack/LCDBlocking.c	LCD_RD_WR_TRIS = 0;
0034f8   9299     bcf	0x99, 0x1, 0         	BCF	_TRISHbits, 1
                                           ;	.line	112; TCPIP_Stack/LCDBlocking.c	LCD_RD_WR_IO = 0;
0034fa   9290     bcf	0x90, 0x1, 0         	BCF	_LATHbits, 1
                                           ;	.line	113; TCPIP_Stack/LCDBlocking.c	LCD_RS_IO = RS;
0034fc   5000     movf	0, 0, 0             	MOVF	r0x00, W
0034fe   0b01     andlw	0x1                	ANDLW	0x01
003500   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
003502   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
003504   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
003506   5090     movf	0x90, 0, 0          	MOVF	_LATHbits, W
003508   0bfb     andlw	0xfb               	ANDLW	0xfb
00350a   10f4     iorwf	0xf4, 0, 0         	IORWF	PRODH, W
00350c   6e90     movwf	0x90, 0            	MOVWF	_LATHbits
                                           ;	.line	140; TCPIP_Stack/LCDBlocking.c	LCD_DATA_IO = Data;
00350e   c001     movff	0x1, 0xf8d         	MOVFF	r0x01, _LATE
003510   ff8d
003512   0000     nop                      	nop 
003514   0000     nop                      	nop 
                                           ;	.line	155; TCPIP_Stack/LCDBlocking.c	LCD_E_IO = 1;
003516   8090     bsf	0x90, 0, 0           	BSF	_LATHbits, 0
003518   0000     nop                      	nop 
00351a   0000     nop                      	nop 
00351c   0000     nop                      	nop 
00351e   0000     nop                      	nop 
003520   0000     nop                      	nop 
003522   0000     nop                      	nop 
003524   0000     nop                      	nop 
003526   0000     nop                      	nop 
003528   0000     nop                      	nop 
                                           ;	.line	165; TCPIP_Stack/LCDBlocking.c	LCD_E_IO = 0;
00352a   9090     bcf	0x90, 0, 0           	BCF	_LATHbits, 0
00352c   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00352e   f001
003530   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
003532   f000
003534   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
003536   ffd9
003538   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 1496 (0x05d8) bytes ( 1.14%)
                                           ;           	  748 (0x02ec) words
                                           ; udata size:	   33 (0x0021) bytes ( 0.86%)
                                           ; access size:	    9 (0x0009) bytes
                                           
                                           
                                           	end
