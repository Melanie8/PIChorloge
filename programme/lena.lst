gplink-1.2.0 #980 (Oct 17 2013)
Copyright (c) 1998-2013 gputils project
Listing File Generated: 10-25-2013  16:41:52
 
 
Address  Value    Disassembly              Source
-------  -----    -----------              ------
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Oct 17 2013) (Mac OS X ppc)
                                           ; This file was generated Fri Oct 25 16:39:29 2013
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _inc_tsec
                                           	global _inc_ahour
                                           	global _inc_amin
                                           	global _dec_ahour
                                           	global _dec_amin
                                           	global _time
                                           	global _manageseconds
                                           	global _button
                                           	global _refresh_lcd
                                           	global _DisplayString
                                           	global _strlcpy
                                           	global _chandelle
                                           	global _thour
                                           	global _tmin
                                           	global _tsec
                                           	global _alarm_set
                                           	global _ahour
                                           	global _amin
                                           	global _ahour_o
                                           	global _amin_o
                                           	global _snooze
                                           	global _stop_ringing
                                           	global _whereami
                                           	global _new_time
                                           	global _halfsecond
                                           	global _button1
                                           	global _button2
                                           	global _overflows
                                           	global _pseudoseconds
                                           	global _high_isr
                                           	global _low_isr
                                           	global _main
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern __gptrget1
                                           	extern __gptrput1
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _LCDText
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _sprintf
                                           	extern _strlen
                                           	extern _LCDInit
                                           	extern _LCDUpdate
                                           	extern __divsint
                                           	extern __modsint
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           PCL	equ	0xff9
                                           PCLATH	equ	0xffa
                                           PCLATU	equ	0xffb
                                           WREG	equ	0xfe8
                                           BSR	equ	0xfe0
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           	idata
                                           _chandelle	db	0x01
                                           _thour	db	0x00
                                           _tmin	db	0x00
                                           _tsec	db	0x00
                                           _alarm_set	db	0x00
                                           _ahour	db	0x00
                                           _amin	db	0x00
                                           _ahour_o	db	0x00
                                           _amin_o	db	0x00
                                           _snooze	db	0x00
                                           _stop_ringing	db	0x00
                                           _whereami	db	0x00
                                           _new_time	db	0x00
                                           _halfsecond	db	0x00
                                           _button1	db	0x00
                                           _button2	db	0x00
                                           _overflows	db	0x00, 0x00
                                           _pseudoseconds	db	0x00, 0x00
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           r0x0a	res	1
                                           r0x0b	res	1
                                           r0x0c	res	1
                                           r0x0d	res	1
                                           r0x0e	res	1
                                           r0x0f	res	1
                                           r0x10	res	1
                                           r0x11	res	1
                                           r0x12	res	1
                                           r0x13	res	1
                                           r0x14	res	1
                                           r0x15	res	1
                                           
                                           udata_lena_0	udata
                                           _refresh_lcd_display_1_1	res	32
                                           
                                           ;--------------------------------------------------------
                                           ; interrupt vector 
                                           ;--------------------------------------------------------
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; ; Starting pCode block for absolute section
                                           ; ;-----------------------------------------
                                           S_lena_ivec_0x1_high_isr	code	0X000008
                                           ivec_0x1_high_isr:
000008   ef1f     goto    0xe3e            	GOTO	_high_isr
00000a   f007
                                           
                                           ; ; Starting pCode block for absolute section
                                           ; ;-----------------------------------------
                                           S_lena_ivec_0x2_low_isr	code	0X000018
                                           ivec_0x2_low_isr:
000018   ef48     goto    0x2a90           	GOTO	_low_isr
00001a   f015
                                           
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_lena__main	code
                                           _main:
                                           ;	.line	142; lena.c	RCONbits.IPEN       = 1; //enable interrupts priority levels
002bca   8ed0     bsf     0xd0, 0x7, 0     	BSF	_RCONbits, 7
                                           ;	.line	143; lena.c	INTCONbits.GIE      = 1; //enables all high-priority interrupts
002bcc   8ef2     bsf     0xf2, 0x7, 0     	BSF	_INTCONbits, 7
                                           ;	.line	144; lena.c	INTCONbits.PEIE     = 1; //enables all low-priority peripheral interrupts
002bce   8cf2     bsf     0xf2, 0x6, 0     	BSF	_INTCONbits, 6
                                           ;	.line	147; lena.c	T0CONbits.TMR0ON    = 1; //enables Timer0
002bd0   8ed5     bsf     0xd5, 0x7, 0     	BSF	_T0CONbits, 7
                                           ;	.line	148; lena.c	INTCONbits.TMR0IE   = 1; //enables the TMR0 overflow interrupt
002bd2   8af2     bsf     0xf2, 0x5, 0     	BSF	_INTCONbits, 5
                                           ;	.line	149; lena.c	INTCONbits.TMR0IF   = 0; //clear Timer0 overflow bit
002bd4   94f2     bcf     0xf2, 0x2, 0     	BCF	_INTCONbits, 2
                                           ;	.line	150; lena.c	INTCON2bits.TMR0IP  = 1; //high priority
002bd6   84f1     bsf     0xf1, 0x2, 0     	BSF	_INTCON2bits, 2
                                           ;	.line	151; lena.c	T0CONbits.T08BIT    = 0; //timer0 is configured as a 16-bit timer/counter
002bd8   9cd5     bcf     0xd5, 0x6, 0     	BCF	_T0CONbits, 6
                                           ;	.line	152; lena.c	T0CONbits.T0CS      = 0; //internal instruction cycle clock (CLKO)
002bda   9ad5     bcf     0xd5, 0x5, 0     	BCF	_T0CONbits, 5
                                           ;	.line	153; lena.c	T0CONbits.PSA       = 1; //timer0 prescaler is not assigned
002bdc   86d5     bsf     0xd5, 0x3, 0     	BSF	_T0CONbits, 3
                                           ;	.line	154; lena.c	TMR0L = 0;    TMR0H = 0;
002bde   6ad6     clrf    0xd6, 0          	CLRF	_TMR0L
002be0   6ad7     clrf    0xd7, 0          	CLRF	_TMR0H
                                           ;	.line	157; lena.c	LED0_TRIS = 0; //configure 1st led pin as output (yellow)
002be2   909a     bcf     0x9a, 0, 0       	BCF	_TRISJbits, 0
                                           ;	.line	158; lena.c	LED1_TRIS = 0; //configure 2nd led pin as output (red)
002be4   929a     bcf     0x9a, 0x1, 0     	BCF	_TRISJbits, 1
                                           ;	.line	159; lena.c	LED2_TRIS = 0; //configure 3rd led pin as output (red)
002be6   949a     bcf     0x9a, 0x2, 0     	BCF	_TRISJbits, 2
                                           ;	.line	160; lena.c	LATJbits.LATJ0 = 0; // switch LED 1 off
002be8   9091     bcf     0x91, 0, 0       	BCF	_LATJbits, 0
                                           ;	.line	161; lena.c	LATJbits.LATJ1 = 0; // switch LED 2 off
002bea   9291     bcf     0x91, 0x1, 0     	BCF	_LATJbits, 1
                                           ;	.line	162; lena.c	LATJbits.LATJ2 = 0; // switch LED 3 off
002bec   9491     bcf     0x91, 0x2, 0     	BCF	_LATJbits, 2
                                           ;	.line	165; lena.c	BUTTON0_TRIS        = 1; //configure 1st button as input
002bee   8693     bsf     0x93, 0x3, 0     	BSF	_TRISBbits, 3
                                           ;	.line	166; lena.c	BUTTON1_TRIS        = 1; //configure 2nd button as input
002bf0   8293     bsf     0x93, 0x1, 0     	BSF	_TRISBbits, 1
                                           ;	.line	167; lena.c	INTCON3bits.INT3E   = 1; //enable INT3 interrupt (button 1)
002bf2   8af0     bsf     0xf0, 0x5, 0     	BSF	_INTCON3bits, 5
                                           ;	.line	168; lena.c	INTCON3bits.INT3F   = 0; //clear INT3 flag
002bf4   94f0     bcf     0xf0, 0x2, 0     	BCF	_INTCON3bits, 2
                                           ;	.line	169; lena.c	INTCON3bits.INT1E   = 1; //enable INT1 interrupt (button 2)
002bf6   86f0     bsf     0xf0, 0x3, 0     	BSF	_INTCON3bits, 3
                                           ;	.line	170; lena.c	INTCON3bits.INT1F   = 0; //clear INT1 flag
002bf8   90f0     bcf     0xf0, 0, 0       	BCF	_INTCON3bits, 0
                                           ;	.line	171; lena.c	INTCON3bits.INT1IP  = 0; //low priority
002bfa   9cf0     bcf     0xf0, 0x6, 0     	BCF	_INTCON3bits, 6
                                           ;	.line	172; lena.c	INTCON2bits.INT3IP  = 0; //low priority
002bfc   92f1     bcf     0xf1, 0x1, 0     	BCF	_INTCON2bits, 1
                                           ;	.line	178; lena.c	LCDInit();
002bfe   ecc6     call    0x138c, 0        	CALL	_LCDInit
002c00   f009
                                           ;	.line	179; lena.c	whereami = TIME_MENU;
002c02   0e01     movlw   0x1              	MOVLW	0x01
002c04   010f     movlb   0xf              	BANKSEL	_whereami
002c06   6f4c     movwf   0x4c, 0x1        	MOVWF	_whereami, B
002c08   010f     movlb   0xf              	BANKSEL	_chandelle
                                           ;	.line	181; lena.c	chandelle++; // ##### BIZARRE ####
002c0a   2b41     incf    0x41, 0x1, 0x1   	INCF	_chandelle, F, B
                                           ;	.line	183; lena.c	T0CONbits.TMR0ON = 1; // start timer0
002c0c   8ed5     bsf     0xd5, 0x7, 0     	BSF	_T0CONbits, 7
                                           _00135_DS_:
                                           ;	.line	185; lena.c	time();
002c0e   ec9c     call    0x1d38, 0        	CALL	_time
002c10   f00e
                                           ;	.line	186; lena.c	manageseconds();
002c12   ec7a     call    0x2cf4, 0        	CALL	_manageseconds
002c14   f016
                                           ;	.line	187; lena.c	button();
002c16   ecf4     call    0x15e8, 0        	CALL	_button
002c18   f00a
                                           ;	.line	188; lena.c	refresh_lcd();
002c1a   ec29     call    0x852, 0         	CALL	_refresh_lcd
002c1c   f004
002c1e   d7f7     bra     0x2c0e           	BRA	_00135_DS_
002c20   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_lena__strlcpy	code
                                           _strlcpy:
                                           ;	.line	562; lena.c	strlcpy(char *dst, const char *src, size_t siz)
001842   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
001844   ffe5
001846   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
001848   ffd9
00184a   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
00184c   ffe5
00184e   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
001850   ffe5
001852   c002     movff   0x2, 0xfe5       	MOVFF	r0x02, POSTDEC1
001854   ffe5
001856   c003     movff   0x3, 0xfe5       	MOVFF	r0x03, POSTDEC1
001858   ffe5
00185a   c004     movff   0x4, 0xfe5       	MOVFF	r0x04, POSTDEC1
00185c   ffe5
00185e   c005     movff   0x5, 0xfe5       	MOVFF	r0x05, POSTDEC1
001860   ffe5
001862   c006     movff   0x6, 0xfe5       	MOVFF	r0x06, POSTDEC1
001864   ffe5
001866   c007     movff   0x7, 0xfe5       	MOVFF	r0x07, POSTDEC1
001868   ffe5
00186a   c008     movff   0x8, 0xfe5       	MOVFF	r0x08, POSTDEC1
00186c   ffe5
00186e   c009     movff   0x9, 0xfe5       	MOVFF	r0x09, POSTDEC1
001870   ffe5
001872   c00a     movff   0xa, 0xfe5       	MOVFF	r0x0a, POSTDEC1
001874   ffe5
001876   c00b     movff   0xb, 0xfe5       	MOVFF	r0x0b, POSTDEC1
001878   ffe5
00187a   c00c     movff   0xc, 0xfe5       	MOVFF	r0x0c, POSTDEC1
00187c   ffe5
00187e   c00d     movff   0xd, 0xfe5       	MOVFF	r0x0d, POSTDEC1
001880   ffe5
001882   c00e     movff   0xe, 0xfe5       	MOVFF	r0x0e, POSTDEC1
001884   ffe5
001886   c00f     movff   0xf, 0xfe5       	MOVFF	r0x0f, POSTDEC1
001888   ffe5
00188a   c010     movff   0x10, 0xfe5      	MOVFF	r0x10, POSTDEC1
00188c   ffe5
00188e   c011     movff   0x11, 0xfe5      	MOVFF	r0x11, POSTDEC1
001890   ffe5
001892   c012     movff   0x12, 0xfe5      	MOVFF	r0x12, POSTDEC1
001894   ffe5
001896   c013     movff   0x13, 0xfe5      	MOVFF	r0x13, POSTDEC1
001898   ffe5
00189a   c014     movff   0x14, 0xfe5      	MOVFF	r0x14, POSTDEC1
00189c   ffe5
00189e   c015     movff   0x15, 0xfe5      	MOVFF	r0x15, POSTDEC1
0018a0   ffe5
0018a2   0e02     movlw   0x2              	MOVLW	0x02
0018a4   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
0018a6   f000
0018a8   0e03     movlw   0x3              	MOVLW	0x03
0018aa   cfdb     movff   0xfdb, 0x1       	MOVFF	PLUSW2, r0x01
0018ac   f001
0018ae   0e04     movlw   0x4              	MOVLW	0x04
0018b0   cfdb     movff   0xfdb, 0x2       	MOVFF	PLUSW2, r0x02
0018b2   f002
0018b4   0e05     movlw   0x5              	MOVLW	0x05
0018b6   cfdb     movff   0xfdb, 0x3       	MOVFF	PLUSW2, r0x03
0018b8   f003
0018ba   0e06     movlw   0x6              	MOVLW	0x06
0018bc   cfdb     movff   0xfdb, 0x4       	MOVFF	PLUSW2, r0x04
0018be   f004
0018c0   0e07     movlw   0x7              	MOVLW	0x07
0018c2   cfdb     movff   0xfdb, 0x5       	MOVFF	PLUSW2, r0x05
0018c4   f005
0018c6   0e08     movlw   0x8              	MOVLW	0x08
0018c8   cfdb     movff   0xfdb, 0x6       	MOVFF	PLUSW2, r0x06
0018ca   f006
0018cc   0e09     movlw   0x9              	MOVLW	0x09
0018ce   cfdb     movff   0xfdb, 0x7       	MOVFF	PLUSW2, r0x07
0018d0   f007
                                           ;	.line	564; lena.c	char       *d = dst;
0018d2   c000     movff   0, 0x8           	MOVFF	r0x00, r0x08
0018d4   f008
0018d6   c001     movff   0x1, 0x9         	MOVFF	r0x01, r0x09
0018d8   f009
0018da   c002     movff   0x2, 0xa         	MOVFF	r0x02, r0x0a
0018dc   f00a
                                           ;	.line	565; lena.c	const char *s = src;
0018de   c003     movff   0x3, 0xb         	MOVFF	r0x03, r0x0b
0018e0   f00b
0018e2   c004     movff   0x4, 0xc         	MOVFF	r0x04, r0x0c
0018e4   f00c
0018e6   c005     movff   0x5, 0xd         	MOVFF	r0x05, r0x0d
0018e8   f00d
                                           ;	.line	566; lena.c	size_t      n = siz;
0018ea   c006     movff   0x6, 0xe         	MOVFF	r0x06, r0x0e
0018ec   f00e
0018ee   c007     movff   0x7, 0xf         	MOVFF	r0x07, r0x0f
0018f0   f00f
                                           ;	.line	569; lena.c	if (n != 0)
0018f2   5006     movf    0x6, 0, 0        	MOVF	r0x06, W
0018f4   1007     iorwf   0x7, 0, 0        	IORWF	r0x07, W
0018f6   b4d8     btfsc   0xd8, 0x2, 0     	BTFSC	STATUS, 2
0018f8   d03e     bra     0x1976           	BRA	_00395_DS_
                                           ;	.line	571; lena.c	while (--n != 0)
0018fa   c003     movff   0x3, 0x10        	MOVFF	r0x03, r0x10
0018fc   f010
0018fe   c004     movff   0x4, 0x11        	MOVFF	r0x04, r0x11
001900   f011
001902   c005     movff   0x5, 0x12        	MOVFF	r0x05, r0x12
001904   f012
001906   c006     movff   0x6, 0x13        	MOVFF	r0x06, r0x13
001908   f013
00190a   c007     movff   0x7, 0x14        	MOVFF	r0x07, r0x14
00190c   f014
                                           _00391_DS_:
00190e   0eff     movlw   0xff             	MOVLW	0xff
001910   2613     addwf   0x13, 0x1, 0     	ADDWF	r0x13, F
001912   a0d8     btfss   0xd8, 0, 0       	BTFSS	STATUS, 0
001914   0614     decf    0x14, 0x1, 0     	DECF	r0x14, F
001916   5013     movf    0x13, 0, 0       	MOVF	r0x13, W
001918   1014     iorwf   0x14, 0, 0       	IORWF	r0x14, W
00191a   e01d     bz      0x1956           	BZ	_00410_DS_
                                           ;	.line	573; lena.c	if ((*d++ = *s++) == '\0')
00191c   c010     movff   0x10, 0xfe9      	MOVFF	r0x10, FSR0L
00191e   ffe9
001920   c011     movff   0x11, 0xff3      	MOVFF	r0x11, PRODL
001922   fff3
001924   5012     movf    0x12, 0, 0       	MOVF	r0x12, W
001926   ecde     call    0x2dbc, 0        	CALL	__gptrget1
001928   f016
00192a   6e15     movwf   0x15, 0          	MOVWF	r0x15
00192c   2a10     incf    0x10, 0x1, 0     	INCF	r0x10, F
00192e   b0d8     btfsc   0xd8, 0, 0       	BTFSC	STATUS, 0
001930   2a11     incf    0x11, 0x1, 0     	INCF	r0x11, F
001932   b0d8     btfsc   0xd8, 0, 0       	BTFSC	STATUS, 0
001934   2a12     incf    0x12, 0x1, 0     	INCF	r0x12, F
001936   c015     movff   0x15, 0xfe5      	MOVFF	r0x15, POSTDEC1
001938   ffe5
00193a   c000     movff   0, 0xfe9         	MOVFF	r0x00, FSR0L
00193c   ffe9
00193e   c001     movff   0x1, 0xff3       	MOVFF	r0x01, PRODL
001940   fff3
001942   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
001944   ec14     call    0x2e28, 0        	CALL	__gptrput1
001946   f017
001948   2a00     incf    0, 0x1, 0        	INCF	r0x00, F
00194a   b0d8     btfsc   0xd8, 0, 0       	BTFSC	STATUS, 0
00194c   2a01     incf    0x1, 0x1, 0      	INCF	r0x01, F
00194e   b0d8     btfsc   0xd8, 0, 0       	BTFSC	STATUS, 0
001950   2a02     incf    0x2, 0x1, 0      	INCF	r0x02, F
001952   5015     movf    0x15, 0, 0       	MOVF	r0x15, W
001954   e1dc     bnz     0x190e           	BNZ	_00391_DS_
                                           _00410_DS_:
                                           ;	.line	574; lena.c	break;
001956   c010     movff   0x10, 0xb        	MOVFF	r0x10, r0x0b
001958   f00b
00195a   c011     movff   0x11, 0xc        	MOVFF	r0x11, r0x0c
00195c   f00c
00195e   c012     movff   0x12, 0xd        	MOVFF	r0x12, r0x0d
001960   f00d
001962   c000     movff   0, 0x8           	MOVFF	r0x00, r0x08
001964   f008
001966   c001     movff   0x1, 0x9         	MOVFF	r0x01, r0x09
001968   f009
00196a   c002     movff   0x2, 0xa         	MOVFF	r0x02, r0x0a
00196c   f00a
00196e   c013     movff   0x13, 0xe        	MOVFF	r0x13, r0x0e
001970   f00e
001972   c014     movff   0x14, 0xf        	MOVFF	r0x14, r0x0f
001974   f00f
                                           _00395_DS_:
                                           ;	.line	579; lena.c	if (n == 0)
001976   500e     movf    0xe, 0, 0        	MOVF	r0x0e, W
001978   100f     iorwf   0xf, 0, 0        	IORWF	r0x0f, W
00197a   e127     bnz     0x19ca           	BNZ	_00402_DS_
                                           ;	.line	581; lena.c	if (siz != 0)
00197c   5006     movf    0x6, 0, 0        	MOVF	r0x06, W
00197e   1007     iorwf   0x7, 0, 0        	IORWF	r0x07, W
001980   e009     bz      0x1994           	BZ	_00409_DS_
                                           ;	.line	582; lena.c	*d = '\0';          /* NUL-terminate dst */
001982   0e00     movlw   0                	MOVLW	0x00
001984   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001986   c008     movff   0x8, 0xfe9       	MOVFF	r0x08, FSR0L
001988   ffe9
00198a   c009     movff   0x9, 0xff3       	MOVFF	r0x09, PRODL
00198c   fff3
00198e   500a     movf    0xa, 0, 0        	MOVF	r0x0a, W
001990   ec14     call    0x2e28, 0        	CALL	__gptrput1
001992   f017
                                           _00409_DS_:
                                           ;	.line	583; lena.c	while (*s++)
001994   c00b     movff   0xb, 0           	MOVFF	r0x0b, r0x00
001996   f000
001998   c00c     movff   0xc, 0x1         	MOVFF	r0x0c, r0x01
00199a   f001
00199c   c00d     movff   0xd, 0x2         	MOVFF	r0x0d, r0x02
00199e   f002
                                           _00398_DS_:
0019a0   c000     movff   0, 0xfe9         	MOVFF	r0x00, FSR0L
0019a2   ffe9
0019a4   c001     movff   0x1, 0xff3       	MOVFF	r0x01, PRODL
0019a6   fff3
0019a8   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
0019aa   ecde     call    0x2dbc, 0        	CALL	__gptrget1
0019ac   f016
0019ae   6e06     movwf   0x6, 0           	MOVWF	r0x06
0019b0   2a00     incf    0, 0x1, 0        	INCF	r0x00, F
0019b2   b0d8     btfsc   0xd8, 0, 0       	BTFSC	STATUS, 0
0019b4   2a01     incf    0x1, 0x1, 0      	INCF	r0x01, F
0019b6   b0d8     btfsc   0xd8, 0, 0       	BTFSC	STATUS, 0
0019b8   2a02     incf    0x2, 0x1, 0      	INCF	r0x02, F
0019ba   5006     movf    0x6, 0, 0        	MOVF	r0x06, W
0019bc   e1f1     bnz     0x19a0           	BNZ	_00398_DS_
0019be   c000     movff   0, 0xb           	MOVFF	r0x00, r0x0b
0019c0   f00b
0019c2   c001     movff   0x1, 0xc         	MOVFF	r0x01, r0x0c
0019c4   f00c
0019c6   c002     movff   0x2, 0xd         	MOVFF	r0x02, r0x0d
0019c8   f00d
                                           _00402_DS_:
                                           ;	.line	589; lena.c	return (s - src - 1);       /* count does not include NUL */
0019ca   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
0019cc   5c0b     subwf   0xb, 0, 0        	SUBWF	r0x0b, W
0019ce   6e03     movwf   0x3, 0           	MOVWF	r0x03
0019d0   5004     movf    0x4, 0, 0        	MOVF	r0x04, W
0019d2   580c     subwfb  0xc, 0, 0        	SUBWFB	r0x0c, W
0019d4   6e04     movwf   0x4, 0           	MOVWF	r0x04
0019d6   0eff     movlw   0xff             	MOVLW	0xff
0019d8   2603     addwf   0x3, 0x1, 0      	ADDWF	r0x03, F
0019da   a0d8     btfss   0xd8, 0, 0       	BTFSS	STATUS, 0
0019dc   0604     decf    0x4, 0x1, 0      	DECF	r0x04, F
0019de   c004     movff   0x4, 0xff3       	MOVFF	r0x04, PRODL
0019e0   fff3
0019e2   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
0019e4   cfe4     movff   0xfe4, 0x15      	MOVFF	PREINC1, r0x15
0019e6   f015
0019e8   cfe4     movff   0xfe4, 0x14      	MOVFF	PREINC1, r0x14
0019ea   f014
0019ec   cfe4     movff   0xfe4, 0x13      	MOVFF	PREINC1, r0x13
0019ee   f013
0019f0   cfe4     movff   0xfe4, 0x12      	MOVFF	PREINC1, r0x12
0019f2   f012
0019f4   cfe4     movff   0xfe4, 0x11      	MOVFF	PREINC1, r0x11
0019f6   f011
0019f8   cfe4     movff   0xfe4, 0x10      	MOVFF	PREINC1, r0x10
0019fa   f010
0019fc   cfe4     movff   0xfe4, 0xf       	MOVFF	PREINC1, r0x0f
0019fe   f00f
001a00   cfe4     movff   0xfe4, 0xe       	MOVFF	PREINC1, r0x0e
001a02   f00e
001a04   cfe4     movff   0xfe4, 0xd       	MOVFF	PREINC1, r0x0d
001a06   f00d
001a08   cfe4     movff   0xfe4, 0xc       	MOVFF	PREINC1, r0x0c
001a0a   f00c
001a0c   cfe4     movff   0xfe4, 0xb       	MOVFF	PREINC1, r0x0b
001a0e   f00b
001a10   cfe4     movff   0xfe4, 0xa       	MOVFF	PREINC1, r0x0a
001a12   f00a
001a14   cfe4     movff   0xfe4, 0x9       	MOVFF	PREINC1, r0x09
001a16   f009
001a18   cfe4     movff   0xfe4, 0x8       	MOVFF	PREINC1, r0x08
001a1a   f008
001a1c   cfe4     movff   0xfe4, 0x7       	MOVFF	PREINC1, r0x07
001a1e   f007
001a20   cfe4     movff   0xfe4, 0x6       	MOVFF	PREINC1, r0x06
001a22   f006
001a24   cfe4     movff   0xfe4, 0x5       	MOVFF	PREINC1, r0x05
001a26   f005
001a28   cfe4     movff   0xfe4, 0x4       	MOVFF	PREINC1, r0x04
001a2a   f004
001a2c   cfe4     movff   0xfe4, 0x3       	MOVFF	PREINC1, r0x03
001a2e   f003
001a30   cfe4     movff   0xfe4, 0x2       	MOVFF	PREINC1, r0x02
001a32   f002
001a34   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
001a36   f001
001a38   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
001a3a   f000
001a3c   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
001a3e   ffd9
001a40   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_lena__DisplayString	code
                                           _DisplayString:
                                           ;	.line	516; lena.c	void DisplayString(BYTE pos, char* text)
00245c   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
00245e   ffe5
002460   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002462   ffd9
002464   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
002466   ffe5
002468   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
00246a   ffe5
00246c   c002     movff   0x2, 0xfe5       	MOVFF	r0x02, POSTDEC1
00246e   ffe5
002470   c003     movff   0x3, 0xfe5       	MOVFF	r0x03, POSTDEC1
002472   ffe5
002474   c004     movff   0x4, 0xfe5       	MOVFF	r0x04, POSTDEC1
002476   ffe5
002478   c005     movff   0x5, 0xfe5       	MOVFF	r0x05, POSTDEC1
00247a   ffe5
00247c   c006     movff   0x6, 0xfe5       	MOVFF	r0x06, POSTDEC1
00247e   ffe5
002480   c007     movff   0x7, 0xfe5       	MOVFF	r0x07, POSTDEC1
002482   ffe5
002484   0e02     movlw   0x2              	MOVLW	0x02
002486   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
002488   f000
00248a   0e03     movlw   0x3              	MOVLW	0x03
00248c   cfdb     movff   0xfdb, 0x1       	MOVFF	PLUSW2, r0x01
00248e   f001
002490   0e04     movlw   0x4              	MOVLW	0x04
002492   cfdb     movff   0xfdb, 0x2       	MOVFF	PLUSW2, r0x02
002494   f002
002496   0e05     movlw   0x5              	MOVLW	0x05
002498   cfdb     movff   0xfdb, 0x3       	MOVFF	PLUSW2, r0x03
00249a   f003
                                           ;	.line	518; lena.c	BYTE l= strlen(text)+1;
00249c   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
00249e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0024a0   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
0024a2   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0024a4   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
0024a6   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0024a8   ec08     call    0x2a10, 0        	CALL	_strlen
0024aa   f015
0024ac   6e04     movwf   0x4, 0           	MOVWF	r0x04
0024ae   cff3     movff   0xff3, 0x5       	MOVFF	PRODL, r0x05
0024b0   f005
0024b2   0e03     movlw   0x3              	MOVLW	0x03
0024b4   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
0024b6   2a04     incf    0x4, 0x1, 0      	INCF	r0x04, F
                                           ;	.line	519; lena.c	BYTE max= 32-pos;
0024b8   5000     movf    0, 0, 0          	MOVF	r0x00, W
0024ba   0820     sublw   0x20             	SUBLW	0x20
0024bc   6e05     movwf   0x5, 0           	MOVWF	r0x05
                                           ;	.line	520; lena.c	strlcpy((char*)&LCDText[pos], text,(l<max)?l:max );
0024be   6a06     clrf    0x6, 0           	CLRF	r0x06
0024c0   0e00     movlw   0                	MOVLW	LOW(_LCDText)
0024c2   2600     addwf   0, 0x1, 0        	ADDWF	r0x00, F
0024c4   0e0f     movlw   0xf              	MOVLW	HIGH(_LCDText)
0024c6   2206     addwfc  0x6, 0x1, 0      	ADDWFC	r0x06, F
0024c8   5006     movf    0x6, 0, 0        	MOVF	r0x06, W
0024ca   6e06     movwf   0x6, 0           	MOVWF	r0x06
0024cc   5000     movf    0, 0, 0          	MOVF	r0x00, W
0024ce   6e00     movwf   0, 0             	MOVWF	r0x00
0024d0   0e80     movlw   0x80             	MOVLW	0x80
0024d2   6e07     movwf   0x7, 0           	MOVWF	r0x07
0024d4   5005     movf    0x5, 0, 0        	MOVF	r0x05, W
0024d6   5c04     subwf   0x4, 0, 0        	SUBWF	r0x04, W
0024d8   e302     bnc     0x24de           	BNC	_00382_DS_
0024da   c005     movff   0x5, 0x4         	MOVFF	r0x05, r0x04
0024dc   f004
                                           _00382_DS_:
0024de   6a05     clrf    0x5, 0           	CLRF	r0x05
0024e0   5005     movf    0x5, 0, 0        	MOVF	r0x05, W
0024e2   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0024e4   5004     movf    0x4, 0, 0        	MOVF	r0x04, W
0024e6   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0024e8   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
0024ea   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0024ec   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
0024ee   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0024f0   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
0024f2   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0024f4   5007     movf    0x7, 0, 0        	MOVF	r0x07, W
0024f6   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0024f8   5006     movf    0x6, 0, 0        	MOVF	r0x06, W
0024fa   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0024fc   5000     movf    0, 0, 0          	MOVF	r0x00, W
0024fe   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002500   ec21     call    0x1842, 0        	CALL	_strlcpy
002502   f00c
002504   0e08     movlw   0x8              	MOVLW	0x08
002506   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	521; lena.c	LCDUpdate();
002508   ec91     call    0x1122, 0        	CALL	_LCDUpdate
00250a   f008
00250c   cfe4     movff   0xfe4, 0x7       	MOVFF	PREINC1, r0x07
00250e   f007
002510   cfe4     movff   0xfe4, 0x6       	MOVFF	PREINC1, r0x06
002512   f006
002514   cfe4     movff   0xfe4, 0x5       	MOVFF	PREINC1, r0x05
002516   f005
002518   cfe4     movff   0xfe4, 0x4       	MOVFF	PREINC1, r0x04
00251a   f004
00251c   cfe4     movff   0xfe4, 0x3       	MOVFF	PREINC1, r0x03
00251e   f003
002520   cfe4     movff   0xfe4, 0x2       	MOVFF	PREINC1, r0x02
002522   f002
002524   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
002526   f001
002528   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
00252a   f000
00252c   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
00252e   ffd9
002530   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_lena__refresh_lcd	code
                                           _refresh_lcd:
                                           ;	.line	442; lena.c	void refresh_lcd(void)
000852   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
000854   ffe5
000856   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
000858   ffd9
00085a   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
00085c   ffe5
00085e   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
000860   ffe5
000862   c002     movff   0x2, 0xfe5       	MOVFF	r0x02, POSTDEC1
000864   ffe5
000866   c003     movff   0x3, 0xfe5       	MOVFF	r0x03, POSTDEC1
000868   ffe5
00086a   c004     movff   0x4, 0xfe5       	MOVFF	r0x04, POSTDEC1
00086c   ffe5
00086e   c005     movff   0x5, 0xfe5       	MOVFF	r0x05, POSTDEC1
000870   ffe5
000872   c006     movff   0x6, 0xfe5       	MOVFF	r0x06, POSTDEC1
000874   ffe5
000876   c007     movff   0x7, 0xfe5       	MOVFF	r0x07, POSTDEC1
000878   ffe5
00087a   c008     movff   0x8, 0xfe5       	MOVFF	r0x08, POSTDEC1
00087c   ffe5
00087e   c009     movff   0x9, 0xfe5       	MOVFF	r0x09, POSTDEC1
000880   ffe5
000882   c00a     movff   0xa, 0xfe5       	MOVFF	r0x0a, POSTDEC1
000884   ffe5
000886   c00b     movff   0xb, 0xfe5       	MOVFF	r0x0b, POSTDEC1
000888   ffe5
00088a   c00c     movff   0xc, 0xfe5       	MOVFF	r0x0c, POSTDEC1
00088c   ffe5
00088e   c00d     movff   0xd, 0xfe5       	MOVFF	r0x0d, POSTDEC1
000890   ffe5
000892   c00e     movff   0xe, 0xfe5       	MOVFF	r0x0e, POSTDEC1
000894   ffe5
                                           ;	.line	446; lena.c	switch (whereami) {
000896   0e01     movlw   0x1              	MOVLW	0x01
000898   010f     movlb   0xf              	BANKSEL	_whereami
00089a   5d4c     subwf   0x4c, 0, 0x1     	SUBWF	_whereami, W, B
00089c   a0d8     btfss   0xd8, 0, 0       	BTFSS	STATUS, 0
00089e   efd6     goto    0xdac            	GOTO	_00362_DS_
0008a0   f006
0008a2   0e0c     movlw   0xc              	MOVLW	0x0c
0008a4   010f     movlb   0xf              	BANKSEL	_whereami
0008a6   5d4c     subwf   0x4c, 0, 0x1     	SUBWF	_whereami, W, B
0008a8   b0d8     btfsc   0xd8, 0, 0       	BTFSC	STATUS, 0
0008aa   efd6     goto    0xdac            	GOTO	_00362_DS_
0008ac   f006
0008ae   010f     movlb   0xf              	BANKSEL	_whereami
0008b0   054c     decf    0x4c, 0, 0x1     	DECF	_whereami, W, B
0008b2   6e00     movwf   0, 0             	MOVWF	r0x00
0008b4   c00f     movff   0xf, 0xfe5       	MOVFF	r0x0f, POSTDEC1
0008b6   ffe5
0008b8   c010     movff   0x10, 0xfe5      	MOVFF	r0x10, POSTDEC1
0008ba   ffe5
0008bc   6a10     clrf    0x10, 0          	CLRF	r0x10
0008be   3400     rlcf    0, 0, 0          	RLCF	r0x00, W
0008c0   3610     rlcf    0x10, 0x1, 0     	RLCF	r0x10, F
0008c2   34e8     rlcf    0xe8, 0, 0       	RLCF	WREG, W
0008c4   3610     rlcf    0x10, 0x1, 0     	RLCF	r0x10, F
0008c6   0bfc     andlw   0xfc             	ANDLW	0xfc
0008c8   6e0f     movwf   0xf, 0           	MOVWF	r0x0f
0008ca   0e00     movlw   0                	MOVLW	UPPER(_00373_DS_)
0008cc   6efb     movwf   0xfb, 0          	MOVWF	PCLATU
0008ce   0e08     movlw   0x8              	MOVLW	HIGH(_00373_DS_)
0008d0   6efa     movwf   0xfa, 0          	MOVWF	PCLATH
0008d2   0eea     movlw   0xea             	MOVLW	LOW(_00373_DS_)
0008d4   260f     addwf   0xf, 0x1, 0      	ADDWF	r0x0f, F
0008d6   5010     movf    0x10, 0, 0       	MOVF	r0x10, W
0008d8   22fa     addwfc  0xfa, 0x1, 0     	ADDWFC	PCLATH, F
0008da   b0d8     btfsc   0xd8, 0, 0       	BTFSC	STATUS, 0
0008dc   2afb     incf    0xfb, 0x1, 0     	INCF	PCLATU, F
0008de   500f     movf    0xf, 0, 0        	MOVF	r0x0f, W
0008e0   cfe4     movff   0xfe4, 0x10      	MOVFF	PREINC1, r0x10
0008e2   f010
0008e4   cfe4     movff   0xfe4, 0xf       	MOVFF	PREINC1, r0x0f
0008e6   f00f
0008e8   6ef9     movwf   0xf9, 0          	MOVWF	PCL
                                           _00373_DS_:
0008ea   ef8b     goto    0x916            	GOTO	_00342_DS_
0008ec   f004
0008ee   efa3     goto    0x946            	GOTO	_00343_DS_
0008f0   f004
0008f2   efd0     goto    0x9a0            	GOTO	_00344_DS_
0008f4   f004
0008f6   effc     goto    0x9f8            	GOTO	_00345_DS_
0008f8   f004
0008fa   ef28     goto    0xa50            	GOTO	_00346_DS_
0008fc   f005
0008fe   ef3f     goto    0xa7e            	GOTO	_00347_DS_
000900   f005
000902   ef70     goto    0xae0            	GOTO	_00351_DS_
000904   f005
000906   ef95     goto    0xb2a            	GOTO	_00352_DS_
000908   f005
00090a   efba     goto    0xb74            	GOTO	_00353_DS_
00090c   f005
00090e   ef23     goto    0xc46            	GOTO	_00357_DS_
000910   f006
000912   ef4f     goto    0xc9e            	GOTO	_00358_DS_
000914   f006
                                           _00342_DS_:
                                           ;	.line	448; lena.c	sprintf(display, "Do you want to  set the time ?  ");
000916   0e0f     movlw   0xf              	MOVLW	HIGH(_refresh_lcd_display_1_1)
000918   6e01     movwf   0x1, 0           	MOVWF	r0x01
00091a   0e21     movlw   0x21             	MOVLW	LOW(_refresh_lcd_display_1_1)
00091c   6e00     movwf   0, 0             	MOVWF	r0x00
00091e   0e80     movlw   0x80             	MOVLW	0x80
000920   6e02     movwf   0x2, 0           	MOVWF	r0x02
000922   0e00     movlw   0                	MOVLW	UPPER(__str_0)
000924   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000926   0e0e     movlw   0xe              	MOVLW	HIGH(__str_0)
000928   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00092a   0ee0     movlw   0xe0             	MOVLW	LOW(__str_0)
00092c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00092e   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
000930   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000932   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
000934   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000936   5000     movf    0, 0, 0          	MOVF	r0x00, W
000938   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00093a   ec47     call    0x228e, 0        	CALL	_sprintf
00093c   f011
00093e   0e06     movlw   0x6              	MOVLW	0x06
000940   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	449; lena.c	break;
000942   efec     goto    0xdd8            	GOTO	_00363_DS_
000944   f006
                                           _00343_DS_:
                                           ;	.line	452; lena.c	thour, tmin, tsec);
000946   cf44     movff   0xf44, 0         	MOVFF	_tsec, r0x00
000948   f000
00094a   6a01     clrf    0x1, 0           	CLRF	r0x01
00094c   cf43     movff   0xf43, 0x2       	MOVFF	_tmin, r0x02
00094e   f002
000950   6a03     clrf    0x3, 0           	CLRF	r0x03
000952   cf42     movff   0xf42, 0x4       	MOVFF	_thour, r0x04
000954   f004
000956   6a05     clrf    0x5, 0           	CLRF	r0x05
                                           ;	.line	451; lena.c	sprintf(display, " [%02u]: %02u : %02u                  ",
000958   0e0f     movlw   0xf              	MOVLW	HIGH(_refresh_lcd_display_1_1)
00095a   6e07     movwf   0x7, 0           	MOVWF	r0x07
00095c   0e21     movlw   0x21             	MOVLW	LOW(_refresh_lcd_display_1_1)
00095e   6e06     movwf   0x6, 0           	MOVWF	r0x06
000960   0e80     movlw   0x80             	MOVLW	0x80
000962   6e08     movwf   0x8, 0           	MOVWF	r0x08
000964   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
000966   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000968   5000     movf    0, 0, 0          	MOVF	r0x00, W
00096a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00096c   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
00096e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000970   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
000972   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000974   5005     movf    0x5, 0, 0        	MOVF	r0x05, W
000976   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000978   5004     movf    0x4, 0, 0        	MOVF	r0x04, W
00097a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00097c   0e00     movlw   0                	MOVLW	UPPER(__str_1)
00097e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000980   0e0f     movlw   0xf              	MOVLW	HIGH(__str_1)
000982   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000984   0e02     movlw   0x2              	MOVLW	LOW(__str_1)
000986   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000988   5008     movf    0x8, 0, 0        	MOVF	r0x08, W
00098a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00098c   5007     movf    0x7, 0, 0        	MOVF	r0x07, W
00098e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000990   5006     movf    0x6, 0, 0        	MOVF	r0x06, W
000992   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000994   ec47     call    0x228e, 0        	CALL	_sprintf
000996   f011
000998   0e0c     movlw   0xc              	MOVLW	0x0c
00099a   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	453; lena.c	break;
00099c   efec     goto    0xdd8            	GOTO	_00363_DS_
00099e   f006
                                           _00344_DS_:
                                           ;	.line	456; lena.c	thour, tmin, tsec);
0009a0   cf44     movff   0xf44, 0         	MOVFF	_tsec, r0x00
0009a2   f000
0009a4   6a01     clrf    0x1, 0           	CLRF	r0x01
0009a6   cf43     movff   0xf43, 0x2       	MOVFF	_tmin, r0x02
0009a8   f002
0009aa   6a03     clrf    0x3, 0           	CLRF	r0x03
0009ac   cf42     movff   0xf42, 0x4       	MOVFF	_thour, r0x04
0009ae   f004
0009b0   6a05     clrf    0x5, 0           	CLRF	r0x05
                                           ;	.line	455; lena.c	sprintf(display, "  %02u :[%02u]: %02u                  ",
0009b2   0e0f     movlw   0xf              	MOVLW	HIGH(_refresh_lcd_display_1_1)
0009b4   6e07     movwf   0x7, 0           	MOVWF	r0x07
0009b6   0e21     movlw   0x21             	MOVLW	LOW(_refresh_lcd_display_1_1)
0009b8   6e06     movwf   0x6, 0           	MOVWF	r0x06
0009ba   0e80     movlw   0x80             	MOVLW	0x80
0009bc   6e08     movwf   0x8, 0           	MOVWF	r0x08
0009be   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
0009c0   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0009c2   5000     movf    0, 0, 0          	MOVF	r0x00, W
0009c4   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0009c6   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
0009c8   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0009ca   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
0009cc   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0009ce   5005     movf    0x5, 0, 0        	MOVF	r0x05, W
0009d0   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0009d2   5004     movf    0x4, 0, 0        	MOVF	r0x04, W
0009d4   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0009d6   0e00     movlw   0                	MOVLW	UPPER(__str_2)
0009d8   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0009da   0e0f     movlw   0xf              	MOVLW	HIGH(__str_2)
0009dc   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0009de   0e2a     movlw   0x2a             	MOVLW	LOW(__str_2)
0009e0   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0009e2   5008     movf    0x8, 0, 0        	MOVF	r0x08, W
0009e4   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0009e6   5007     movf    0x7, 0, 0        	MOVF	r0x07, W
0009e8   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0009ea   5006     movf    0x6, 0, 0        	MOVF	r0x06, W
0009ec   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0009ee   ec47     call    0x228e, 0        	CALL	_sprintf
0009f0   f011
0009f2   0e0c     movlw   0xc              	MOVLW	0x0c
0009f4   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	457; lena.c	break;
0009f6   d1f0     bra     0xdd8            	BRA	_00363_DS_
                                           _00345_DS_:
                                           ;	.line	460; lena.c	thour, tmin, tsec);
0009f8   cf44     movff   0xf44, 0         	MOVFF	_tsec, r0x00
0009fa   f000
0009fc   6a01     clrf    0x1, 0           	CLRF	r0x01
0009fe   cf43     movff   0xf43, 0x2       	MOVFF	_tmin, r0x02
000a00   f002
000a02   6a03     clrf    0x3, 0           	CLRF	r0x03
000a04   cf42     movff   0xf42, 0x4       	MOVFF	_thour, r0x04
000a06   f004
000a08   6a05     clrf    0x5, 0           	CLRF	r0x05
                                           ;	.line	459; lena.c	sprintf(display, "  %02u : %02u :[%02u]                 ",
000a0a   0e0f     movlw   0xf              	MOVLW	HIGH(_refresh_lcd_display_1_1)
000a0c   6e07     movwf   0x7, 0           	MOVWF	r0x07
000a0e   0e21     movlw   0x21             	MOVLW	LOW(_refresh_lcd_display_1_1)
000a10   6e06     movwf   0x6, 0           	MOVWF	r0x06
000a12   0e80     movlw   0x80             	MOVLW	0x80
000a14   6e08     movwf   0x8, 0           	MOVWF	r0x08
000a16   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
000a18   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a1a   5000     movf    0, 0, 0          	MOVF	r0x00, W
000a1c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a1e   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
000a20   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a22   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
000a24   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a26   5005     movf    0x5, 0, 0        	MOVF	r0x05, W
000a28   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a2a   5004     movf    0x4, 0, 0        	MOVF	r0x04, W
000a2c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a2e   0e00     movlw   0                	MOVLW	UPPER(__str_3)
000a30   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a32   0e0f     movlw   0xf              	MOVLW	HIGH(__str_3)
000a34   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a36   0e52     movlw   0x52             	MOVLW	LOW(__str_3)
000a38   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a3a   5008     movf    0x8, 0, 0        	MOVF	r0x08, W
000a3c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a3e   5007     movf    0x7, 0, 0        	MOVF	r0x07, W
000a40   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a42   5006     movf    0x6, 0, 0        	MOVF	r0x06, W
000a44   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a46   ec47     call    0x228e, 0        	CALL	_sprintf
000a48   f011
000a4a   0e0c     movlw   0xc              	MOVLW	0x0c
000a4c   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	461; lena.c	break;
000a4e   d1c4     bra     0xdd8            	BRA	_00363_DS_
                                           _00346_DS_:
                                           ;	.line	463; lena.c	sprintf(display, "Do you want to  set the alarm ? ");
000a50   0e0f     movlw   0xf              	MOVLW	HIGH(_refresh_lcd_display_1_1)
000a52   6e01     movwf   0x1, 0           	MOVWF	r0x01
000a54   0e21     movlw   0x21             	MOVLW	LOW(_refresh_lcd_display_1_1)
000a56   6e00     movwf   0, 0             	MOVWF	r0x00
000a58   0e80     movlw   0x80             	MOVLW	0x80
000a5a   6e02     movwf   0x2, 0           	MOVWF	r0x02
000a5c   0e00     movlw   0                	MOVLW	UPPER(__str_4)
000a5e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a60   0e0f     movlw   0xf              	MOVLW	HIGH(__str_4)
000a62   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a64   0e7a     movlw   0x7a             	MOVLW	LOW(__str_4)
000a66   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a68   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
000a6a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a6c   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
000a6e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a70   5000     movf    0, 0, 0          	MOVF	r0x00, W
000a72   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a74   ec47     call    0x228e, 0        	CALL	_sprintf
000a76   f011
000a78   0e06     movlw   0x6              	MOVLW	0x06
000a7a   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	464; lena.c	break;
000a7c   d1ad     bra     0xdd8            	BRA	_00363_DS_
                                           _00347_DS_:
000a7e   010f     movlb   0xf              	BANKSEL	_alarm_set
                                           ;	.line	466; lena.c	if (alarm_set) {
000a80   5145     movf    0x45, 0, 0x1     	MOVF	_alarm_set, W, B
000a82   e017     bz      0xab2            	BZ	_00349_DS_
                                           ;	.line	467; lena.c	sprintf(display, "  Alarm [ON ]                   ");
000a84   0e0f     movlw   0xf              	MOVLW	HIGH(_refresh_lcd_display_1_1)
000a86   6e01     movwf   0x1, 0           	MOVWF	r0x01
000a88   0e21     movlw   0x21             	MOVLW	LOW(_refresh_lcd_display_1_1)
000a8a   6e00     movwf   0, 0             	MOVWF	r0x00
000a8c   0e80     movlw   0x80             	MOVLW	0x80
000a8e   6e02     movwf   0x2, 0           	MOVWF	r0x02
000a90   0e00     movlw   0                	MOVLW	UPPER(__str_5)
000a92   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a94   0e0f     movlw   0xf              	MOVLW	HIGH(__str_5)
000a96   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a98   0e9c     movlw   0x9c             	MOVLW	LOW(__str_5)
000a9a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a9c   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
000a9e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000aa0   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
000aa2   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000aa4   5000     movf    0, 0, 0          	MOVF	r0x00, W
000aa6   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000aa8   ec47     call    0x228e, 0        	CALL	_sprintf
000aaa   f011
000aac   0e06     movlw   0x6              	MOVLW	0x06
000aae   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
000ab0   d193     bra     0xdd8            	BRA	_00363_DS_
                                           _00349_DS_:
                                           ;	.line	469; lena.c	sprintf(display, "  Alarm [OFF]                   ");
000ab2   0e0f     movlw   0xf              	MOVLW	HIGH(_refresh_lcd_display_1_1)
000ab4   6e01     movwf   0x1, 0           	MOVWF	r0x01
000ab6   0e21     movlw   0x21             	MOVLW	LOW(_refresh_lcd_display_1_1)
000ab8   6e00     movwf   0, 0             	MOVWF	r0x00
000aba   0e80     movlw   0x80             	MOVLW	0x80
000abc   6e02     movwf   0x2, 0           	MOVWF	r0x02
000abe   0e00     movlw   0                	MOVLW	UPPER(__str_6)
000ac0   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000ac2   0e0f     movlw   0xf              	MOVLW	HIGH(__str_6)
000ac4   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000ac6   0ebe     movlw   0xbe             	MOVLW	LOW(__str_6)
000ac8   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000aca   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
000acc   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000ace   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
000ad0   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000ad2   5000     movf    0, 0, 0          	MOVF	r0x00, W
000ad4   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000ad6   ec47     call    0x228e, 0        	CALL	_sprintf
000ad8   f011
000ada   0e06     movlw   0x6              	MOVLW	0x06
000adc   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	471; lena.c	break;
000ade   d17c     bra     0xdd8            	BRA	_00363_DS_
                                           _00351_DS_:
                                           ;	.line	474; lena.c	ahour, amin);
000ae0   cf47     movff   0xf47, 0         	MOVFF	_amin, r0x00
000ae2   f000
000ae4   6a01     clrf    0x1, 0           	CLRF	r0x01
000ae6   cf46     movff   0xf46, 0x2       	MOVFF	_ahour, r0x02
000ae8   f002
000aea   6a03     clrf    0x3, 0           	CLRF	r0x03
                                           ;	.line	473; lena.c	sprintf(display, "    Alarm at        [%02u]: %02u    ",
000aec   0e0f     movlw   0xf              	MOVLW	HIGH(_refresh_lcd_display_1_1)
000aee   6e05     movwf   0x5, 0           	MOVWF	r0x05
000af0   0e21     movlw   0x21             	MOVLW	LOW(_refresh_lcd_display_1_1)
000af2   6e04     movwf   0x4, 0           	MOVWF	r0x04
000af4   0e80     movlw   0x80             	MOVLW	0x80
000af6   6e06     movwf   0x6, 0           	MOVWF	r0x06
000af8   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
000afa   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000afc   5000     movf    0, 0, 0          	MOVF	r0x00, W
000afe   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000b00   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
000b02   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000b04   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
000b06   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000b08   0e00     movlw   0                	MOVLW	UPPER(__str_7)
000b0a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000b0c   0e0f     movlw   0xf              	MOVLW	HIGH(__str_7)
000b0e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000b10   0ee0     movlw   0xe0             	MOVLW	LOW(__str_7)
000b12   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000b14   5006     movf    0x6, 0, 0        	MOVF	r0x06, W
000b16   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000b18   5005     movf    0x5, 0, 0        	MOVF	r0x05, W
000b1a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000b1c   5004     movf    0x4, 0, 0        	MOVF	r0x04, W
000b1e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000b20   ec47     call    0x228e, 0        	CALL	_sprintf
000b22   f011
000b24   0e0a     movlw   0xa              	MOVLW	0x0a
000b26   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	475; lena.c	break;
000b28   d157     bra     0xdd8            	BRA	_00363_DS_
                                           _00352_DS_:
                                           ;	.line	478; lena.c	ahour, amin);
000b2a   cf47     movff   0xf47, 0         	MOVFF	_amin, r0x00
000b2c   f000
000b2e   6a01     clrf    0x1, 0           	CLRF	r0x01
000b30   cf46     movff   0xf46, 0x2       	MOVFF	_ahour, r0x02
000b32   f002
000b34   6a03     clrf    0x3, 0           	CLRF	r0x03
                                           ;	.line	477; lena.c	sprintf(display, "    Alarm at         %02u :[%02u]   ",
000b36   0e0f     movlw   0xf              	MOVLW	HIGH(_refresh_lcd_display_1_1)
000b38   6e05     movwf   0x5, 0           	MOVWF	r0x05
000b3a   0e21     movlw   0x21             	MOVLW	LOW(_refresh_lcd_display_1_1)
000b3c   6e04     movwf   0x4, 0           	MOVWF	r0x04
000b3e   0e80     movlw   0x80             	MOVLW	0x80
000b40   6e06     movwf   0x6, 0           	MOVWF	r0x06
000b42   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
000b44   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000b46   5000     movf    0, 0, 0          	MOVF	r0x00, W
000b48   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000b4a   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
000b4c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000b4e   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
000b50   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000b52   0e00     movlw   0                	MOVLW	UPPER(__str_8)
000b54   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000b56   0e10     movlw   0x10             	MOVLW	HIGH(__str_8)
000b58   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000b5a   0e06     movlw   0x6              	MOVLW	LOW(__str_8)
000b5c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000b5e   5006     movf    0x6, 0, 0        	MOVF	r0x06, W
000b60   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000b62   5005     movf    0x5, 0, 0        	MOVF	r0x05, W
000b64   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000b66   5004     movf    0x4, 0, 0        	MOVF	r0x04, W
000b68   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000b6a   ec47     call    0x228e, 0        	CALL	_sprintf
000b6c   f011
000b6e   0e0a     movlw   0xa              	MOVLW	0x0a
000b70   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	479; lena.c	break;
000b72   d132     bra     0xdd8            	BRA	_00363_DS_
                                           _00353_DS_:
000b74   010f     movlb   0xf              	BANKSEL	_alarm_set
                                           ;	.line	481; lena.c	if (alarm_set) {
000b76   5145     movf    0x45, 0, 0x1     	MOVF	_alarm_set, W, B
000b78   e03a     bz      0xbee            	BZ	_00355_DS_
                                           ;	.line	483; lena.c	thour, tmin, tsec, ahour, amin);
000b7a   cf47     movff   0xf47, 0         	MOVFF	_amin, r0x00
000b7c   f000
000b7e   6a01     clrf    0x1, 0           	CLRF	r0x01
000b80   cf46     movff   0xf46, 0x2       	MOVFF	_ahour, r0x02
000b82   f002
000b84   6a03     clrf    0x3, 0           	CLRF	r0x03
000b86   cf44     movff   0xf44, 0x4       	MOVFF	_tsec, r0x04
000b88   f004
000b8a   6a05     clrf    0x5, 0           	CLRF	r0x05
000b8c   cf43     movff   0xf43, 0x6       	MOVFF	_tmin, r0x06
000b8e   f006
000b90   6a07     clrf    0x7, 0           	CLRF	r0x07
000b92   cf42     movff   0xf42, 0x8       	MOVFF	_thour, r0x08
000b94   f008
000b96   6a09     clrf    0x9, 0           	CLRF	r0x09
                                           ;	.line	482; lena.c	sprintf(display, "    %02u:%02u:%02u    Alarm ON  %02u:%02u ",
000b98   0e0f     movlw   0xf              	MOVLW	HIGH(_refresh_lcd_display_1_1)
000b9a   6e0b     movwf   0xb, 0           	MOVWF	r0x0b
000b9c   0e21     movlw   0x21             	MOVLW	LOW(_refresh_lcd_display_1_1)
000b9e   6e0a     movwf   0xa, 0           	MOVWF	r0x0a
000ba0   0e80     movlw   0x80             	MOVLW	0x80
000ba2   6e0c     movwf   0xc, 0           	MOVWF	r0x0c
000ba4   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
000ba6   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000ba8   5000     movf    0, 0, 0          	MOVF	r0x00, W
000baa   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000bac   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
000bae   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000bb0   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
000bb2   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000bb4   5005     movf    0x5, 0, 0        	MOVF	r0x05, W
000bb6   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000bb8   5004     movf    0x4, 0, 0        	MOVF	r0x04, W
000bba   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000bbc   5007     movf    0x7, 0, 0        	MOVF	r0x07, W
000bbe   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000bc0   5006     movf    0x6, 0, 0        	MOVF	r0x06, W
000bc2   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000bc4   5009     movf    0x9, 0, 0        	MOVF	r0x09, W
000bc6   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000bc8   5008     movf    0x8, 0, 0        	MOVF	r0x08, W
000bca   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000bcc   0e00     movlw   0                	MOVLW	UPPER(__str_9)
000bce   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000bd0   0e10     movlw   0x10             	MOVLW	HIGH(__str_9)
000bd2   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000bd4   0e2c     movlw   0x2c             	MOVLW	LOW(__str_9)
000bd6   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000bd8   500c     movf    0xc, 0, 0        	MOVF	r0x0c, W
000bda   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000bdc   500b     movf    0xb, 0, 0        	MOVF	r0x0b, W
000bde   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000be0   500a     movf    0xa, 0, 0        	MOVF	r0x0a, W
000be2   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000be4   ec47     call    0x228e, 0        	CALL	_sprintf
000be6   f011
000be8   0e10     movlw   0x10             	MOVLW	0x10
000bea   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
000bec   d0f5     bra     0xdd8            	BRA	_00363_DS_
                                           _00355_DS_:
                                           ;	.line	486; lena.c	thour, tmin, tsec);
000bee   cf44     movff   0xf44, 0         	MOVFF	_tsec, r0x00
000bf0   f000
000bf2   6a01     clrf    0x1, 0           	CLRF	r0x01
000bf4   cf43     movff   0xf43, 0x2       	MOVFF	_tmin, r0x02
000bf6   f002
000bf8   6a03     clrf    0x3, 0           	CLRF	r0x03
000bfa   cf42     movff   0xf42, 0x4       	MOVFF	_thour, r0x04
000bfc   f004
000bfe   6a05     clrf    0x5, 0           	CLRF	r0x05
                                           ;	.line	485; lena.c	sprintf(display, "    %02u:%02u:%02u       Alarm  OFF   ",
000c00   0e0f     movlw   0xf              	MOVLW	HIGH(_refresh_lcd_display_1_1)
000c02   6e07     movwf   0x7, 0           	MOVWF	r0x07
000c04   0e21     movlw   0x21             	MOVLW	LOW(_refresh_lcd_display_1_1)
000c06   6e06     movwf   0x6, 0           	MOVWF	r0x06
000c08   0e80     movlw   0x80             	MOVLW	0x80
000c0a   6e08     movwf   0x8, 0           	MOVWF	r0x08
000c0c   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
000c0e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000c10   5000     movf    0, 0, 0          	MOVF	r0x00, W
000c12   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000c14   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
000c16   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000c18   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
000c1a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000c1c   5005     movf    0x5, 0, 0        	MOVF	r0x05, W
000c1e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000c20   5004     movf    0x4, 0, 0        	MOVF	r0x04, W
000c22   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000c24   0e00     movlw   0                	MOVLW	UPPER(__str_10)
000c26   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000c28   0e10     movlw   0x10             	MOVLW	HIGH(__str_10)
000c2a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000c2c   0e58     movlw   0x58             	MOVLW	LOW(__str_10)
000c2e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000c30   5008     movf    0x8, 0, 0        	MOVF	r0x08, W
000c32   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000c34   5007     movf    0x7, 0, 0        	MOVF	r0x07, W
000c36   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000c38   5006     movf    0x6, 0, 0        	MOVF	r0x06, W
000c3a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000c3c   ec47     call    0x228e, 0        	CALL	_sprintf
000c3e   f011
000c40   0e0c     movlw   0xc              	MOVLW	0x0c
000c42   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	488; lena.c	break;
000c44   d0c9     bra     0xdd8            	BRA	_00363_DS_
                                           _00357_DS_:
                                           ;	.line	491; lena.c	thour, tmin, tsec); // ***blink***
000c46   cf44     movff   0xf44, 0         	MOVFF	_tsec, r0x00
000c48   f000
000c4a   6a01     clrf    0x1, 0           	CLRF	r0x01
000c4c   cf43     movff   0xf43, 0x2       	MOVFF	_tmin, r0x02
000c4e   f002
000c50   6a03     clrf    0x3, 0           	CLRF	r0x03
000c52   cf42     movff   0xf42, 0x4       	MOVFF	_thour, r0x04
000c54   f004
000c56   6a05     clrf    0x5, 0           	CLRF	r0x05
                                           ;	.line	490; lena.c	sprintf(display, "    %02u:%02u:%02u      I am ringing! ",
000c58   0e0f     movlw   0xf              	MOVLW	HIGH(_refresh_lcd_display_1_1)
000c5a   6e07     movwf   0x7, 0           	MOVWF	r0x07
000c5c   0e21     movlw   0x21             	MOVLW	LOW(_refresh_lcd_display_1_1)
000c5e   6e06     movwf   0x6, 0           	MOVWF	r0x06
000c60   0e80     movlw   0x80             	MOVLW	0x80
000c62   6e08     movwf   0x8, 0           	MOVWF	r0x08
000c64   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
000c66   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000c68   5000     movf    0, 0, 0          	MOVF	r0x00, W
000c6a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000c6c   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
000c6e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000c70   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
000c72   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000c74   5005     movf    0x5, 0, 0        	MOVF	r0x05, W
000c76   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000c78   5004     movf    0x4, 0, 0        	MOVF	r0x04, W
000c7a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000c7c   0e00     movlw   0                	MOVLW	UPPER(__str_11)
000c7e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000c80   0e10     movlw   0x10             	MOVLW	HIGH(__str_11)
000c82   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000c84   0e80     movlw   0x80             	MOVLW	LOW(__str_11)
000c86   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000c88   5008     movf    0x8, 0, 0        	MOVF	r0x08, W
000c8a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000c8c   5007     movf    0x7, 0, 0        	MOVF	r0x07, W
000c8e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000c90   5006     movf    0x6, 0, 0        	MOVF	r0x06, W
000c92   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000c94   ec47     call    0x228e, 0        	CALL	_sprintf
000c96   f011
000c98   0e0c     movlw   0xc              	MOVLW	0x0c
000c9a   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	492; lena.c	break;
000c9c   d09d     bra     0xdd8            	BRA	_00363_DS_
                                           _00358_DS_:
                                           ;	.line	494; lena.c	if (snooze < 10) {
000c9e   0e0a     movlw   0xa              	MOVLW	0x0a
000ca0   010f     movlb   0xf              	BANKSEL	_snooze
000ca2   5d4a     subwf   0x4a, 0, 0x1     	SUBWF	_snooze, W, B
000ca4   b0d8     btfsc   0xd8, 0, 0       	BTFSC	STATUS, 0
000ca6   d041     bra     0xd2a            	BRA	_00360_DS_
                                           ;	.line	496; lena.c	thour, tmin, tsec, snooze, ahour_o, amin_o);
000ca8   cf49     movff   0xf49, 0         	MOVFF	_amin_o, r0x00
000caa   f000
000cac   6a01     clrf    0x1, 0           	CLRF	r0x01
000cae   cf48     movff   0xf48, 0x2       	MOVFF	_ahour_o, r0x02
000cb0   f002
000cb2   6a03     clrf    0x3, 0           	CLRF	r0x03
000cb4   cf4a     movff   0xf4a, 0x4       	MOVFF	_snooze, r0x04
000cb6   f004
000cb8   6a05     clrf    0x5, 0           	CLRF	r0x05
000cba   cf44     movff   0xf44, 0x6       	MOVFF	_tsec, r0x06
000cbc   f006
000cbe   6a07     clrf    0x7, 0           	CLRF	r0x07
000cc0   cf43     movff   0xf43, 0x8       	MOVFF	_tmin, r0x08
000cc2   f008
000cc4   6a09     clrf    0x9, 0           	CLRF	r0x09
000cc6   cf42     movff   0xf42, 0xa       	MOVFF	_thour, r0x0a
000cc8   f00a
000cca   6a0b     clrf    0xb, 0           	CLRF	r0x0b
                                           ;	.line	495; lena.c	sprintf(display, "    %02u:%02u:%02u    Snooze %u  %02u:%02u ",
000ccc   0e0f     movlw   0xf              	MOVLW	HIGH(_refresh_lcd_display_1_1)
000cce   6e0d     movwf   0xd, 0           	MOVWF	r0x0d
000cd0   0e21     movlw   0x21             	MOVLW	LOW(_refresh_lcd_display_1_1)
000cd2   6e0c     movwf   0xc, 0           	MOVWF	r0x0c
000cd4   0e80     movlw   0x80             	MOVLW	0x80
000cd6   6e0e     movwf   0xe, 0           	MOVWF	r0x0e
000cd8   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
000cda   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000cdc   5000     movf    0, 0, 0          	MOVF	r0x00, W
000cde   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000ce0   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
000ce2   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000ce4   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
000ce6   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000ce8   5005     movf    0x5, 0, 0        	MOVF	r0x05, W
000cea   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000cec   5004     movf    0x4, 0, 0        	MOVF	r0x04, W
000cee   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000cf0   5007     movf    0x7, 0, 0        	MOVF	r0x07, W
000cf2   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000cf4   5006     movf    0x6, 0, 0        	MOVF	r0x06, W
000cf6   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000cf8   5009     movf    0x9, 0, 0        	MOVF	r0x09, W
000cfa   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000cfc   5008     movf    0x8, 0, 0        	MOVF	r0x08, W
000cfe   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000d00   500b     movf    0xb, 0, 0        	MOVF	r0x0b, W
000d02   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000d04   500a     movf    0xa, 0, 0        	MOVF	r0x0a, W
000d06   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000d08   0e00     movlw   0                	MOVLW	UPPER(__str_12)
000d0a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000d0c   0e10     movlw   0x10             	MOVLW	HIGH(__str_12)
000d0e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000d10   0ea8     movlw   0xa8             	MOVLW	LOW(__str_12)
000d12   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000d14   500e     movf    0xe, 0, 0        	MOVF	r0x0e, W
000d16   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000d18   500d     movf    0xd, 0, 0        	MOVF	r0x0d, W
000d1a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000d1c   500c     movf    0xc, 0, 0        	MOVF	r0x0c, W
000d1e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000d20   ec47     call    0x228e, 0        	CALL	_sprintf
000d22   f011
000d24   0e12     movlw   0x12             	MOVLW	0x12
000d26   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
000d28   d057     bra     0xdd8            	BRA	_00363_DS_
                                           _00360_DS_:
                                           ;	.line	499; lena.c	thour, tmin, tsec, snooze, ahour_o, amin_o);
000d2a   cf49     movff   0xf49, 0         	MOVFF	_amin_o, r0x00
000d2c   f000
000d2e   6a01     clrf    0x1, 0           	CLRF	r0x01
000d30   cf48     movff   0xf48, 0x2       	MOVFF	_ahour_o, r0x02
000d32   f002
000d34   6a03     clrf    0x3, 0           	CLRF	r0x03
000d36   cf4a     movff   0xf4a, 0x4       	MOVFF	_snooze, r0x04
000d38   f004
000d3a   6a05     clrf    0x5, 0           	CLRF	r0x05
000d3c   cf44     movff   0xf44, 0x6       	MOVFF	_tsec, r0x06
000d3e   f006
000d40   6a07     clrf    0x7, 0           	CLRF	r0x07
000d42   cf43     movff   0xf43, 0x8       	MOVFF	_tmin, r0x08
000d44   f008
000d46   6a09     clrf    0x9, 0           	CLRF	r0x09
000d48   cf42     movff   0xf42, 0xa       	MOVFF	_thour, r0x0a
000d4a   f00a
000d4c   6a0b     clrf    0xb, 0           	CLRF	r0x0b
                                           ;	.line	498; lena.c	sprintf(display, "    %02u:%02u:%02u    Snooze %u %02u:%02u ",
000d4e   0e0f     movlw   0xf              	MOVLW	HIGH(_refresh_lcd_display_1_1)
000d50   6e0d     movwf   0xd, 0           	MOVWF	r0x0d
000d52   0e21     movlw   0x21             	MOVLW	LOW(_refresh_lcd_display_1_1)
000d54   6e0c     movwf   0xc, 0           	MOVWF	r0x0c
000d56   0e80     movlw   0x80             	MOVLW	0x80
000d58   6e0e     movwf   0xe, 0           	MOVWF	r0x0e
000d5a   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
000d5c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000d5e   5000     movf    0, 0, 0          	MOVF	r0x00, W
000d60   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000d62   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
000d64   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000d66   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
000d68   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000d6a   5005     movf    0x5, 0, 0        	MOVF	r0x05, W
000d6c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000d6e   5004     movf    0x4, 0, 0        	MOVF	r0x04, W
000d70   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000d72   5007     movf    0x7, 0, 0        	MOVF	r0x07, W
000d74   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000d76   5006     movf    0x6, 0, 0        	MOVF	r0x06, W
000d78   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000d7a   5009     movf    0x9, 0, 0        	MOVF	r0x09, W
000d7c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000d7e   5008     movf    0x8, 0, 0        	MOVF	r0x08, W
000d80   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000d82   500b     movf    0xb, 0, 0        	MOVF	r0x0b, W
000d84   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000d86   500a     movf    0xa, 0, 0        	MOVF	r0x0a, W
000d88   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000d8a   0e00     movlw   0                	MOVLW	UPPER(__str_13)
000d8c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000d8e   0e10     movlw   0x10             	MOVLW	HIGH(__str_13)
000d90   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000d92   0ed4     movlw   0xd4             	MOVLW	LOW(__str_13)
000d94   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000d96   500e     movf    0xe, 0, 0        	MOVF	r0x0e, W
000d98   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000d9a   500d     movf    0xd, 0, 0        	MOVF	r0x0d, W
000d9c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000d9e   500c     movf    0xc, 0, 0        	MOVF	r0x0c, W
000da0   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000da2   ec47     call    0x228e, 0        	CALL	_sprintf
000da4   f011
000da6   0e12     movlw   0x12             	MOVLW	0x12
000da8   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	502; lena.c	break;
000daa   d016     bra     0xdd8            	BRA	_00363_DS_
                                           _00362_DS_:
                                           ;	.line	504; lena.c	sprintf(display, "**** ERROR ********* ERROR *****");
000dac   0e0f     movlw   0xf              	MOVLW	HIGH(_refresh_lcd_display_1_1)
000dae   6e01     movwf   0x1, 0           	MOVWF	r0x01
000db0   0e21     movlw   0x21             	MOVLW	LOW(_refresh_lcd_display_1_1)
000db2   6e00     movwf   0, 0             	MOVWF	r0x00
000db4   0e80     movlw   0x80             	MOVLW	0x80
000db6   6e02     movwf   0x2, 0           	MOVWF	r0x02
000db8   0e00     movlw   0                	MOVLW	UPPER(__str_14)
000dba   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000dbc   0e11     movlw   0x11             	MOVLW	HIGH(__str_14)
000dbe   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000dc0   0e00     movlw   0                	MOVLW	LOW(__str_14)
000dc2   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000dc4   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
000dc6   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000dc8   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
000dca   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000dcc   5000     movf    0, 0, 0          	MOVF	r0x00, W
000dce   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000dd0   ec47     call    0x228e, 0        	CALL	_sprintf
000dd2   f011
000dd4   0e06     movlw   0x6              	MOVLW	0x06
000dd6   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           _00363_DS_:
                                           ;	.line	507; lena.c	DisplayString(0, display);
000dd8   0e0f     movlw   0xf              	MOVLW	HIGH(_refresh_lcd_display_1_1)
000dda   6e01     movwf   0x1, 0           	MOVWF	r0x01
000ddc   0e21     movlw   0x21             	MOVLW	LOW(_refresh_lcd_display_1_1)
000dde   6e00     movwf   0, 0             	MOVWF	r0x00
000de0   0e80     movlw   0x80             	MOVLW	0x80
000de2   6e02     movwf   0x2, 0           	MOVWF	r0x02
000de4   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
000de6   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000de8   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
000dea   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000dec   5000     movf    0, 0, 0          	MOVF	r0x00, W
000dee   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000df0   0e00     movlw   0                	MOVLW	0x00
000df2   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000df4   ec2e     call    0x245c, 0        	CALL	_DisplayString
000df6   f012
000df8   0e04     movlw   0x4              	MOVLW	0x04
000dfa   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
000dfc   cfe4     movff   0xfe4, 0xe       	MOVFF	PREINC1, r0x0e
000dfe   f00e
000e00   cfe4     movff   0xfe4, 0xd       	MOVFF	PREINC1, r0x0d
000e02   f00d
000e04   cfe4     movff   0xfe4, 0xc       	MOVFF	PREINC1, r0x0c
000e06   f00c
000e08   cfe4     movff   0xfe4, 0xb       	MOVFF	PREINC1, r0x0b
000e0a   f00b
000e0c   cfe4     movff   0xfe4, 0xa       	MOVFF	PREINC1, r0x0a
000e0e   f00a
000e10   cfe4     movff   0xfe4, 0x9       	MOVFF	PREINC1, r0x09
000e12   f009
000e14   cfe4     movff   0xfe4, 0x8       	MOVFF	PREINC1, r0x08
000e16   f008
000e18   cfe4     movff   0xfe4, 0x7       	MOVFF	PREINC1, r0x07
000e1a   f007
000e1c   cfe4     movff   0xfe4, 0x6       	MOVFF	PREINC1, r0x06
000e1e   f006
000e20   cfe4     movff   0xfe4, 0x5       	MOVFF	PREINC1, r0x05
000e22   f005
000e24   cfe4     movff   0xfe4, 0x4       	MOVFF	PREINC1, r0x04
000e26   f004
000e28   cfe4     movff   0xfe4, 0x3       	MOVFF	PREINC1, r0x03
000e2a   f003
000e2c   cfe4     movff   0xfe4, 0x2       	MOVFF	PREINC1, r0x02
000e2e   f002
000e30   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
000e32   f001
000e34   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
000e36   f000
000e38   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
000e3a   ffd9
000e3c   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_lena__button	code
                                           _button:
                                           ;	.line	313; lena.c	void button(void)
0015e8   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0015ea   ffe5
0015ec   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0015ee   ffd9
0015f0   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
0015f2   ffe5
0015f4   010f     movlb   0xf              	BANKSEL	_button1
                                           ;	.line	316; lena.c	if (button1) {
0015f6   514f     movf    0x4f, 0, 0x1     	MOVF	_button1, W, B
0015f8   b4d8     btfsc   0xd8, 0x2, 0     	BTFSC	STATUS, 2
0015fa   d07b     bra     0x16f2           	BRA	_00302_DS_
                                           ;	.line	317; lena.c	switch (whereami) {
0015fc   0e01     movlw   0x1              	MOVLW	0x01
0015fe   010f     movlb   0xf              	BANKSEL	_whereami
001600   5d4c     subwf   0x4c, 0, 0x1     	SUBWF	_whereami, W, B
001602   a0d8     btfss   0xd8, 0, 0       	BTFSS	STATUS, 0
001604   d073     bra     0x16ec           	BRA	_00267_DS_
001606   0e0c     movlw   0xc              	MOVLW	0x0c
001608   010f     movlb   0xf              	BANKSEL	_whereami
00160a   5d4c     subwf   0x4c, 0, 0x1     	SUBWF	_whereami, W, B
00160c   b0d8     btfsc   0xd8, 0, 0       	BTFSC	STATUS, 0
00160e   d06e     bra     0x16ec           	BRA	_00267_DS_
001610   010f     movlb   0xf              	BANKSEL	_whereami
001612   054c     decf    0x4c, 0, 0x1     	DECF	_whereami, W, B
001614   6e00     movwf   0, 0             	MOVWF	r0x00
001616   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
001618   ffe5
00161a   c002     movff   0x2, 0xfe5       	MOVFF	r0x02, POSTDEC1
00161c   ffe5
00161e   6a02     clrf    0x2, 0           	CLRF	r0x02
001620   3400     rlcf    0, 0, 0          	RLCF	r0x00, W
001622   3602     rlcf    0x2, 0x1, 0      	RLCF	r0x02, F
001624   34e8     rlcf    0xe8, 0, 0       	RLCF	WREG, W
001626   3602     rlcf    0x2, 0x1, 0      	RLCF	r0x02, F
001628   0bfc     andlw   0xfc             	ANDLW	0xfc
00162a   6e01     movwf   0x1, 0           	MOVWF	r0x01
00162c   0e00     movlw   0                	MOVLW	UPPER(_00321_DS_)
00162e   6efb     movwf   0xfb, 0          	MOVWF	PCLATU
001630   0e16     movlw   0x16             	MOVLW	HIGH(_00321_DS_)
001632   6efa     movwf   0xfa, 0          	MOVWF	PCLATH
001634   0e4c     movlw   0x4c             	MOVLW	LOW(_00321_DS_)
001636   2601     addwf   0x1, 0x1, 0      	ADDWF	r0x01, F
001638   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
00163a   22fa     addwfc  0xfa, 0x1, 0     	ADDWFC	PCLATH, F
00163c   b0d8     btfsc   0xd8, 0, 0       	BTFSC	STATUS, 0
00163e   2afb     incf    0xfb, 0x1, 0     	INCF	PCLATU, F
001640   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
001642   cfe4     movff   0xfe4, 0x2       	MOVFF	PREINC1, r0x02
001644   f002
001646   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
001648   f001
00164a   6ef9     movwf   0xf9, 0          	MOVWF	PCL
                                           _00321_DS_:
00164c   ef3c     goto    0x1678           	GOTO	_00255_DS_
00164e   f00b
001650   ef40     goto    0x1680           	GOTO	_00256_DS_
001652   f00b
001654   ef44     goto    0x1688           	GOTO	_00257_DS_
001656   f00b
001658   ef48     goto    0x1690           	GOTO	_00258_DS_
00165a   f00b
00165c   ef4c     goto    0x1698           	GOTO	_00259_DS_
00165e   f00b
001660   ef50     goto    0x16a0           	GOTO	_00260_DS_
001662   f00b
001664   ef54     goto    0x16a8           	GOTO	_00261_DS_
001666   f00b
001668   ef58     goto    0x16b0           	GOTO	_00262_DS_
00166a   f00b
00166c   ef5c     goto    0x16b8           	GOTO	_00263_DS_
00166e   f00b
001670   ef60     goto    0x16c0           	GOTO	_00264_DS_
001672   f00b
001674   ef69     goto    0x16d2           	GOTO	_00265_DS_
001676   f00b
                                           _00255_DS_:
                                           ;	.line	319; lena.c	whereami = ALARM_MENU;
001678   0e05     movlw   0x5              	MOVLW	0x05
00167a   010f     movlb   0xf              	BANKSEL	_whereami
00167c   6f4c     movwf   0x4c, 0x1        	MOVWF	_whereami, B
                                           ;	.line	320; lena.c	break;
00167e   d036     bra     0x16ec           	BRA	_00267_DS_
                                           _00256_DS_:
                                           ;	.line	322; lena.c	whereami = SET_MINUTE;
001680   0e03     movlw   0x3              	MOVLW	0x03
001682   010f     movlb   0xf              	BANKSEL	_whereami
001684   6f4c     movwf   0x4c, 0x1        	MOVWF	_whereami, B
                                           ;	.line	323; lena.c	break;
001686   d032     bra     0x16ec           	BRA	_00267_DS_
                                           _00257_DS_:
                                           ;	.line	325; lena.c	whereami = SET_SECOND;
001688   0e04     movlw   0x4              	MOVLW	0x04
00168a   010f     movlb   0xf              	BANKSEL	_whereami
00168c   6f4c     movwf   0x4c, 0x1        	MOVWF	_whereami, B
                                           ;	.line	326; lena.c	break;
00168e   d02e     bra     0x16ec           	BRA	_00267_DS_
                                           _00258_DS_:
                                           ;	.line	328; lena.c	whereami = ALARM_MENU;
001690   0e05     movlw   0x5              	MOVLW	0x05
001692   010f     movlb   0xf              	BANKSEL	_whereami
001694   6f4c     movwf   0x4c, 0x1        	MOVWF	_whereami, B
                                           ;	.line	329; lena.c	break;
001696   d02a     bra     0x16ec           	BRA	_00267_DS_
                                           _00259_DS_:
                                           ;	.line	331; lena.c	whereami = DISPLAY;
001698   0e09     movlw   0x9              	MOVLW	0x09
00169a   010f     movlb   0xf              	BANKSEL	_whereami
00169c   6f4c     movwf   0x4c, 0x1        	MOVWF	_whereami, B
                                           ;	.line	332; lena.c	break;
00169e   d026     bra     0x16ec           	BRA	_00267_DS_
                                           _00260_DS_:
                                           ;	.line	334; lena.c	whereami = SET_A_HOUR;
0016a0   0e07     movlw   0x7              	MOVLW	0x07
0016a2   010f     movlb   0xf              	BANKSEL	_whereami
0016a4   6f4c     movwf   0x4c, 0x1        	MOVWF	_whereami, B
                                           ;	.line	335; lena.c	break;
0016a6   d022     bra     0x16ec           	BRA	_00267_DS_
                                           _00261_DS_:
                                           ;	.line	337; lena.c	whereami = SET_A_MIN;
0016a8   0e08     movlw   0x8              	MOVLW	0x08
0016aa   010f     movlb   0xf              	BANKSEL	_whereami
0016ac   6f4c     movwf   0x4c, 0x1        	MOVWF	_whereami, B
                                           ;	.line	338; lena.c	break;
0016ae   d01e     bra     0x16ec           	BRA	_00267_DS_
                                           _00262_DS_:
                                           ;	.line	340; lena.c	whereami = DISPLAY;
0016b0   0e09     movlw   0x9              	MOVLW	0x09
0016b2   010f     movlb   0xf              	BANKSEL	_whereami
0016b4   6f4c     movwf   0x4c, 0x1        	MOVWF	_whereami, B
                                           ;	.line	341; lena.c	break;
0016b6   d01a     bra     0x16ec           	BRA	_00267_DS_
                                           _00263_DS_:
                                           ;	.line	343; lena.c	whereami = TIME_MENU;
0016b8   0e01     movlw   0x1              	MOVLW	0x01
0016ba   010f     movlb   0xf              	BANKSEL	_whereami
0016bc   6f4c     movwf   0x4c, 0x1        	MOVWF	_whereami, B
                                           ;	.line	344; lena.c	break;
0016be   d016     bra     0x16ec           	BRA	_00267_DS_
                                           _00264_DS_:
                                           ;	.line	346; lena.c	stop_ringing = 1;
0016c0   0e01     movlw   0x1              	MOVLW	0x01
0016c2   010f     movlb   0xf              	BANKSEL	_stop_ringing
0016c4   6f4b     movwf   0x4b, 0x1        	MOVWF	_stop_ringing, B
                                           ;	.line	347; lena.c	LATJbits.LATJ1 = 0; // switch LED 2 off
0016c6   9291     bcf     0x91, 0x1, 0     	BCF	_LATJbits, 1
                                           ;	.line	348; lena.c	LATJbits.LATJ2 = 0; // switch LED 3 off
0016c8   9491     bcf     0x91, 0x2, 0     	BCF	_LATJbits, 2
                                           ;	.line	349; lena.c	whereami = DISPLAY;
0016ca   0e09     movlw   0x9              	MOVLW	0x09
0016cc   010f     movlb   0xf              	BANKSEL	_whereami
0016ce   6f4c     movwf   0x4c, 0x1        	MOVWF	_whereami, B
                                           ;	.line	350; lena.c	break;
0016d0   d00d     bra     0x16ec           	BRA	_00267_DS_
                                           _00265_DS_:
                                           ;	.line	352; lena.c	amin = amin_o; // remet le réveil
0016d2   cf49     movff   0xf49, 0xf47     	MOVFF	_amin_o, _amin
0016d4   ff47
                                           ;	.line	353; lena.c	ahour = ahour_o;
0016d6   cf48     movff   0xf48, 0xf46     	MOVFF	_ahour_o, _ahour
0016d8   ff46
0016da   010f     movlb   0xf              	BANKSEL	_snooze
                                           ;	.line	354; lena.c	snooze = 0;
0016dc   6b4a     clrf    0x4a, 0x1        	CLRF	_snooze, B
0016de   010f     movlb   0xf              	BANKSEL	_stop_ringing
                                           ;	.line	355; lena.c	stop_ringing = 0; // le réveil doit sonner à nouveau 
0016e0   6b4b     clrf    0x4b, 0x1        	CLRF	_stop_ringing, B
                                           ;	.line	356; lena.c	LATJbits.LATJ1 = 0; // switch LED 2 off
0016e2   9291     bcf     0x91, 0x1, 0     	BCF	_LATJbits, 1
                                           ;	.line	357; lena.c	LATJbits.LATJ2 = 0; // switch LED 3 off
0016e4   9491     bcf     0x91, 0x2, 0     	BCF	_LATJbits, 2
                                           ;	.line	358; lena.c	whereami = DISPLAY;
0016e6   0e09     movlw   0x9              	MOVLW	0x09
0016e8   010f     movlb   0xf              	BANKSEL	_whereami
0016ea   6f4c     movwf   0x4c, 0x1        	MOVWF	_whereami, B
                                           _00267_DS_:
0016ec   010f     movlb   0xf              	BANKSEL	_button1
                                           ;	.line	363; lena.c	button1 = 0; // remet le flag du boutton 1 à 0
0016ee   6b4f     clrf    0x4f, 0x1        	CLRF	_button1, B
0016f0   d0a3     bra     0x1838           	BRA	_00304_DS_
                                           _00302_DS_:
0016f2   010f     movlb   0xf              	BANKSEL	_button2
                                           ;	.line	366; lena.c	} else if (button2) {
0016f4   5150     movf    0x50, 0, 0x1     	MOVF	_button2, W, B
0016f6   b4d8     btfsc   0xd8, 0x2, 0     	BTFSC	STATUS, 2
0016f8   d09f     bra     0x1838           	BRA	_00304_DS_
                                           ;	.line	367; lena.c	switch (whereami) {
0016fa   0e01     movlw   0x1              	MOVLW	0x01
0016fc   010f     movlb   0xf              	BANKSEL	_whereami
0016fe   5d4c     subwf   0x4c, 0, 0x1     	SUBWF	_whereami, W, B
001700   a0d8     btfss   0xd8, 0, 0       	BTFSS	STATUS, 0
001702   d098     bra     0x1834           	BRA	_00298_DS_
001704   0e0c     movlw   0xc              	MOVLW	0x0c
001706   010f     movlb   0xf              	BANKSEL	_whereami
001708   5d4c     subwf   0x4c, 0, 0x1     	SUBWF	_whereami, W, B
00170a   b0d8     btfsc   0xd8, 0, 0       	BTFSC	STATUS, 0
00170c   d093     bra     0x1834           	BRA	_00298_DS_
00170e   010f     movlb   0xf              	BANKSEL	_whereami
001710   054c     decf    0x4c, 0, 0x1     	DECF	_whereami, W, B
001712   6e00     movwf   0, 0             	MOVWF	r0x00
001714   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
001716   ffe5
001718   c002     movff   0x2, 0xfe5       	MOVFF	r0x02, POSTDEC1
00171a   ffe5
00171c   6a02     clrf    0x2, 0           	CLRF	r0x02
00171e   3400     rlcf    0, 0, 0          	RLCF	r0x00, W
001720   3602     rlcf    0x2, 0x1, 0      	RLCF	r0x02, F
001722   34e8     rlcf    0xe8, 0, 0       	RLCF	WREG, W
001724   3602     rlcf    0x2, 0x1, 0      	RLCF	r0x02, F
001726   0bfc     andlw   0xfc             	ANDLW	0xfc
001728   6e01     movwf   0x1, 0           	MOVWF	r0x01
00172a   0e00     movlw   0                	MOVLW	UPPER(_00324_DS_)
00172c   6efb     movwf   0xfb, 0          	MOVWF	PCLATU
00172e   0e17     movlw   0x17             	MOVLW	HIGH(_00324_DS_)
001730   6efa     movwf   0xfa, 0          	MOVWF	PCLATH
001732   0e4a     movlw   0x4a             	MOVLW	LOW(_00324_DS_)
001734   2601     addwf   0x1, 0x1, 0      	ADDWF	r0x01, F
001736   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
001738   22fa     addwfc  0xfa, 0x1, 0     	ADDWFC	PCLATH, F
00173a   b0d8     btfsc   0xd8, 0, 0       	BTFSC	STATUS, 0
00173c   2afb     incf    0xfb, 0x1, 0     	INCF	PCLATU, F
00173e   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
001740   cfe4     movff   0xfe4, 0x2       	MOVFF	PREINC1, r0x02
001742   f002
001744   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
001746   f001
001748   6ef9     movwf   0xf9, 0          	MOVWF	PCL
                                           _00324_DS_:
00174a   efbb     goto    0x1776           	GOTO	_00268_DS_
00174c   f00b
00174e   efbf     goto    0x177e           	GOTO	_00269_DS_
001750   f00b
001752   efc9     goto    0x1792           	GOTO	_00272_DS_
001754   f00b
001756   efd3     goto    0x17a6           	GOTO	_00276_DS_
001758   f00b
00175a   efdd     goto    0x17ba           	GOTO	_00280_DS_
00175c   f00b
00175e   efe1     goto    0x17c2           	GOTO	_00281_DS_
001760   f00b
001762   efe5     goto    0x17ca           	GOTO	_00282_DS_
001764   f00b
001766   eff1     goto    0x17e2           	GOTO	_00286_DS_
001768   f00b
00176a   effd     goto    0x17fa           	GOTO	_00290_DS_
00176c   f00b
00176e   effe     goto    0x17fc           	GOTO	_00291_DS_
001770   f00b
001772   ef0f     goto    0x181e           	GOTO	_00294_DS_
001774   f00c
                                           _00268_DS_:
                                           ;	.line	369; lena.c	whereami = SET_HOUR;
001776   0e02     movlw   0x2              	MOVLW	0x02
001778   010f     movlb   0xf              	BANKSEL	_whereami
00177a   6f4c     movwf   0x4c, 0x1        	MOVWF	_whereami, B
                                           ;	.line	370; lena.c	break;
00177c   d05b     bra     0x1834           	BRA	_00298_DS_
                                           _00269_DS_:
00177e   010f     movlb   0xf              	BANKSEL	_thour
                                           ;	.line	372; lena.c	thour++;
001780   2b42     incf    0x42, 0x1, 0x1   	INCF	_thour, F, B
001782   010f     movlb   0xf              	BANKSEL	_thour
                                           ;	.line	373; lena.c	if (thour == 24) {
001784   5142     movf    0x42, 0, 0x1     	MOVF	_thour, W, B
001786   0a18     xorlw   0x18             	XORLW	0x18
001788   e001     bz      0x178c           	BZ	_00326_DS_
00178a   d054     bra     0x1834           	BRA	_00298_DS_
                                           _00326_DS_:
00178c   010f     movlb   0xf              	BANKSEL	_thour
                                           ;	.line	374; lena.c	thour = 0;
00178e   6b42     clrf    0x42, 0x1        	CLRF	_thour, B
                                           ;	.line	376; lena.c	break;
001790   d051     bra     0x1834           	BRA	_00298_DS_
                                           _00272_DS_:
001792   010f     movlb   0xf              	BANKSEL	_tmin
                                           ;	.line	378; lena.c	if (tmin == 59) {
001794   5143     movf    0x43, 0, 0x1     	MOVF	_tmin, W, B
001796   0a3b     xorlw   0x3b             	XORLW	0x3b
001798   e103     bnz     0x17a0           	BNZ	_00274_DS_
                                           _00328_DS_:
00179a   010f     movlb   0xf              	BANKSEL	_tmin
                                           ;	.line	379; lena.c	tmin = 0;
00179c   6b43     clrf    0x43, 0x1        	CLRF	_tmin, B
00179e   d04a     bra     0x1834           	BRA	_00298_DS_
                                           _00274_DS_:
0017a0   010f     movlb   0xf              	BANKSEL	_tmin
                                           ;	.line	381; lena.c	tmin++;
0017a2   2b43     incf    0x43, 0x1, 0x1   	INCF	_tmin, F, B
                                           ;	.line	383; lena.c	break;
0017a4   d047     bra     0x1834           	BRA	_00298_DS_
                                           _00276_DS_:
0017a6   010f     movlb   0xf              	BANKSEL	_tsec
                                           ;	.line	385; lena.c	if (tsec == 59) {
0017a8   5144     movf    0x44, 0, 0x1     	MOVF	_tsec, W, B
0017aa   0a3b     xorlw   0x3b             	XORLW	0x3b
0017ac   e103     bnz     0x17b4           	BNZ	_00278_DS_
                                           _00330_DS_:
0017ae   010f     movlb   0xf              	BANKSEL	_tsec
                                           ;	.line	386; lena.c	tsec = 0;
0017b0   6b44     clrf    0x44, 0x1        	CLRF	_tsec, B
0017b2   d040     bra     0x1834           	BRA	_00298_DS_
                                           _00278_DS_:
0017b4   010f     movlb   0xf              	BANKSEL	_tsec
                                           ;	.line	388; lena.c	tsec++;
0017b6   2b44     incf    0x44, 0x1, 0x1   	INCF	_tsec, F, B
                                           ;	.line	390; lena.c	break;
0017b8   d03d     bra     0x1834           	BRA	_00298_DS_
                                           _00280_DS_:
                                           ;	.line	392; lena.c	whereami = SET_ALARM;
0017ba   0e06     movlw   0x6              	MOVLW	0x06
0017bc   010f     movlb   0xf              	BANKSEL	_whereami
0017be   6f4c     movwf   0x4c, 0x1        	MOVWF	_whereami, B
                                           ;	.line	393; lena.c	break;
0017c0   d039     bra     0x1834           	BRA	_00298_DS_
                                           _00281_DS_:
                                           ;	.line	395; lena.c	alarm_set ^= 1;
0017c2   0e01     movlw   0x1              	MOVLW	0x01
0017c4   010f     movlb   0xf              	BANKSEL	_alarm_set
0017c6   1b45     xorwf   0x45, 0x1, 0x1   	XORWF	_alarm_set, F, B
                                           ;	.line	396; lena.c	break;
0017c8   d035     bra     0x1834           	BRA	_00298_DS_
                                           _00282_DS_:
0017ca   010f     movlb   0xf              	BANKSEL	_ahour
                                           ;	.line	398; lena.c	if (ahour == 23) {
0017cc   5146     movf    0x46, 0, 0x1     	MOVF	_ahour, W, B
0017ce   0a17     xorlw   0x17             	XORLW	0x17
0017d0   e103     bnz     0x17d8           	BNZ	_00284_DS_
                                           _00333_DS_:
0017d2   010f     movlb   0xf              	BANKSEL	_ahour
                                           ;	.line	399; lena.c	ahour = 0;
0017d4   6b46     clrf    0x46, 0x1        	CLRF	_ahour, B
0017d6   d002     bra     0x17dc           	BRA	_00285_DS_
                                           _00284_DS_:
0017d8   010f     movlb   0xf              	BANKSEL	_ahour
                                           ;	.line	401; lena.c	ahour++;
0017da   2b46     incf    0x46, 0x1, 0x1   	INCF	_ahour, F, B
                                           _00285_DS_:
                                           ;	.line	403; lena.c	ahour_o = ahour;
0017dc   cf46     movff   0xf46, 0xf48     	MOVFF	_ahour, _ahour_o
0017de   ff48
                                           ;	.line	404; lena.c	break;
0017e0   d029     bra     0x1834           	BRA	_00298_DS_
                                           _00286_DS_:
0017e2   010f     movlb   0xf              	BANKSEL	_amin
                                           ;	.line	406; lena.c	if (amin == 59) {
0017e4   5147     movf    0x47, 0, 0x1     	MOVF	_amin, W, B
0017e6   0a3b     xorlw   0x3b             	XORLW	0x3b
0017e8   e103     bnz     0x17f0           	BNZ	_00288_DS_
                                           _00335_DS_:
0017ea   010f     movlb   0xf              	BANKSEL	_amin
                                           ;	.line	407; lena.c	amin = 0;
0017ec   6b47     clrf    0x47, 0x1        	CLRF	_amin, B
0017ee   d002     bra     0x17f4           	BRA	_00289_DS_
                                           _00288_DS_:
0017f0   010f     movlb   0xf              	BANKSEL	_amin
                                           ;	.line	409; lena.c	amin++;
0017f2   2b47     incf    0x47, 0x1, 0x1   	INCF	_amin, F, B
                                           _00289_DS_:
                                           ;	.line	411; lena.c	amin_o = amin;
0017f4   cf47     movff   0xf47, 0xf49     	MOVFF	_amin, _amin_o
0017f6   ff49
                                           ;	.line	412; lena.c	break;
0017f8   d01d     bra     0x1834           	BRA	_00298_DS_
                                           _00290_DS_:
                                           ;	.line	415; lena.c	break;
0017fa   d01c     bra     0x1834           	BRA	_00298_DS_
                                           _00291_DS_:
                                           ;	.line	418; lena.c	if (snooze < SNOOZE_MAX) {
0017fc   0e0c     movlw   0xc              	MOVLW	0x0c
0017fe   010f     movlb   0xf              	BANKSEL	_snooze
001800   5d4a     subwf   0x4a, 0, 0x1     	SUBWF	_snooze, W, B
001802   e218     bc      0x1834           	BC	_00298_DS_
                                           ;	.line	419; lena.c	inc_amin(SNOOZE_MINUTE); // modifie le réveil
001804   0e05     movlw   0x5              	MOVLW	0x05
001806   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001808   ec6b     call    0x28d6, 0        	CALL	_inc_amin
00180a   f014
00180c   2ae1     incf    0xe1, 0x1, 0     	INCF	FSR1L, F
00180e   010f     movlb   0xf              	BANKSEL	_snooze
                                           ;	.line	420; lena.c	snooze++; // augmente le compteur de snooze
001810   2b4a     incf    0x4a, 0x1, 0x1   	INCF	_snooze, F, B
                                           ;	.line	421; lena.c	LATJbits.LATJ1 = 0; // switch LED 2 off
001812   9291     bcf     0x91, 0x1, 0     	BCF	_LATJbits, 1
                                           ;	.line	422; lena.c	LATJbits.LATJ2 = 0; // switch LED 3 off
001814   9491     bcf     0x91, 0x2, 0     	BCF	_LATJbits, 2
                                           ;	.line	423; lena.c	whereami = SNOOZE;
001816   0e0b     movlw   0xb              	MOVLW	0x0b
001818   010f     movlb   0xf              	BANKSEL	_whereami
00181a   6f4c     movwf   0x4c, 0x1        	MOVWF	_whereami, B
                                           ;	.line	426; lena.c	break;
00181c   d00b     bra     0x1834           	BRA	_00298_DS_
                                           _00294_DS_:
                                           ;	.line	429; lena.c	if (snooze < SNOOZE_MAX) {
00181e   0e0c     movlw   0xc              	MOVLW	0x0c
001820   010f     movlb   0xf              	BANKSEL	_snooze
001822   5d4a     subwf   0x4a, 0, 0x1     	SUBWF	_snooze, W, B
001824   e207     bc      0x1834           	BC	_00298_DS_
                                           ;	.line	430; lena.c	inc_amin(SNOOZE_MINUTE); // modifie le réveil
001826   0e05     movlw   0x5              	MOVLW	0x05
001828   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00182a   ec6b     call    0x28d6, 0        	CALL	_inc_amin
00182c   f014
00182e   2ae1     incf    0xe1, 0x1, 0     	INCF	FSR1L, F
001830   010f     movlb   0xf              	BANKSEL	_snooze
                                           ;	.line	431; lena.c	snooze++; // augmente le compteur de snooze
001832   2b4a     incf    0x4a, 0x1, 0x1   	INCF	_snooze, F, B
                                           _00298_DS_:
001834   010f     movlb   0xf              	BANKSEL	_button2
                                           ;	.line	438; lena.c	button2 = 0; // remet le flag du boutton 2 à 0
001836   6b50     clrf    0x50, 0x1        	CLRF	_button2, B
                                           _00304_DS_:
001838   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
00183a   f000
00183c   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
00183e   ffd9
001840   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_lena__manageseconds	code
                                           _manageseconds:
                                           ;	.line	305; lena.c	void manageseconds() {
002cf4   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002cf6   ffe5
002cf8   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002cfa   ffd9
002cfc   010f     movlb   0xf              	BANKSEL	(_pseudoseconds + 1)
                                           ;	.line	306; lena.c	if (pseudoseconds >= PER) {
002cfe   5154     movf    0x54, 0, 0x1     	MOVF	(_pseudoseconds + 1), W, B
002d00   0f80     addlw   0x80             	ADDLW	0x80
002d02   0f80     addlw   0x80             	ADDLW	0x80
002d04   e103     bnz     0x2d0c           	BNZ	_00250_DS_
002d06   0e05     movlw   0x5              	MOVLW	0x05
002d08   010f     movlb   0xf              	BANKSEL	_pseudoseconds
002d0a   5d53     subwf   0x53, 0, 0x1     	SUBWF	_pseudoseconds, W, B
                                           _00250_DS_:
002d0c   e30c     bnc     0x2d26           	BNC	_00247_DS_
                                           ;	.line	307; lena.c	overflows = overflows - CUT;
002d0e   0efe     movlw   0xfe             	MOVLW	0xfe
002d10   010f     movlb   0xf              	BANKSEL	_overflows
002d12   2751     addwf   0x51, 0x1, 0x1   	ADDWF	_overflows, F, B
002d14   e202     bc      0x2d1a           	BC	_10389_DS_
002d16   010f     movlb   0xf              	BANKSEL	(_overflows + 1)
002d18   0752     decf    0x52, 0x1, 0x1   	DECF	(_overflows + 1), F, B
                                           _10389_DS_:
                                           ;	.line	308; lena.c	pseudoseconds = pseudoseconds - PER;
002d1a   0efb     movlw   0xfb             	MOVLW	0xfb
002d1c   010f     movlb   0xf              	BANKSEL	_pseudoseconds
002d1e   2753     addwf   0x53, 0x1, 0x1   	ADDWF	_pseudoseconds, F, B
002d20   e202     bc      0x2d26           	BC	_20390_DS_
002d22   010f     movlb   0xf              	BANKSEL	(_pseudoseconds + 1)
002d24   0754     decf    0x54, 0x1, 0x1   	DECF	(_pseudoseconds + 1), F, B
                                           _20390_DS_:
                                           _00247_DS_:
002d26   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002d28   ffd9
002d2a   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_lena__time	code
                                           _time:
                                           ;	.line	257; lena.c	void time(void)
001d38   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
001d3a   ffe5
001d3c   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
001d3e   ffd9
001d40   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
001d42   ffe5
001d44   010f     movlb   0xf              	BANKSEL	_halfsecond
                                           ;	.line	260; lena.c	if (halfsecond) {
001d46   514e     movf    0x4e, 0, 0x1     	MOVF	_halfsecond, W, B
001d48   e00e     bz      0x1d66           	BZ	_00186_DS_
                                           ;	.line	261; lena.c	LED0_IO ^= 1;
001d4a   6a00     clrf    0, 0             	CLRF	r0x00
001d4c   b091     btfsc   0x91, 0, 0       	BTFSC	_LATJbits, 0
001d4e   2a00     incf    0, 0x1, 0        	INCF	r0x00, F
001d50   0e01     movlw   0x1              	MOVLW	0x01
001d52   1a00     xorwf   0, 0x1, 0        	XORWF	r0x00, F
001d54   5000     movf    0, 0, 0          	MOVF	r0x00, W
001d56   0b01     andlw   0x1              	ANDLW	0x01
001d58   6ef4     movwf   0xf4, 0          	MOVWF	PRODH
001d5a   5091     movf    0x91, 0, 0       	MOVF	_LATJbits, W
001d5c   0bfe     andlw   0xfe             	ANDLW	0xfe
001d5e   10f4     iorwf   0xf4, 0, 0       	IORWF	PRODH, W
001d60   6e91     movwf   0x91, 0          	MOVWF	_LATJbits
001d62   010f     movlb   0xf              	BANKSEL	_halfsecond
                                           ;	.line	262; lena.c	halfsecond = 0;
001d64   6b4e     clrf    0x4e, 0x1        	CLRF	_halfsecond, B
                                           _00186_DS_:
001d66   010f     movlb   0xf              	BANKSEL	_new_time
                                           ;	.line	266; lena.c	if (new_time) {
001d68   514d     movf    0x4d, 0, 0x1     	MOVF	_new_time, W, B
001d6a   e014     bz      0x1d94           	BZ	_00188_DS_
001d6c   010f     movlb   0xf              	BANKSEL	_new_time
                                           ;	.line	267; lena.c	inc_tsec(new_time);
001d6e   514d     movf    0x4d, 0, 0x1     	MOVF	_new_time, W, B
001d70   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001d72   ecfd     call    0x1bfa, 0        	CALL	_inc_tsec
001d74   f00d
001d76   2ae1     incf    0xe1, 0x1, 0     	INCF	FSR1L, F
001d78   010f     movlb   0xf              	BANKSEL	_new_time
                                           ;	.line	268; lena.c	new_time = 0;
001d7a   6b4d     clrf    0x4d, 0x1        	CLRF	_new_time, B
                                           ;	.line	270; lena.c	LED0_IO ^= 1;
001d7c   6a00     clrf    0, 0             	CLRF	r0x00
001d7e   b091     btfsc   0x91, 0, 0       	BTFSC	_LATJbits, 0
001d80   2a00     incf    0, 0x1, 0        	INCF	r0x00, F
001d82   0e01     movlw   0x1              	MOVLW	0x01
001d84   1a00     xorwf   0, 0x1, 0        	XORWF	r0x00, F
001d86   5000     movf    0, 0, 0          	MOVF	r0x00, W
001d88   0b01     andlw   0x1              	ANDLW	0x01
001d8a   6ef4     movwf   0xf4, 0          	MOVWF	PRODH
001d8c   5091     movf    0x91, 0, 0       	MOVF	_LATJbits, W
001d8e   0bfe     andlw   0xfe             	ANDLW	0xfe
001d90   10f4     iorwf   0xf4, 0, 0       	IORWF	PRODH, W
001d92   6e91     movwf   0x91, 0          	MOVWF	_LATJbits
                                           _00188_DS_:
001d94   010f     movlb   0xf              	BANKSEL	_thour
                                           ;	.line	274; lena.c	if ((thour == ahour) && (tmin == amin) && alarm_set) {
001d96   5142     movf    0x42, 0, 0x1     	MOVF	_thour, W, B
001d98   010f     movlb   0xf              	BANKSEL	_ahour
001d9a   1946     xorwf   0x46, 0, 0x1     	XORWF	_ahour, W, B
001d9c   e001     bz      0x1da0           	BZ	_00226_DS_
001d9e   d059     bra     0x1e52           	BRA	_00209_DS_
                                           _00226_DS_:
001da0   010f     movlb   0xf              	BANKSEL	_tmin
001da2   5143     movf    0x43, 0, 0x1     	MOVF	_tmin, W, B
001da4   010f     movlb   0xf              	BANKSEL	_amin
001da6   1947     xorwf   0x47, 0, 0x1     	XORWF	_amin, W, B
001da8   e001     bz      0x1dac           	BZ	_00228_DS_
001daa   d053     bra     0x1e52           	BRA	_00209_DS_
                                           _00228_DS_:
001dac   010f     movlb   0xf              	BANKSEL	_alarm_set
001dae   5145     movf    0x45, 0, 0x1     	MOVF	_alarm_set, W, B
001db0   b4d8     btfsc   0xd8, 0x2, 0     	BTFSC	STATUS, 2
001db2   d04f     bra     0x1e52           	BRA	_00209_DS_
                                           ;	.line	277; lena.c	if ((tsec < 31) && (stop_ringing == 0)) {
001db4   0e1f     movlw   0x1f             	MOVLW	0x1f
001db6   010f     movlb   0xf              	BANKSEL	_tsec
001db8   5d44     subwf   0x44, 0, 0x1     	SUBWF	_tsec, W, B
001dba   e22f     bc      0x1e1a           	BC	_00202_DS_
001dbc   010f     movlb   0xf              	BANKSEL	_stop_ringing
001dbe   514b     movf    0x4b, 0, 0x1     	MOVF	_stop_ringing, W, B
001dc0   e12c     bnz     0x1e1a           	BNZ	_00202_DS_
001dc2   010f     movlb   0xf              	BANKSEL	_whereami
                                           ;	.line	278; lena.c	if ((whereami == DISPLAY) || (whereami == SNOOZE)) {
001dc4   514c     movf    0x4c, 0, 0x1     	MOVF	_whereami, W, B
001dc6   0a09     xorlw   0x9              	XORLW	0x09
001dc8   e004     bz      0x1dd2           	BZ	_00189_DS_
                                           _00231_DS_:
001dca   010f     movlb   0xf              	BANKSEL	_whereami
001dcc   514c     movf    0x4c, 0, 0x1     	MOVF	_whereami, W, B
001dce   0a0b     xorlw   0xb              	XORLW	0x0b
001dd0   e103     bnz     0x1dd8           	BNZ	_00190_DS_
                                           _00189_DS_:
                                           ;	.line	279; lena.c	whereami = ALARM;
001dd2   0e0a     movlw   0xa              	MOVLW	0x0a
001dd4   010f     movlb   0xf              	BANKSEL	_whereami
001dd6   6f4c     movwf   0x4c, 0x1        	MOVWF	_whereami, B
                                           _00190_DS_:
001dd8   010f     movlb   0xf              	BANKSEL	_whereami
                                           ;	.line	281; lena.c	if (whereami == ALARM) {
001dda   514c     movf    0x4c, 0, 0x1     	MOVF	_whereami, W, B
001ddc   0a0a     xorlw   0xa              	XORLW	0x0a
001dde   e001     bz      0x1de2           	BZ	_00235_DS_
001de0   d038     bra     0x1e52           	BRA	_00209_DS_
                                           _00235_DS_:
                                           ;	.line	282; lena.c	LED1_IO ^= 1; //change state of red leds
001de2   6a00     clrf    0, 0             	CLRF	r0x00
001de4   b291     btfsc   0x91, 0x1, 0     	BTFSC	_LATJbits, 1
001de6   2a00     incf    0, 0x1, 0        	INCF	r0x00, F
001de8   0e01     movlw   0x1              	MOVLW	0x01
001dea   1a00     xorwf   0, 0x1, 0        	XORWF	r0x00, F
001dec   5000     movf    0, 0, 0          	MOVF	r0x00, W
001dee   0b01     andlw   0x1              	ANDLW	0x01
001df0   44e8     rlncf   0xe8, 0, 0       	RLNCF	WREG, W
001df2   6ef4     movwf   0xf4, 0          	MOVWF	PRODH
001df4   5091     movf    0x91, 0, 0       	MOVF	_LATJbits, W
001df6   0bfd     andlw   0xfd             	ANDLW	0xfd
001df8   10f4     iorwf   0xf4, 0, 0       	IORWF	PRODH, W
001dfa   6e91     movwf   0x91, 0          	MOVWF	_LATJbits
                                           ;	.line	283; lena.c	LED2_IO ^= 1; //change state of red leds
001dfc   6a00     clrf    0, 0             	CLRF	r0x00
001dfe   b491     btfsc   0x91, 0x2, 0     	BTFSC	_LATJbits, 2
001e00   2a00     incf    0, 0x1, 0        	INCF	r0x00, F
001e02   0e01     movlw   0x1              	MOVLW	0x01
001e04   1a00     xorwf   0, 0x1, 0        	XORWF	r0x00, F
001e06   5000     movf    0, 0, 0          	MOVF	r0x00, W
001e08   0b01     andlw   0x1              	ANDLW	0x01
001e0a   44e8     rlncf   0xe8, 0, 0       	RLNCF	WREG, W
001e0c   44e8     rlncf   0xe8, 0, 0       	RLNCF	WREG, W
001e0e   6ef4     movwf   0xf4, 0          	MOVWF	PRODH
001e10   5091     movf    0x91, 0, 0       	MOVF	_LATJbits, W
001e12   0bfb     andlw   0xfb             	ANDLW	0xfb
001e14   10f4     iorwf   0xf4, 0, 0       	IORWF	PRODH, W
001e16   6e91     movwf   0x91, 0          	MOVWF	_LATJbits
001e18   d01c     bra     0x1e52           	BRA	_00209_DS_
                                           _00202_DS_:
                                           ;	.line	286; lena.c	} else if (tsec > 30) {
001e1a   0e1f     movlw   0x1f             	MOVLW	0x1f
001e1c   010f     movlb   0xf              	BANKSEL	_tsec
001e1e   5d44     subwf   0x44, 0, 0x1     	SUBWF	_tsec, W, B
001e20   e318     bnc     0x1e52           	BNC	_00209_DS_
001e22   010f     movlb   0xf              	BANKSEL	_stop_ringing
                                           ;	.line	287; lena.c	stop_ringing = 0; // remet à 0 si l'alarme a été éteinte à la main
001e24   6b4b     clrf    0x4b, 0x1        	CLRF	_stop_ringing, B
                                           ;	.line	288; lena.c	LATJbits.LATJ1 = 0; // switch LED 2 off
001e26   9291     bcf     0x91, 0x1, 0     	BCF	_LATJbits, 1
                                           ;	.line	289; lena.c	LATJbits.LATJ2 = 0; // switch LED 3 off
001e28   9491     bcf     0x91, 0x2, 0     	BCF	_LATJbits, 2
001e2a   010f     movlb   0xf              	BANKSEL	_snooze
                                           ;	.line	291; lena.c	if (snooze) {
001e2c   514a     movf    0x4a, 0, 0x1     	MOVF	_snooze, W, B
001e2e   e00a     bz      0x1e44           	BZ	_00197_DS_
                                           ;	.line	292; lena.c	ahour = ahour_o; // remet le réveil
001e30   cf48     movff   0xf48, 0xf46     	MOVFF	_ahour_o, _ahour
001e32   ff46
                                           ;	.line	293; lena.c	amin = amin_o;
001e34   cf49     movff   0xf49, 0xf47     	MOVFF	_amin_o, _amin
001e36   ff47
001e38   010f     movlb   0xf              	BANKSEL	_snooze
                                           ;	.line	294; lena.c	snooze = 0;
001e3a   6b4a     clrf    0x4a, 0x1        	CLRF	_snooze, B
                                           ;	.line	295; lena.c	whereami = DISPLAY;
001e3c   0e09     movlw   0x9              	MOVLW	0x09
001e3e   010f     movlb   0xf              	BANKSEL	_whereami
001e40   6f4c     movwf   0x4c, 0x1        	MOVWF	_whereami, B
001e42   d007     bra     0x1e52           	BRA	_00209_DS_
                                           _00197_DS_:
001e44   010f     movlb   0xf              	BANKSEL	_whereami
                                           ;	.line	296; lena.c	} else if (whereami == ALARM) { // si l'alarme sonnait toujours, on
001e46   514c     movf    0x4c, 0, 0x1     	MOVF	_whereami, W, B
001e48   0a0a     xorlw   0xa              	XORLW	0x0a
001e4a   e103     bnz     0x1e52           	BNZ	_00209_DS_
                                           ;	.line	297; lena.c	whereami = DISPLAY;         // revient à l'affichage de l'heure
001e4c   0e09     movlw   0x9              	MOVLW	0x09
001e4e   010f     movlb   0xf              	BANKSEL	_whereami
001e50   6f4c     movwf   0x4c, 0x1        	MOVWF	_whereami, B
                                           _00209_DS_:
001e52   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
001e54   f000
001e56   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
001e58   ffd9
001e5a   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_lena__dec_amin	code
                                           _dec_amin:
                                           ;	.line	245; lena.c	void dec_amin(BYTE val)
002c22   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002c24   ffe5
002c26   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002c28   ffd9
002c2a   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
002c2c   ffe5
002c2e   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
002c30   ffe5
002c32   0e02     movlw   0x2              	MOVLW	0x02
002c34   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
002c36   f000
                                           ;	.line	248; lena.c	if (val > amin) {
002c38   5000     movf    0, 0, 0          	MOVF	r0x00, W
002c3a   010f     movlb   0xf              	BANKSEL	_amin
002c3c   5d47     subwf   0x47, 0, 0x1     	SUBWF	_amin, W, B
002c3e   e20e     bc      0x2c5c           	BC	_00175_DS_
                                           ;	.line	249; lena.c	dec_ahour(1);
002c40   0e01     movlw   0x1              	MOVLW	0x01
002c42   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002c44   ec38     call    0x2c70, 0        	CALL	_dec_ahour
002c46   f016
002c48   2ae1     incf    0xe1, 0x1, 0     	INCF	FSR1L, F
                                           ;	.line	250; lena.c	amin = (60+amin) - val;
002c4a   0e3c     movlw   0x3c             	MOVLW	0x3c
002c4c   010f     movlb   0xf              	BANKSEL	_amin
002c4e   2547     addwf   0x47, 0, 0x1     	ADDWF	_amin, W, B
002c50   6e01     movwf   0x1, 0           	MOVWF	r0x01
002c52   5000     movf    0, 0, 0          	MOVF	r0x00, W
002c54   5c01     subwf   0x1, 0, 0        	SUBWF	r0x01, W
002c56   010f     movlb   0xf              	BANKSEL	_amin
002c58   6f47     movwf   0x47, 0x1        	MOVWF	_amin, B
002c5a   d003     bra     0x2c62           	BRA	_00177_DS_
                                           _00175_DS_:
                                           ;	.line	252; lena.c	amin  = amin - val;
002c5c   5000     movf    0, 0, 0          	MOVF	r0x00, W
002c5e   010f     movlb   0xf              	BANKSEL	_amin
002c60   5f47     subwf   0x47, 0x1, 0x1   	SUBWF	_amin, F, B
                                           _00177_DS_:
002c62   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
002c64   f001
002c66   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
002c68   f000
002c6a   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002c6c   ffd9
002c6e   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_lena__dec_ahour	code
                                           _dec_ahour:
                                           ;	.line	233; lena.c	void dec_ahour(BYTE val)
002c70   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002c72   ffe5
002c74   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002c76   ffd9
002c78   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
002c7a   ffe5
002c7c   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
002c7e   ffe5
002c80   0e02     movlw   0x2              	MOVLW	0x02
002c82   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
002c84   f000
                                           ;	.line	236; lena.c	if (val > ahour) {
002c86   5000     movf    0, 0, 0          	MOVF	r0x00, W
002c88   010f     movlb   0xf              	BANKSEL	_ahour
002c8a   5d46     subwf   0x46, 0, 0x1     	SUBWF	_ahour, W, B
002c8c   e209     bc      0x2ca0           	BC	_00164_DS_
                                           ;	.line	237; lena.c	ahour = (24+ahour) - val;
002c8e   0e18     movlw   0x18             	MOVLW	0x18
002c90   010f     movlb   0xf              	BANKSEL	_ahour
002c92   2546     addwf   0x46, 0, 0x1     	ADDWF	_ahour, W, B
002c94   6e01     movwf   0x1, 0           	MOVWF	r0x01
002c96   5000     movf    0, 0, 0          	MOVF	r0x00, W
002c98   5c01     subwf   0x1, 0, 0        	SUBWF	r0x01, W
002c9a   010f     movlb   0xf              	BANKSEL	_ahour
002c9c   6f46     movwf   0x46, 0x1        	MOVWF	_ahour, B
002c9e   d003     bra     0x2ca6           	BRA	_00166_DS_
                                           _00164_DS_:
                                           ;	.line	239; lena.c	ahour = ahour - val;
002ca0   5000     movf    0, 0, 0          	MOVF	r0x00, W
002ca2   010f     movlb   0xf              	BANKSEL	_ahour
002ca4   5f46     subwf   0x46, 0x1, 0x1   	SUBWF	_ahour, F, B
                                           _00166_DS_:
002ca6   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
002ca8   f001
002caa   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
002cac   f000
002cae   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002cb0   ffd9
002cb2   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_lena__inc_amin	code
                                           _inc_amin:
                                           ;	.line	220; lena.c	void inc_amin(BYTE val)
0028d6   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0028d8   ffe5
0028da   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0028dc   ffd9
0028de   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
0028e0   ffe5
0028e2   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
0028e4   ffe5
0028e6   c002     movff   0x2, 0xfe5       	MOVFF	r0x02, POSTDEC1
0028e8   ffe5
0028ea   c003     movff   0x3, 0xfe5       	MOVFF	r0x03, POSTDEC1
0028ec   ffe5
0028ee   0e02     movlw   0x2              	MOVLW	0x02
0028f0   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
0028f2   f000
                                           ;	.line	224; lena.c	mod_amin = (amin + val) / 60;
0028f4   cf47     movff   0xf47, 0x1       	MOVFF	_amin, r0x01
0028f6   f001
0028f8   6a02     clrf    0x2, 0           	CLRF	r0x02
0028fa   6a03     clrf    0x3, 0           	CLRF	r0x03
0028fc   5000     movf    0, 0, 0          	MOVF	r0x00, W
0028fe   2601     addwf   0x1, 0x1, 0      	ADDWF	r0x01, F
002900   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
002902   2202     addwfc  0x2, 0x1, 0      	ADDWFC	r0x02, F
002904   0e00     movlw   0                	MOVLW	0x00
002906   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002908   0e3c     movlw   0x3c             	MOVLW	0x3c
00290a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00290c   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
00290e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002910   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
002912   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002914   eccc     call    0x2198, 0        	CALL	__divsint
002916   f010
002918   6e01     movwf   0x1, 0           	MOVWF	r0x01
00291a   cff3     movff   0xff3, 0x2       	MOVFF	PRODL, r0x02
00291c   f002
00291e   0e04     movlw   0x4              	MOVLW	0x04
002920   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	225; lena.c	if (mod_amin) {
002922   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
002924   e005     bz      0x2930           	BZ	_00157_DS_
                                           ;	.line	226; lena.c	inc_ahour(mod_amin);
002926   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
002928   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00292a   ec80     call    0x2b00, 0        	CALL	_inc_ahour
00292c   f015
00292e   2ae1     incf    0xe1, 0x1, 0     	INCF	FSR1L, F
                                           _00157_DS_:
                                           ;	.line	229; lena.c	amin = (amin + val) % 60;
002930   cf47     movff   0xf47, 0x1       	MOVFF	_amin, r0x01
002932   f001
002934   6a02     clrf    0x2, 0           	CLRF	r0x02
002936   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
002938   2600     addwf   0, 0x1, 0        	ADDWF	r0x00, F
00293a   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
00293c   2203     addwfc  0x3, 0x1, 0      	ADDWFC	r0x03, F
00293e   0e00     movlw   0                	MOVLW	0x00
002940   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002942   0e3c     movlw   0x3c             	MOVLW	0x3c
002944   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002946   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
002948   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00294a   5000     movf    0, 0, 0          	MOVF	r0x00, W
00294c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00294e   ecbc     call    0x2378, 0        	CALL	__modsint
002950   f011
002952   6e00     movwf   0, 0             	MOVWF	r0x00
002954   cff3     movff   0xff3, 0x1       	MOVFF	PRODL, r0x01
002956   f001
002958   0e04     movlw   0x4              	MOVLW	0x04
00295a   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
00295c   5000     movf    0, 0, 0          	MOVF	r0x00, W
00295e   010f     movlb   0xf              	BANKSEL	_amin
002960   6f47     movwf   0x47, 0x1        	MOVWF	_amin, B
002962   cfe4     movff   0xfe4, 0x3       	MOVFF	PREINC1, r0x03
002964   f003
002966   cfe4     movff   0xfe4, 0x2       	MOVFF	PREINC1, r0x02
002968   f002
00296a   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
00296c   f001
00296e   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
002970   f000
002972   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002974   ffd9
002976   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_lena__inc_ahour	code
                                           _inc_ahour:
                                           ;	.line	214; lena.c	void inc_ahour(BYTE val)
002b00   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002b02   ffe5
002b04   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002b06   ffd9
002b08   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
002b0a   ffe5
002b0c   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
002b0e   ffe5
002b10   c002     movff   0x2, 0xfe5       	MOVFF	r0x02, POSTDEC1
002b12   ffe5
002b14   c003     movff   0x3, 0xfe5       	MOVFF	r0x03, POSTDEC1
002b16   ffe5
002b18   0e02     movlw   0x2              	MOVLW	0x02
002b1a   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
002b1c   f000
                                           ;	.line	216; lena.c	ahour = (ahour + val) % 24;
002b1e   cf46     movff   0xf46, 0x1       	MOVFF	_ahour, r0x01
002b20   f001
002b22   6a02     clrf    0x2, 0           	CLRF	r0x02
002b24   6a03     clrf    0x3, 0           	CLRF	r0x03
002b26   5000     movf    0, 0, 0          	MOVF	r0x00, W
002b28   2601     addwf   0x1, 0x1, 0      	ADDWF	r0x01, F
002b2a   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
002b2c   2202     addwfc  0x2, 0x1, 0      	ADDWFC	r0x02, F
002b2e   0e00     movlw   0                	MOVLW	0x00
002b30   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002b32   0e18     movlw   0x18             	MOVLW	0x18
002b34   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002b36   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
002b38   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002b3a   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
002b3c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002b3e   ecbc     call    0x2378, 0        	CALL	__modsint
002b40   f011
002b42   6e00     movwf   0, 0             	MOVWF	r0x00
002b44   cff3     movff   0xff3, 0x1       	MOVFF	PRODL, r0x01
002b46   f001
002b48   0e04     movlw   0x4              	MOVLW	0x04
002b4a   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
002b4c   5000     movf    0, 0, 0          	MOVF	r0x00, W
002b4e   010f     movlb   0xf              	BANKSEL	_ahour
002b50   6f46     movwf   0x46, 0x1        	MOVWF	_ahour, B
002b52   cfe4     movff   0xfe4, 0x3       	MOVFF	PREINC1, r0x03
002b54   f003
002b56   cfe4     movff   0xfe4, 0x2       	MOVFF	PREINC1, r0x02
002b58   f002
002b5a   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
002b5c   f001
002b5e   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
002b60   f000
002b62   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002b64   ffd9
002b66   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_lena__inc_tsec	code
                                           _inc_tsec:
                                           ;	.line	194; lena.c	void inc_tsec(BYTE val)
001bfa   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
001bfc   ffe5
001bfe   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
001c00   ffd9
001c02   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
001c04   ffe5
001c06   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
001c08   ffe5
001c0a   c002     movff   0x2, 0xfe5       	MOVFF	r0x02, POSTDEC1
001c0c   ffe5
001c0e   c003     movff   0x3, 0xfe5       	MOVFF	r0x03, POSTDEC1
001c10   ffe5
001c12   c004     movff   0x4, 0xfe5       	MOVFF	r0x04, POSTDEC1
001c14   ffe5
001c16   c005     movff   0x5, 0xfe5       	MOVFF	r0x05, POSTDEC1
001c18   ffe5
001c1a   c006     movff   0x6, 0xfe5       	MOVFF	r0x06, POSTDEC1
001c1c   ffe5
001c1e   c007     movff   0x7, 0xfe5       	MOVFF	r0x07, POSTDEC1
001c20   ffe5
001c22   0e02     movlw   0x2              	MOVLW	0x02
001c24   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
001c26   f000
                                           ;	.line	199; lena.c	mod_tsec = (tsec + val) / 60;
001c28   cf44     movff   0xf44, 0x1       	MOVFF	_tsec, r0x01
001c2a   f001
001c2c   6a02     clrf    0x2, 0           	CLRF	r0x02
001c2e   6a03     clrf    0x3, 0           	CLRF	r0x03
001c30   5000     movf    0, 0, 0          	MOVF	r0x00, W
001c32   2401     addwf   0x1, 0, 0        	ADDWF	r0x01, W
001c34   6e00     movwf   0, 0             	MOVWF	r0x00
001c36   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
001c38   2002     addwfc  0x2, 0, 0        	ADDWFC	r0x02, W
001c3a   6e01     movwf   0x1, 0           	MOVWF	r0x01
001c3c   0e00     movlw   0                	MOVLW	0x00
001c3e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001c40   0e3c     movlw   0x3c             	MOVLW	0x3c
001c42   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001c44   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
001c46   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001c48   5000     movf    0, 0, 0          	MOVF	r0x00, W
001c4a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001c4c   eccc     call    0x2198, 0        	CALL	__divsint
001c4e   f010
001c50   6e02     movwf   0x2, 0           	MOVWF	r0x02
001c52   cff3     movff   0xff3, 0x3       	MOVFF	PRODL, r0x03
001c54   f003
001c56   0e04     movlw   0x4              	MOVLW	0x04
001c58   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	200; lena.c	if (mod_tsec) {
001c5a   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
001c5c   b4d8     btfsc   0xd8, 0x2, 0     	BTFSC	STATUS, 2
001c5e   d047     bra     0x1cee           	BRA	_00145_DS_
                                           ;	.line	202; lena.c	mod_tmin = (tmin + mod_tsec) / 60;
001c60   cf43     movff   0xf43, 0x3       	MOVFF	_tmin, r0x03
001c62   f003
001c64   6a04     clrf    0x4, 0           	CLRF	r0x04
001c66   6a05     clrf    0x5, 0           	CLRF	r0x05
001c68   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
001c6a   2403     addwf   0x3, 0, 0        	ADDWF	r0x03, W
001c6c   6e02     movwf   0x2, 0           	MOVWF	r0x02
001c6e   5005     movf    0x5, 0, 0        	MOVF	r0x05, W
001c70   2004     addwfc  0x4, 0, 0        	ADDWFC	r0x04, W
001c72   6e03     movwf   0x3, 0           	MOVWF	r0x03
001c74   0e00     movlw   0                	MOVLW	0x00
001c76   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001c78   0e3c     movlw   0x3c             	MOVLW	0x3c
001c7a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001c7c   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
001c7e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001c80   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
001c82   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001c84   eccc     call    0x2198, 0        	CALL	__divsint
001c86   f010
001c88   6e04     movwf   0x4, 0           	MOVWF	r0x04
001c8a   cff3     movff   0xff3, 0x5       	MOVFF	PRODL, r0x05
001c8c   f005
001c8e   0e04     movlw   0x4              	MOVLW	0x04
001c90   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	203; lena.c	if (mod_tmin) {
001c92   5004     movf    0x4, 0, 0        	MOVF	r0x04, W
001c94   e01a     bz      0x1cca           	BZ	_00143_DS_
                                           ;	.line	204; lena.c	thour = (thour + mod_tmin) % 24;
001c96   cf42     movff   0xf42, 0x5       	MOVFF	_thour, r0x05
001c98   f005
001c9a   6a06     clrf    0x6, 0           	CLRF	r0x06
001c9c   6a07     clrf    0x7, 0           	CLRF	r0x07
001c9e   5004     movf    0x4, 0, 0        	MOVF	r0x04, W
001ca0   2605     addwf   0x5, 0x1, 0      	ADDWF	r0x05, F
001ca2   5007     movf    0x7, 0, 0        	MOVF	r0x07, W
001ca4   2206     addwfc  0x6, 0x1, 0      	ADDWFC	r0x06, F
001ca6   0e00     movlw   0                	MOVLW	0x00
001ca8   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001caa   0e18     movlw   0x18             	MOVLW	0x18
001cac   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001cae   5006     movf    0x6, 0, 0        	MOVF	r0x06, W
001cb0   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001cb2   5005     movf    0x5, 0, 0        	MOVF	r0x05, W
001cb4   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001cb6   ecbc     call    0x2378, 0        	CALL	__modsint
001cb8   f011
001cba   6e04     movwf   0x4, 0           	MOVWF	r0x04
001cbc   cff3     movff   0xff3, 0x5       	MOVFF	PRODL, r0x05
001cbe   f005
001cc0   0e04     movlw   0x4              	MOVLW	0x04
001cc2   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
001cc4   5004     movf    0x4, 0, 0        	MOVF	r0x04, W
001cc6   010f     movlb   0xf              	BANKSEL	_thour
001cc8   6f42     movwf   0x42, 0x1        	MOVWF	_thour, B
                                           _00143_DS_:
                                           ;	.line	207; lena.c	tmin = (tmin + mod_tsec) % 60;
001cca   0e00     movlw   0                	MOVLW	0x00
001ccc   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001cce   0e3c     movlw   0x3c             	MOVLW	0x3c
001cd0   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001cd2   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
001cd4   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001cd6   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
001cd8   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001cda   ecbc     call    0x2378, 0        	CALL	__modsint
001cdc   f011
001cde   6e02     movwf   0x2, 0           	MOVWF	r0x02
001ce0   cff3     movff   0xff3, 0x3       	MOVFF	PRODL, r0x03
001ce2   f003
001ce4   0e04     movlw   0x4              	MOVLW	0x04
001ce6   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
001ce8   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
001cea   010f     movlb   0xf              	BANKSEL	_tmin
001cec   6f43     movwf   0x43, 0x1        	MOVWF	_tmin, B
                                           _00145_DS_:
                                           ;	.line	210; lena.c	tsec = (tsec + val) % 60;
001cee   0e00     movlw   0                	MOVLW	0x00
001cf0   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001cf2   0e3c     movlw   0x3c             	MOVLW	0x3c
001cf4   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001cf6   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
001cf8   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001cfa   5000     movf    0, 0, 0          	MOVF	r0x00, W
001cfc   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001cfe   ecbc     call    0x2378, 0        	CALL	__modsint
001d00   f011
001d02   6e00     movwf   0, 0             	MOVWF	r0x00
001d04   cff3     movff   0xff3, 0x1       	MOVFF	PRODL, r0x01
001d06   f001
001d08   0e04     movlw   0x4              	MOVLW	0x04
001d0a   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
001d0c   5000     movf    0, 0, 0          	MOVF	r0x00, W
001d0e   010f     movlb   0xf              	BANKSEL	_tsec
001d10   6f44     movwf   0x44, 0x1        	MOVWF	_tsec, B
001d12   cfe4     movff   0xfe4, 0x7       	MOVFF	PREINC1, r0x07
001d14   f007
001d16   cfe4     movff   0xfe4, 0x6       	MOVFF	PREINC1, r0x06
001d18   f006
001d1a   cfe4     movff   0xfe4, 0x5       	MOVFF	PREINC1, r0x05
001d1c   f005
001d1e   cfe4     movff   0xfe4, 0x4       	MOVFF	PREINC1, r0x04
001d20   f004
001d22   cfe4     movff   0xfe4, 0x3       	MOVFF	PREINC1, r0x03
001d24   f003
001d26   cfe4     movff   0xfe4, 0x2       	MOVFF	PREINC1, r0x02
001d28   f002
001d2a   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
001d2c   f001
001d2e   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
001d30   f000
001d32   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
001d34   ffd9
001d36   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_lena__low_isr	code
                                           _low_isr:
                                           ;	.line	124; lena.c	void low_isr (void) interrupt 2
002a90   cfe8     movff   0xfe8, 0xfe5     	MOVFF	WREG, POSTDEC1
002a92   ffe5
002a94   cfd8     movff   0xfd8, 0xfe5     	MOVFF	STATUS, POSTDEC1
002a96   ffe5
002a98   cfe0     movff   0xfe0, 0xfe5     	MOVFF	BSR, POSTDEC1
002a9a   ffe5
002a9c   cff3     movff   0xff3, 0xfe5     	MOVFF	PRODL, POSTDEC1
002a9e   ffe5
002aa0   cff4     movff   0xff4, 0xfe5     	MOVFF	PRODH, POSTDEC1
002aa2   ffe5
002aa4   cfe9     movff   0xfe9, 0xfe5     	MOVFF	FSR0L, POSTDEC1
002aa6   ffe5
002aa8   cfea     movff   0xfea, 0xfe5     	MOVFF	FSR0H, POSTDEC1
002aaa   ffe5
002aac   cffa     movff   0xffa, 0xfe5     	MOVFF	PCLATH, POSTDEC1
002aae   ffe5
002ab0   cffb     movff   0xffb, 0xfe5     	MOVFF	PCLATU, POSTDEC1
002ab2   ffe5
002ab4   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002ab6   ffe5
002ab8   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002aba   ffd9
                                           ;	.line	127; lena.c	if(INTCON3bits.INT3F) {
002abc   a4f0     btfss   0xf0, 0x2, 0     	BTFSS	_INTCON3bits, 2
002abe   d005     bra     0x2aca           	BRA	_00127_DS_
                                           ;	.line	128; lena.c	button1 = 1;
002ac0   0e01     movlw   0x1              	MOVLW	0x01
002ac2   010f     movlb   0xf              	BANKSEL	_button1
002ac4   6f4f     movwf   0x4f, 0x1        	MOVWF	_button1, B
                                           ;	.line	129; lena.c	INTCON3bits.INT3F = 0;   //clear INT1 flag
002ac6   94f0     bcf     0xf0, 0x2, 0     	BCF	_INTCON3bits, 2
002ac8   d006     bra     0x2ad6           	BRA	_00129_DS_
                                           _00127_DS_:
                                           ;	.line	132; lena.c	} else if(INTCON3bits.INT1F) {
002aca   a0f0     btfss   0xf0, 0, 0       	BTFSS	_INTCON3bits, 0
002acc   d004     bra     0x2ad6           	BRA	_00129_DS_
                                           ;	.line	133; lena.c	button2 = 1;
002ace   0e01     movlw   0x1              	MOVLW	0x01
002ad0   010f     movlb   0xf              	BANKSEL	_button2
002ad2   6f50     movwf   0x50, 0x1        	MOVWF	_button2, B
                                           ;	.line	134; lena.c	INTCON3bits.INT1F = 0;
002ad4   90f0     bcf     0xf0, 0, 0       	BCF	_INTCON3bits, 0
                                           _00129_DS_:
002ad6   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002ad8   ffd9
002ada   cfe4     movff   0xfe4, 0xffb     	MOVFF	PREINC1, PCLATU
002adc   fffb
002ade   cfe4     movff   0xfe4, 0xffa     	MOVFF	PREINC1, PCLATH
002ae0   fffa
002ae2   cfe4     movff   0xfe4, 0xfea     	MOVFF	PREINC1, FSR0H
002ae4   ffea
002ae6   cfe4     movff   0xfe4, 0xfe9     	MOVFF	PREINC1, FSR0L
002ae8   ffe9
002aea   cfe4     movff   0xfe4, 0xff4     	MOVFF	PREINC1, PRODH
002aec   fff4
002aee   cfe4     movff   0xfe4, 0xff3     	MOVFF	PREINC1, PRODL
002af0   fff3
002af2   cfe4     movff   0xfe4, 0xfe0     	MOVFF	PREINC1, BSR
002af4   ffe0
002af6   cfe4     movff   0xfe4, 0xfd8     	MOVFF	PREINC1, STATUS
002af8   ffd8
002afa   cfe4     movff   0xfe4, 0xfe8     	MOVFF	PREINC1, WREG
002afc   ffe8
002afe   0010     retfie  0                	RETFIE	
                                           
                                           ; ; Starting pCode block
                                           S_lena__high_isr	code
                                           _high_isr:
                                           ;	.line	103; lena.c	void high_isr (void) interrupt 1
000e3e   cfe8     movff   0xfe8, 0xfe5     	MOVFF	WREG, POSTDEC1
000e40   ffe5
000e42   cfd8     movff   0xfd8, 0xfe5     	MOVFF	STATUS, POSTDEC1
000e44   ffe5
000e46   cfe0     movff   0xfe0, 0xfe5     	MOVFF	BSR, POSTDEC1
000e48   ffe5
000e4a   cff3     movff   0xff3, 0xfe5     	MOVFF	PRODL, POSTDEC1
000e4c   ffe5
000e4e   cff4     movff   0xff4, 0xfe5     	MOVFF	PRODH, POSTDEC1
000e50   ffe5
000e52   cfe9     movff   0xfe9, 0xfe5     	MOVFF	FSR0L, POSTDEC1
000e54   ffe5
000e56   cfea     movff   0xfea, 0xfe5     	MOVFF	FSR0H, POSTDEC1
000e58   ffe5
000e5a   cffa     movff   0xffa, 0xfe5     	MOVFF	PCLATH, POSTDEC1
000e5c   ffe5
000e5e   cffb     movff   0xffb, 0xfe5     	MOVFF	PCLATU, POSTDEC1
000e60   ffe5
000e62   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
000e64   ffe5
000e66   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
000e68   ffd9
                                           ;	.line	106; lena.c	if (INTCONbits.T0IF) {
000e6a   a4f2     btfss   0xf2, 0x2, 0     	BTFSS	_INTCONbits, 2
000e6c   d024     bra     0xeb6            	BRA	_00111_DS_
000e6e   010f     movlb   0xf              	BANKSEL	_overflows
                                           ;	.line	107; lena.c	overflows++;
000e70   2b51     incf    0x51, 0x1, 0x1   	INCF	_overflows, F, B
000e72   e302     bnc     0xe78            	BNC	_30391_DS_
000e74   010f     movlb   0xf              	BANKSEL	(_overflows + 1)
000e76   2b52     incf    0x52, 0x1, 0x1   	INCF	(_overflows + 1), F, B
                                           _30391_DS_:
000e78   010f     movlb   0xf              	BANKSEL	_overflows
                                           ;	.line	109; lena.c	if (overflows == OPS/2) {
000e7a   5151     movf    0x51, 0, 0x1     	MOVF	_overflows, W, B
000e7c   0a2f     xorlw   0x2f             	XORLW	0x2f
000e7e   e103     bnz     0xe86            	BNZ	_00116_DS_
000e80   010f     movlb   0xf              	BANKSEL	(_overflows + 1)
000e82   5152     movf    0x52, 0, 0x1     	MOVF	(_overflows + 1), W, B
000e84   e001     bz      0xe88            	BZ	_00117_DS_
                                           _00116_DS_:
000e86   d003     bra     0xe8e            	BRA	_00106_DS_
                                           _00117_DS_:
                                           ;	.line	110; lena.c	halfsecond = 1;
000e88   0e01     movlw   0x1              	MOVLW	0x01
000e8a   010f     movlb   0xf              	BANKSEL	_halfsecond
000e8c   6f4e     movwf   0x4e, 0x1        	MOVWF	_halfsecond, B
                                           _00106_DS_:
000e8e   010f     movlb   0xf              	BANKSEL	_overflows
                                           ;	.line	113; lena.c	if (overflows == OPS) {
000e90   5151     movf    0x51, 0, 0x1     	MOVF	_overflows, W, B
000e92   0a5f     xorlw   0x5f             	XORLW	0x5f
000e94   e103     bnz     0xe9c            	BNZ	_00118_DS_
000e96   010f     movlb   0xf              	BANKSEL	(_overflows + 1)
000e98   5152     movf    0x52, 0, 0x1     	MOVF	(_overflows + 1), W, B
000e9a   e001     bz      0xe9e            	BZ	_00119_DS_
                                           _00118_DS_:
000e9c   d00b     bra     0xeb4            	BRA	_00108_DS_
                                           _00119_DS_:
000e9e   010f     movlb   0xf              	BANKSEL	_pseudoseconds
                                           ;	.line	114; lena.c	pseudoseconds++;
000ea0   2b53     incf    0x53, 0x1, 0x1   	INCF	_pseudoseconds, F, B
000ea2   e302     bnc     0xea8            	BNC	_40392_DS_
000ea4   010f     movlb   0xf              	BANKSEL	(_pseudoseconds + 1)
000ea6   2b54     incf    0x54, 0x1, 0x1   	INCF	(_pseudoseconds + 1), F, B
                                           _40392_DS_:
000ea8   010f     movlb   0xf              	BANKSEL	_new_time
                                           ;	.line	115; lena.c	new_time++;
000eaa   2b4d     incf    0x4d, 0x1, 0x1   	INCF	_new_time, F, B
000eac   010f     movlb   0xf              	BANKSEL	_overflows
                                           ;	.line	116; lena.c	overflows = 0;
000eae   6b51     clrf    0x51, 0x1        	CLRF	_overflows, B
000eb0   010f     movlb   0xf              	BANKSEL	(_overflows + 1)
000eb2   6b52     clrf    0x52, 0x1        	CLRF	(_overflows + 1), B
                                           _00108_DS_:
                                           ;	.line	118; lena.c	INTCONbits.T0IF = 0;
000eb4   94f2     bcf     0xf2, 0x2, 0     	BCF	_INTCONbits, 2
                                           _00111_DS_:
000eb6   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
000eb8   ffd9
000eba   cfe4     movff   0xfe4, 0xffb     	MOVFF	PREINC1, PCLATU
000ebc   fffb
000ebe   cfe4     movff   0xfe4, 0xffa     	MOVFF	PREINC1, PCLATH
000ec0   fffa
000ec2   cfe4     movff   0xfe4, 0xfea     	MOVFF	PREINC1, FSR0H
000ec4   ffea
000ec6   cfe4     movff   0xfe4, 0xfe9     	MOVFF	PREINC1, FSR0L
000ec8   ffe9
000eca   cfe4     movff   0xfe4, 0xff4     	MOVFF	PREINC1, PRODH
000ecc   fff4
000ece   cfe4     movff   0xfe4, 0xff3     	MOVFF	PREINC1, PRODL
000ed0   fff3
000ed2   cfe4     movff   0xfe4, 0xfe0     	MOVFF	PREINC1, BSR
000ed4   ffe0
000ed6   cfe4     movff   0xfe4, 0xfd8     	MOVFF	PREINC1, STATUS
000ed8   ffd8
000eda   cfe4     movff   0xfe4, 0xfe8     	MOVFF	PREINC1, WREG
000edc   ffe8
000ede   0010     retfie  0                	RETFIE	
                                           
                                           ; ; Starting pCode block
                                           __str_0:
000ee0   6f44     movwf   0x44, 0x1        	DB	0x44, 0x6f, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x77, 0x61, 0x6e, 0x74, 0x20
000ee2   7920     btg     0x20, 0x4, 0x1   
000ee4   756f     btg     0x6f, 0x2, 0x1   
000ee6   7720     btg     0x20, 0x3, 0x1   
000ee8   6e61     movwf   0x61, 0          
000eea   2074     addwfc  0x74, 0, 0       
000eec   6f74     movwf   0x74, 0x1        	DB	0x74, 0x6f, 0x20, 0x20, 0x73, 0x65, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20
000eee   2020     addwfc  0x20, 0, 0       
000ef0   6573     cpfsgt  0x73, 0x1        
000ef2   2074     addwfc  0x74, 0, 0       
000ef4   6874     setf    0x74, 0          
000ef6   2065     addwfc  0x65, 0, 0       
000ef8   6974     setf    0x74, 0x1        	DB	0x74, 0x69, 0x6d, 0x65, 0x20, 0x3f, 0x20, 0x20, 0x00
000efa   656d     cpfsgt  0x6d, 0x1        
000efc   3f20     incfsz  0x20, 0x1, 0x1   
000efe   2020     addwfc  0x20, 0, 0       
000f00   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_1:
000f02   5b20     subwfb  0x20, 0x1, 0x1   	DB	0x20, 0x5b, 0x25, 0x30, 0x32, 0x75, 0x5d, 0x3a, 0x20, 0x25, 0x30, 0x32
000f04   3025     rrcf    0x25, 0, 0       
000f06   7532     btg     0x32, 0x2, 0x1   
000f08   3a5d     swapf   0x5d, 0x1, 0     
000f0a   2520     addwf   0x20, 0, 0x1     
000f0c   3230     rrcf    0x30, 0x1, 0     
000f0e   2075     addwfc  0x75, 0, 0       	DB	0x75, 0x20, 0x3a, 0x20, 0x25, 0x30, 0x32, 0x75, 0x20, 0x20, 0x20, 0x20
000f10   203a     addwfc  0x3a, 0, 0       
000f12   3025     rrcf    0x25, 0, 0       
000f14   7532     btg     0x32, 0x2, 0x1   
000f16   2020     addwfc  0x20, 0, 0       
000f18   2020     addwfc  0x20, 0, 0       
000f1a   2020     addwfc  0x20, 0, 0       	DB	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
000f1c   2020     addwfc  0x20, 0, 0       
000f1e   2020     addwfc  0x20, 0, 0       
000f20   2020     addwfc  0x20, 0, 0       
000f22   2020     addwfc  0x20, 0, 0       
000f24   2020     addwfc  0x20, 0, 0       
000f26   2020     addwfc  0x20, 0, 0       	DB	0x20, 0x20, 0x00
000f28   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_2:
000f2a   2020     addwfc  0x20, 0, 0       	DB	0x20, 0x20, 0x25, 0x30, 0x32, 0x75, 0x20, 0x3a, 0x5b, 0x25, 0x30, 0x32
000f2c   3025     rrcf    0x25, 0, 0       
000f2e   7532     btg     0x32, 0x2, 0x1   
000f30   3a20     swapf   0x20, 0x1, 0     
000f32   255b     addwf   0x5b, 0, 0x1     
000f34   3230     rrcf    0x30, 0x1, 0     
000f36   5d75     subwf   0x75, 0, 0x1     	DB	0x75, 0x5d, 0x3a, 0x20, 0x25, 0x30, 0x32, 0x75, 0x20, 0x20, 0x20, 0x20
000f38   203a     addwfc  0x3a, 0, 0       
000f3a   3025     rrcf    0x25, 0, 0       
000f3c   7532     btg     0x32, 0x2, 0x1   
000f3e   2020     addwfc  0x20, 0, 0       
000f40   2020     addwfc  0x20, 0, 0       
000f42   2020     addwfc  0x20, 0, 0       	DB	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
000f44   2020     addwfc  0x20, 0, 0       
000f46   2020     addwfc  0x20, 0, 0       
000f48   2020     addwfc  0x20, 0, 0       
000f4a   2020     addwfc  0x20, 0, 0       
000f4c   2020     addwfc  0x20, 0, 0       
000f4e   2020     addwfc  0x20, 0, 0       	DB	0x20, 0x20, 0x00
000f50   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_3:
000f52   2020     addwfc  0x20, 0, 0       	DB	0x20, 0x20, 0x25, 0x30, 0x32, 0x75, 0x20, 0x3a, 0x20, 0x25, 0x30, 0x32
000f54   3025     rrcf    0x25, 0, 0       
000f56   7532     btg     0x32, 0x2, 0x1   
000f58   3a20     swapf   0x20, 0x1, 0     
000f5a   2520     addwf   0x20, 0, 0x1     
000f5c   3230     rrcf    0x30, 0x1, 0     
000f5e   2075     addwfc  0x75, 0, 0       	DB	0x75, 0x20, 0x3a, 0x5b, 0x25, 0x30, 0x32, 0x75, 0x5d, 0x20, 0x20, 0x20
000f60   5b3a     subwfb  0x3a, 0x1, 0x1   
000f62   3025     rrcf    0x25, 0, 0       
000f64   7532     btg     0x32, 0x2, 0x1   
000f66   205d     addwfc  0x5d, 0, 0       
000f68   2020     addwfc  0x20, 0, 0       
000f6a   2020     addwfc  0x20, 0, 0       	DB	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
000f6c   2020     addwfc  0x20, 0, 0       
000f6e   2020     addwfc  0x20, 0, 0       
000f70   2020     addwfc  0x20, 0, 0       
000f72   2020     addwfc  0x20, 0, 0       
000f74   2020     addwfc  0x20, 0, 0       
000f76   2020     addwfc  0x20, 0, 0       	DB	0x20, 0x20, 0x00
000f78   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_4:
000f7a   6f44     movwf   0x44, 0x1        	DB	0x44, 0x6f, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x77, 0x61, 0x6e, 0x74, 0x20
000f7c   7920     btg     0x20, 0x4, 0x1   
000f7e   756f     btg     0x6f, 0x2, 0x1   
000f80   7720     btg     0x20, 0x3, 0x1   
000f82   6e61     movwf   0x61, 0          
000f84   2074     addwfc  0x74, 0, 0       
000f86   6f74     movwf   0x74, 0x1        	DB	0x74, 0x6f, 0x20, 0x20, 0x73, 0x65, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20
000f88   2020     addwfc  0x20, 0, 0       
000f8a   6573     cpfsgt  0x73, 0x1        
000f8c   2074     addwfc  0x74, 0, 0       
000f8e   6874     setf    0x74, 0          
000f90   2065     addwfc  0x65, 0, 0       
000f92   6c61     negf    0x61, 0          	DB	0x61, 0x6c, 0x61, 0x72, 0x6d, 0x20, 0x3f, 0x20, 0x00
000f94   7261     btg     0x61, 0x1, 0     
000f96   206d     addwfc  0x6d, 0, 0       
000f98   203f     addwfc  0x3f, 0, 0       
000f9a   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_5:
000f9c   2020     addwfc  0x20, 0, 0       	DB	0x20, 0x20, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x20, 0x5b, 0x4f, 0x4e, 0x20
000f9e   6c41     negf    0x41, 0          
000fa0   7261     btg     0x61, 0x1, 0     
000fa2   206d     addwfc  0x6d, 0, 0       
000fa4   4f5b     dcfsnz  0x5b, 0x1, 0x1   
000fa6   204e     addwfc  0x4e, 0, 0       
000fa8   205d     addwfc  0x5d, 0, 0       	DB	0x5d, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
000faa   2020     addwfc  0x20, 0, 0       
000fac   2020     addwfc  0x20, 0, 0       
000fae   2020     addwfc  0x20, 0, 0       
000fb0   2020     addwfc  0x20, 0, 0       
000fb2   2020     addwfc  0x20, 0, 0       
000fb4   2020     addwfc  0x20, 0, 0       	DB	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00
000fb6   2020     addwfc  0x20, 0, 0       
000fb8   2020     addwfc  0x20, 0, 0       
000fba   2020     addwfc  0x20, 0, 0       
000fbc   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_6:
000fbe   2020     addwfc  0x20, 0, 0       	DB	0x20, 0x20, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x20, 0x5b, 0x4f, 0x46, 0x46
000fc0   6c41     negf    0x41, 0          
000fc2   7261     btg     0x61, 0x1, 0     
000fc4   206d     addwfc  0x6d, 0, 0       
000fc6   4f5b     dcfsnz  0x5b, 0x1, 0x1   
000fc8   4646     rlncf   0x46, 0x1, 0     
000fca   205d     addwfc  0x5d, 0, 0       	DB	0x5d, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
000fcc   2020     addwfc  0x20, 0, 0       
000fce   2020     addwfc  0x20, 0, 0       
000fd0   2020     addwfc  0x20, 0, 0       
000fd2   2020     addwfc  0x20, 0, 0       
000fd4   2020     addwfc  0x20, 0, 0       
000fd6   2020     addwfc  0x20, 0, 0       	DB	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00
000fd8   2020     addwfc  0x20, 0, 0       
000fda   2020     addwfc  0x20, 0, 0       
000fdc   2020     addwfc  0x20, 0, 0       
000fde   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_7:
000fe0   2020     addwfc  0x20, 0, 0       	DB	0x20, 0x20, 0x20, 0x20, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x20, 0x61, 0x74
000fe2   2020     addwfc  0x20, 0, 0       
000fe4   6c41     negf    0x41, 0          
000fe6   7261     btg     0x61, 0x1, 0     
000fe8   206d     addwfc  0x6d, 0, 0       
000fea   7461     btg     0x61, 0x2, 0     
000fec   2020     addwfc  0x20, 0, 0       	DB	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5b, 0x25, 0x30, 0x32
000fee   2020     addwfc  0x20, 0, 0       
000ff0   2020     addwfc  0x20, 0, 0       
000ff2   2020     addwfc  0x20, 0, 0       
000ff4   255b     addwf   0x5b, 0, 0x1     
000ff6   3230     rrcf    0x30, 0x1, 0     
000ff8   5d75     subwf   0x75, 0, 0x1     	DB	0x75, 0x5d, 0x3a, 0x20, 0x25, 0x30, 0x32, 0x75, 0x20, 0x20, 0x20, 0x20
000ffa   203a     addwfc  0x3a, 0, 0       
000ffc   3025     rrcf    0x25, 0, 0       
000ffe   7532     btg     0x32, 0x2, 0x1   
001000   2020     addwfc  0x20, 0, 0       
001002   2020     addwfc  0x20, 0, 0       
001004   0000     nop                      	DB	0x00
                                           ; ; Starting pCode block
                                           __str_8:
001006   2020     addwfc  0x20, 0, 0       	DB	0x20, 0x20, 0x20, 0x20, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x20, 0x61, 0x74
001008   2020     addwfc  0x20, 0, 0       
00100a   6c41     negf    0x41, 0          
00100c   7261     btg     0x61, 0x1, 0     
00100e   206d     addwfc  0x6d, 0, 0       
001010   7461     btg     0x61, 0x2, 0     
001012   2020     addwfc  0x20, 0, 0       	DB	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x25, 0x30, 0x32
001014   2020     addwfc  0x20, 0, 0       
001016   2020     addwfc  0x20, 0, 0       
001018   2020     addwfc  0x20, 0, 0       
00101a   2520     addwf   0x20, 0, 0x1     
00101c   3230     rrcf    0x30, 0x1, 0     
00101e   2075     addwfc  0x75, 0, 0       	DB	0x75, 0x20, 0x3a, 0x5b, 0x25, 0x30, 0x32, 0x75, 0x5d, 0x20, 0x20, 0x20
001020   5b3a     subwfb  0x3a, 0x1, 0x1   
001022   3025     rrcf    0x25, 0, 0       
001024   7532     btg     0x32, 0x2, 0x1   
001026   205d     addwfc  0x5d, 0, 0       
001028   2020     addwfc  0x20, 0, 0       
00102a   0000     nop                      	DB	0x00
                                           ; ; Starting pCode block
                                           __str_9:
00102c   2020     addwfc  0x20, 0, 0       	DB	0x20, 0x20, 0x20, 0x20, 0x25, 0x30, 0x32, 0x75, 0x3a, 0x25, 0x30, 0x32
00102e   2020     addwfc  0x20, 0, 0       
001030   3025     rrcf    0x25, 0, 0       
001032   7532     btg     0x32, 0x2, 0x1   
001034   253a     addwf   0x3a, 0, 0x1     
001036   3230     rrcf    0x30, 0x1, 0     
001038   3a75     swapf   0x75, 0x1, 0     	DB	0x75, 0x3a, 0x25, 0x30, 0x32, 0x75, 0x20, 0x20, 0x20, 0x20, 0x41, 0x6c
00103a   3025     rrcf    0x25, 0, 0       
00103c   7532     btg     0x32, 0x2, 0x1   
00103e   2020     addwfc  0x20, 0, 0       
001040   2020     addwfc  0x20, 0, 0       
001042   6c41     negf    0x41, 0          
001044   7261     btg     0x61, 0x1, 0     	DB	0x61, 0x72, 0x6d, 0x20, 0x4f, 0x4e, 0x20, 0x20, 0x25, 0x30, 0x32, 0x75
001046   206d     addwfc  0x6d, 0, 0       
001048   4e4f     dcfsnz  0x4f, 0x1, 0     
00104a   2020     addwfc  0x20, 0, 0       
00104c   3025     rrcf    0x25, 0, 0       
00104e   7532     btg     0x32, 0x2, 0x1   
001050   253a     addwf   0x3a, 0, 0x1     	DB	0x3a, 0x25, 0x30, 0x32, 0x75, 0x20, 0x00
001052   3230     rrcf    0x30, 0x1, 0     
001054   2075     addwfc  0x75, 0, 0       
001056   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_10:
001058   2020     addwfc  0x20, 0, 0       	DB	0x20, 0x20, 0x20, 0x20, 0x25, 0x30, 0x32, 0x75, 0x3a, 0x25, 0x30, 0x32
00105a   2020     addwfc  0x20, 0, 0       
00105c   3025     rrcf    0x25, 0, 0       
00105e   7532     btg     0x32, 0x2, 0x1   
001060   253a     addwf   0x3a, 0, 0x1     
001062   3230     rrcf    0x30, 0x1, 0     
001064   3a75     swapf   0x75, 0x1, 0     	DB	0x75, 0x3a, 0x25, 0x30, 0x32, 0x75, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
001066   3025     rrcf    0x25, 0, 0       
001068   7532     btg     0x32, 0x2, 0x1   
00106a   2020     addwfc  0x20, 0, 0       
00106c   2020     addwfc  0x20, 0, 0       
00106e   2020     addwfc  0x20, 0, 0       
001070   4120     rrncf   0x20, 0, 0x1     	DB	0x20, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x20, 0x20, 0x4f, 0x46, 0x46, 0x20
001072   616c     cpfslt  0x6c, 0x1        
001074   6d72     negf    0x72, 0x1        
001076   2020     addwfc  0x20, 0, 0       
001078   464f     rlncf   0x4f, 0x1, 0     
00107a   2046     addwfc  0x46, 0, 0       
00107c   2020     addwfc  0x20, 0, 0       	DB	0x20, 0x20, 0x00
00107e   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_11:
001080   2020     addwfc  0x20, 0, 0       	DB	0x20, 0x20, 0x20, 0x20, 0x25, 0x30, 0x32, 0x75, 0x3a, 0x25, 0x30, 0x32
001082   2020     addwfc  0x20, 0, 0       
001084   3025     rrcf    0x25, 0, 0       
001086   7532     btg     0x32, 0x2, 0x1   
001088   253a     addwf   0x3a, 0, 0x1     
00108a   3230     rrcf    0x30, 0x1, 0     
00108c   3a75     swapf   0x75, 0x1, 0     	DB	0x75, 0x3a, 0x25, 0x30, 0x32, 0x75, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
00108e   3025     rrcf    0x25, 0, 0       
001090   7532     btg     0x32, 0x2, 0x1   
001092   2020     addwfc  0x20, 0, 0       
001094   2020     addwfc  0x20, 0, 0       
001096   2020     addwfc  0x20, 0, 0       
001098   2049     addwfc  0x49, 0, 0       	DB	0x49, 0x20, 0x61, 0x6d, 0x20, 0x72, 0x69, 0x6e, 0x67, 0x69, 0x6e, 0x67
00109a   6d61     negf    0x61, 0x1        
00109c   7220     btg     0x20, 0x1, 0     
00109e   6e69     movwf   0x69, 0          
0010a0   6967     setf    0x67, 0x1        
0010a2   676e     tstfsz  0x6e, 0x1        
0010a4   2021     addwfc  0x21, 0, 0       	DB	0x21, 0x20, 0x00
0010a6   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_12:
0010a8   2020     addwfc  0x20, 0, 0       	DB	0x20, 0x20, 0x20, 0x20, 0x25, 0x30, 0x32, 0x75, 0x3a, 0x25, 0x30, 0x32
0010aa   2020     addwfc  0x20, 0, 0       
0010ac   3025     rrcf    0x25, 0, 0       
0010ae   7532     btg     0x32, 0x2, 0x1   
0010b0   253a     addwf   0x3a, 0, 0x1     
0010b2   3230     rrcf    0x30, 0x1, 0     
0010b4   3a75     swapf   0x75, 0x1, 0     	DB	0x75, 0x3a, 0x25, 0x30, 0x32, 0x75, 0x20, 0x20, 0x20, 0x20, 0x53, 0x6e
0010b6   3025     rrcf    0x25, 0, 0       
0010b8   7532     btg     0x32, 0x2, 0x1   
0010ba   2020     addwfc  0x20, 0, 0       
0010bc   2020     addwfc  0x20, 0, 0       
0010be   6e53     movwf   0x53, 0          
0010c0   6f6f     movwf   0x6f, 0x1        	DB	0x6f, 0x6f, 0x7a, 0x65, 0x20, 0x25, 0x75, 0x20, 0x20, 0x25, 0x30, 0x32
0010c2   657a     cpfsgt  0x7a, 0x1        
0010c4   2520     addwf   0x20, 0, 0x1     
0010c6   2075     addwfc  0x75, 0, 0       
0010c8   2520     addwf   0x20, 0, 0x1     
0010ca   3230     rrcf    0x30, 0x1, 0     
0010cc   3a75     swapf   0x75, 0x1, 0     	DB	0x75, 0x3a, 0x25, 0x30, 0x32, 0x75, 0x20, 0x00
0010ce   3025     rrcf    0x25, 0, 0       
0010d0   7532     btg     0x32, 0x2, 0x1   
0010d2   0020     dw      0x20             
                                           ; ; Starting pCode block
                                           __str_13:
0010d4   2020     addwfc  0x20, 0, 0       	DB	0x20, 0x20, 0x20, 0x20, 0x25, 0x30, 0x32, 0x75, 0x3a, 0x25, 0x30, 0x32
0010d6   2020     addwfc  0x20, 0, 0       
0010d8   3025     rrcf    0x25, 0, 0       
0010da   7532     btg     0x32, 0x2, 0x1   
0010dc   253a     addwf   0x3a, 0, 0x1     
0010de   3230     rrcf    0x30, 0x1, 0     
0010e0   3a75     swapf   0x75, 0x1, 0     	DB	0x75, 0x3a, 0x25, 0x30, 0x32, 0x75, 0x20, 0x20, 0x20, 0x20, 0x53, 0x6e
0010e2   3025     rrcf    0x25, 0, 0       
0010e4   7532     btg     0x32, 0x2, 0x1   
0010e6   2020     addwfc  0x20, 0, 0       
0010e8   2020     addwfc  0x20, 0, 0       
0010ea   6e53     movwf   0x53, 0          
0010ec   6f6f     movwf   0x6f, 0x1        	DB	0x6f, 0x6f, 0x7a, 0x65, 0x20, 0x25, 0x75, 0x20, 0x25, 0x30, 0x32, 0x75
0010ee   657a     cpfsgt  0x7a, 0x1        
0010f0   2520     addwf   0x20, 0, 0x1     
0010f2   2075     addwfc  0x75, 0, 0       
0010f4   3025     rrcf    0x25, 0, 0       
0010f6   7532     btg     0x32, 0x2, 0x1   
0010f8   253a     addwf   0x3a, 0, 0x1     	DB	0x3a, 0x25, 0x30, 0x32, 0x75, 0x20, 0x00
0010fa   3230     rrcf    0x30, 0x1, 0     
0010fc   2075     addwfc  0x75, 0, 0       
0010fe   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_14:
001100   2a2a     incf    0x2a, 0x1, 0     	DB	0x2a, 0x2a, 0x2a, 0x2a, 0x20, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x20, 0x2a
001102   2a2a     incf    0x2a, 0x1, 0     
001104   4520     rlncf   0x20, 0, 0x1     
001106   5252     movf    0x52, 0x1, 0     
001108   524f     movf    0x4f, 0x1, 0     
00110a   2a20     incf    0x20, 0x1, 0     
00110c   2a2a     incf    0x2a, 0x1, 0     	DB	0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x20, 0x45, 0x52, 0x52
00110e   2a2a     incf    0x2a, 0x1, 0     
001110   2a2a     incf    0x2a, 0x1, 0     
001112   2a2a     incf    0x2a, 0x1, 0     
001114   4520     rlncf   0x20, 0, 0x1     
001116   5252     movf    0x52, 0x1, 0     
001118   524f     movf    0x4f, 0x1, 0     	DB	0x4f, 0x52, 0x20, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x00
00111a   2a20     incf    0x20, 0x1, 0     
00111c   2a2a     incf    0x2a, 0x1, 0     
00111e   2a2a     incf    0x2a, 0x1, 0     
001120   0000     nop                      
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 4398 (0x112e) bytes ( 3.36%)
                                           ;           	 2199 (0x0897) words
                                           ; udata size:	   32 (0x0020) bytes ( 0.83%)
                                           ; access size:	   22 (0x0016) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Oct 17 2013) (Mac OS X ppc)
                                           ; This file was generated Fri Oct 25 14:19:33 2013
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _LCDInit
                                           	global _LCDUpdate
                                           	global _LCDErase
                                           	global _LCDText
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _AN0String
                                           	extern _AppConfig
                                           	extern _activeUDPSocket
                                           	extern _UDPSocketInfo
                                           	extern _UDPTxCount
                                           	extern _UDPRxCount
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _memset
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODH	equ	0xff4
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           
                                           udata_LCDBlocking_0	udata
                                           _LCDText	res	33
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDErase	code
                                           _LCDErase:
                                           ;	.line	392; TCPIP_Stack/LCDBlocking.c	void LCDErase(void)
00277c   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
00277e   ffe5
002780   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002782   ffd9
002784   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
002786   ffe5
002788   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
00278a   ffe5
00278c   c002     movff   0x2, 0xfe5       	MOVFF	r0x02, POSTDEC1
00278e   ffe5
002790   c003     movff   0x3, 0xfe5       	MOVFF	r0x03, POSTDEC1
002792   ffe5
002794   c004     movff   0x4, 0xfe5       	MOVFF	r0x04, POSTDEC1
002796   ffe5
002798   c005     movff   0x5, 0xfe5       	MOVFF	r0x05, POSTDEC1
00279a   ffe5
00279c   c006     movff   0x6, 0xfe5       	MOVFF	r0x06, POSTDEC1
00279e   ffe5
0027a0   c007     movff   0x7, 0xfe5       	MOVFF	r0x07, POSTDEC1
0027a2   ffe5
                                           ;	.line	395; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0x01);
0027a4   0e01     movlw   0x1              	MOVLW	0x01
0027a6   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0027a8   0e00     movlw   0                	MOVLW	0x00
0027aa   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0027ac   ecb4     call    0x2b68, 0        	CALL	_LCDWrite
0027ae   f015
0027b0   0e02     movlw   0x2              	MOVLW	0x02
0027b2   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	396; TCPIP_Stack/LCDBlocking.c	DelayMs(2);
0027b4   0e48     movlw   0x48             	MOVLW	0x48
0027b6   6e00     movwf   0, 0             	MOVWF	r0x00
0027b8   0e0d     movlw   0xd              	MOVLW	0x0d
0027ba   6e01     movwf   0x1, 0           	MOVWF	r0x01
0027bc   6a02     clrf    0x2, 0           	CLRF	r0x02
0027be   6a03     clrf    0x3, 0           	CLRF	r0x03
                                           _00305_DS_:
0027c0   c000     movff   0, 0x4           	MOVFF	r0x00, r0x04
0027c2   f004
0027c4   c001     movff   0x1, 0x5         	MOVFF	r0x01, r0x05
0027c6   f005
0027c8   c002     movff   0x2, 0x6         	MOVFF	r0x02, r0x06
0027ca   f006
0027cc   c003     movff   0x3, 0x7         	MOVFF	r0x03, r0x07
0027ce   f007
0027d0   0eff     movlw   0xff             	MOVLW	0xff
0027d2   2600     addwf   0, 0x1, 0        	ADDWF	r0x00, F
0027d4   0eff     movlw   0xff             	MOVLW	0xff
0027d6   2201     addwfc  0x1, 0x1, 0      	ADDWFC	r0x01, F
0027d8   0eff     movlw   0xff             	MOVLW	0xff
0027da   2202     addwfc  0x2, 0x1, 0      	ADDWFC	r0x02, F
0027dc   0eff     movlw   0xff             	MOVLW	0xff
0027de   2203     addwfc  0x3, 0x1, 0      	ADDWFC	r0x03, F
0027e0   5004     movf    0x4, 0, 0        	MOVF	r0x04, W
0027e2   1005     iorwf   0x5, 0, 0        	IORWF	r0x05, W
0027e4   1006     iorwf   0x6, 0, 0        	IORWF	r0x06, W
0027e6   1007     iorwf   0x7, 0, 0        	IORWF	r0x07, W
0027e8   e1eb     bnz     0x27c0           	BNZ	_00305_DS_
                                           ;	.line	399; TCPIP_Stack/LCDBlocking.c	memset(LCDText, ' ', 32);
0027ea   0e00     movlw   0                	MOVLW	0x00
0027ec   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0027ee   0e20     movlw   0x20             	MOVLW	0x20
0027f0   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0027f2   0e20     movlw   0x20             	MOVLW	0x20
0027f4   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0027f6   0e0f     movlw   0xf              	MOVLW	HIGH(_LCDText)
0027f8   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0027fa   0e00     movlw   0                	MOVLW	LOW(_LCDText)
0027fc   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0027fe   ec99     call    0x2532, 0        	CALL	_memset
002800   f012
002802   0e05     movlw   0x5              	MOVLW	0x05
002804   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
002806   cfe4     movff   0xfe4, 0x7       	MOVFF	PREINC1, r0x07
002808   f007
00280a   cfe4     movff   0xfe4, 0x6       	MOVFF	PREINC1, r0x06
00280c   f006
00280e   cfe4     movff   0xfe4, 0x5       	MOVFF	PREINC1, r0x05
002810   f005
002812   cfe4     movff   0xfe4, 0x4       	MOVFF	PREINC1, r0x04
002814   f004
002816   cfe4     movff   0xfe4, 0x3       	MOVFF	PREINC1, r0x03
002818   f003
00281a   cfe4     movff   0xfe4, 0x2       	MOVFF	PREINC1, r0x02
00281c   f002
00281e   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
002820   f001
002822   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
002824   f000
002826   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002828   ffd9
00282a   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDUpdate	code
                                           _LCDUpdate:
                                           ;	.line	332; TCPIP_Stack/LCDBlocking.c	void LCDUpdate(void)
001122   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
001124   ffe5
001126   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
001128   ffd9
00112a   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
00112c   ffe5
00112e   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
001130   ffe5
001132   c002     movff   0x2, 0xfe5       	MOVFF	r0x02, POSTDEC1
001134   ffe5
001136   c003     movff   0x3, 0xfe5       	MOVFF	r0x03, POSTDEC1
001138   ffe5
00113a   c004     movff   0x4, 0xfe5       	MOVFF	r0x04, POSTDEC1
00113c   ffe5
00113e   c005     movff   0x5, 0xfe5       	MOVFF	r0x05, POSTDEC1
001140   ffe5
001142   c006     movff   0x6, 0xfe5       	MOVFF	r0x06, POSTDEC1
001144   ffe5
001146   c007     movff   0x7, 0xfe5       	MOVFF	r0x07, POSTDEC1
001148   ffe5
00114a   c008     movff   0x8, 0xfe5       	MOVFF	r0x08, POSTDEC1
00114c   ffe5
                                           ;	.line	337; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0x02);
00114e   0e02     movlw   0x2              	MOVLW	0x02
001150   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001152   0e00     movlw   0                	MOVLW	0x00
001154   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001156   ecb4     call    0x2b68, 0        	CALL	_LCDWrite
001158   f015
00115a   0e02     movlw   0x2              	MOVLW	0x02
00115c   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	338; TCPIP_Stack/LCDBlocking.c	DelayMs(2);
00115e   0e48     movlw   0x48             	MOVLW	0x48
001160   6e00     movwf   0, 0             	MOVWF	r0x00
001162   0e0d     movlw   0xd              	MOVLW	0x0d
001164   6e01     movwf   0x1, 0           	MOVWF	r0x01
001166   6a02     clrf    0x2, 0           	CLRF	r0x02
001168   6a03     clrf    0x3, 0           	CLRF	r0x03
                                           _00225_DS_:
00116a   c000     movff   0, 0x4           	MOVFF	r0x00, r0x04
00116c   f004
00116e   c001     movff   0x1, 0x5         	MOVFF	r0x01, r0x05
001170   f005
001172   c002     movff   0x2, 0x6         	MOVFF	r0x02, r0x06
001174   f006
001176   c003     movff   0x3, 0x7         	MOVFF	r0x03, r0x07
001178   f007
00117a   0eff     movlw   0xff             	MOVLW	0xff
00117c   2600     addwf   0, 0x1, 0        	ADDWF	r0x00, F
00117e   0eff     movlw   0xff             	MOVLW	0xff
001180   2201     addwfc  0x1, 0x1, 0      	ADDWFC	r0x01, F
001182   0eff     movlw   0xff             	MOVLW	0xff
001184   2202     addwfc  0x2, 0x1, 0      	ADDWFC	r0x02, F
001186   0eff     movlw   0xff             	MOVLW	0xff
001188   2203     addwfc  0x3, 0x1, 0      	ADDWFC	r0x03, F
00118a   5004     movf    0x4, 0, 0        	MOVF	r0x04, W
00118c   1005     iorwf   0x5, 0, 0        	IORWF	r0x05, W
00118e   1006     iorwf   0x6, 0, 0        	IORWF	r0x06, W
001190   1007     iorwf   0x7, 0, 0        	IORWF	r0x07, W
001192   e1eb     bnz     0x116a           	BNZ	_00225_DS_
                                           ;	.line	341; TCPIP_Stack/LCDBlocking.c	for(i = 0; i < 16u; i++)
001194   6a00     clrf    0, 0             	CLRF	r0x00
                                           _00257_DS_:
001196   c000     movff   0, 0x1           	MOVFF	r0x00, r0x01
001198   f001
00119a   6a02     clrf    0x2, 0           	CLRF	r0x02
00119c   0e00     movlw   0                	MOVLW	0x00
00119e   5c02     subwf   0x2, 0, 0        	SUBWF	r0x02, W
0011a0   e102     bnz     0x11a6           	BNZ	_00297_DS_
0011a2   0e10     movlw   0x10             	MOVLW	0x10
0011a4   5c01     subwf   0x1, 0, 0        	SUBWF	r0x01, W
                                           _00297_DS_:
0011a6   b0d8     btfsc   0xd8, 0, 0       	BTFSC	STATUS, 0
0011a8   d057     bra     0x1258           	BRA	_00260_DS_
                                           ;	.line	345; TCPIP_Stack/LCDBlocking.c	if(LCDText[i] == 0u)
0011aa   0e00     movlw   0                	MOVLW	LOW(_LCDText)
0011ac   2400     addwf   0, 0, 0          	ADDWF	r0x00, W
0011ae   6e01     movwf   0x1, 0           	MOVWF	r0x01
0011b0   6a02     clrf    0x2, 0           	CLRF	r0x02
0011b2   0e0f     movlw   0xf              	MOVLW	HIGH(_LCDText)
0011b4   2202     addwfc  0x2, 0x1, 0      	ADDWFC	r0x02, F
0011b6   c001     movff   0x1, 0xfe9       	MOVFF	r0x01, FSR0L
0011b8   ffe9
0011ba   c002     movff   0x2, 0xfea       	MOVFF	r0x02, FSR0H
0011bc   ffea
0011be   cfef     movff   0xfef, 0x1       	MOVFF	INDF0, r0x01
0011c0   f001
0011c2   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
0011c4   e119     bnz     0x11f8           	BNZ	_00232_DS_
                                           ;	.line	347; TCPIP_Stack/LCDBlocking.c	for(j=i; j < 16u; j++)
0011c6   c000     movff   0, 0x1           	MOVFF	r0x00, r0x01
0011c8   f001
                                           _00253_DS_:
0011ca   c001     movff   0x1, 0x2         	MOVFF	r0x01, r0x02
0011cc   f002
0011ce   6a03     clrf    0x3, 0           	CLRF	r0x03
0011d0   0e00     movlw   0                	MOVLW	0x00
0011d2   5c03     subwf   0x3, 0, 0        	SUBWF	r0x03, W
0011d4   e102     bnz     0x11da           	BNZ	_00298_DS_
0011d6   0e10     movlw   0x10             	MOVLW	0x10
0011d8   5c02     subwf   0x2, 0, 0        	SUBWF	r0x02, W
                                           _00298_DS_:
0011da   e20e     bc      0x11f8           	BC	_00232_DS_
                                           ;	.line	349; TCPIP_Stack/LCDBlocking.c	LCDText[j] = ' ';
0011dc   0e00     movlw   0                	MOVLW	LOW(_LCDText)
0011de   2401     addwf   0x1, 0, 0        	ADDWF	r0x01, W
0011e0   6e02     movwf   0x2, 0           	MOVWF	r0x02
0011e2   6a03     clrf    0x3, 0           	CLRF	r0x03
0011e4   0e0f     movlw   0xf              	MOVLW	HIGH(_LCDText)
0011e6   2203     addwfc  0x3, 0x1, 0      	ADDWFC	r0x03, F
0011e8   c002     movff   0x2, 0xfe9       	MOVFF	r0x02, FSR0L
0011ea   ffe9
0011ec   c003     movff   0x3, 0xfea       	MOVFF	r0x03, FSR0H
0011ee   ffea
0011f0   0e20     movlw   0x20             	MOVLW	0x20
0011f2   6eef     movwf   0xef, 0          	MOVWF	INDF0
                                           ;	.line	347; TCPIP_Stack/LCDBlocking.c	for(j=i; j < 16u; j++)
0011f4   2a01     incf    0x1, 0x1, 0      	INCF	r0x01, F
0011f6   d7e9     bra     0x11ca           	BRA	_00253_DS_
                                           _00232_DS_:
                                           ;	.line	352; TCPIP_Stack/LCDBlocking.c	LCDWrite(1, LCDText[i]);
0011f8   0e00     movlw   0                	MOVLW	LOW(_LCDText)
0011fa   2400     addwf   0, 0, 0          	ADDWF	r0x00, W
0011fc   6e01     movwf   0x1, 0           	MOVWF	r0x01
0011fe   6a02     clrf    0x2, 0           	CLRF	r0x02
001200   0e0f     movlw   0xf              	MOVLW	HIGH(_LCDText)
001202   2202     addwfc  0x2, 0x1, 0      	ADDWFC	r0x02, F
001204   c001     movff   0x1, 0xfe9       	MOVFF	r0x01, FSR0L
001206   ffe9
001208   c002     movff   0x2, 0xfea       	MOVFF	r0x02, FSR0H
00120a   ffea
00120c   cfef     movff   0xfef, 0x1       	MOVFF	INDF0, r0x01
00120e   f001
001210   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
001212   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001214   0e01     movlw   0x1              	MOVLW	0x01
001216   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001218   ecb4     call    0x2b68, 0        	CALL	_LCDWrite
00121a   f015
00121c   0e02     movlw   0x2              	MOVLW	0x02
00121e   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	353; TCPIP_Stack/LCDBlocking.c	Delay10us(5);
001220   0e55     movlw   0x55             	MOVLW	0x55
001222   6e01     movwf   0x1, 0           	MOVWF	r0x01
001224   6a02     clrf    0x2, 0           	CLRF	r0x02
001226   6a03     clrf    0x3, 0           	CLRF	r0x03
001228   6a04     clrf    0x4, 0           	CLRF	r0x04
                                           _00233_DS_:
00122a   c001     movff   0x1, 0x5         	MOVFF	r0x01, r0x05
00122c   f005
00122e   c002     movff   0x2, 0x6         	MOVFF	r0x02, r0x06
001230   f006
001232   c003     movff   0x3, 0x7         	MOVFF	r0x03, r0x07
001234   f007
001236   c004     movff   0x4, 0x8         	MOVFF	r0x04, r0x08
001238   f008
00123a   0eff     movlw   0xff             	MOVLW	0xff
00123c   2601     addwf   0x1, 0x1, 0      	ADDWF	r0x01, F
00123e   0eff     movlw   0xff             	MOVLW	0xff
001240   2202     addwfc  0x2, 0x1, 0      	ADDWFC	r0x02, F
001242   0eff     movlw   0xff             	MOVLW	0xff
001244   2203     addwfc  0x3, 0x1, 0      	ADDWFC	r0x03, F
001246   0eff     movlw   0xff             	MOVLW	0xff
001248   2204     addwfc  0x4, 0x1, 0      	ADDWFC	r0x04, F
00124a   5005     movf    0x5, 0, 0        	MOVF	r0x05, W
00124c   1006     iorwf   0x6, 0, 0        	IORWF	r0x06, W
00124e   1007     iorwf   0x7, 0, 0        	IORWF	r0x07, W
001250   1008     iorwf   0x8, 0, 0        	IORWF	r0x08, W
001252   e1eb     bnz     0x122a           	BNZ	_00233_DS_
                                           ;	.line	341; TCPIP_Stack/LCDBlocking.c	for(i = 0; i < 16u; i++)
001254   2a00     incf    0, 0x1, 0        	INCF	r0x00, F
001256   d79f     bra     0x1196           	BRA	_00257_DS_
                                           _00260_DS_:
                                           ;	.line	357; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0xC0);
001258   0ec0     movlw   0xc0             	MOVLW	0xc0
00125a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00125c   0e00     movlw   0                	MOVLW	0x00
00125e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001260   ecb4     call    0x2b68, 0        	CALL	_LCDWrite
001262   f015
001264   0e02     movlw   0x2              	MOVLW	0x02
001266   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	358; TCPIP_Stack/LCDBlocking.c	Delay10us(5);
001268   0e55     movlw   0x55             	MOVLW	0x55
00126a   6e00     movwf   0, 0             	MOVWF	r0x00
00126c   6a01     clrf    0x1, 0           	CLRF	r0x01
00126e   6a02     clrf    0x2, 0           	CLRF	r0x02
001270   6a03     clrf    0x3, 0           	CLRF	r0x03
                                           _00239_DS_:
001272   c000     movff   0, 0x4           	MOVFF	r0x00, r0x04
001274   f004
001276   c001     movff   0x1, 0x5         	MOVFF	r0x01, r0x05
001278   f005
00127a   c002     movff   0x2, 0x6         	MOVFF	r0x02, r0x06
00127c   f006
00127e   c003     movff   0x3, 0x7         	MOVFF	r0x03, r0x07
001280   f007
001282   0eff     movlw   0xff             	MOVLW	0xff
001284   2600     addwf   0, 0x1, 0        	ADDWF	r0x00, F
001286   0eff     movlw   0xff             	MOVLW	0xff
001288   2201     addwfc  0x1, 0x1, 0      	ADDWFC	r0x01, F
00128a   0eff     movlw   0xff             	MOVLW	0xff
00128c   2202     addwfc  0x2, 0x1, 0      	ADDWFC	r0x02, F
00128e   0eff     movlw   0xff             	MOVLW	0xff
001290   2203     addwfc  0x3, 0x1, 0      	ADDWFC	r0x03, F
001292   5004     movf    0x4, 0, 0        	MOVF	r0x04, W
001294   1005     iorwf   0x5, 0, 0        	IORWF	r0x05, W
001296   1006     iorwf   0x6, 0, 0        	IORWF	r0x06, W
001298   1007     iorwf   0x7, 0, 0        	IORWF	r0x07, W
00129a   e1eb     bnz     0x1272           	BNZ	_00239_DS_
                                           ;	.line	361; TCPIP_Stack/LCDBlocking.c	for(i = 16; i < 32u; i++)
00129c   0e10     movlw   0x10             	MOVLW	0x10
00129e   6e00     movwf   0, 0             	MOVWF	r0x00
                                           _00265_DS_:
0012a0   c000     movff   0, 0x1           	MOVFF	r0x00, r0x01
0012a2   f001
0012a4   6a02     clrf    0x2, 0           	CLRF	r0x02
0012a6   0e00     movlw   0                	MOVLW	0x00
0012a8   5c02     subwf   0x2, 0, 0        	SUBWF	r0x02, W
0012aa   e102     bnz     0x12b0           	BNZ	_00299_DS_
0012ac   0e20     movlw   0x20             	MOVLW	0x20
0012ae   5c01     subwf   0x1, 0, 0        	SUBWF	r0x01, W
                                           _00299_DS_:
0012b0   b0d8     btfsc   0xd8, 0, 0       	BTFSC	STATUS, 0
0012b2   d057     bra     0x1362           	BRA	_00269_DS_
                                           ;	.line	365; TCPIP_Stack/LCDBlocking.c	if(LCDText[i] == 0u)
0012b4   0e00     movlw   0                	MOVLW	LOW(_LCDText)
0012b6   2400     addwf   0, 0, 0          	ADDWF	r0x00, W
0012b8   6e01     movwf   0x1, 0           	MOVWF	r0x01
0012ba   6a02     clrf    0x2, 0           	CLRF	r0x02
0012bc   0e0f     movlw   0xf              	MOVLW	HIGH(_LCDText)
0012be   2202     addwfc  0x2, 0x1, 0      	ADDWFC	r0x02, F
0012c0   c001     movff   0x1, 0xfe9       	MOVFF	r0x01, FSR0L
0012c2   ffe9
0012c4   c002     movff   0x2, 0xfea       	MOVFF	r0x02, FSR0H
0012c6   ffea
0012c8   cfef     movff   0xfef, 0x1       	MOVFF	INDF0, r0x01
0012ca   f001
0012cc   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
0012ce   e119     bnz     0x1302           	BNZ	_00246_DS_
                                           ;	.line	367; TCPIP_Stack/LCDBlocking.c	for(j=i; j < 32u; j++)
0012d0   c000     movff   0, 0x1           	MOVFF	r0x00, r0x01
0012d2   f001
                                           _00261_DS_:
0012d4   c001     movff   0x1, 0x2         	MOVFF	r0x01, r0x02
0012d6   f002
0012d8   6a03     clrf    0x3, 0           	CLRF	r0x03
0012da   0e00     movlw   0                	MOVLW	0x00
0012dc   5c03     subwf   0x3, 0, 0        	SUBWF	r0x03, W
0012de   e102     bnz     0x12e4           	BNZ	_00300_DS_
0012e0   0e20     movlw   0x20             	MOVLW	0x20
0012e2   5c02     subwf   0x2, 0, 0        	SUBWF	r0x02, W
                                           _00300_DS_:
0012e4   e20e     bc      0x1302           	BC	_00246_DS_
                                           ;	.line	369; TCPIP_Stack/LCDBlocking.c	LCDText[j] = ' ';
0012e6   0e00     movlw   0                	MOVLW	LOW(_LCDText)
0012e8   2401     addwf   0x1, 0, 0        	ADDWF	r0x01, W
0012ea   6e02     movwf   0x2, 0           	MOVWF	r0x02
0012ec   6a03     clrf    0x3, 0           	CLRF	r0x03
0012ee   0e0f     movlw   0xf              	MOVLW	HIGH(_LCDText)
0012f0   2203     addwfc  0x3, 0x1, 0      	ADDWFC	r0x03, F
0012f2   c002     movff   0x2, 0xfe9       	MOVFF	r0x02, FSR0L
0012f4   ffe9
0012f6   c003     movff   0x3, 0xfea       	MOVFF	r0x03, FSR0H
0012f8   ffea
0012fa   0e20     movlw   0x20             	MOVLW	0x20
0012fc   6eef     movwf   0xef, 0          	MOVWF	INDF0
                                           ;	.line	367; TCPIP_Stack/LCDBlocking.c	for(j=i; j < 32u; j++)
0012fe   2a01     incf    0x1, 0x1, 0      	INCF	r0x01, F
001300   d7e9     bra     0x12d4           	BRA	_00261_DS_
                                           _00246_DS_:
                                           ;	.line	372; TCPIP_Stack/LCDBlocking.c	LCDWrite(1, LCDText[i]);
001302   0e00     movlw   0                	MOVLW	LOW(_LCDText)
001304   2400     addwf   0, 0, 0          	ADDWF	r0x00, W
001306   6e01     movwf   0x1, 0           	MOVWF	r0x01
001308   6a02     clrf    0x2, 0           	CLRF	r0x02
00130a   0e0f     movlw   0xf              	MOVLW	HIGH(_LCDText)
00130c   2202     addwfc  0x2, 0x1, 0      	ADDWFC	r0x02, F
00130e   c001     movff   0x1, 0xfe9       	MOVFF	r0x01, FSR0L
001310   ffe9
001312   c002     movff   0x2, 0xfea       	MOVFF	r0x02, FSR0H
001314   ffea
001316   cfef     movff   0xfef, 0x1       	MOVFF	INDF0, r0x01
001318   f001
00131a   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
00131c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00131e   0e01     movlw   0x1              	MOVLW	0x01
001320   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001322   ecb4     call    0x2b68, 0        	CALL	_LCDWrite
001324   f015
001326   0e02     movlw   0x2              	MOVLW	0x02
001328   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	373; TCPIP_Stack/LCDBlocking.c	Delay10us(5);
00132a   0e55     movlw   0x55             	MOVLW	0x55
00132c   6e01     movwf   0x1, 0           	MOVWF	r0x01
00132e   6a02     clrf    0x2, 0           	CLRF	r0x02
001330   6a03     clrf    0x3, 0           	CLRF	r0x03
001332   6a04     clrf    0x4, 0           	CLRF	r0x04
                                           _00247_DS_:
001334   c001     movff   0x1, 0x5         	MOVFF	r0x01, r0x05
001336   f005
001338   c002     movff   0x2, 0x6         	MOVFF	r0x02, r0x06
00133a   f006
00133c   c003     movff   0x3, 0x7         	MOVFF	r0x03, r0x07
00133e   f007
001340   c004     movff   0x4, 0x8         	MOVFF	r0x04, r0x08
001342   f008
001344   0eff     movlw   0xff             	MOVLW	0xff
001346   2601     addwf   0x1, 0x1, 0      	ADDWF	r0x01, F
001348   0eff     movlw   0xff             	MOVLW	0xff
00134a   2202     addwfc  0x2, 0x1, 0      	ADDWFC	r0x02, F
00134c   0eff     movlw   0xff             	MOVLW	0xff
00134e   2203     addwfc  0x3, 0x1, 0      	ADDWFC	r0x03, F
001350   0eff     movlw   0xff             	MOVLW	0xff
001352   2204     addwfc  0x4, 0x1, 0      	ADDWFC	r0x04, F
001354   5005     movf    0x5, 0, 0        	MOVF	r0x05, W
001356   1006     iorwf   0x6, 0, 0        	IORWF	r0x06, W
001358   1007     iorwf   0x7, 0, 0        	IORWF	r0x07, W
00135a   1008     iorwf   0x8, 0, 0        	IORWF	r0x08, W
00135c   e1eb     bnz     0x1334           	BNZ	_00247_DS_
                                           ;	.line	361; TCPIP_Stack/LCDBlocking.c	for(i = 16; i < 32u; i++)
00135e   2a00     incf    0, 0x1, 0        	INCF	r0x00, F
001360   d79f     bra     0x12a0           	BRA	_00265_DS_
                                           _00269_DS_:
001362   cfe4     movff   0xfe4, 0x8       	MOVFF	PREINC1, r0x08
001364   f008
001366   cfe4     movff   0xfe4, 0x7       	MOVFF	PREINC1, r0x07
001368   f007
00136a   cfe4     movff   0xfe4, 0x6       	MOVFF	PREINC1, r0x06
00136c   f006
00136e   cfe4     movff   0xfe4, 0x5       	MOVFF	PREINC1, r0x05
001370   f005
001372   cfe4     movff   0xfe4, 0x4       	MOVFF	PREINC1, r0x04
001374   f004
001376   cfe4     movff   0xfe4, 0x3       	MOVFF	PREINC1, r0x03
001378   f003
00137a   cfe4     movff   0xfe4, 0x2       	MOVFF	PREINC1, r0x02
00137c   f002
00137e   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
001380   f001
001382   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
001384   f000
001386   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
001388   ffd9
00138a   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDInit	code
                                           _LCDInit:
                                           ;	.line	207; TCPIP_Stack/LCDBlocking.c	void LCDInit(void)
00138c   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
00138e   ffe5
001390   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
001392   ffd9
001394   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
001396   ffe5
001398   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
00139a   ffe5
00139c   c002     movff   0x2, 0xfe5       	MOVFF	r0x02, POSTDEC1
00139e   ffe5
0013a0   c003     movff   0x3, 0xfe5       	MOVFF	r0x03, POSTDEC1
0013a2   ffe5
0013a4   c004     movff   0x4, 0xfe5       	MOVFF	r0x04, POSTDEC1
0013a6   ffe5
0013a8   c005     movff   0x5, 0xfe5       	MOVFF	r0x05, POSTDEC1
0013aa   ffe5
0013ac   c006     movff   0x6, 0xfe5       	MOVFF	r0x06, POSTDEC1
0013ae   ffe5
0013b0   c007     movff   0x7, 0xfe5       	MOVFF	r0x07, POSTDEC1
0013b2   ffe5
0013b4   c008     movff   0x8, 0xfe5       	MOVFF	r0x08, POSTDEC1
0013b6   ffe5
                                           ;	.line	211; TCPIP_Stack/LCDBlocking.c	memset(LCDText, ' ', sizeof(LCDText)-1);
0013b8   0e00     movlw   0                	MOVLW	0x00
0013ba   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0013bc   0e20     movlw   0x20             	MOVLW	0x20
0013be   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0013c0   0e20     movlw   0x20             	MOVLW	0x20
0013c2   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0013c4   0e0f     movlw   0xf              	MOVLW	HIGH(_LCDText)
0013c6   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0013c8   0e00     movlw   0                	MOVLW	LOW(_LCDText)
0013ca   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0013cc   ec99     call    0x2532, 0        	CALL	_memset
0013ce   f012
0013d0   0e05     movlw   0x5              	MOVLW	0x05
0013d2   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
0013d4   010f     movlb   0xf              	BANKSEL	(_LCDText + 32)
                                           ;	.line	212; TCPIP_Stack/LCDBlocking.c	LCDText[sizeof(LCDText)-1] = 0;
0013d6   6b20     clrf    0x20, 0x1        	CLRF	(_LCDText + 32), B
                                           ;	.line	215; TCPIP_Stack/LCDBlocking.c	LCD_E_IO = 0;
0013d8   9090     bcf     0x90, 0, 0       	BCF	_LATHbits, 0
                                           ;	.line	216; TCPIP_Stack/LCDBlocking.c	LCD_RD_WR_IO = 0;
0013da   9290     bcf     0x90, 0x1, 0     	BCF	_LATHbits, 1
                                           ;	.line	220; TCPIP_Stack/LCDBlocking.c	LCD_DATA_TRIS = 0x00;
0013dc   6a96     clrf    0x96, 0          	CLRF	_TRISE
                                           ;	.line	233; TCPIP_Stack/LCDBlocking.c	LCD_RD_WR_TRIS = 0;
0013de   9299     bcf     0x99, 0x1, 0     	BCF	_TRISHbits, 1
                                           ;	.line	234; TCPIP_Stack/LCDBlocking.c	LCD_RS_TRIS = 0;
0013e0   9499     bcf     0x99, 0x2, 0     	BCF	_TRISHbits, 2
                                           ;	.line	235; TCPIP_Stack/LCDBlocking.c	LCD_E_TRIS = 0;
0013e2   9099     bcf     0x99, 0, 0       	BCF	_TRISHbits, 0
                                           ;	.line	239; TCPIP_Stack/LCDBlocking.c	DelayMs(40);
0013e4   0ea0     movlw   0xa0             	MOVLW	0xa0
0013e6   6e00     movwf   0, 0             	MOVWF	r0x00
0013e8   0e09     movlw   0x9              	MOVLW	0x09
0013ea   6e01     movwf   0x1, 0           	MOVWF	r0x01
0013ec   0e01     movlw   0x1              	MOVLW	0x01
0013ee   6e02     movwf   0x2, 0           	MOVWF	r0x02
0013f0   6a03     clrf    0x3, 0           	CLRF	r0x03
                                           _00143_DS_:
0013f2   c000     movff   0, 0x4           	MOVFF	r0x00, r0x04
0013f4   f004
0013f6   c001     movff   0x1, 0x5         	MOVFF	r0x01, r0x05
0013f8   f005
0013fa   c002     movff   0x2, 0x6         	MOVFF	r0x02, r0x06
0013fc   f006
0013fe   c003     movff   0x3, 0x7         	MOVFF	r0x03, r0x07
001400   f007
001402   0eff     movlw   0xff             	MOVLW	0xff
001404   2600     addwf   0, 0x1, 0        	ADDWF	r0x00, F
001406   0eff     movlw   0xff             	MOVLW	0xff
001408   2201     addwfc  0x1, 0x1, 0      	ADDWFC	r0x01, F
00140a   0eff     movlw   0xff             	MOVLW	0xff
00140c   2202     addwfc  0x2, 0x1, 0      	ADDWFC	r0x02, F
00140e   0eff     movlw   0xff             	MOVLW	0xff
001410   2203     addwfc  0x3, 0x1, 0      	ADDWFC	r0x03, F
001412   5004     movf    0x4, 0, 0        	MOVF	r0x04, W
001414   1005     iorwf   0x5, 0, 0        	IORWF	r0x05, W
001416   1006     iorwf   0x6, 0, 0        	IORWF	r0x06, W
001418   1007     iorwf   0x7, 0, 0        	IORWF	r0x07, W
00141a   e1eb     bnz     0x13f2           	BNZ	_00143_DS_
                                           ;	.line	247; TCPIP_Stack/LCDBlocking.c	LCD_RS_IO = 0;
00141c   9490     bcf     0x90, 0x2, 0     	BCF	_LATHbits, 2
                                           ;	.line	249; TCPIP_Stack/LCDBlocking.c	LCD_DATA_IO = 0x03;
00141e   0e03     movlw   0x3              	MOVLW	0x03
001420   6e8d     movwf   0x8d, 0          	MOVWF	_LATE
001422   0000     nop                      	nop 
001424   0000     nop                      	nop 
                                           ;	.line	264; TCPIP_Stack/LCDBlocking.c	for(i = 0; i < 3u; i++)
001426   6a00     clrf    0, 0             	CLRF	r0x00
                                           _00191_DS_:
001428   c000     movff   0, 0x1           	MOVFF	r0x00, r0x01
00142a   f001
00142c   6a02     clrf    0x2, 0           	CLRF	r0x02
00142e   0e00     movlw   0                	MOVLW	0x00
001430   5c02     subwf   0x2, 0, 0        	SUBWF	r0x02, W
001432   e102     bnz     0x1438           	BNZ	_00220_DS_
001434   0e03     movlw   0x3              	MOVLW	0x03
001436   5c01     subwf   0x1, 0, 0        	SUBWF	r0x01, W
                                           _00220_DS_:
001438   e239     bc      0x14ac           	BC	_00194_DS_
                                           ;	.line	266; TCPIP_Stack/LCDBlocking.c	LCD_E_IO = 1;
00143a   8090     bsf     0x90, 0, 0       	BSF	_LATHbits, 0
                                           ;	.line	267; TCPIP_Stack/LCDBlocking.c	Delay10us(1);	       	// Wait E Pulse width time (min 230ns)
00143c   0e11     movlw   0x11             	MOVLW	0x11
00143e   6e01     movwf   0x1, 0           	MOVWF	r0x01
001440   6a02     clrf    0x2, 0           	CLRF	r0x02
001442   6a03     clrf    0x3, 0           	CLRF	r0x03
001444   6a04     clrf    0x4, 0           	CLRF	r0x04
                                           _00155_DS_:
001446   c001     movff   0x1, 0x5         	MOVFF	r0x01, r0x05
001448   f005
00144a   c002     movff   0x2, 0x6         	MOVFF	r0x02, r0x06
00144c   f006
00144e   c003     movff   0x3, 0x7         	MOVFF	r0x03, r0x07
001450   f007
001452   c004     movff   0x4, 0x8         	MOVFF	r0x04, r0x08
001454   f008
001456   0eff     movlw   0xff             	MOVLW	0xff
001458   2601     addwf   0x1, 0x1, 0      	ADDWF	r0x01, F
00145a   0eff     movlw   0xff             	MOVLW	0xff
00145c   2202     addwfc  0x2, 0x1, 0      	ADDWFC	r0x02, F
00145e   0eff     movlw   0xff             	MOVLW	0xff
001460   2203     addwfc  0x3, 0x1, 0      	ADDWFC	r0x03, F
001462   0eff     movlw   0xff             	MOVLW	0xff
001464   2204     addwfc  0x4, 0x1, 0      	ADDWFC	r0x04, F
001466   5005     movf    0x5, 0, 0        	MOVF	r0x05, W
001468   1006     iorwf   0x6, 0, 0        	IORWF	r0x06, W
00146a   1007     iorwf   0x7, 0, 0        	IORWF	r0x07, W
00146c   1008     iorwf   0x8, 0, 0        	IORWF	r0x08, W
00146e   e1eb     bnz     0x1446           	BNZ	_00155_DS_
                                           ;	.line	268; TCPIP_Stack/LCDBlocking.c	LCD_E_IO = 0;
001470   9090     bcf     0x90, 0, 0       	BCF	_LATHbits, 0
                                           ;	.line	269; TCPIP_Stack/LCDBlocking.c	DelayMs(2);
001472   0e48     movlw   0x48             	MOVLW	0x48
001474   6e01     movwf   0x1, 0           	MOVWF	r0x01
001476   0e0d     movlw   0xd              	MOVLW	0x0d
001478   6e02     movwf   0x2, 0           	MOVWF	r0x02
00147a   6a03     clrf    0x3, 0           	CLRF	r0x03
00147c   6a04     clrf    0x4, 0           	CLRF	r0x04
                                           _00161_DS_:
00147e   c001     movff   0x1, 0x5         	MOVFF	r0x01, r0x05
001480   f005
001482   c002     movff   0x2, 0x6         	MOVFF	r0x02, r0x06
001484   f006
001486   c003     movff   0x3, 0x7         	MOVFF	r0x03, r0x07
001488   f007
00148a   c004     movff   0x4, 0x8         	MOVFF	r0x04, r0x08
00148c   f008
00148e   0eff     movlw   0xff             	MOVLW	0xff
001490   2601     addwf   0x1, 0x1, 0      	ADDWF	r0x01, F
001492   0eff     movlw   0xff             	MOVLW	0xff
001494   2202     addwfc  0x2, 0x1, 0      	ADDWFC	r0x02, F
001496   0eff     movlw   0xff             	MOVLW	0xff
001498   2203     addwfc  0x3, 0x1, 0      	ADDWFC	r0x03, F
00149a   0eff     movlw   0xff             	MOVLW	0xff
00149c   2204     addwfc  0x4, 0x1, 0      	ADDWFC	r0x04, F
00149e   5005     movf    0x5, 0, 0        	MOVF	r0x05, W
0014a0   1006     iorwf   0x6, 0, 0        	IORWF	r0x06, W
0014a2   1007     iorwf   0x7, 0, 0        	IORWF	r0x07, W
0014a4   1008     iorwf   0x8, 0, 0        	IORWF	r0x08, W
0014a6   e1eb     bnz     0x147e           	BNZ	_00161_DS_
                                           ;	.line	264; TCPIP_Stack/LCDBlocking.c	for(i = 0; i < 3u; i++)
0014a8   2a00     incf    0, 0x1, 0        	INCF	r0x00, F
0014aa   d7be     bra     0x1428           	BRA	_00191_DS_
                                           _00194_DS_:
                                           ;	.line	295; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0x38);
0014ac   0e38     movlw   0x38             	MOVLW	0x38
0014ae   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0014b0   0e00     movlw   0                	MOVLW	0x00
0014b2   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0014b4   ecb4     call    0x2b68, 0        	CALL	_LCDWrite
0014b6   f015
0014b8   0e02     movlw   0x2              	MOVLW	0x02
0014ba   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	297; TCPIP_Stack/LCDBlocking.c	Delay10us(5);
0014bc   0e55     movlw   0x55             	MOVLW	0x55
0014be   6e00     movwf   0, 0             	MOVWF	r0x00
0014c0   6a01     clrf    0x1, 0           	CLRF	r0x01
0014c2   6a02     clrf    0x2, 0           	CLRF	r0x02
0014c4   6a03     clrf    0x3, 0           	CLRF	r0x03
                                           _00167_DS_:
0014c6   c000     movff   0, 0x4           	MOVFF	r0x00, r0x04
0014c8   f004
0014ca   c001     movff   0x1, 0x5         	MOVFF	r0x01, r0x05
0014cc   f005
0014ce   c002     movff   0x2, 0x6         	MOVFF	r0x02, r0x06
0014d0   f006
0014d2   c003     movff   0x3, 0x7         	MOVFF	r0x03, r0x07
0014d4   f007
0014d6   0eff     movlw   0xff             	MOVLW	0xff
0014d8   2600     addwf   0, 0x1, 0        	ADDWF	r0x00, F
0014da   0eff     movlw   0xff             	MOVLW	0xff
0014dc   2201     addwfc  0x1, 0x1, 0      	ADDWFC	r0x01, F
0014de   0eff     movlw   0xff             	MOVLW	0xff
0014e0   2202     addwfc  0x2, 0x1, 0      	ADDWFC	r0x02, F
0014e2   0eff     movlw   0xff             	MOVLW	0xff
0014e4   2203     addwfc  0x3, 0x1, 0      	ADDWFC	r0x03, F
0014e6   5004     movf    0x4, 0, 0        	MOVF	r0x04, W
0014e8   1005     iorwf   0x5, 0, 0        	IORWF	r0x05, W
0014ea   1006     iorwf   0x6, 0, 0        	IORWF	r0x06, W
0014ec   1007     iorwf   0x7, 0, 0        	IORWF	r0x07, W
0014ee   e1eb     bnz     0x14c6           	BNZ	_00167_DS_
                                           ;	.line	300; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0x06);	// Increment after each write, do not shift
0014f0   0e06     movlw   0x6              	MOVLW	0x06
0014f2   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0014f4   0e00     movlw   0                	MOVLW	0x00
0014f6   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0014f8   ecb4     call    0x2b68, 0        	CALL	_LCDWrite
0014fa   f015
0014fc   0e02     movlw   0x2              	MOVLW	0x02
0014fe   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	301; TCPIP_Stack/LCDBlocking.c	Delay10us(5);
001500   0e55     movlw   0x55             	MOVLW	0x55
001502   6e00     movwf   0, 0             	MOVWF	r0x00
001504   6a01     clrf    0x1, 0           	CLRF	r0x01
001506   6a02     clrf    0x2, 0           	CLRF	r0x02
001508   6a03     clrf    0x3, 0           	CLRF	r0x03
                                           _00173_DS_:
00150a   c000     movff   0, 0x4           	MOVFF	r0x00, r0x04
00150c   f004
00150e   c001     movff   0x1, 0x5         	MOVFF	r0x01, r0x05
001510   f005
001512   c002     movff   0x2, 0x6         	MOVFF	r0x02, r0x06
001514   f006
001516   c003     movff   0x3, 0x7         	MOVFF	r0x03, r0x07
001518   f007
00151a   0eff     movlw   0xff             	MOVLW	0xff
00151c   2600     addwf   0, 0x1, 0        	ADDWF	r0x00, F
00151e   0eff     movlw   0xff             	MOVLW	0xff
001520   2201     addwfc  0x1, 0x1, 0      	ADDWFC	r0x01, F
001522   0eff     movlw   0xff             	MOVLW	0xff
001524   2202     addwfc  0x2, 0x1, 0      	ADDWFC	r0x02, F
001526   0eff     movlw   0xff             	MOVLW	0xff
001528   2203     addwfc  0x3, 0x1, 0      	ADDWFC	r0x03, F
00152a   5004     movf    0x4, 0, 0        	MOVF	r0x04, W
00152c   1005     iorwf   0x5, 0, 0        	IORWF	r0x05, W
00152e   1006     iorwf   0x6, 0, 0        	IORWF	r0x06, W
001530   1007     iorwf   0x7, 0, 0        	IORWF	r0x07, W
001532   e1eb     bnz     0x150a           	BNZ	_00173_DS_
                                           ;	.line	304; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0x0C);	// Turn display on, no cusor, no cursor blink
001534   0e0c     movlw   0xc              	MOVLW	0x0c
001536   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001538   0e00     movlw   0                	MOVLW	0x00
00153a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00153c   ecb4     call    0x2b68, 0        	CALL	_LCDWrite
00153e   f015
001540   0e02     movlw   0x2              	MOVLW	0x02
001542   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	305; TCPIP_Stack/LCDBlocking.c	Delay10us(5);
001544   0e55     movlw   0x55             	MOVLW	0x55
001546   6e00     movwf   0, 0             	MOVWF	r0x00
001548   6a01     clrf    0x1, 0           	CLRF	r0x01
00154a   6a02     clrf    0x2, 0           	CLRF	r0x02
00154c   6a03     clrf    0x3, 0           	CLRF	r0x03
                                           _00179_DS_:
00154e   c000     movff   0, 0x4           	MOVFF	r0x00, r0x04
001550   f004
001552   c001     movff   0x1, 0x5         	MOVFF	r0x01, r0x05
001554   f005
001556   c002     movff   0x2, 0x6         	MOVFF	r0x02, r0x06
001558   f006
00155a   c003     movff   0x3, 0x7         	MOVFF	r0x03, r0x07
00155c   f007
00155e   0eff     movlw   0xff             	MOVLW	0xff
001560   2600     addwf   0, 0x1, 0        	ADDWF	r0x00, F
001562   0eff     movlw   0xff             	MOVLW	0xff
001564   2201     addwfc  0x1, 0x1, 0      	ADDWFC	r0x01, F
001566   0eff     movlw   0xff             	MOVLW	0xff
001568   2202     addwfc  0x2, 0x1, 0      	ADDWFC	r0x02, F
00156a   0eff     movlw   0xff             	MOVLW	0xff
00156c   2203     addwfc  0x3, 0x1, 0      	ADDWFC	r0x03, F
00156e   5004     movf    0x4, 0, 0        	MOVF	r0x04, W
001570   1005     iorwf   0x5, 0, 0        	IORWF	r0x05, W
001572   1006     iorwf   0x6, 0, 0        	IORWF	r0x06, W
001574   1007     iorwf   0x7, 0, 0        	IORWF	r0x07, W
001576   e1eb     bnz     0x154e           	BNZ	_00179_DS_
                                           ;	.line	308; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0x01);	
001578   0e01     movlw   0x1              	MOVLW	0x01
00157a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00157c   0e00     movlw   0                	MOVLW	0x00
00157e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001580   ecb4     call    0x2b68, 0        	CALL	_LCDWrite
001582   f015
001584   0e02     movlw   0x2              	MOVLW	0x02
001586   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	309; TCPIP_Stack/LCDBlocking.c	DelayMs(2);
001588   0e48     movlw   0x48             	MOVLW	0x48
00158a   6e00     movwf   0, 0             	MOVWF	r0x00
00158c   0e0d     movlw   0xd              	MOVLW	0x0d
00158e   6e01     movwf   0x1, 0           	MOVWF	r0x01
001590   6a02     clrf    0x2, 0           	CLRF	r0x02
001592   6a03     clrf    0x3, 0           	CLRF	r0x03
                                           _00185_DS_:
001594   c000     movff   0, 0x4           	MOVFF	r0x00, r0x04
001596   f004
001598   c001     movff   0x1, 0x5         	MOVFF	r0x01, r0x05
00159a   f005
00159c   c002     movff   0x2, 0x6         	MOVFF	r0x02, r0x06
00159e   f006
0015a0   c003     movff   0x3, 0x7         	MOVFF	r0x03, r0x07
0015a2   f007
0015a4   0eff     movlw   0xff             	MOVLW	0xff
0015a6   2600     addwf   0, 0x1, 0        	ADDWF	r0x00, F
0015a8   0eff     movlw   0xff             	MOVLW	0xff
0015aa   2201     addwfc  0x1, 0x1, 0      	ADDWFC	r0x01, F
0015ac   0eff     movlw   0xff             	MOVLW	0xff
0015ae   2202     addwfc  0x2, 0x1, 0      	ADDWFC	r0x02, F
0015b0   0eff     movlw   0xff             	MOVLW	0xff
0015b2   2203     addwfc  0x3, 0x1, 0      	ADDWFC	r0x03, F
0015b4   5004     movf    0x4, 0, 0        	MOVF	r0x04, W
0015b6   1005     iorwf   0x5, 0, 0        	IORWF	r0x05, W
0015b8   1006     iorwf   0x6, 0, 0        	IORWF	r0x06, W
0015ba   1007     iorwf   0x7, 0, 0        	IORWF	r0x07, W
0015bc   e1eb     bnz     0x1594           	BNZ	_00185_DS_
0015be   cfe4     movff   0xfe4, 0x8       	MOVFF	PREINC1, r0x08
0015c0   f008
0015c2   cfe4     movff   0xfe4, 0x7       	MOVFF	PREINC1, r0x07
0015c4   f007
0015c6   cfe4     movff   0xfe4, 0x6       	MOVFF	PREINC1, r0x06
0015c8   f006
0015ca   cfe4     movff   0xfe4, 0x5       	MOVFF	PREINC1, r0x05
0015cc   f005
0015ce   cfe4     movff   0xfe4, 0x4       	MOVFF	PREINC1, r0x04
0015d0   f004
0015d2   cfe4     movff   0xfe4, 0x3       	MOVFF	PREINC1, r0x03
0015d4   f003
0015d6   cfe4     movff   0xfe4, 0x2       	MOVFF	PREINC1, r0x02
0015d8   f002
0015da   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
0015dc   f001
0015de   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
0015e0   f000
0015e2   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0015e4   ffd9
0015e6   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDWrite	code
                                           _LCDWrite:
                                           ;	.line	94; TCPIP_Stack/LCDBlocking.c	static void LCDWrite(BYTE RS, BYTE Data)
002b68   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002b6a   ffe5
002b6c   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002b6e   ffd9
002b70   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
002b72   ffe5
002b74   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
002b76   ffe5
002b78   0e02     movlw   0x2              	MOVLW	0x02
002b7a   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
002b7c   f000
002b7e   0e03     movlw   0x3              	MOVLW	0x03
002b80   cfdb     movff   0xfdb, 0x1       	MOVFF	PLUSW2, r0x01
002b82   f001
                                           ;	.line	97; TCPIP_Stack/LCDBlocking.c	LCD_DATA_TRIS = 0x00;
002b84   6a96     clrf    0x96, 0          	CLRF	_TRISE
                                           ;	.line	110; TCPIP_Stack/LCDBlocking.c	LCD_RS_TRIS = 0;
002b86   9499     bcf     0x99, 0x2, 0     	BCF	_TRISHbits, 2
                                           ;	.line	111; TCPIP_Stack/LCDBlocking.c	LCD_RD_WR_TRIS = 0;
002b88   9299     bcf     0x99, 0x1, 0     	BCF	_TRISHbits, 1
                                           ;	.line	112; TCPIP_Stack/LCDBlocking.c	LCD_RD_WR_IO = 0;
002b8a   9290     bcf     0x90, 0x1, 0     	BCF	_LATHbits, 1
                                           ;	.line	113; TCPIP_Stack/LCDBlocking.c	LCD_RS_IO = RS;
002b8c   5000     movf    0, 0, 0          	MOVF	r0x00, W
002b8e   0b01     andlw   0x1              	ANDLW	0x01
002b90   44e8     rlncf   0xe8, 0, 0       	RLNCF	WREG, W
002b92   44e8     rlncf   0xe8, 0, 0       	RLNCF	WREG, W
002b94   6ef4     movwf   0xf4, 0          	MOVWF	PRODH
002b96   5090     movf    0x90, 0, 0       	MOVF	_LATHbits, W
002b98   0bfb     andlw   0xfb             	ANDLW	0xfb
002b9a   10f4     iorwf   0xf4, 0, 0       	IORWF	PRODH, W
002b9c   6e90     movwf   0x90, 0          	MOVWF	_LATHbits
                                           ;	.line	140; TCPIP_Stack/LCDBlocking.c	LCD_DATA_IO = Data;
002b9e   c001     movff   0x1, 0xf8d       	MOVFF	r0x01, _LATE
002ba0   ff8d
002ba2   0000     nop                      	nop 
002ba4   0000     nop                      	nop 
                                           ;	.line	155; TCPIP_Stack/LCDBlocking.c	LCD_E_IO = 1;
002ba6   8090     bsf     0x90, 0, 0       	BSF	_LATHbits, 0
002ba8   0000     nop                      	nop 
002baa   0000     nop                      	nop 
002bac   0000     nop                      	nop 
002bae   0000     nop                      	nop 
002bb0   0000     nop                      	nop 
002bb2   0000     nop                      	nop 
002bb4   0000     nop                      	nop 
002bb6   0000     nop                      	nop 
002bb8   0000     nop                      	nop 
                                           ;	.line	165; TCPIP_Stack/LCDBlocking.c	LCD_E_IO = 0;
002bba   9090     bcf     0x90, 0, 0       	BCF	_LATHbits, 0
002bbc   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
002bbe   f001
002bc0   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
002bc2   f000
002bc4   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002bc6   ffd9
002bc8   0012     return  0                	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 1496 (0x05d8) bytes ( 1.14%)
                                           ;           	  748 (0x02ec) words
                                           ; udata size:	   33 (0x0021) bytes ( 0.86%)
                                           ; access size:	    9 (0x0009) bytes
                                           
                                           
                                           	end
