gplink-0.13.7 beta
Copyright (c) 1998-2005 gputils project
Listing File Generated: 10-26-2013  19:26:19
 
 
Address  Value    Disassembly              Source
-------  -----    -----------              ------
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Oct 15 2013) (Mac OS X ppc)
                                           ; This file was generated Sat Oct 26 19:26:19 2013
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _inc_ahour
                                           	global _inc_amin
                                           	global _time
                                           	global _refresh_lcd
                                           	global _alarm
                                           	global _button
                                           	global _DisplayString
                                           	global _strlcpy
                                           	global _chandelle
                                           	global _overflows
                                           	global _sec
                                           	global _decisec
                                           	global _ds
                                           	global _h
                                           	global _m
                                           	global _s
                                           	global _thour
                                           	global _tmin
                                           	global _tsec
                                           	global _ahour
                                           	global _amin
                                           	global _ahour_o
                                           	global _amin_o
                                           	global _alarm_set
                                           	global _snooze
                                           	global _stop_ringing
                                           	global _whereami
                                           	global _on
                                           	global _button1
                                           	global _button2
                                           	global _display
                                           	global _high_isr
                                           	global _low_isr
                                           	global _main
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern __gptrget1
                                           	extern __gptrput1
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _LCDText
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _sprintf
                                           	extern _strlen
                                           	extern _LCDInit
                                           	extern _LCDUpdate
                                           	extern __modsint
                                           	extern __divsint
                                           	extern ___ulong2fs
                                           	extern ___fsdiv
                                           	extern ___fs2ulong
                                           	extern __mullong
                                           	extern __modulong
                                           	extern __divulong
                                           	extern ___fsadd
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           PCL	equ	0xff9
                                           PCLATH	equ	0xffa
                                           PCLATU	equ	0xffb
                                           WREG	equ	0xfe8
                                           BSR	equ	0xfe0
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           	idata
                                           _chandelle	db	0x01
                                           _overflows	db	0x00, 0x00, 0x00, 0x00
                                           _thour	db	0x00
                                           _tmin	db	0x00
                                           _tsec	db	0x00
                                           _ahour	db	0x00
                                           _amin	db	0x00
                                           _ahour_o	db	0x00
                                           _amin_o	db	0x00
                                           _alarm_set	db	0x00
                                           _snooze	db	0x00
                                           _stop_ringing	db	0x00
                                           _whereami	db	0x00
                                           _on	db	0x00
                                           _button1	db	0x00
                                           _button2	db	0x00
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           r0x0a	res	1
                                           r0x0b	res	1
                                           r0x0c	res	1
                                           r0x0d	res	1
                                           r0x0e	res	1
                                           r0x0f	res	1
                                           r0x10	res	1
                                           r0x11	res	1
                                           r0x12	res	1
                                           r0x13	res	1
                                           r0x14	res	1
                                           r0x15	res	1
                                           
                                           udata_lena_0	udata
                                           _sec	res	4
                                           
                                           udata_lena_1	udata
                                           _decisec	res	4
                                           
                                           udata_lena_2	udata
                                           _ds	res	1
                                           
                                           udata_lena_3	udata
                                           _h	res	1
                                           
                                           udata_lena_4	udata
                                           _m	res	1
                                           
                                           udata_lena_5	udata
                                           _s	res	1
                                           
                                           udata_lena_6	udata
                                           _display	res	32
                                           
                                           ;--------------------------------------------------------
                                           ; interrupt vector 
                                           ;--------------------------------------------------------
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; ; Starting pCode block for absolute section
                                           ; ;-----------------------------------------
                                           S_lena_ivec_0x1_high_isr	code	0X000008
                                           ivec_0x1_high_isr:
000008   ef31     goto	0x1c62              	GOTO	_high_isr
00000a   f00e
                                           
                                           ; ; Starting pCode block for absolute section
                                           ; ;-----------------------------------------
                                           S_lena_ivec_0x2_low_isr	code	0X000018
                                           ivec_0x2_low_isr:
000018   ef67     goto	0x38ce              	GOTO	_low_isr
00001a   f01c
                                           
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_lena__main	code
                                           _main:
                                           ;	.line	127; lena.c	RCONbits.IPEN       = 1; //enable interrupts priority levels
003a08   8ed0     bsf	0xd0, 0x7, 0         	BSF	_RCONbits, 7
                                           ;	.line	128; lena.c	INTCONbits.GIE      = 1; //enables all high-priority interrupts
003a0a   8ef2     bsf	0xf2, 0x7, 0         	BSF	_INTCONbits, 7
                                           ;	.line	129; lena.c	INTCONbits.PEIE     = 1; //enables all low-priority peripheral interrupts
003a0c   8cf2     bsf	0xf2, 0x6, 0         	BSF	_INTCONbits, 6
                                           ;	.line	132; lena.c	T0CONbits.TMR0ON    = 1; //enables Timer0
003a0e   8ed5     bsf	0xd5, 0x7, 0         	BSF	_T0CONbits, 7
                                           ;	.line	133; lena.c	INTCONbits.TMR0IE   = 1; //enables the TMR0 overflow interrupt
003a10   8af2     bsf	0xf2, 0x5, 0         	BSF	_INTCONbits, 5
                                           ;	.line	134; lena.c	INTCONbits.TMR0IF   = 0; //clear Timer0 overflow bit
003a12   94f2     bcf	0xf2, 0x2, 0         	BCF	_INTCONbits, 2
                                           ;	.line	135; lena.c	INTCON2bits.TMR0IP  = 1; //high priority
003a14   84f1     bsf	0xf1, 0x2, 0         	BSF	_INTCON2bits, 2
                                           ;	.line	136; lena.c	T0CONbits.T08BIT    = 0; //timer0 is configured as a 16-bit timer/counter
003a16   9cd5     bcf	0xd5, 0x6, 0         	BCF	_T0CONbits, 6
                                           ;	.line	137; lena.c	T0CONbits.T0CS      = 0; //internal instruction cycle clock (CLKO)
003a18   9ad5     bcf	0xd5, 0x5, 0         	BCF	_T0CONbits, 5
                                           ;	.line	138; lena.c	T0CONbits.PSA       = 1; //timer0 prescaler is not assigned
003a1a   86d5     bsf	0xd5, 0x3, 0         	BSF	_T0CONbits, 3
                                           ;	.line	139; lena.c	TMR0L = 0;    TMR0H = 0;
003a1c   6ad6     clrf	0xd6, 0             	CLRF	_TMR0L
003a1e   6ad7     clrf	0xd7, 0             	CLRF	_TMR0H
                                           ;	.line	142; lena.c	LED0_TRIS = 0; //configure 1st led pin as output (yellow)
003a20   909a     bcf	0x9a, 0, 0           	BCF	_TRISJbits, 0
                                           ;	.line	143; lena.c	LED1_TRIS = 0; //configure 2nd led pin as output (red)
003a22   929a     bcf	0x9a, 0x1, 0         	BCF	_TRISJbits, 1
                                           ;	.line	144; lena.c	LED2_TRIS = 0; //configure 3rd led pin as output (red)
003a24   949a     bcf	0x9a, 0x2, 0         	BCF	_TRISJbits, 2
                                           ;	.line	145; lena.c	LATJbits.LATJ0 = 0; // switch LED 1 off
003a26   9091     bcf	0x91, 0, 0           	BCF	_LATJbits, 0
                                           ;	.line	146; lena.c	LATJbits.LATJ1 = 0; // switch LED 2 off
003a28   9291     bcf	0x91, 0x1, 0         	BCF	_LATJbits, 1
                                           ;	.line	147; lena.c	LATJbits.LATJ2 = 0; // switch LED 3 off
003a2a   9491     bcf	0x91, 0x2, 0         	BCF	_LATJbits, 2
                                           ;	.line	150; lena.c	BUTTON0_TRIS        = 1; //configure 1st button as input
003a2c   8693     bsf	0x93, 0x3, 0         	BSF	_TRISBbits, 3
                                           ;	.line	151; lena.c	BUTTON1_TRIS        = 1; //configure 2nd button as input
003a2e   8293     bsf	0x93, 0x1, 0         	BSF	_TRISBbits, 1
                                           ;	.line	152; lena.c	INTCON3bits.INT3E   = 1; //enable INT3 interrupt (button 1)
003a30   8af0     bsf	0xf0, 0x5, 0         	BSF	_INTCON3bits, 5
                                           ;	.line	153; lena.c	INTCON3bits.INT3F   = 0; //clear INT3 flag
003a32   94f0     bcf	0xf0, 0x2, 0         	BCF	_INTCON3bits, 2
                                           ;	.line	154; lena.c	INTCON3bits.INT1E   = 1; //enable INT1 interrupt (button 2)
003a34   86f0     bsf	0xf0, 0x3, 0         	BSF	_INTCON3bits, 3
                                           ;	.line	155; lena.c	INTCON3bits.INT1F   = 0; //clear INT1 flag
003a36   90f0     bcf	0xf0, 0, 0           	BCF	_INTCON3bits, 0
                                           ;	.line	156; lena.c	INTCON3bits.INT1IP  = 0; //low priority
003a38   9cf0     bcf	0xf0, 0x6, 0         	BCF	_INTCON3bits, 6
                                           ;	.line	157; lena.c	INTCON2bits.INT3IP  = 0; //low priority
003a3a   92f1     bcf	0xf1, 0x1, 0         	BCF	_INTCON2bits, 1
                                           ;	.line	159; lena.c	LCDInit();
003a3c   ecc0     call	0x2180, 0           	CALL	_LCDInit
003a3e   f010
                                           ;	.line	160; lena.c	whereami = TIME_MENU;
003a40   0e01     movlw	0x1                	MOVLW	0x01
003a42   010f     movlb	0xf                	BANKSEL	_whereami
003a44   6f50     movwf	0x50, 0x1          	MOVWF	_whereami, B
003a46   010f     movlb	0xf                	BANKSEL	_chandelle
                                           ;	.line	162; lena.c	chandelle++; // ##### BIZARRE ####
003a48   2b41     incf	0x41, 0x1, 0x1      	INCF	_chandelle, F, B
                                           ;	.line	164; lena.c	T0CONbits.TMR0ON = 1; // start timer0
003a4a   8ed5     bsf	0xd5, 0x7, 0         	BSF	_T0CONbits, 7
                                           _00123_DS_:
                                           ;	.line	167; lena.c	time();
003a4c   ecd8     call	0x15b0, 0           	CALL	_time
003a4e   f00a
                                           ;	.line	168; lena.c	refresh_lcd();
003a50   ec29     call	0x852, 0            	CALL	_refresh_lcd
003a52   f004
                                           ;	.line	169; lena.c	alarm();
003a54   ece2     call	0x37c4, 0           	CALL	_alarm
003a56   f01b
                                           ;	.line	170; lena.c	button();
003a58   ec1f     call	0xe3e, 0            	CALL	_button
003a5a   f007
003a5c   d7f7     bra	0x3a4c               	BRA	_00123_DS_
003a5e   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_lena__strlcpy	code
                                           _strlcpy:
                                           ;	.line	518; lena.c	strlcpy(char *dst, const char *src, size_t siz)
0025f0   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0025f2   ffe5
0025f4   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0025f6   ffd9
0025f8   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0025fa   ffe5
0025fc   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0025fe   ffe5
002600   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
002602   ffe5
002604   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002606   ffe5
002608   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00260a   ffe5
00260c   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
00260e   ffe5
002610   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
002612   ffe5
002614   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
002616   ffe5
002618   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
00261a   ffe5
00261c   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
00261e   ffe5
002620   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
002622   ffe5
002624   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
002626   ffe5
002628   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
00262a   ffe5
00262c   c00d     movff	0xd, 0xfe5         	MOVFF	r0x0d, POSTDEC1
00262e   ffe5
002630   c00e     movff	0xe, 0xfe5         	MOVFF	r0x0e, POSTDEC1
002632   ffe5
002634   c00f     movff	0xf, 0xfe5         	MOVFF	r0x0f, POSTDEC1
002636   ffe5
002638   c010     movff	0x10, 0xfe5        	MOVFF	r0x10, POSTDEC1
00263a   ffe5
00263c   c011     movff	0x11, 0xfe5        	MOVFF	r0x11, POSTDEC1
00263e   ffe5
002640   c012     movff	0x12, 0xfe5        	MOVFF	r0x12, POSTDEC1
002642   ffe5
002644   c013     movff	0x13, 0xfe5        	MOVFF	r0x13, POSTDEC1
002646   ffe5
002648   c014     movff	0x14, 0xfe5        	MOVFF	r0x14, POSTDEC1
00264a   ffe5
00264c   c015     movff	0x15, 0xfe5        	MOVFF	r0x15, POSTDEC1
00264e   ffe5
002650   0e02     movlw	0x2                	MOVLW	0x02
002652   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
002654   f000
002656   0e03     movlw	0x3                	MOVLW	0x03
002658   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
00265a   f001
00265c   0e04     movlw	0x4                	MOVLW	0x04
00265e   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
002660   f002
002662   0e05     movlw	0x5                	MOVLW	0x05
002664   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
002666   f003
002668   0e06     movlw	0x6                	MOVLW	0x06
00266a   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
00266c   f004
00266e   0e07     movlw	0x7                	MOVLW	0x07
002670   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
002672   f005
002674   0e08     movlw	0x8                	MOVLW	0x08
002676   cfdb     movff	0xfdb, 0x6         	MOVFF	PLUSW2, r0x06
002678   f006
00267a   0e09     movlw	0x9                	MOVLW	0x09
00267c   cfdb     movff	0xfdb, 0x7         	MOVFF	PLUSW2, r0x07
00267e   f007
                                           ;	.line	520; lena.c	char       *d = dst;
002680   c000     movff	0, 0x8             	MOVFF	r0x00, r0x08
002682   f008
002684   c001     movff	0x1, 0x9           	MOVFF	r0x01, r0x09
002686   f009
002688   c002     movff	0x2, 0xa           	MOVFF	r0x02, r0x0a
00268a   f00a
                                           ;	.line	521; lena.c	const char *s = src;
00268c   c003     movff	0x3, 0xb           	MOVFF	r0x03, r0x0b
00268e   f00b
002690   c004     movff	0x4, 0xc           	MOVFF	r0x04, r0x0c
002692   f00c
002694   c005     movff	0x5, 0xd           	MOVFF	r0x05, r0x0d
002696   f00d
                                           ;	.line	522; lena.c	size_t      n = siz;
002698   c006     movff	0x6, 0xe           	MOVFF	r0x06, r0x0e
00269a   f00e
00269c   c007     movff	0x7, 0xf           	MOVFF	r0x07, r0x0f
00269e   f00f
                                           ;	.line	525; lena.c	if (n != 0)
0026a0   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0026a2   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
0026a4   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
0026a6   d03e     bra	0x2724               	BRA	_00353_DS_
                                           ;	.line	527; lena.c	while (--n != 0)
0026a8   c003     movff	0x3, 0x10          	MOVFF	r0x03, r0x10
0026aa   f010
0026ac   c004     movff	0x4, 0x11          	MOVFF	r0x04, r0x11
0026ae   f011
0026b0   c005     movff	0x5, 0x12          	MOVFF	r0x05, r0x12
0026b2   f012
0026b4   c006     movff	0x6, 0x13          	MOVFF	r0x06, r0x13
0026b6   f013
0026b8   c007     movff	0x7, 0x14          	MOVFF	r0x07, r0x14
0026ba   f014
                                           _00349_DS_:
0026bc   0eff     movlw	0xff               	MOVLW	0xff
0026be   2613     addwf	0x13, 0x1, 0       	ADDWF	r0x13, F
0026c0   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
0026c2   0614     decf	0x14, 0x1, 0        	DECF	r0x14, F
0026c4   5013     movf	0x13, 0, 0          	MOVF	r0x13, W
0026c6   1014     iorwf	0x14, 0, 0         	IORWF	r0x14, W
0026c8   e01d     bz	0x2704                	BZ	_00368_DS_
                                           ;	.line	529; lena.c	if ((*d++ = *s++) == '\0')
0026ca   c010     movff	0x10, 0xfe9        	MOVFF	r0x10, FSR0L
0026cc   ffe9
0026ce   c011     movff	0x11, 0xff3        	MOVFF	r0x11, PRODL
0026d0   fff3
0026d2   5012     movf	0x12, 0, 0          	MOVF	r0x12, W
0026d4   ec98     call	0x3b30, 0           	CALL	__gptrget1
0026d6   f01d
0026d8   6e15     movwf	0x15, 0            	MOVWF	r0x15
0026da   2a10     incf	0x10, 0x1, 0        	INCF	r0x10, F
0026dc   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0026de   2a11     incf	0x11, 0x1, 0        	INCF	r0x11, F
0026e0   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0026e2   2a12     incf	0x12, 0x1, 0        	INCF	r0x12, F
0026e4   c015     movff	0x15, 0xfe5        	MOVFF	r0x15, POSTDEC1
0026e6   ffe5
0026e8   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0026ea   ffe9
0026ec   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0026ee   fff3
0026f0   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0026f2   eccd     call	0x3b9a, 0           	CALL	__gptrput1
0026f4   f01d
0026f6   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
0026f8   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0026fa   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
0026fc   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0026fe   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
002700   5015     movf	0x15, 0, 0          	MOVF	r0x15, W
002702   e1dc     bnz	0x26bc               	BNZ	_00349_DS_
                                           _00368_DS_:
                                           ;	.line	530; lena.c	break;
002704   c010     movff	0x10, 0xb          	MOVFF	r0x10, r0x0b
002706   f00b
002708   c011     movff	0x11, 0xc          	MOVFF	r0x11, r0x0c
00270a   f00c
00270c   c012     movff	0x12, 0xd          	MOVFF	r0x12, r0x0d
00270e   f00d
002710   c000     movff	0, 0x8             	MOVFF	r0x00, r0x08
002712   f008
002714   c001     movff	0x1, 0x9           	MOVFF	r0x01, r0x09
002716   f009
002718   c002     movff	0x2, 0xa           	MOVFF	r0x02, r0x0a
00271a   f00a
00271c   c013     movff	0x13, 0xe          	MOVFF	r0x13, r0x0e
00271e   f00e
002720   c014     movff	0x14, 0xf          	MOVFF	r0x14, r0x0f
002722   f00f
                                           _00353_DS_:
                                           ;	.line	535; lena.c	if (n == 0)
002724   500e     movf	0xe, 0, 0           	MOVF	r0x0e, W
002726   100f     iorwf	0xf, 0, 0          	IORWF	r0x0f, W
002728   e127     bnz	0x2778               	BNZ	_00360_DS_
                                           ;	.line	537; lena.c	if (siz != 0)
00272a   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
00272c   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
00272e   e009     bz	0x2742                	BZ	_00367_DS_
                                           ;	.line	538; lena.c	*d = '\0';          /* NUL-terminate dst */
002730   0e00     movlw	0                  	MOVLW	0x00
002732   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002734   c008     movff	0x8, 0xfe9         	MOVFF	r0x08, FSR0L
002736   ffe9
002738   c009     movff	0x9, 0xff3         	MOVFF	r0x09, PRODL
00273a   fff3
00273c   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
00273e   eccd     call	0x3b9a, 0           	CALL	__gptrput1
002740   f01d
                                           _00367_DS_:
                                           ;	.line	539; lena.c	while (*s++)
002742   c00b     movff	0xb, 0             	MOVFF	r0x0b, r0x00
002744   f000
002746   c00c     movff	0xc, 0x1           	MOVFF	r0x0c, r0x01
002748   f001
00274a   c00d     movff	0xd, 0x2           	MOVFF	r0x0d, r0x02
00274c   f002
                                           _00356_DS_:
00274e   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
002750   ffe9
002752   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
002754   fff3
002756   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002758   ec98     call	0x3b30, 0           	CALL	__gptrget1
00275a   f01d
00275c   6e06     movwf	0x6, 0             	MOVWF	r0x06
00275e   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
002760   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
002762   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
002764   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
002766   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
002768   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
00276a   e1f1     bnz	0x274e               	BNZ	_00356_DS_
00276c   c000     movff	0, 0xb             	MOVFF	r0x00, r0x0b
00276e   f00b
002770   c001     movff	0x1, 0xc           	MOVFF	r0x01, r0x0c
002772   f00c
002774   c002     movff	0x2, 0xd           	MOVFF	r0x02, r0x0d
002776   f00d
                                           _00360_DS_:
                                           ;	.line	545; lena.c	return (s - src - 1);       /* count does not include NUL */
002778   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00277a   5c0b     subwf	0xb, 0, 0          	SUBWF	r0x0b, W
00277c   6e03     movwf	0x3, 0             	MOVWF	r0x03
00277e   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002780   580c     subwfb	0xc, 0, 0         	SUBWFB	r0x0c, W
002782   6e04     movwf	0x4, 0             	MOVWF	r0x04
002784   0eff     movlw	0xff               	MOVLW	0xff
002786   2603     addwf	0x3, 0x1, 0        	ADDWF	r0x03, F
002788   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
00278a   0604     decf	0x4, 0x1, 0         	DECF	r0x04, F
00278c   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
00278e   fff3
002790   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002792   cfe4     movff	0xfe4, 0x15        	MOVFF	PREINC1, r0x15
002794   f015
002796   cfe4     movff	0xfe4, 0x14        	MOVFF	PREINC1, r0x14
002798   f014
00279a   cfe4     movff	0xfe4, 0x13        	MOVFF	PREINC1, r0x13
00279c   f013
00279e   cfe4     movff	0xfe4, 0x12        	MOVFF	PREINC1, r0x12
0027a0   f012
0027a2   cfe4     movff	0xfe4, 0x11        	MOVFF	PREINC1, r0x11
0027a4   f011
0027a6   cfe4     movff	0xfe4, 0x10        	MOVFF	PREINC1, r0x10
0027a8   f010
0027aa   cfe4     movff	0xfe4, 0xf         	MOVFF	PREINC1, r0x0f
0027ac   f00f
0027ae   cfe4     movff	0xfe4, 0xe         	MOVFF	PREINC1, r0x0e
0027b0   f00e
0027b2   cfe4     movff	0xfe4, 0xd         	MOVFF	PREINC1, r0x0d
0027b4   f00d
0027b6   cfe4     movff	0xfe4, 0xc         	MOVFF	PREINC1, r0x0c
0027b8   f00c
0027ba   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
0027bc   f00b
0027be   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
0027c0   f00a
0027c2   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
0027c4   f009
0027c6   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
0027c8   f008
0027ca   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
0027cc   f007
0027ce   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0027d0   f006
0027d2   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0027d4   f005
0027d6   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0027d8   f004
0027da   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0027dc   f003
0027de   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0027e0   f002
0027e2   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0027e4   f001
0027e6   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0027e8   f000
0027ea   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0027ec   ffd9
0027ee   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_lena__DisplayString	code
                                           _DisplayString:
                                           ;	.line	472; lena.c	void DisplayString(BYTE pos, char* text)
003210   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
003212   ffe5
003214   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
003216   ffd9
003218   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00321a   ffe5
00321c   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00321e   ffe5
003220   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
003222   ffe5
003224   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
003226   ffe5
003228   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00322a   ffe5
00322c   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
00322e   ffe5
003230   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
003232   ffe5
003234   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
003236   ffe5
003238   0e02     movlw	0x2                	MOVLW	0x02
00323a   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
00323c   f000
00323e   0e03     movlw	0x3                	MOVLW	0x03
003240   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
003242   f001
003244   0e04     movlw	0x4                	MOVLW	0x04
003246   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
003248   f002
00324a   0e05     movlw	0x5                	MOVLW	0x05
00324c   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
00324e   f003
                                           ;	.line	474; lena.c	BYTE l= strlen(text)+1;
003250   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
003252   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003254   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
003256   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003258   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00325a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00325c   ec27     call	0x384e, 0           	CALL	_strlen
00325e   f01c
003260   6e04     movwf	0x4, 0             	MOVWF	r0x04
003262   cff3     movff	0xff3, 0x5         	MOVFF	PRODL, r0x05
003264   f005
003266   0e03     movlw	0x3                	MOVLW	0x03
003268   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00326a   2a04     incf	0x4, 0x1, 0         	INCF	r0x04, F
                                           ;	.line	475; lena.c	BYTE max= 32-pos;
00326c   5000     movf	0, 0, 0             	MOVF	r0x00, W
00326e   0820     sublw	0x20               	SUBLW	0x20
003270   6e05     movwf	0x5, 0             	MOVWF	r0x05
                                           ;	.line	476; lena.c	strlcpy((char*)&LCDText[pos], text,(l<max)?l:max );
003272   6a06     clrf	0x6, 0              	CLRF	r0x06
003274   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
003276   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
003278   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
00327a   2206     addwfc	0x6, 0x1, 0       	ADDWFC	r0x06, F
00327c   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
00327e   6e06     movwf	0x6, 0             	MOVWF	r0x06
003280   5000     movf	0, 0, 0             	MOVF	r0x00, W
003282   6e00     movwf	0, 0               	MOVWF	r0x00
003284   0e80     movlw	0x80               	MOVLW	0x80
003286   6e07     movwf	0x7, 0             	MOVWF	r0x07
003288   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00328a   5c04     subwf	0x4, 0, 0          	SUBWF	r0x04, W
00328c   e302     bnc	0x3292               	BNC	_00340_DS_
00328e   c005     movff	0x5, 0x4           	MOVFF	r0x05, r0x04
003290   f004
                                           _00340_DS_:
003292   6a05     clrf	0x5, 0              	CLRF	r0x05
003294   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
003296   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003298   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00329a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00329c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00329e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0032a0   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0032a2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0032a4   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0032a6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0032a8   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0032aa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0032ac   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0032ae   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0032b0   5000     movf	0, 0, 0             	MOVF	r0x00, W
0032b2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0032b4   ecf8     call	0x25f0, 0           	CALL	_strlcpy
0032b6   f012
0032b8   0e08     movlw	0x8                	MOVLW	0x08
0032ba   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	477; lena.c	LCDUpdate();
0032bc   ec8b     call	0x1f16, 0           	CALL	_LCDUpdate
0032be   f00f
0032c0   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
0032c2   f007
0032c4   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0032c6   f006
0032c8   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0032ca   f005
0032cc   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0032ce   f004
0032d0   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0032d2   f003
0032d4   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0032d6   f002
0032d8   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0032da   f001
0032dc   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0032de   f000
0032e0   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0032e2   ffd9
0032e4   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_lena__button	code
                                           _button:
                                           ;	.line	334; lena.c	void button(void)
000e3e   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000e40   ffe5
000e42   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000e44   ffd9
000e46   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000e48   ffe5
000e4a   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000e4c   ffe5
000e4e   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
000e50   ffe5
000e52   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
000e54   ffe5
000e56   010f     movlb	0xf                	BANKSEL	_button1
                                           ;	.line	337; lena.c	if (button1) {
000e58   5152     movf	0x52, 0, 0x1        	MOVF	_button1, W, B
000e5a   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
000e5c   d07c     bra	0xf56                	BRA	_00306_DS_
                                           ;	.line	338; lena.c	switch (whereami) {
000e5e   0e01     movlw	0x1                	MOVLW	0x01
000e60   010f     movlb	0xf                	BANKSEL	_whereami
000e62   5d50     subwf	0x50, 0, 0x1       	SUBWF	_whereami, W, B
000e64   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
000e66   d074     bra	0xf50                	BRA	_00279_DS_
000e68   0e0c     movlw	0xc                	MOVLW	0x0c
000e6a   010f     movlb	0xf                	BANKSEL	_whereami
000e6c   5d50     subwf	0x50, 0, 0x1       	SUBWF	_whereami, W, B
000e6e   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000e70   d06f     bra	0xf50                	BRA	_00279_DS_
000e72   010f     movlb	0xf                	BANKSEL	_whereami
000e74   0550     decf	0x50, 0, 0x1        	DECF	_whereami, W, B
000e76   6e00     movwf	0, 0               	MOVWF	r0x00
000e78   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
000e7a   ffe5
000e7c   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
000e7e   ffe5
000e80   6a05     clrf	0x5, 0              	CLRF	r0x05
000e82   3400     rlcf	0, 0, 0             	RLCF	r0x00, W
000e84   3605     rlcf	0x5, 0x1, 0         	RLCF	r0x05, F
000e86   34e8     rlcf	0xe8, 0, 0          	RLCF	WREG, W
000e88   3605     rlcf	0x5, 0x1, 0         	RLCF	r0x05, F
000e8a   0bfc     andlw	0xfc               	ANDLW	0xfc
000e8c   6e04     movwf	0x4, 0             	MOVWF	r0x04
000e8e   0e00     movlw	0                  	MOVLW	UPPER(_00322_DS_)
000e90   6efb     movwf	0xfb, 0            	MOVWF	PCLATU
000e92   0e0e     movlw	0xe                	MOVLW	HIGH(_00322_DS_)
000e94   6efa     movwf	0xfa, 0            	MOVWF	PCLATH
000e96   0eae     movlw	0xae               	MOVLW	LOW(_00322_DS_)
000e98   2604     addwf	0x4, 0x1, 0        	ADDWF	r0x04, F
000e9a   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000e9c   22fa     addwfc	0xfa, 0x1, 0      	ADDWFC	PCLATH, F
000e9e   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000ea0   2afb     incf	0xfb, 0x1, 0        	INCF	PCLATU, F
000ea2   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000ea4   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
000ea6   f005
000ea8   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
000eaa   f004
000eac   6ef9     movwf	0xf9, 0            	MOVWF	PCL
                                           _00322_DS_:
000eae   ef6d     goto	0xeda               	GOTO	_00267_DS_
000eb0   f007
000eb2   ef71     goto	0xee2               	GOTO	_00268_DS_
000eb4   f007
000eb6   ef75     goto	0xeea               	GOTO	_00269_DS_
000eb8   f007
000eba   ef79     goto	0xef2               	GOTO	_00270_DS_
000ebc   f007
000ebe   ef7d     goto	0xefa               	GOTO	_00271_DS_
000ec0   f007
000ec2   ef81     goto	0xf02               	GOTO	_00272_DS_
000ec4   f007
000ec6   ef85     goto	0xf0a               	GOTO	_00273_DS_
000ec8   f007
000eca   ef89     goto	0xf12               	GOTO	_00274_DS_
000ecc   f007
000ece   ef8d     goto	0xf1a               	GOTO	_00275_DS_
000ed0   f007
000ed2   ef91     goto	0xf22               	GOTO	_00276_DS_
000ed4   f007
000ed6   ef9a     goto	0xf34               	GOTO	_00277_DS_
000ed8   f007
                                           _00267_DS_:
                                           ;	.line	340; lena.c	whereami = ALARM_MENU;
000eda   0e05     movlw	0x5                	MOVLW	0x05
000edc   010f     movlb	0xf                	BANKSEL	_whereami
000ede   6f50     movwf	0x50, 0x1          	MOVWF	_whereami, B
                                           ;	.line	341; lena.c	break;
000ee0   d037     bra	0xf50                	BRA	_00279_DS_
                                           _00268_DS_:
                                           ;	.line	343; lena.c	whereami = SET_MINUTE;
000ee2   0e03     movlw	0x3                	MOVLW	0x03
000ee4   010f     movlb	0xf                	BANKSEL	_whereami
000ee6   6f50     movwf	0x50, 0x1          	MOVWF	_whereami, B
                                           ;	.line	344; lena.c	break;
000ee8   d033     bra	0xf50                	BRA	_00279_DS_
                                           _00269_DS_:
                                           ;	.line	346; lena.c	whereami = SET_SECOND;
000eea   0e04     movlw	0x4                	MOVLW	0x04
000eec   010f     movlb	0xf                	BANKSEL	_whereami
000eee   6f50     movwf	0x50, 0x1          	MOVWF	_whereami, B
                                           ;	.line	347; lena.c	break;
000ef0   d02f     bra	0xf50                	BRA	_00279_DS_
                                           _00270_DS_:
                                           ;	.line	349; lena.c	whereami = ALARM_MENU;
000ef2   0e05     movlw	0x5                	MOVLW	0x05
000ef4   010f     movlb	0xf                	BANKSEL	_whereami
000ef6   6f50     movwf	0x50, 0x1          	MOVWF	_whereami, B
                                           ;	.line	350; lena.c	break;
000ef8   d02b     bra	0xf50                	BRA	_00279_DS_
                                           _00271_DS_:
                                           ;	.line	352; lena.c	whereami = DISPLAY;
000efa   0e09     movlw	0x9                	MOVLW	0x09
000efc   010f     movlb	0xf                	BANKSEL	_whereami
000efe   6f50     movwf	0x50, 0x1          	MOVWF	_whereami, B
                                           ;	.line	353; lena.c	break;
000f00   d027     bra	0xf50                	BRA	_00279_DS_
                                           _00272_DS_:
                                           ;	.line	355; lena.c	whereami = SET_A_HOUR;
000f02   0e07     movlw	0x7                	MOVLW	0x07
000f04   010f     movlb	0xf                	BANKSEL	_whereami
000f06   6f50     movwf	0x50, 0x1          	MOVWF	_whereami, B
                                           ;	.line	356; lena.c	break;
000f08   d023     bra	0xf50                	BRA	_00279_DS_
                                           _00273_DS_:
                                           ;	.line	358; lena.c	whereami = SET_A_MIN;
000f0a   0e08     movlw	0x8                	MOVLW	0x08
000f0c   010f     movlb	0xf                	BANKSEL	_whereami
000f0e   6f50     movwf	0x50, 0x1          	MOVWF	_whereami, B
                                           ;	.line	359; lena.c	break;
000f10   d01f     bra	0xf50                	BRA	_00279_DS_
                                           _00274_DS_:
                                           ;	.line	361; lena.c	whereami = DISPLAY;
000f12   0e09     movlw	0x9                	MOVLW	0x09
000f14   010f     movlb	0xf                	BANKSEL	_whereami
000f16   6f50     movwf	0x50, 0x1          	MOVWF	_whereami, B
                                           ;	.line	362; lena.c	break;
000f18   d01b     bra	0xf50                	BRA	_00279_DS_
                                           _00275_DS_:
                                           ;	.line	364; lena.c	whereami = TIME_MENU;
000f1a   0e01     movlw	0x1                	MOVLW	0x01
000f1c   010f     movlb	0xf                	BANKSEL	_whereami
000f1e   6f50     movwf	0x50, 0x1          	MOVWF	_whereami, B
                                           ;	.line	365; lena.c	break;
000f20   d017     bra	0xf50                	BRA	_00279_DS_
                                           _00276_DS_:
                                           ;	.line	367; lena.c	stop_ringing = 1;
000f22   0e01     movlw	0x1                	MOVLW	0x01
000f24   010f     movlb	0xf                	BANKSEL	_stop_ringing
000f26   6f4f     movwf	0x4f, 0x1          	MOVWF	_stop_ringing, B
                                           ;	.line	368; lena.c	LATJbits.LATJ1 = 0; // switch LED 2 off
000f28   9291     bcf	0x91, 0x1, 0         	BCF	_LATJbits, 1
                                           ;	.line	369; lena.c	LATJbits.LATJ2 = 0; // switch LED 3 off
000f2a   9491     bcf	0x91, 0x2, 0         	BCF	_LATJbits, 2
                                           ;	.line	370; lena.c	whereami = DISPLAY;
000f2c   0e09     movlw	0x9                	MOVLW	0x09
000f2e   010f     movlb	0xf                	BANKSEL	_whereami
000f30   6f50     movwf	0x50, 0x1          	MOVWF	_whereami, B
                                           ;	.line	371; lena.c	break;
000f32   d00e     bra	0xf50                	BRA	_00279_DS_
                                           _00277_DS_:
                                           ;	.line	373; lena.c	stop_ringing = 1; // le réveil ne doit plus sonner
000f34   0e01     movlw	0x1                	MOVLW	0x01
000f36   010f     movlb	0xf                	BANKSEL	_stop_ringing
000f38   6f4f     movwf	0x4f, 0x1          	MOVWF	_stop_ringing, B
                                           ;	.line	374; lena.c	amin = amin_o; // remet le réveil
000f3a   cf4c     movff	0xf4c, 0xf4a       	MOVFF	_amin_o, _amin
000f3c   ff4a
                                           ;	.line	375; lena.c	ahour = ahour_o;
000f3e   cf4b     movff	0xf4b, 0xf49       	MOVFF	_ahour_o, _ahour
000f40   ff49
000f42   010f     movlb	0xf                	BANKSEL	_snooze
                                           ;	.line	376; lena.c	snooze = 0;
000f44   6b4e     clrf	0x4e, 0x1           	CLRF	_snooze, B
                                           ;	.line	377; lena.c	LATJbits.LATJ1 = 0; // switch LED 2 off
000f46   9291     bcf	0x91, 0x1, 0         	BCF	_LATJbits, 1
                                           ;	.line	378; lena.c	LATJbits.LATJ2 = 0; // switch LED 3 off
000f48   9491     bcf	0x91, 0x2, 0         	BCF	_LATJbits, 2
                                           ;	.line	379; lena.c	whereami = DISPLAY;
000f4a   0e09     movlw	0x9                	MOVLW	0x09
000f4c   010f     movlb	0xf                	BANKSEL	_whereami
000f4e   6f50     movwf	0x50, 0x1          	MOVWF	_whereami, B
                                           _00279_DS_:
000f50   010f     movlb	0xf                	BANKSEL	_button1
                                           ;	.line	384; lena.c	button1 = 0; // remet le flag du boutton 1 à 0
000f52   6b52     clrf	0x52, 0x1           	CLRF	_button1, B
000f54   d15a     bra	0x120a               	BRA	_00308_DS_
                                           _00306_DS_:
000f56   010f     movlb	0xf                	BANKSEL	_button2
                                           ;	.line	387; lena.c	} else if (button2) {
000f58   5153     movf	0x53, 0, 0x1        	MOVF	_button2, W, B
000f5a   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
000f5c   d156     bra	0x120a               	BRA	_00308_DS_
                                           ;	.line	388; lena.c	switch (whereami) {
000f5e   0e01     movlw	0x1                	MOVLW	0x01
000f60   010f     movlb	0xf                	BANKSEL	_whereami
000f62   5d50     subwf	0x50, 0, 0x1       	SUBWF	_whereami, W, B
000f64   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
000f66   d14f     bra	0x1206               	BRA	_00302_DS_
000f68   0e0c     movlw	0xc                	MOVLW	0x0c
000f6a   010f     movlb	0xf                	BANKSEL	_whereami
000f6c   5d50     subwf	0x50, 0, 0x1       	SUBWF	_whereami, W, B
000f6e   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000f70   d14a     bra	0x1206               	BRA	_00302_DS_
000f72   010f     movlb	0xf                	BANKSEL	_whereami
000f74   0550     decf	0x50, 0, 0x1        	DECF	_whereami, W, B
000f76   6e00     movwf	0, 0               	MOVWF	r0x00
000f78   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
000f7a   ffe5
000f7c   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
000f7e   ffe5
000f80   6a05     clrf	0x5, 0              	CLRF	r0x05
000f82   3400     rlcf	0, 0, 0             	RLCF	r0x00, W
000f84   3605     rlcf	0x5, 0x1, 0         	RLCF	r0x05, F
000f86   34e8     rlcf	0xe8, 0, 0          	RLCF	WREG, W
000f88   3605     rlcf	0x5, 0x1, 0         	RLCF	r0x05, F
000f8a   0bfc     andlw	0xfc               	ANDLW	0xfc
000f8c   6e04     movwf	0x4, 0             	MOVWF	r0x04
000f8e   0e00     movlw	0                  	MOVLW	UPPER(_00325_DS_)
000f90   6efb     movwf	0xfb, 0            	MOVWF	PCLATU
000f92   0e0f     movlw	0xf                	MOVLW	HIGH(_00325_DS_)
000f94   6efa     movwf	0xfa, 0            	MOVWF	PCLATH
000f96   0eae     movlw	0xae               	MOVLW	LOW(_00325_DS_)
000f98   2604     addwf	0x4, 0x1, 0        	ADDWF	r0x04, F
000f9a   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000f9c   22fa     addwfc	0xfa, 0x1, 0      	ADDWFC	PCLATH, F
000f9e   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000fa0   2afb     incf	0xfb, 0x1, 0        	INCF	PCLATU, F
000fa2   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000fa4   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
000fa6   f005
000fa8   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
000faa   f004
000fac   6ef9     movwf	0xf9, 0            	MOVWF	PCL
                                           _00325_DS_:
000fae   efed     goto	0xfda               	GOTO	_00280_DS_
000fb0   f007
000fb2   eff1     goto	0xfe2               	GOTO	_00281_DS_
000fb4   f007
000fb6   ef38     goto	0x1070              	GOTO	_00282_DS_
000fb8   f008
000fba   ef7f     goto	0x10fe              	GOTO	_00283_DS_
000fbc   f008
000fbe   efc6     goto	0x118c              	GOTO	_00284_DS_
000fc0   f008
000fc2   efca     goto	0x1194              	GOTO	_00285_DS_
000fc4   f008
000fc6   efce     goto	0x119c              	GOTO	_00286_DS_
000fc8   f008
000fca   efda     goto	0x11b4              	GOTO	_00290_DS_
000fcc   f008
000fce   efe6     goto	0x11cc              	GOTO	_00294_DS_
000fd0   f008
000fd2   efe7     goto	0x11ce              	GOTO	_00295_DS_
000fd4   f008
000fd6   eff8     goto	0x11f0              	GOTO	_00298_DS_
000fd8   f008
                                           _00280_DS_:
                                           ;	.line	390; lena.c	whereami = SET_HOUR;
000fda   0e02     movlw	0x2                	MOVLW	0x02
000fdc   010f     movlb	0xf                	BANKSEL	_whereami
000fde   6f50     movwf	0x50, 0x1          	MOVWF	_whereami, B
                                           ;	.line	391; lena.c	break;
000fe0   d112     bra	0x1206               	BRA	_00302_DS_
                                           _00281_DS_:
000fe2   010f     movlb	0xf                	BANKSEL	(_overflows + 3)
                                           ;	.line	397; lena.c	overflows += F*3600;
000fe4   5145     movf	0x45, 0, 0x1        	MOVF	(_overflows + 3), W, B
000fe6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000fe8   010f     movlb	0xf                	BANKSEL	(_overflows + 2)
000fea   5144     movf	0x44, 0, 0x1        	MOVF	(_overflows + 2), W, B
000fec   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000fee   010f     movlb	0xf                	BANKSEL	(_overflows + 1)
000ff0   5143     movf	0x43, 0, 0x1        	MOVF	(_overflows + 1), W, B
000ff2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ff4   010f     movlb	0xf                	BANKSEL	_overflows
000ff6   5142     movf	0x42, 0, 0x1        	MOVF	_overflows, W, B
000ff8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ffa   ecd4     call	0x29a8, 0           	CALL	___ulong2fs
000ffc   f014
000ffe   6e00     movwf	0, 0               	MOVWF	r0x00
001000   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
001002   f001
001004   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
001006   f002
001008   cfe9     movff	0xfe9, 0x3         	MOVFF	FSR0L, r0x03
00100a   f003
00100c   0e04     movlw	0x4                	MOVLW	0x04
00100e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
001010   0e48     movlw	0x48               	MOVLW	0x48
001012   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001014   0ea7     movlw	0xa7               	MOVLW	0xa7
001016   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001018   0ea2     movlw	0xa2               	MOVLW	0xa2
00101a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00101c   0e80     movlw	0x80               	MOVLW	0x80
00101e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001020   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001022   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001024   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001026   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001028   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00102a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00102c   5000     movf	0, 0, 0             	MOVF	r0x00, W
00102e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001030   ec10     call	0x1220, 0           	CALL	___fsadd
001032   f009
001034   6e00     movwf	0, 0               	MOVWF	r0x00
001036   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
001038   f001
00103a   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
00103c   f002
00103e   cfe9     movff	0xfe9, 0x3         	MOVFF	FSR0L, r0x03
001040   f003
001042   0e08     movlw	0x8                	MOVLW	0x08
001044   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
001046   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001048   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00104a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00104c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00104e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001050   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001052   5000     movf	0, 0, 0             	MOVF	r0x00, W
001054   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001056   ecab     call	0x2f56, 0           	CALL	___fs2ulong
001058   f017
00105a   010f     movlb	0xf                	BANKSEL	_overflows
00105c   6f42     movwf	0x42, 0x1          	MOVWF	_overflows, B
00105e   cff3     movff	0xff3, 0xf43       	MOVFF	PRODL, (_overflows + 1)
001060   ff43
001062   cff4     movff	0xff4, 0xf44       	MOVFF	PRODH, (_overflows + 2)
001064   ff44
001066   cfe9     movff	0xfe9, 0xf45       	MOVFF	FSR0L, (_overflows + 3)
001068   ff45
00106a   0e04     movlw	0x4                	MOVLW	0x04
00106c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	398; lena.c	break;
00106e   d0cb     bra	0x1206               	BRA	_00302_DS_
                                           _00282_DS_:
001070   010f     movlb	0xf                	BANKSEL	(_overflows + 3)
                                           ;	.line	405; lena.c	overflows += F*60;
001072   5145     movf	0x45, 0, 0x1        	MOVF	(_overflows + 3), W, B
001074   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001076   010f     movlb	0xf                	BANKSEL	(_overflows + 2)
001078   5144     movf	0x44, 0, 0x1        	MOVF	(_overflows + 2), W, B
00107a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00107c   010f     movlb	0xf                	BANKSEL	(_overflows + 1)
00107e   5143     movf	0x43, 0, 0x1        	MOVF	(_overflows + 1), W, B
001080   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001082   010f     movlb	0xf                	BANKSEL	_overflows
001084   5142     movf	0x42, 0, 0x1        	MOVF	_overflows, W, B
001086   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001088   ecd4     call	0x29a8, 0           	CALL	___ulong2fs
00108a   f014
00108c   6e00     movwf	0, 0               	MOVWF	r0x00
00108e   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
001090   f001
001092   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
001094   f002
001096   cfe9     movff	0xfe9, 0x3         	MOVFF	FSR0L, r0x03
001098   f003
00109a   0e04     movlw	0x4                	MOVLW	0x04
00109c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00109e   0e45     movlw	0x45               	MOVLW	0x45
0010a0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0010a2   0eb2     movlw	0xb2               	MOVLW	0xb2
0010a4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0010a6   0ecf     movlw	0xcf               	MOVLW	0xcf
0010a8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0010aa   0e77     movlw	0x77               	MOVLW	0x77
0010ac   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0010ae   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0010b0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0010b2   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0010b4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0010b6   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0010b8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0010ba   5000     movf	0, 0, 0             	MOVF	r0x00, W
0010bc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0010be   ec10     call	0x1220, 0           	CALL	___fsadd
0010c0   f009
0010c2   6e00     movwf	0, 0               	MOVWF	r0x00
0010c4   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
0010c6   f001
0010c8   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
0010ca   f002
0010cc   cfe9     movff	0xfe9, 0x3         	MOVFF	FSR0L, r0x03
0010ce   f003
0010d0   0e08     movlw	0x8                	MOVLW	0x08
0010d2   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0010d4   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0010d6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0010d8   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0010da   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0010dc   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0010de   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0010e0   5000     movf	0, 0, 0             	MOVF	r0x00, W
0010e2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0010e4   ecab     call	0x2f56, 0           	CALL	___fs2ulong
0010e6   f017
0010e8   010f     movlb	0xf                	BANKSEL	_overflows
0010ea   6f42     movwf	0x42, 0x1          	MOVWF	_overflows, B
0010ec   cff3     movff	0xff3, 0xf43       	MOVFF	PRODL, (_overflows + 1)
0010ee   ff43
0010f0   cff4     movff	0xff4, 0xf44       	MOVFF	PRODH, (_overflows + 2)
0010f2   ff44
0010f4   cfe9     movff	0xfe9, 0xf45       	MOVFF	FSR0L, (_overflows + 3)
0010f6   ff45
0010f8   0e04     movlw	0x4                	MOVLW	0x04
0010fa   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	406; lena.c	break;
0010fc   d084     bra	0x1206               	BRA	_00302_DS_
                                           _00283_DS_:
0010fe   010f     movlb	0xf                	BANKSEL	(_overflows + 3)
                                           ;	.line	413; lena.c	overflows += F;
001100   5145     movf	0x45, 0, 0x1        	MOVF	(_overflows + 3), W, B
001102   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001104   010f     movlb	0xf                	BANKSEL	(_overflows + 2)
001106   5144     movf	0x44, 0, 0x1        	MOVF	(_overflows + 2), W, B
001108   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00110a   010f     movlb	0xf                	BANKSEL	(_overflows + 1)
00110c   5143     movf	0x43, 0, 0x1        	MOVF	(_overflows + 1), W, B
00110e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001110   010f     movlb	0xf                	BANKSEL	_overflows
001112   5142     movf	0x42, 0, 0x1        	MOVF	_overflows, W, B
001114   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001116   ecd4     call	0x29a8, 0           	CALL	___ulong2fs
001118   f014
00111a   6e00     movwf	0, 0               	MOVWF	r0x00
00111c   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
00111e   f001
001120   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
001122   f002
001124   cfe9     movff	0xfe9, 0x3         	MOVFF	FSR0L, r0x03
001126   f003
001128   0e04     movlw	0x4                	MOVLW	0x04
00112a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00112c   0e42     movlw	0x42               	MOVLW	0x42
00112e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001130   0ebe     movlw	0xbe               	MOVLW	0xbe
001132   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001134   0ebb     movlw	0xbb               	MOVLW	0xbb
001136   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001138   0e2a     movlw	0x2a               	MOVLW	0x2a
00113a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00113c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00113e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001140   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001142   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001144   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001146   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001148   5000     movf	0, 0, 0             	MOVF	r0x00, W
00114a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00114c   ec10     call	0x1220, 0           	CALL	___fsadd
00114e   f009
001150   6e00     movwf	0, 0               	MOVWF	r0x00
001152   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
001154   f001
001156   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
001158   f002
00115a   cfe9     movff	0xfe9, 0x3         	MOVFF	FSR0L, r0x03
00115c   f003
00115e   0e08     movlw	0x8                	MOVLW	0x08
001160   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
001162   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001164   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001166   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001168   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00116a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00116c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00116e   5000     movf	0, 0, 0             	MOVF	r0x00, W
001170   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001172   ecab     call	0x2f56, 0           	CALL	___fs2ulong
001174   f017
001176   010f     movlb	0xf                	BANKSEL	_overflows
001178   6f42     movwf	0x42, 0x1          	MOVWF	_overflows, B
00117a   cff3     movff	0xff3, 0xf43       	MOVFF	PRODL, (_overflows + 1)
00117c   ff43
00117e   cff4     movff	0xff4, 0xf44       	MOVFF	PRODH, (_overflows + 2)
001180   ff44
001182   cfe9     movff	0xfe9, 0xf45       	MOVFF	FSR0L, (_overflows + 3)
001184   ff45
001186   0e04     movlw	0x4                	MOVLW	0x04
001188   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	414; lena.c	break;
00118a   d03d     bra	0x1206               	BRA	_00302_DS_
                                           _00284_DS_:
                                           ;	.line	416; lena.c	whereami = SET_ALARM;
00118c   0e06     movlw	0x6                	MOVLW	0x06
00118e   010f     movlb	0xf                	BANKSEL	_whereami
001190   6f50     movwf	0x50, 0x1          	MOVWF	_whereami, B
                                           ;	.line	417; lena.c	break;
001192   d039     bra	0x1206               	BRA	_00302_DS_
                                           _00285_DS_:
                                           ;	.line	419; lena.c	alarm_set ^= 1;
001194   0e01     movlw	0x1                	MOVLW	0x01
001196   010f     movlb	0xf                	BANKSEL	_alarm_set
001198   1b4d     xorwf	0x4d, 0x1, 0x1     	XORWF	_alarm_set, F, B
                                           ;	.line	420; lena.c	break;
00119a   d035     bra	0x1206               	BRA	_00302_DS_
                                           _00286_DS_:
00119c   010f     movlb	0xf                	BANKSEL	_ahour
                                           ;	.line	422; lena.c	if (ahour == 23) {
00119e   5149     movf	0x49, 0, 0x1        	MOVF	_ahour, W, B
0011a0   0a17     xorlw	0x17               	XORLW	0x17
0011a2   e103     bnz	0x11aa               	BNZ	_00288_DS_
                                           _00328_DS_:
0011a4   010f     movlb	0xf                	BANKSEL	_ahour
                                           ;	.line	423; lena.c	ahour = 0;
0011a6   6b49     clrf	0x49, 0x1           	CLRF	_ahour, B
0011a8   d002     bra	0x11ae               	BRA	_00289_DS_
                                           _00288_DS_:
0011aa   010f     movlb	0xf                	BANKSEL	_ahour
                                           ;	.line	425; lena.c	ahour++;
0011ac   2b49     incf	0x49, 0x1, 0x1      	INCF	_ahour, F, B
                                           _00289_DS_:
                                           ;	.line	427; lena.c	ahour_o = ahour;
0011ae   cf49     movff	0xf49, 0xf4b       	MOVFF	_ahour, _ahour_o
0011b0   ff4b
                                           ;	.line	428; lena.c	break;
0011b2   d029     bra	0x1206               	BRA	_00302_DS_
                                           _00290_DS_:
0011b4   010f     movlb	0xf                	BANKSEL	_amin
                                           ;	.line	430; lena.c	if (amin == 59) {
0011b6   514a     movf	0x4a, 0, 0x1        	MOVF	_amin, W, B
0011b8   0a3b     xorlw	0x3b               	XORLW	0x3b
0011ba   e103     bnz	0x11c2               	BNZ	_00292_DS_
                                           _00330_DS_:
0011bc   010f     movlb	0xf                	BANKSEL	_amin
                                           ;	.line	431; lena.c	amin = 0;
0011be   6b4a     clrf	0x4a, 0x1           	CLRF	_amin, B
0011c0   d002     bra	0x11c6               	BRA	_00293_DS_
                                           _00292_DS_:
0011c2   010f     movlb	0xf                	BANKSEL	_amin
                                           ;	.line	433; lena.c	amin++;
0011c4   2b4a     incf	0x4a, 0x1, 0x1      	INCF	_amin, F, B
                                           _00293_DS_:
                                           ;	.line	435; lena.c	amin_o = amin;
0011c6   cf4a     movff	0xf4a, 0xf4c       	MOVFF	_amin, _amin_o
0011c8   ff4c
                                           ;	.line	436; lena.c	break;
0011ca   d01d     bra	0x1206               	BRA	_00302_DS_
                                           _00294_DS_:
                                           ;	.line	439; lena.c	break;
0011cc   d01c     bra	0x1206               	BRA	_00302_DS_
                                           _00295_DS_:
                                           ;	.line	442; lena.c	if (snooze < SNOOZE_MAX) {
0011ce   0e0c     movlw	0xc                	MOVLW	0x0c
0011d0   010f     movlb	0xf                	BANKSEL	_snooze
0011d2   5d4e     subwf	0x4e, 0, 0x1       	SUBWF	_snooze, W, B
0011d4   e218     bc	0x1206                	BC	_00302_DS_
                                           ;	.line	443; lena.c	inc_amin(SNOOZE_MINUTE); // modifie le réveil
0011d6   0e05     movlw	0x5                	MOVLW	0x05
0011d8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0011da   ec45     call	0x368a, 0           	CALL	_inc_amin
0011dc   f01b
0011de   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
0011e0   010f     movlb	0xf                	BANKSEL	_snooze
                                           ;	.line	444; lena.c	snooze++; // augmente le compteur de snooze
0011e2   2b4e     incf	0x4e, 0x1, 0x1      	INCF	_snooze, F, B
                                           ;	.line	445; lena.c	LATJbits.LATJ1 = 0; // switch LED 2 off
0011e4   9291     bcf	0x91, 0x1, 0         	BCF	_LATJbits, 1
                                           ;	.line	446; lena.c	LATJbits.LATJ2 = 0; // switch LED 3 off
0011e6   9491     bcf	0x91, 0x2, 0         	BCF	_LATJbits, 2
                                           ;	.line	447; lena.c	whereami = SNOOZE;
0011e8   0e0b     movlw	0xb                	MOVLW	0x0b
0011ea   010f     movlb	0xf                	BANKSEL	_whereami
0011ec   6f50     movwf	0x50, 0x1          	MOVWF	_whereami, B
                                           ;	.line	450; lena.c	break;
0011ee   d00b     bra	0x1206               	BRA	_00302_DS_
                                           _00298_DS_:
                                           ;	.line	453; lena.c	if (snooze < SNOOZE_MAX) {
0011f0   0e0c     movlw	0xc                	MOVLW	0x0c
0011f2   010f     movlb	0xf                	BANKSEL	_snooze
0011f4   5d4e     subwf	0x4e, 0, 0x1       	SUBWF	_snooze, W, B
0011f6   e207     bc	0x1206                	BC	_00302_DS_
                                           ;	.line	454; lena.c	inc_amin(SNOOZE_MINUTE); // modifie le réveil
0011f8   0e05     movlw	0x5                	MOVLW	0x05
0011fa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0011fc   ec45     call	0x368a, 0           	CALL	_inc_amin
0011fe   f01b
001200   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
001202   010f     movlb	0xf                	BANKSEL	_snooze
                                           ;	.line	455; lena.c	snooze++; // augmente le compteur de snooze
001204   2b4e     incf	0x4e, 0x1, 0x1      	INCF	_snooze, F, B
                                           _00302_DS_:
001206   010f     movlb	0xf                	BANKSEL	_button2
                                           ;	.line	462; lena.c	button2 = 0; // remet le flag du boutton 2 à 0
001208   6b53     clrf	0x53, 0x1           	CLRF	_button2, B
                                           _00308_DS_:
00120a   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00120c   f003
00120e   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
001210   f002
001212   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
001214   f001
001216   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
001218   f000
00121a   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00121c   ffd9
00121e   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_lena__alarm	code
                                           _alarm:
                                           ;	.line	304; lena.c	void alarm(void)
0037c4   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0037c6   ffe5
0037c8   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0037ca   ffd9
0037cc   010f     movlb	0xf                	BANKSEL	_thour
                                           ;	.line	307; lena.c	if ((thour == ahour) && (tmin == amin) && alarm_set) {
0037ce   5146     movf	0x46, 0, 0x1        	MOVF	_thour, W, B
0037d0   010f     movlb	0xf                	BANKSEL	_ahour
0037d2   1949     xorwf	0x49, 0, 0x1       	XORWF	_ahour, W, B
0037d4   e001     bz	0x37d8                	BZ	_00252_DS_
0037d6   d038     bra	0x3848               	BRA	_00240_DS_
                                           _00252_DS_:
0037d8   010f     movlb	0xf                	BANKSEL	_tmin
0037da   5147     movf	0x47, 0, 0x1        	MOVF	_tmin, W, B
0037dc   010f     movlb	0xf                	BANKSEL	_amin
0037de   194a     xorwf	0x4a, 0, 0x1       	XORWF	_amin, W, B
0037e0   e001     bz	0x37e4                	BZ	_00254_DS_
0037e2   d032     bra	0x3848               	BRA	_00240_DS_
                                           _00254_DS_:
0037e4   010f     movlb	0xf                	BANKSEL	_alarm_set
0037e6   514d     movf	0x4d, 0, 0x1        	MOVF	_alarm_set, W, B
0037e8   e02f     bz	0x3848                	BZ	_00240_DS_
                                           ;	.line	310; lena.c	if ((tsec < 31) && (stop_ringing == 0)) {
0037ea   0e1f     movlw	0x1f               	MOVLW	0x1f
0037ec   010f     movlb	0xf                	BANKSEL	_tsec
0037ee   5d48     subwf	0x48, 0, 0x1       	SUBWF	_tsec, W, B
0037f0   e20f     bc	0x3810                	BC	_00233_DS_
0037f2   010f     movlb	0xf                	BANKSEL	_stop_ringing
0037f4   514f     movf	0x4f, 0, 0x1        	MOVF	_stop_ringing, W, B
0037f6   e10c     bnz	0x3810               	BNZ	_00233_DS_
0037f8   010f     movlb	0xf                	BANKSEL	_whereami
                                           ;	.line	311; lena.c	if ((whereami == DISPLAY) || (whereami == SNOOZE)) {
0037fa   5150     movf	0x50, 0, 0x1        	MOVF	_whereami, W, B
0037fc   0a09     xorlw	0x9                	XORLW	0x09
0037fe   e004     bz	0x3808                	BZ	_00222_DS_
                                           _00257_DS_:
003800   010f     movlb	0xf                	BANKSEL	_whereami
003802   5150     movf	0x50, 0, 0x1        	MOVF	_whereami, W, B
003804   0a0b     xorlw	0xb                	XORLW	0x0b
003806   e120     bnz	0x3848               	BNZ	_00240_DS_
                                           _00222_DS_:
                                           ;	.line	312; lena.c	whereami = ALARM;
003808   0e0a     movlw	0xa                	MOVLW	0x0a
00380a   010f     movlb	0xf                	BANKSEL	_whereami
00380c   6f50     movwf	0x50, 0x1          	MOVWF	_whereami, B
00380e   d01c     bra	0x3848               	BRA	_00240_DS_
                                           _00233_DS_:
                                           ;	.line	315; lena.c	} else if (tsec > 30) {
003810   0e1f     movlw	0x1f               	MOVLW	0x1f
003812   010f     movlb	0xf                	BANKSEL	_tsec
003814   5d48     subwf	0x48, 0, 0x1       	SUBWF	_tsec, W, B
003816   e318     bnc	0x3848               	BNC	_00240_DS_
003818   010f     movlb	0xf                	BANKSEL	_stop_ringing
                                           ;	.line	316; lena.c	stop_ringing = 0; // remet à 0 si l'alarme a été éteinte à la main
00381a   6b4f     clrf	0x4f, 0x1           	CLRF	_stop_ringing, B
                                           ;	.line	317; lena.c	LATJbits.LATJ1 = 0; // switch LED 2 off
00381c   9291     bcf	0x91, 0x1, 0         	BCF	_LATJbits, 1
                                           ;	.line	318; lena.c	LATJbits.LATJ2 = 0; // switch LED 3 off
00381e   9491     bcf	0x91, 0x2, 0         	BCF	_LATJbits, 2
003820   010f     movlb	0xf                	BANKSEL	_snooze
                                           ;	.line	320; lena.c	if (snooze) {
003822   514e     movf	0x4e, 0, 0x1        	MOVF	_snooze, W, B
003824   e00a     bz	0x383a                	BZ	_00228_DS_
                                           ;	.line	321; lena.c	ahour = ahour_o; // remet le réveil
003826   cf4b     movff	0xf4b, 0xf49       	MOVFF	_ahour_o, _ahour
003828   ff49
                                           ;	.line	322; lena.c	amin = amin_o;
00382a   cf4c     movff	0xf4c, 0xf4a       	MOVFF	_amin_o, _amin
00382c   ff4a
00382e   010f     movlb	0xf                	BANKSEL	_snooze
                                           ;	.line	323; lena.c	snooze = 0;
003830   6b4e     clrf	0x4e, 0x1           	CLRF	_snooze, B
                                           ;	.line	324; lena.c	whereami = DISPLAY;
003832   0e09     movlw	0x9                	MOVLW	0x09
003834   010f     movlb	0xf                	BANKSEL	_whereami
003836   6f50     movwf	0x50, 0x1          	MOVWF	_whereami, B
003838   d007     bra	0x3848               	BRA	_00240_DS_
                                           _00228_DS_:
00383a   010f     movlb	0xf                	BANKSEL	_whereami
                                           ;	.line	325; lena.c	} else if (whereami == ALARM) { // si l'alarme sonnait toujours, on
00383c   5150     movf	0x50, 0, 0x1        	MOVF	_whereami, W, B
00383e   0a0a     xorlw	0xa                	XORLW	0x0a
003840   e103     bnz	0x3848               	BNZ	_00240_DS_
                                           ;	.line	326; lena.c	whereami = DISPLAY;         // revient à l'affichage de l'heure
003842   0e09     movlw	0x9                	MOVLW	0x09
003844   010f     movlb	0xf                	BANKSEL	_whereami
003846   6f50     movwf	0x50, 0x1          	MOVWF	_whereami, B
                                           _00240_DS_:
003848   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00384a   ffd9
00384c   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_lena__refresh_lcd	code
                                           _refresh_lcd:
                                           ;	.line	235; lena.c	void refresh_lcd(void)
000852   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000854   ffe5
000856   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000858   ffd9
00085a   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00085c   ffe5
00085e   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000860   ffe5
000862   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
000864   ffe5
000866   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
000868   ffe5
00086a   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00086c   ffe5
00086e   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
000870   ffe5
000872   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
000874   ffe5
000876   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
000878   ffe5
00087a   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
00087c   ffe5
00087e   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
000880   ffe5
000882   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
000884   ffe5
000886   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
000888   ffe5
00088a   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
00088c   ffe5
00088e   c00d     movff	0xd, 0xfe5         	MOVFF	r0x0d, POSTDEC1
000890   ffe5
000892   c00e     movff	0xe, 0xfe5         	MOVFF	r0x0e, POSTDEC1
000894   ffe5
                                           ;	.line	238; lena.c	switch (whereami) {
000896   0e01     movlw	0x1                	MOVLW	0x01
000898   010f     movlb	0xf                	BANKSEL	_whereami
00089a   5d50     subwf	0x50, 0, 0x1       	SUBWF	_whereami, W, B
00089c   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
00089e   efd6     goto	0xdac               	GOTO	_00205_DS_
0008a0   f006
0008a2   0e0c     movlw	0xc                	MOVLW	0x0c
0008a4   010f     movlb	0xf                	BANKSEL	_whereami
0008a6   5d50     subwf	0x50, 0, 0x1       	SUBWF	_whereami, W, B
0008a8   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0008aa   efd6     goto	0xdac               	GOTO	_00205_DS_
0008ac   f006
0008ae   010f     movlb	0xf                	BANKSEL	_whereami
0008b0   0550     decf	0x50, 0, 0x1        	DECF	_whereami, W, B
0008b2   6e00     movwf	0, 0               	MOVWF	r0x00
0008b4   c00f     movff	0xf, 0xfe5         	MOVFF	r0x0f, POSTDEC1
0008b6   ffe5
0008b8   c010     movff	0x10, 0xfe5        	MOVFF	r0x10, POSTDEC1
0008ba   ffe5
0008bc   6a10     clrf	0x10, 0             	CLRF	r0x10
0008be   3400     rlcf	0, 0, 0             	RLCF	r0x00, W
0008c0   3610     rlcf	0x10, 0x1, 0        	RLCF	r0x10, F
0008c2   34e8     rlcf	0xe8, 0, 0          	RLCF	WREG, W
0008c4   3610     rlcf	0x10, 0x1, 0        	RLCF	r0x10, F
0008c6   0bfc     andlw	0xfc               	ANDLW	0xfc
0008c8   6e0f     movwf	0xf, 0             	MOVWF	r0x0f
0008ca   0e00     movlw	0                  	MOVLW	UPPER(_00216_DS_)
0008cc   6efb     movwf	0xfb, 0            	MOVWF	PCLATU
0008ce   0e08     movlw	0x8                	MOVLW	HIGH(_00216_DS_)
0008d0   6efa     movwf	0xfa, 0            	MOVWF	PCLATH
0008d2   0eea     movlw	0xea               	MOVLW	LOW(_00216_DS_)
0008d4   260f     addwf	0xf, 0x1, 0        	ADDWF	r0x0f, F
0008d6   5010     movf	0x10, 0, 0          	MOVF	r0x10, W
0008d8   22fa     addwfc	0xfa, 0x1, 0      	ADDWFC	PCLATH, F
0008da   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0008dc   2afb     incf	0xfb, 0x1, 0        	INCF	PCLATU, F
0008de   500f     movf	0xf, 0, 0           	MOVF	r0x0f, W
0008e0   cfe4     movff	0xfe4, 0x10        	MOVFF	PREINC1, r0x10
0008e2   f010
0008e4   cfe4     movff	0xfe4, 0xf         	MOVFF	PREINC1, r0x0f
0008e6   f00f
0008e8   6ef9     movwf	0xf9, 0            	MOVWF	PCL
                                           _00216_DS_:
0008ea   ef8b     goto	0x916               	GOTO	_00185_DS_
0008ec   f004
0008ee   efa3     goto	0x946               	GOTO	_00186_DS_
0008f0   f004
0008f2   efd0     goto	0x9a0               	GOTO	_00187_DS_
0008f4   f004
0008f6   effc     goto	0x9f8               	GOTO	_00188_DS_
0008f8   f004
0008fa   ef28     goto	0xa50               	GOTO	_00189_DS_
0008fc   f005
0008fe   ef3f     goto	0xa7e               	GOTO	_00190_DS_
000900   f005
000902   ef70     goto	0xae0               	GOTO	_00194_DS_
000904   f005
000906   ef95     goto	0xb2a               	GOTO	_00195_DS_
000908   f005
00090a   efba     goto	0xb74               	GOTO	_00196_DS_
00090c   f005
00090e   ef23     goto	0xc46               	GOTO	_00200_DS_
000910   f006
000912   ef4f     goto	0xc9e               	GOTO	_00201_DS_
000914   f006
                                           _00185_DS_:
                                           ;	.line	240; lena.c	sprintf(display, "Do you want to  set the time ?  ");
000916   0e0f     movlw	0xf                	MOVLW	HIGH(_display)
000918   6e01     movwf	0x1, 0             	MOVWF	r0x01
00091a   0e21     movlw	0x21               	MOVLW	LOW(_display)
00091c   6e00     movwf	0, 0               	MOVWF	r0x00
00091e   0e80     movlw	0x80               	MOVLW	0x80
000920   6e02     movwf	0x2, 0             	MOVWF	r0x02
000922   0e00     movlw	0                  	MOVLW	UPPER(__str_0)
000924   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000926   0e1c     movlw	0x1c               	MOVLW	HIGH(__str_0)
000928   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00092a   0ed4     movlw	0xd4               	MOVLW	LOW(__str_0)
00092c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00092e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000930   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000932   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000934   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000936   5000     movf	0, 0, 0             	MOVF	r0x00, W
000938   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00093a   ec21     call	0x3042, 0           	CALL	_sprintf
00093c   f018
00093e   0e06     movlw	0x6                	MOVLW	0x06
000940   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	241; lena.c	break;
000942   efec     goto	0xdd8               	GOTO	_00206_DS_
000944   f006
                                           _00186_DS_:
                                           ;	.line	244; lena.c	thour, tmin, tsec);
000946   cf48     movff	0xf48, 0           	MOVFF	_tsec, r0x00
000948   f000
00094a   6a01     clrf	0x1, 0              	CLRF	r0x01
00094c   cf47     movff	0xf47, 0x2         	MOVFF	_tmin, r0x02
00094e   f002
000950   6a03     clrf	0x3, 0              	CLRF	r0x03
000952   cf46     movff	0xf46, 0x4         	MOVFF	_thour, r0x04
000954   f004
000956   6a05     clrf	0x5, 0              	CLRF	r0x05
                                           ;	.line	243; lena.c	sprintf(display, " [%02u]: %02u : %02u                  ",
000958   0e0f     movlw	0xf                	MOVLW	HIGH(_display)
00095a   6e07     movwf	0x7, 0             	MOVWF	r0x07
00095c   0e21     movlw	0x21               	MOVLW	LOW(_display)
00095e   6e06     movwf	0x6, 0             	MOVWF	r0x06
000960   0e80     movlw	0x80               	MOVLW	0x80
000962   6e08     movwf	0x8, 0             	MOVWF	r0x08
000964   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000966   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000968   5000     movf	0, 0, 0             	MOVF	r0x00, W
00096a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00096c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00096e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000970   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000972   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000974   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000976   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000978   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00097a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00097c   0e00     movlw	0                  	MOVLW	UPPER(__str_1)
00097e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000980   0e1c     movlw	0x1c               	MOVLW	HIGH(__str_1)
000982   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000984   0ef6     movlw	0xf6               	MOVLW	LOW(__str_1)
000986   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000988   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
00098a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00098c   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
00098e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000990   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000992   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000994   ec21     call	0x3042, 0           	CALL	_sprintf
000996   f018
000998   0e0c     movlw	0xc                	MOVLW	0x0c
00099a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	245; lena.c	break;
00099c   efec     goto	0xdd8               	GOTO	_00206_DS_
00099e   f006
                                           _00187_DS_:
                                           ;	.line	248; lena.c	thour, tmin, tsec);
0009a0   cf48     movff	0xf48, 0           	MOVFF	_tsec, r0x00
0009a2   f000
0009a4   6a01     clrf	0x1, 0              	CLRF	r0x01
0009a6   cf47     movff	0xf47, 0x2         	MOVFF	_tmin, r0x02
0009a8   f002
0009aa   6a03     clrf	0x3, 0              	CLRF	r0x03
0009ac   cf46     movff	0xf46, 0x4         	MOVFF	_thour, r0x04
0009ae   f004
0009b0   6a05     clrf	0x5, 0              	CLRF	r0x05
                                           ;	.line	247; lena.c	sprintf(display, "  %02u :[%02u]: %02u                  ",
0009b2   0e0f     movlw	0xf                	MOVLW	HIGH(_display)
0009b4   6e07     movwf	0x7, 0             	MOVWF	r0x07
0009b6   0e21     movlw	0x21               	MOVLW	LOW(_display)
0009b8   6e06     movwf	0x6, 0             	MOVWF	r0x06
0009ba   0e80     movlw	0x80               	MOVLW	0x80
0009bc   6e08     movwf	0x8, 0             	MOVWF	r0x08
0009be   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0009c0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0009c2   5000     movf	0, 0, 0             	MOVF	r0x00, W
0009c4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0009c6   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0009c8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0009ca   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0009cc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0009ce   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0009d0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0009d2   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0009d4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0009d6   0e00     movlw	0                  	MOVLW	UPPER(__str_2)
0009d8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0009da   0e1d     movlw	0x1d               	MOVLW	HIGH(__str_2)
0009dc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0009de   0e1e     movlw	0x1e               	MOVLW	LOW(__str_2)
0009e0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0009e2   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
0009e4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0009e6   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0009e8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0009ea   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0009ec   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0009ee   ec21     call	0x3042, 0           	CALL	_sprintf
0009f0   f018
0009f2   0e0c     movlw	0xc                	MOVLW	0x0c
0009f4   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	249; lena.c	break;
0009f6   d1f0     bra	0xdd8                	BRA	_00206_DS_
                                           _00188_DS_:
                                           ;	.line	252; lena.c	thour, tmin, tsec);
0009f8   cf48     movff	0xf48, 0           	MOVFF	_tsec, r0x00
0009fa   f000
0009fc   6a01     clrf	0x1, 0              	CLRF	r0x01
0009fe   cf47     movff	0xf47, 0x2         	MOVFF	_tmin, r0x02
000a00   f002
000a02   6a03     clrf	0x3, 0              	CLRF	r0x03
000a04   cf46     movff	0xf46, 0x4         	MOVFF	_thour, r0x04
000a06   f004
000a08   6a05     clrf	0x5, 0              	CLRF	r0x05
                                           ;	.line	251; lena.c	sprintf(display, "  %02u : %02u :[%02u]                 ",
000a0a   0e0f     movlw	0xf                	MOVLW	HIGH(_display)
000a0c   6e07     movwf	0x7, 0             	MOVWF	r0x07
000a0e   0e21     movlw	0x21               	MOVLW	LOW(_display)
000a10   6e06     movwf	0x6, 0             	MOVWF	r0x06
000a12   0e80     movlw	0x80               	MOVLW	0x80
000a14   6e08     movwf	0x8, 0             	MOVWF	r0x08
000a16   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000a18   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a1a   5000     movf	0, 0, 0             	MOVF	r0x00, W
000a1c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a1e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000a20   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a22   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000a24   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a26   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000a28   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a2a   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000a2c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a2e   0e00     movlw	0                  	MOVLW	UPPER(__str_3)
000a30   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a32   0e1d     movlw	0x1d               	MOVLW	HIGH(__str_3)
000a34   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a36   0e46     movlw	0x46               	MOVLW	LOW(__str_3)
000a38   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a3a   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
000a3c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a3e   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
000a40   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a42   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000a44   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a46   ec21     call	0x3042, 0           	CALL	_sprintf
000a48   f018
000a4a   0e0c     movlw	0xc                	MOVLW	0x0c
000a4c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	253; lena.c	break;
000a4e   d1c4     bra	0xdd8                	BRA	_00206_DS_
                                           _00189_DS_:
                                           ;	.line	255; lena.c	sprintf(display, "Do you want to  set the alarm ? ");
000a50   0e0f     movlw	0xf                	MOVLW	HIGH(_display)
000a52   6e01     movwf	0x1, 0             	MOVWF	r0x01
000a54   0e21     movlw	0x21               	MOVLW	LOW(_display)
000a56   6e00     movwf	0, 0               	MOVWF	r0x00
000a58   0e80     movlw	0x80               	MOVLW	0x80
000a5a   6e02     movwf	0x2, 0             	MOVWF	r0x02
000a5c   0e00     movlw	0                  	MOVLW	UPPER(__str_4)
000a5e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a60   0e1d     movlw	0x1d               	MOVLW	HIGH(__str_4)
000a62   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a64   0e6e     movlw	0x6e               	MOVLW	LOW(__str_4)
000a66   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a68   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000a6a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a6c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000a6e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a70   5000     movf	0, 0, 0             	MOVF	r0x00, W
000a72   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a74   ec21     call	0x3042, 0           	CALL	_sprintf
000a76   f018
000a78   0e06     movlw	0x6                	MOVLW	0x06
000a7a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	256; lena.c	break;
000a7c   d1ad     bra	0xdd8                	BRA	_00206_DS_
                                           _00190_DS_:
000a7e   010f     movlb	0xf                	BANKSEL	_alarm_set
                                           ;	.line	258; lena.c	if (alarm_set) {
000a80   514d     movf	0x4d, 0, 0x1        	MOVF	_alarm_set, W, B
000a82   e017     bz	0xab2                 	BZ	_00192_DS_
                                           ;	.line	259; lena.c	sprintf(display, "  Alarm [ON ]                   ");
000a84   0e0f     movlw	0xf                	MOVLW	HIGH(_display)
000a86   6e01     movwf	0x1, 0             	MOVWF	r0x01
000a88   0e21     movlw	0x21               	MOVLW	LOW(_display)
000a8a   6e00     movwf	0, 0               	MOVWF	r0x00
000a8c   0e80     movlw	0x80               	MOVLW	0x80
000a8e   6e02     movwf	0x2, 0             	MOVWF	r0x02
000a90   0e00     movlw	0                  	MOVLW	UPPER(__str_5)
000a92   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a94   0e1d     movlw	0x1d               	MOVLW	HIGH(__str_5)
000a96   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a98   0e90     movlw	0x90               	MOVLW	LOW(__str_5)
000a9a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a9c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000a9e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000aa0   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000aa2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000aa4   5000     movf	0, 0, 0             	MOVF	r0x00, W
000aa6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000aa8   ec21     call	0x3042, 0           	CALL	_sprintf
000aaa   f018
000aac   0e06     movlw	0x6                	MOVLW	0x06
000aae   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000ab0   d193     bra	0xdd8                	BRA	_00206_DS_
                                           _00192_DS_:
                                           ;	.line	261; lena.c	sprintf(display, "  Alarm [OFF]                   ");
000ab2   0e0f     movlw	0xf                	MOVLW	HIGH(_display)
000ab4   6e01     movwf	0x1, 0             	MOVWF	r0x01
000ab6   0e21     movlw	0x21               	MOVLW	LOW(_display)
000ab8   6e00     movwf	0, 0               	MOVWF	r0x00
000aba   0e80     movlw	0x80               	MOVLW	0x80
000abc   6e02     movwf	0x2, 0             	MOVWF	r0x02
000abe   0e00     movlw	0                  	MOVLW	UPPER(__str_6)
000ac0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ac2   0e1d     movlw	0x1d               	MOVLW	HIGH(__str_6)
000ac4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ac6   0eb2     movlw	0xb2               	MOVLW	LOW(__str_6)
000ac8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000aca   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000acc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ace   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000ad0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ad2   5000     movf	0, 0, 0             	MOVF	r0x00, W
000ad4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ad6   ec21     call	0x3042, 0           	CALL	_sprintf
000ad8   f018
000ada   0e06     movlw	0x6                	MOVLW	0x06
000adc   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	263; lena.c	break;
000ade   d17c     bra	0xdd8                	BRA	_00206_DS_
                                           _00194_DS_:
                                           ;	.line	266; lena.c	ahour, amin);
000ae0   cf4a     movff	0xf4a, 0           	MOVFF	_amin, r0x00
000ae2   f000
000ae4   6a01     clrf	0x1, 0              	CLRF	r0x01
000ae6   cf49     movff	0xf49, 0x2         	MOVFF	_ahour, r0x02
000ae8   f002
000aea   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           ;	.line	265; lena.c	sprintf(display, "    Alarm at        [%02u]: %02u    ",
000aec   0e0f     movlw	0xf                	MOVLW	HIGH(_display)
000aee   6e05     movwf	0x5, 0             	MOVWF	r0x05
000af0   0e21     movlw	0x21               	MOVLW	LOW(_display)
000af2   6e04     movwf	0x4, 0             	MOVWF	r0x04
000af4   0e80     movlw	0x80               	MOVLW	0x80
000af6   6e06     movwf	0x6, 0             	MOVWF	r0x06
000af8   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000afa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000afc   5000     movf	0, 0, 0             	MOVF	r0x00, W
000afe   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b00   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000b02   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b04   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000b06   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b08   0e00     movlw	0                  	MOVLW	UPPER(__str_7)
000b0a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b0c   0e1d     movlw	0x1d               	MOVLW	HIGH(__str_7)
000b0e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b10   0ed4     movlw	0xd4               	MOVLW	LOW(__str_7)
000b12   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b14   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000b16   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b18   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000b1a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b1c   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000b1e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b20   ec21     call	0x3042, 0           	CALL	_sprintf
000b22   f018
000b24   0e0a     movlw	0xa                	MOVLW	0x0a
000b26   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	267; lena.c	break;
000b28   d157     bra	0xdd8                	BRA	_00206_DS_
                                           _00195_DS_:
                                           ;	.line	270; lena.c	ahour, amin);
000b2a   cf4a     movff	0xf4a, 0           	MOVFF	_amin, r0x00
000b2c   f000
000b2e   6a01     clrf	0x1, 0              	CLRF	r0x01
000b30   cf49     movff	0xf49, 0x2         	MOVFF	_ahour, r0x02
000b32   f002
000b34   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           ;	.line	269; lena.c	sprintf(display, "    Alarm at         %02u :[%02u]   ",
000b36   0e0f     movlw	0xf                	MOVLW	HIGH(_display)
000b38   6e05     movwf	0x5, 0             	MOVWF	r0x05
000b3a   0e21     movlw	0x21               	MOVLW	LOW(_display)
000b3c   6e04     movwf	0x4, 0             	MOVWF	r0x04
000b3e   0e80     movlw	0x80               	MOVLW	0x80
000b40   6e06     movwf	0x6, 0             	MOVWF	r0x06
000b42   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000b44   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b46   5000     movf	0, 0, 0             	MOVF	r0x00, W
000b48   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b4a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000b4c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b4e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000b50   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b52   0e00     movlw	0                  	MOVLW	UPPER(__str_8)
000b54   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b56   0e1d     movlw	0x1d               	MOVLW	HIGH(__str_8)
000b58   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b5a   0efa     movlw	0xfa               	MOVLW	LOW(__str_8)
000b5c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b5e   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000b60   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b62   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000b64   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b66   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000b68   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b6a   ec21     call	0x3042, 0           	CALL	_sprintf
000b6c   f018
000b6e   0e0a     movlw	0xa                	MOVLW	0x0a
000b70   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	271; lena.c	break;
000b72   d132     bra	0xdd8                	BRA	_00206_DS_
                                           _00196_DS_:
000b74   010f     movlb	0xf                	BANKSEL	_alarm_set
                                           ;	.line	273; lena.c	if (alarm_set) {
000b76   514d     movf	0x4d, 0, 0x1        	MOVF	_alarm_set, W, B
000b78   e03a     bz	0xbee                 	BZ	_00198_DS_
                                           ;	.line	275; lena.c	thour, tmin, tsec, ahour, amin);
000b7a   cf4a     movff	0xf4a, 0           	MOVFF	_amin, r0x00
000b7c   f000
000b7e   6a01     clrf	0x1, 0              	CLRF	r0x01
000b80   cf49     movff	0xf49, 0x2         	MOVFF	_ahour, r0x02
000b82   f002
000b84   6a03     clrf	0x3, 0              	CLRF	r0x03
000b86   cf48     movff	0xf48, 0x4         	MOVFF	_tsec, r0x04
000b88   f004
000b8a   6a05     clrf	0x5, 0              	CLRF	r0x05
000b8c   cf47     movff	0xf47, 0x6         	MOVFF	_tmin, r0x06
000b8e   f006
000b90   6a07     clrf	0x7, 0              	CLRF	r0x07
000b92   cf46     movff	0xf46, 0x8         	MOVFF	_thour, r0x08
000b94   f008
000b96   6a09     clrf	0x9, 0              	CLRF	r0x09
                                           ;	.line	274; lena.c	sprintf(display, "    %02u:%02u:%02u    Alarm ON  %02u:%02u ",
000b98   0e0f     movlw	0xf                	MOVLW	HIGH(_display)
000b9a   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
000b9c   0e21     movlw	0x21               	MOVLW	LOW(_display)
000b9e   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
000ba0   0e80     movlw	0x80               	MOVLW	0x80
000ba2   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
000ba4   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000ba6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ba8   5000     movf	0, 0, 0             	MOVF	r0x00, W
000baa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000bac   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000bae   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000bb0   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000bb2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000bb4   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000bb6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000bb8   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000bba   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000bbc   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
000bbe   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000bc0   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000bc2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000bc4   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
000bc6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000bc8   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
000bca   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000bcc   0e00     movlw	0                  	MOVLW	UPPER(__str_9)
000bce   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000bd0   0e1e     movlw	0x1e               	MOVLW	HIGH(__str_9)
000bd2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000bd4   0e20     movlw	0x20               	MOVLW	LOW(__str_9)
000bd6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000bd8   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
000bda   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000bdc   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
000bde   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000be0   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
000be2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000be4   ec21     call	0x3042, 0           	CALL	_sprintf
000be6   f018
000be8   0e10     movlw	0x10               	MOVLW	0x10
000bea   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000bec   d0f5     bra	0xdd8                	BRA	_00206_DS_
                                           _00198_DS_:
                                           ;	.line	278; lena.c	thour, tmin, tsec);
000bee   cf48     movff	0xf48, 0           	MOVFF	_tsec, r0x00
000bf0   f000
000bf2   6a01     clrf	0x1, 0              	CLRF	r0x01
000bf4   cf47     movff	0xf47, 0x2         	MOVFF	_tmin, r0x02
000bf6   f002
000bf8   6a03     clrf	0x3, 0              	CLRF	r0x03
000bfa   cf46     movff	0xf46, 0x4         	MOVFF	_thour, r0x04
000bfc   f004
000bfe   6a05     clrf	0x5, 0              	CLRF	r0x05
                                           ;	.line	277; lena.c	sprintf(display, "    %02u:%02u:%02u       Alarm  OFF   ",
000c00   0e0f     movlw	0xf                	MOVLW	HIGH(_display)
000c02   6e07     movwf	0x7, 0             	MOVWF	r0x07
000c04   0e21     movlw	0x21               	MOVLW	LOW(_display)
000c06   6e06     movwf	0x6, 0             	MOVWF	r0x06
000c08   0e80     movlw	0x80               	MOVLW	0x80
000c0a   6e08     movwf	0x8, 0             	MOVWF	r0x08
000c0c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000c0e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c10   5000     movf	0, 0, 0             	MOVF	r0x00, W
000c12   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c14   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000c16   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c18   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000c1a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c1c   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000c1e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c20   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000c22   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c24   0e00     movlw	0                  	MOVLW	UPPER(__str_10)
000c26   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c28   0e1e     movlw	0x1e               	MOVLW	HIGH(__str_10)
000c2a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c2c   0e4c     movlw	0x4c               	MOVLW	LOW(__str_10)
000c2e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c30   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
000c32   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c34   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
000c36   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c38   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000c3a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c3c   ec21     call	0x3042, 0           	CALL	_sprintf
000c3e   f018
000c40   0e0c     movlw	0xc                	MOVLW	0x0c
000c42   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	280; lena.c	break;
000c44   d0c9     bra	0xdd8                	BRA	_00206_DS_
                                           _00200_DS_:
                                           ;	.line	283; lena.c	thour, tmin, tsec); // ***blink***
000c46   cf48     movff	0xf48, 0           	MOVFF	_tsec, r0x00
000c48   f000
000c4a   6a01     clrf	0x1, 0              	CLRF	r0x01
000c4c   cf47     movff	0xf47, 0x2         	MOVFF	_tmin, r0x02
000c4e   f002
000c50   6a03     clrf	0x3, 0              	CLRF	r0x03
000c52   cf46     movff	0xf46, 0x4         	MOVFF	_thour, r0x04
000c54   f004
000c56   6a05     clrf	0x5, 0              	CLRF	r0x05
                                           ;	.line	282; lena.c	sprintf(display, "    %02u:%02u:%02u      I am ringing! ",
000c58   0e0f     movlw	0xf                	MOVLW	HIGH(_display)
000c5a   6e07     movwf	0x7, 0             	MOVWF	r0x07
000c5c   0e21     movlw	0x21               	MOVLW	LOW(_display)
000c5e   6e06     movwf	0x6, 0             	MOVWF	r0x06
000c60   0e80     movlw	0x80               	MOVLW	0x80
000c62   6e08     movwf	0x8, 0             	MOVWF	r0x08
000c64   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000c66   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c68   5000     movf	0, 0, 0             	MOVF	r0x00, W
000c6a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c6c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000c6e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c70   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000c72   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c74   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000c76   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c78   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000c7a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c7c   0e00     movlw	0                  	MOVLW	UPPER(__str_11)
000c7e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c80   0e1e     movlw	0x1e               	MOVLW	HIGH(__str_11)
000c82   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c84   0e74     movlw	0x74               	MOVLW	LOW(__str_11)
000c86   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c88   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
000c8a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c8c   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
000c8e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c90   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000c92   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c94   ec21     call	0x3042, 0           	CALL	_sprintf
000c96   f018
000c98   0e0c     movlw	0xc                	MOVLW	0x0c
000c9a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	284; lena.c	break;
000c9c   d09d     bra	0xdd8                	BRA	_00206_DS_
                                           _00201_DS_:
                                           ;	.line	286; lena.c	if (snooze < 10) {
000c9e   0e0a     movlw	0xa                	MOVLW	0x0a
000ca0   010f     movlb	0xf                	BANKSEL	_snooze
000ca2   5d4e     subwf	0x4e, 0, 0x1       	SUBWF	_snooze, W, B
000ca4   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000ca6   d041     bra	0xd2a                	BRA	_00203_DS_
                                           ;	.line	288; lena.c	thour, tmin, tsec, snooze, ahour_o, amin_o);
000ca8   cf4c     movff	0xf4c, 0           	MOVFF	_amin_o, r0x00
000caa   f000
000cac   6a01     clrf	0x1, 0              	CLRF	r0x01
000cae   cf4b     movff	0xf4b, 0x2         	MOVFF	_ahour_o, r0x02
000cb0   f002
000cb2   6a03     clrf	0x3, 0              	CLRF	r0x03
000cb4   cf4e     movff	0xf4e, 0x4         	MOVFF	_snooze, r0x04
000cb6   f004
000cb8   6a05     clrf	0x5, 0              	CLRF	r0x05
000cba   cf48     movff	0xf48, 0x6         	MOVFF	_tsec, r0x06
000cbc   f006
000cbe   6a07     clrf	0x7, 0              	CLRF	r0x07
000cc0   cf47     movff	0xf47, 0x8         	MOVFF	_tmin, r0x08
000cc2   f008
000cc4   6a09     clrf	0x9, 0              	CLRF	r0x09
000cc6   cf46     movff	0xf46, 0xa         	MOVFF	_thour, r0x0a
000cc8   f00a
000cca   6a0b     clrf	0xb, 0              	CLRF	r0x0b
                                           ;	.line	287; lena.c	sprintf(display, "    %02u:%02u:%02u    Snooze %u  %02u:%02u ",
000ccc   0e0f     movlw	0xf                	MOVLW	HIGH(_display)
000cce   6e0d     movwf	0xd, 0             	MOVWF	r0x0d
000cd0   0e21     movlw	0x21               	MOVLW	LOW(_display)
000cd2   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
000cd4   0e80     movlw	0x80               	MOVLW	0x80
000cd6   6e0e     movwf	0xe, 0             	MOVWF	r0x0e
000cd8   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000cda   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000cdc   5000     movf	0, 0, 0             	MOVF	r0x00, W
000cde   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ce0   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000ce2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ce4   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000ce6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ce8   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000cea   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000cec   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000cee   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000cf0   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
000cf2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000cf4   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000cf6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000cf8   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
000cfa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000cfc   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
000cfe   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d00   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
000d02   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d04   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
000d06   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d08   0e00     movlw	0                  	MOVLW	UPPER(__str_12)
000d0a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d0c   0e1e     movlw	0x1e               	MOVLW	HIGH(__str_12)
000d0e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d10   0e9c     movlw	0x9c               	MOVLW	LOW(__str_12)
000d12   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d14   500e     movf	0xe, 0, 0           	MOVF	r0x0e, W
000d16   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d18   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
000d1a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d1c   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
000d1e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d20   ec21     call	0x3042, 0           	CALL	_sprintf
000d22   f018
000d24   0e12     movlw	0x12               	MOVLW	0x12
000d26   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000d28   d057     bra	0xdd8                	BRA	_00206_DS_
                                           _00203_DS_:
                                           ;	.line	291; lena.c	thour, tmin, tsec, snooze, ahour_o, amin_o);
000d2a   cf4c     movff	0xf4c, 0           	MOVFF	_amin_o, r0x00
000d2c   f000
000d2e   6a01     clrf	0x1, 0              	CLRF	r0x01
000d30   cf4b     movff	0xf4b, 0x2         	MOVFF	_ahour_o, r0x02
000d32   f002
000d34   6a03     clrf	0x3, 0              	CLRF	r0x03
000d36   cf4e     movff	0xf4e, 0x4         	MOVFF	_snooze, r0x04
000d38   f004
000d3a   6a05     clrf	0x5, 0              	CLRF	r0x05
000d3c   cf48     movff	0xf48, 0x6         	MOVFF	_tsec, r0x06
000d3e   f006
000d40   6a07     clrf	0x7, 0              	CLRF	r0x07
000d42   cf47     movff	0xf47, 0x8         	MOVFF	_tmin, r0x08
000d44   f008
000d46   6a09     clrf	0x9, 0              	CLRF	r0x09
000d48   cf46     movff	0xf46, 0xa         	MOVFF	_thour, r0x0a
000d4a   f00a
000d4c   6a0b     clrf	0xb, 0              	CLRF	r0x0b
                                           ;	.line	290; lena.c	sprintf(display, "    %02u:%02u:%02u    Snooze %u %02u:%02u ",
000d4e   0e0f     movlw	0xf                	MOVLW	HIGH(_display)
000d50   6e0d     movwf	0xd, 0             	MOVWF	r0x0d
000d52   0e21     movlw	0x21               	MOVLW	LOW(_display)
000d54   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
000d56   0e80     movlw	0x80               	MOVLW	0x80
000d58   6e0e     movwf	0xe, 0             	MOVWF	r0x0e
000d5a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000d5c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d5e   5000     movf	0, 0, 0             	MOVF	r0x00, W
000d60   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d62   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000d64   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d66   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000d68   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d6a   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000d6c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d6e   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000d70   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d72   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
000d74   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d76   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000d78   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d7a   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
000d7c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d7e   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
000d80   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d82   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
000d84   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d86   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
000d88   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d8a   0e00     movlw	0                  	MOVLW	UPPER(__str_13)
000d8c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d8e   0e1e     movlw	0x1e               	MOVLW	HIGH(__str_13)
000d90   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d92   0ec8     movlw	0xc8               	MOVLW	LOW(__str_13)
000d94   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d96   500e     movf	0xe, 0, 0           	MOVF	r0x0e, W
000d98   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d9a   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
000d9c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d9e   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
000da0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000da2   ec21     call	0x3042, 0           	CALL	_sprintf
000da4   f018
000da6   0e12     movlw	0x12               	MOVLW	0x12
000da8   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	294; lena.c	break;
000daa   d016     bra	0xdd8                	BRA	_00206_DS_
                                           _00205_DS_:
                                           ;	.line	296; lena.c	sprintf(display, "**** ERROR ********* ERROR *****");
000dac   0e0f     movlw	0xf                	MOVLW	HIGH(_display)
000dae   6e01     movwf	0x1, 0             	MOVWF	r0x01
000db0   0e21     movlw	0x21               	MOVLW	LOW(_display)
000db2   6e00     movwf	0, 0               	MOVWF	r0x00
000db4   0e80     movlw	0x80               	MOVLW	0x80
000db6   6e02     movwf	0x2, 0             	MOVWF	r0x02
000db8   0e00     movlw	0                  	MOVLW	UPPER(__str_14)
000dba   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000dbc   0e1e     movlw	0x1e               	MOVLW	HIGH(__str_14)
000dbe   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000dc0   0ef4     movlw	0xf4               	MOVLW	LOW(__str_14)
000dc2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000dc4   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000dc6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000dc8   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000dca   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000dcc   5000     movf	0, 0, 0             	MOVF	r0x00, W
000dce   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000dd0   ec21     call	0x3042, 0           	CALL	_sprintf
000dd2   f018
000dd4   0e06     movlw	0x6                	MOVLW	0x06
000dd6   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00206_DS_:
                                           ;	.line	299; lena.c	DisplayString(0, display);
000dd8   0e0f     movlw	0xf                	MOVLW	HIGH(_display)
000dda   6e01     movwf	0x1, 0             	MOVWF	r0x01
000ddc   0e21     movlw	0x21               	MOVLW	LOW(_display)
000dde   6e00     movwf	0, 0               	MOVWF	r0x00
000de0   0e80     movlw	0x80               	MOVLW	0x80
000de2   6e02     movwf	0x2, 0             	MOVWF	r0x02
000de4   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000de6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000de8   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000dea   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000dec   5000     movf	0, 0, 0             	MOVF	r0x00, W
000dee   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000df0   0e00     movlw	0                  	MOVLW	0x00
000df2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000df4   ec08     call	0x3210, 0           	CALL	_DisplayString
000df6   f019
000df8   0e04     movlw	0x4                	MOVLW	0x04
000dfa   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000dfc   cfe4     movff	0xfe4, 0xe         	MOVFF	PREINC1, r0x0e
000dfe   f00e
000e00   cfe4     movff	0xfe4, 0xd         	MOVFF	PREINC1, r0x0d
000e02   f00d
000e04   cfe4     movff	0xfe4, 0xc         	MOVFF	PREINC1, r0x0c
000e06   f00c
000e08   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
000e0a   f00b
000e0c   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
000e0e   f00a
000e10   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
000e12   f009
000e14   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
000e16   f008
000e18   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
000e1a   f007
000e1c   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
000e1e   f006
000e20   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
000e22   f005
000e24   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
000e26   f004
000e28   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
000e2a   f003
000e2c   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
000e2e   f002
000e30   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
000e32   f001
000e34   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000e36   f000
000e38   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000e3a   ffd9
000e3c   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_lena__time	code
                                           _time:
                                           ;	.line	194; lena.c	void time(void)
0015b0   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0015b2   ffe5
0015b4   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0015b6   ffd9
0015b8   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0015ba   ffe5
0015bc   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0015be   ffe5
0015c0   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0015c2   ffe5
0015c4   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0015c6   ffe5
0015c8   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0015ca   ffe5
0015cc   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0015ce   ffe5
0015d0   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0015d2   ffe5
0015d4   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
0015d6   ffe5
0015d8   010f     movlb	0xf                	BANKSEL	(_overflows + 3)
                                           ;	.line	197; lena.c	sec = overflows/F;
0015da   5145     movf	0x45, 0, 0x1        	MOVF	(_overflows + 3), W, B
0015dc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0015de   010f     movlb	0xf                	BANKSEL	(_overflows + 2)
0015e0   5144     movf	0x44, 0, 0x1        	MOVF	(_overflows + 2), W, B
0015e2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0015e4   010f     movlb	0xf                	BANKSEL	(_overflows + 1)
0015e6   5143     movf	0x43, 0, 0x1        	MOVF	(_overflows + 1), W, B
0015e8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0015ea   010f     movlb	0xf                	BANKSEL	_overflows
0015ec   5142     movf	0x42, 0, 0x1        	MOVF	_overflows, W, B
0015ee   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0015f0   ecd4     call	0x29a8, 0           	CALL	___ulong2fs
0015f2   f014
0015f4   6e00     movwf	0, 0               	MOVWF	r0x00
0015f6   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
0015f8   f001
0015fa   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
0015fc   f002
0015fe   cfe9     movff	0xfe9, 0x3         	MOVFF	FSR0L, r0x03
001600   f003
001602   0e04     movlw	0x4                	MOVLW	0x04
001604   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
001606   0e42     movlw	0x42               	MOVLW	0x42
001608   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00160a   0ebe     movlw	0xbe               	MOVLW	0xbe
00160c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00160e   0ebb     movlw	0xbb               	MOVLW	0xbb
001610   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001612   0e2a     movlw	0x2a               	MOVLW	0x2a
001614   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001616   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001618   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00161a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00161c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00161e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001620   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001622   5000     movf	0, 0, 0             	MOVF	r0x00, W
001624   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001626   ec97     call	0x192e, 0           	CALL	___fsdiv
001628   f00c
00162a   6e00     movwf	0, 0               	MOVWF	r0x00
00162c   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
00162e   f001
001630   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
001632   f002
001634   cfe9     movff	0xfe9, 0x3         	MOVFF	FSR0L, r0x03
001636   f003
001638   0e08     movlw	0x8                	MOVLW	0x08
00163a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00163c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00163e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001640   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001642   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001644   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001646   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001648   5000     movf	0, 0, 0             	MOVF	r0x00, W
00164a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00164c   ecab     call	0x2f56, 0           	CALL	___fs2ulong
00164e   f017
001650   010f     movlb	0xf                	BANKSEL	_sec
001652   6f55     movwf	0x55, 0x1          	MOVWF	_sec, B
001654   cff3     movff	0xff3, 0xf56       	MOVFF	PRODL, (_sec + 1)
001656   ff56
001658   cff4     movff	0xff4, 0xf57       	MOVFF	PRODH, (_sec + 2)
00165a   ff57
00165c   cfe9     movff	0xfe9, 0xf58       	MOVFF	FSR0L, (_sec + 3)
00165e   ff58
001660   0e04     movlw	0x4                	MOVLW	0x04
001662   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
001664   010f     movlb	0xf                	BANKSEL	(_overflows + 3)
                                           ;	.line	198; lena.c	decisec = ((10*overflows)/F);
001666   5145     movf	0x45, 0, 0x1        	MOVF	(_overflows + 3), W, B
001668   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00166a   010f     movlb	0xf                	BANKSEL	(_overflows + 2)
00166c   5144     movf	0x44, 0, 0x1        	MOVF	(_overflows + 2), W, B
00166e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001670   010f     movlb	0xf                	BANKSEL	(_overflows + 1)
001672   5143     movf	0x43, 0, 0x1        	MOVF	(_overflows + 1), W, B
001674   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001676   010f     movlb	0xf                	BANKSEL	_overflows
001678   5142     movf	0x42, 0, 0x1        	MOVF	_overflows, W, B
00167a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00167c   0e00     movlw	0                  	MOVLW	0x00
00167e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001680   0e00     movlw	0                  	MOVLW	0x00
001682   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001684   0e00     movlw	0                  	MOVLW	0x00
001686   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001688   0e0a     movlw	0xa                	MOVLW	0x0a
00168a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00168c   ecee     call	0x23dc, 0           	CALL	__mullong
00168e   f011
001690   6e00     movwf	0, 0               	MOVWF	r0x00
001692   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
001694   f001
001696   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
001698   f002
00169a   cfe9     movff	0xfe9, 0x3         	MOVFF	FSR0L, r0x03
00169c   f003
00169e   0e08     movlw	0x8                	MOVLW	0x08
0016a0   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0016a2   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0016a4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0016a6   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0016a8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0016aa   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0016ac   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0016ae   5000     movf	0, 0, 0             	MOVF	r0x00, W
0016b0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0016b2   ecd4     call	0x29a8, 0           	CALL	___ulong2fs
0016b4   f014
0016b6   6e00     movwf	0, 0               	MOVWF	r0x00
0016b8   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
0016ba   f001
0016bc   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
0016be   f002
0016c0   cfe9     movff	0xfe9, 0x3         	MOVFF	FSR0L, r0x03
0016c2   f003
0016c4   0e04     movlw	0x4                	MOVLW	0x04
0016c6   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0016c8   0e42     movlw	0x42               	MOVLW	0x42
0016ca   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0016cc   0ebe     movlw	0xbe               	MOVLW	0xbe
0016ce   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0016d0   0ebb     movlw	0xbb               	MOVLW	0xbb
0016d2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0016d4   0e2a     movlw	0x2a               	MOVLW	0x2a
0016d6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0016d8   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0016da   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0016dc   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0016de   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0016e0   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0016e2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0016e4   5000     movf	0, 0, 0             	MOVF	r0x00, W
0016e6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0016e8   ec97     call	0x192e, 0           	CALL	___fsdiv
0016ea   f00c
0016ec   6e00     movwf	0, 0               	MOVWF	r0x00
0016ee   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
0016f0   f001
0016f2   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
0016f4   f002
0016f6   cfe9     movff	0xfe9, 0x3         	MOVFF	FSR0L, r0x03
0016f8   f003
0016fa   0e08     movlw	0x8                	MOVLW	0x08
0016fc   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0016fe   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001700   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001702   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001704   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001706   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001708   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00170a   5000     movf	0, 0, 0             	MOVF	r0x00, W
00170c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00170e   ecab     call	0x2f56, 0           	CALL	___fs2ulong
001710   f017
001712   010f     movlb	0xf                	BANKSEL	_decisec
001714   6f59     movwf	0x59, 0x1          	MOVWF	_decisec, B
001716   cff3     movff	0xff3, 0xf5a       	MOVFF	PRODL, (_decisec + 1)
001718   ff5a
00171a   cff4     movff	0xff4, 0xf5b       	MOVFF	PRODH, (_decisec + 2)
00171c   ff5b
00171e   cfe9     movff	0xfe9, 0xf5c       	MOVFF	FSR0L, (_decisec + 3)
001720   ff5c
001722   0e04     movlw	0x4                	MOVLW	0x04
001724   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	199; lena.c	ds = decisec%10;
001726   0e00     movlw	0                  	MOVLW	0x00
001728   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00172a   0e00     movlw	0                  	MOVLW	0x00
00172c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00172e   0e00     movlw	0                  	MOVLW	0x00
001730   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001732   0e0a     movlw	0xa                	MOVLW	0x0a
001734   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001736   010f     movlb	0xf                	BANKSEL	(_decisec + 3)
001738   515c     movf	0x5c, 0, 0x1        	MOVF	(_decisec + 3), W, B
00173a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00173c   010f     movlb	0xf                	BANKSEL	(_decisec + 2)
00173e   515b     movf	0x5b, 0, 0x1        	MOVF	(_decisec + 2), W, B
001740   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001742   010f     movlb	0xf                	BANKSEL	(_decisec + 1)
001744   515a     movf	0x5a, 0, 0x1        	MOVF	(_decisec + 1), W, B
001746   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001748   010f     movlb	0xf                	BANKSEL	_decisec
00174a   5159     movf	0x59, 0, 0x1        	MOVF	_decisec, W, B
00174c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00174e   ec92     call	0x2b24, 0           	CALL	__modulong
001750   f015
001752   6e00     movwf	0, 0               	MOVWF	r0x00
001754   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
001756   f001
001758   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
00175a   f002
00175c   cfe9     movff	0xfe9, 0x3         	MOVFF	FSR0L, r0x03
00175e   f003
001760   0e08     movlw	0x8                	MOVLW	0x08
001762   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
001764   5000     movf	0, 0, 0             	MOVF	r0x00, W
001766   010e     movlb	0xe                	BANKSEL	_ds
001768   6f59     movwf	0x59, 0x1          	MOVWF	_ds, B
                                           ;	.line	200; lena.c	h = (sec/3600)%24;
00176a   0e00     movlw	0                  	MOVLW	0x00
00176c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00176e   0e00     movlw	0                  	MOVLW	0x00
001770   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001772   0e0e     movlw	0xe                	MOVLW	0x0e
001774   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001776   0e10     movlw	0x10               	MOVLW	0x10
001778   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00177a   010f     movlb	0xf                	BANKSEL	(_sec + 3)
00177c   5158     movf	0x58, 0, 0x1        	MOVF	(_sec + 3), W, B
00177e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001780   010f     movlb	0xf                	BANKSEL	(_sec + 2)
001782   5157     movf	0x57, 0, 0x1        	MOVF	(_sec + 2), W, B
001784   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001786   010f     movlb	0xf                	BANKSEL	(_sec + 1)
001788   5156     movf	0x56, 0, 0x1        	MOVF	(_sec + 1), W, B
00178a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00178c   010f     movlb	0xf                	BANKSEL	_sec
00178e   5155     movf	0x55, 0, 0x1        	MOVF	_sec, W, B
001790   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001792   ec24     call	0x2c48, 0           	CALL	__divulong
001794   f016
001796   6e00     movwf	0, 0               	MOVWF	r0x00
001798   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
00179a   f001
00179c   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
00179e   f002
0017a0   cfe9     movff	0xfe9, 0x3         	MOVFF	FSR0L, r0x03
0017a2   f003
0017a4   0e08     movlw	0x8                	MOVLW	0x08
0017a6   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0017a8   0e00     movlw	0                  	MOVLW	0x00
0017aa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0017ac   0e00     movlw	0                  	MOVLW	0x00
0017ae   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0017b0   0e00     movlw	0                  	MOVLW	0x00
0017b2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0017b4   0e18     movlw	0x18               	MOVLW	0x18
0017b6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0017b8   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0017ba   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0017bc   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0017be   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0017c0   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0017c2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0017c4   5000     movf	0, 0, 0             	MOVF	r0x00, W
0017c6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0017c8   ec92     call	0x2b24, 0           	CALL	__modulong
0017ca   f015
0017cc   6e04     movwf	0x4, 0             	MOVWF	r0x04
0017ce   cff3     movff	0xff3, 0x5         	MOVFF	PRODL, r0x05
0017d0   f005
0017d2   cff4     movff	0xff4, 0x6         	MOVFF	PRODH, r0x06
0017d4   f006
0017d6   cfe9     movff	0xfe9, 0x7         	MOVFF	FSR0L, r0x07
0017d8   f007
0017da   0e08     movlw	0x8                	MOVLW	0x08
0017dc   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0017de   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0017e0   010e     movlb	0xe                	BANKSEL	_h
0017e2   6f5a     movwf	0x5a, 0x1          	MOVWF	_h, B
                                           ;	.line	201; lena.c	m = (sec-(sec/3600)*3600)/60;
0017e4   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0017e6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0017e8   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0017ea   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0017ec   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0017ee   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0017f0   5000     movf	0, 0, 0             	MOVF	r0x00, W
0017f2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0017f4   0e00     movlw	0                  	MOVLW	0x00
0017f6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0017f8   0e00     movlw	0                  	MOVLW	0x00
0017fa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0017fc   0e0e     movlw	0xe                	MOVLW	0x0e
0017fe   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001800   0e10     movlw	0x10               	MOVLW	0x10
001802   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001804   ecee     call	0x23dc, 0           	CALL	__mullong
001806   f011
001808   6e00     movwf	0, 0               	MOVWF	r0x00
00180a   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
00180c   f001
00180e   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
001810   f002
001812   cfe9     movff	0xfe9, 0x3         	MOVFF	FSR0L, r0x03
001814   f003
001816   0e08     movlw	0x8                	MOVLW	0x08
001818   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00181a   5000     movf	0, 0, 0             	MOVF	r0x00, W
00181c   010f     movlb	0xf                	BANKSEL	_sec
00181e   5d55     subwf	0x55, 0, 0x1       	SUBWF	_sec, W, B
001820   6e00     movwf	0, 0               	MOVWF	r0x00
001822   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001824   010f     movlb	0xf                	BANKSEL	(_sec + 1)
001826   5956     subwfb	0x56, 0, 0x1      	SUBWFB	(_sec + 1), W, B
001828   6e01     movwf	0x1, 0             	MOVWF	r0x01
00182a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00182c   010f     movlb	0xf                	BANKSEL	(_sec + 2)
00182e   5957     subwfb	0x57, 0, 0x1      	SUBWFB	(_sec + 2), W, B
001830   6e02     movwf	0x2, 0             	MOVWF	r0x02
001832   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001834   010f     movlb	0xf                	BANKSEL	(_sec + 3)
001836   5958     subwfb	0x58, 0, 0x1      	SUBWFB	(_sec + 3), W, B
001838   6e03     movwf	0x3, 0             	MOVWF	r0x03
00183a   0e00     movlw	0                  	MOVLW	0x00
00183c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00183e   0e00     movlw	0                  	MOVLW	0x00
001840   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001842   0e00     movlw	0                  	MOVLW	0x00
001844   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001846   0e3c     movlw	0x3c               	MOVLW	0x3c
001848   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00184a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00184c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00184e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001850   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001852   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001854   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001856   5000     movf	0, 0, 0             	MOVF	r0x00, W
001858   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00185a   ec24     call	0x2c48, 0           	CALL	__divulong
00185c   f016
00185e   6e00     movwf	0, 0               	MOVWF	r0x00
001860   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
001862   f001
001864   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
001866   f002
001868   cfe9     movff	0xfe9, 0x3         	MOVFF	FSR0L, r0x03
00186a   f003
00186c   0e08     movlw	0x8                	MOVLW	0x08
00186e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
001870   5000     movf	0, 0, 0             	MOVF	r0x00, W
001872   010e     movlb	0xe                	BANKSEL	_m
001874   6f5b     movwf	0x5b, 0x1          	MOVWF	_m, B
001876   010f     movlb	0xf                	BANKSEL	_sec
                                           ;	.line	202; lena.c	s = sec-h*3600-m*60;
001878   5155     movf	0x55, 0, 0x1        	MOVF	_sec, W, B
00187a   6e00     movwf	0, 0               	MOVWF	r0x00
                                           ; ;multiply lit val:0x10 by variable _h and store in r0x01
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
00187c   010e     movlb	0xe                	BANKSEL	_h
00187e   515a     movf	0x5a, 0, 0x1        	MOVF	_h, W, B
001880   0d10     mullw	0x10               	MULLW	0x10
001882   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
001884   f001
001886   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001888   5e00     subwf	0, 0x1, 0          	SUBWF	r0x00, F
                                           ; ;multiply lit val:0x3c by variable _m and store in r0x01
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
00188a   010e     movlb	0xe                	BANKSEL	_m
00188c   515b     movf	0x5b, 0, 0x1        	MOVF	_m, W, B
00188e   0d3c     mullw	0x3c               	MULLW	0x3c
001890   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
001892   f001
001894   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001896   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
001898   010e     movlb	0xe                	BANKSEL	_s
00189a   6f5c     movwf	0x5c, 0x1          	MOVWF	_s, B
00189c   010f     movlb	0xf                	BANKSEL	_tsec
                                           ;	.line	205; lena.c	if (tsec != s)
00189e   5148     movf	0x48, 0, 0x1        	MOVF	_tsec, W, B
0018a0   010e     movlb	0xe                	BANKSEL	_s
0018a2   195c     xorwf	0x5c, 0, 0x1       	XORWF	_s, W, B
0018a4   e002     bz	0x18aa                	BZ	_00143_DS_
                                           ;	.line	206; lena.c	tsec = s;
0018a6   ce5c     movff	0xe5c, 0xf48       	MOVFF	_s, _tsec
0018a8   ff48
                                           _00143_DS_:
0018aa   010f     movlb	0xf                	BANKSEL	_tmin
                                           ;	.line	207; lena.c	if (tmin != m)
0018ac   5147     movf	0x47, 0, 0x1        	MOVF	_tmin, W, B
0018ae   010e     movlb	0xe                	BANKSEL	_m
0018b0   195b     xorwf	0x5b, 0, 0x1       	XORWF	_m, W, B
0018b2   e002     bz	0x18b8                	BZ	_00145_DS_
                                           ;	.line	208; lena.c	tmin = m;
0018b4   ce5b     movff	0xe5b, 0xf47       	MOVFF	_m, _tmin
0018b6   ff47
                                           _00145_DS_:
0018b8   010f     movlb	0xf                	BANKSEL	_thour
                                           ;	.line	209; lena.c	if (thour != h)
0018ba   5146     movf	0x46, 0, 0x1        	MOVF	_thour, W, B
0018bc   010e     movlb	0xe                	BANKSEL	_h
0018be   195a     xorwf	0x5a, 0, 0x1       	XORWF	_h, W, B
0018c0   e002     bz	0x18c6                	BZ	_00147_DS_
                                           ;	.line	210; lena.c	thour = h;
0018c2   ce5a     movff	0xe5a, 0xf46       	MOVFF	_h, _thour
0018c4   ff46
                                           _00147_DS_:
0018c6   010f     movlb	0xf                	BANKSEL	_on
                                           ;	.line	213; lena.c	if (!on && ds < 5) {
0018c8   5151     movf	0x51, 0, 0x1        	MOVF	_on, W, B
0018ca   e10e     bnz	0x18e8               	BNZ	_00151_DS_
0018cc   0e05     movlw	0x5                	MOVLW	0x05
0018ce   010e     movlb	0xe                	BANKSEL	_ds
0018d0   5d59     subwf	0x59, 0, 0x1       	SUBWF	_ds, W, B
0018d2   e20a     bc	0x18e8                	BC	_00151_DS_
                                           ;	.line	214; lena.c	LATJbits.LATJ0 = 1;
0018d4   8091     bsf	0x91, 0, 0           	BSF	_LATJbits, 0
0018d6   010f     movlb	0xf                	BANKSEL	_whereami
                                           ;	.line	215; lena.c	if (whereami == ALARM) {
0018d8   5150     movf	0x50, 0, 0x1        	MOVF	_whereami, W, B
0018da   0a0a     xorlw	0xa                	XORLW	0x0a
0018dc   e102     bnz	0x18e2               	BNZ	_00149_DS_
                                           ;	.line	216; lena.c	LATJbits.LATJ1 = 1;
0018de   8291     bsf	0x91, 0x1, 0         	BSF	_LATJbits, 1
                                           ;	.line	217; lena.c	LATJbits.LATJ2 = 1;
0018e0   8491     bsf	0x91, 0x2, 0         	BSF	_LATJbits, 2
                                           _00149_DS_:
                                           ;	.line	219; lena.c	on = 1;
0018e2   0e01     movlw	0x1                	MOVLW	0x01
0018e4   010f     movlb	0xf                	BANKSEL	_on
0018e6   6f51     movwf	0x51, 0x1          	MOVWF	_on, B
                                           _00151_DS_:
0018e8   010f     movlb	0xf                	BANKSEL	_on
                                           ;	.line	223; lena.c	if (on && ds >= 5) {
0018ea   5151     movf	0x51, 0, 0x1        	MOVF	_on, W, B
0018ec   e00d     bz	0x1908                	BZ	_00158_DS_
0018ee   0e05     movlw	0x5                	MOVLW	0x05
0018f0   010e     movlb	0xe                	BANKSEL	_ds
0018f2   5d59     subwf	0x59, 0, 0x1       	SUBWF	_ds, W, B
0018f4   e309     bnc	0x1908               	BNC	_00158_DS_
                                           ;	.line	224; lena.c	LATJbits.LATJ0 = 0;
0018f6   9091     bcf	0x91, 0, 0           	BCF	_LATJbits, 0
0018f8   010f     movlb	0xf                	BANKSEL	_whereami
                                           ;	.line	225; lena.c	if (whereami == ALARM) {
0018fa   5150     movf	0x50, 0, 0x1        	MOVF	_whereami, W, B
0018fc   0a0a     xorlw	0xa                	XORLW	0x0a
0018fe   e102     bnz	0x1904               	BNZ	_00154_DS_
                                           ;	.line	226; lena.c	LATJbits.LATJ1 = 0;
001900   9291     bcf	0x91, 0x1, 0         	BCF	_LATJbits, 1
                                           ;	.line	227; lena.c	LATJbits.LATJ2 = 0;
001902   9491     bcf	0x91, 0x2, 0         	BCF	_LATJbits, 2
                                           _00154_DS_:
001904   010f     movlb	0xf                	BANKSEL	_on
                                           ;	.line	229; lena.c	on = 0;
001906   6b51     clrf	0x51, 0x1           	CLRF	_on, B
                                           _00158_DS_:
001908   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
00190a   f007
00190c   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
00190e   f006
001910   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
001912   f005
001914   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
001916   f004
001918   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00191a   f003
00191c   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00191e   f002
001920   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
001922   f001
001924   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
001926   f000
001928   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00192a   ffd9
00192c   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_lena__inc_amin	code
                                           _inc_amin:
                                           ;	.line	181; lena.c	void inc_amin(BYTE val)
00368a   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00368c   ffe5
00368e   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
003690   ffd9
003692   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
003694   ffe5
003696   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
003698   ffe5
00369a   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00369c   ffe5
00369e   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0036a0   ffe5
0036a2   0e02     movlw	0x2                	MOVLW	0x02
0036a4   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0036a6   f000
                                           ;	.line	185; lena.c	mod_amin = (amin + val) / 60;
0036a8   cf4a     movff	0xf4a, 0x1         	MOVFF	_amin, r0x01
0036aa   f001
0036ac   6a02     clrf	0x2, 0              	CLRF	r0x02
0036ae   6a03     clrf	0x3, 0              	CLRF	r0x03
0036b0   5000     movf	0, 0, 0             	MOVF	r0x00, W
0036b2   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
0036b4   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0036b6   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0036b8   0e00     movlw	0                  	MOVLW	0x00
0036ba   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0036bc   0e3c     movlw	0x3c               	MOVLW	0x3c
0036be   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0036c0   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0036c2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0036c4   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0036c6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0036c8   ec30     call	0x2e60, 0           	CALL	__divsint
0036ca   f017
0036cc   6e01     movwf	0x1, 0             	MOVWF	r0x01
0036ce   cff3     movff	0xff3, 0x2         	MOVFF	PRODL, r0x02
0036d0   f002
0036d2   0e04     movlw	0x4                	MOVLW	0x04
0036d4   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	186; lena.c	if (mod_amin) {
0036d6   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0036d8   e005     bz	0x36e4                	BZ	_00136_DS_
                                           ;	.line	187; lena.c	inc_ahour(mod_amin);
0036da   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0036dc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0036de   ec9f     call	0x393e, 0           	CALL	_inc_ahour
0036e0   f01c
0036e2   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           _00136_DS_:
                                           ;	.line	190; lena.c	amin = (amin + val) % 60;
0036e4   cf4a     movff	0xf4a, 0x1         	MOVFF	_amin, r0x01
0036e6   f001
0036e8   6a02     clrf	0x2, 0              	CLRF	r0x02
0036ea   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0036ec   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0036ee   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0036f0   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
0036f2   0e00     movlw	0                  	MOVLW	0x00
0036f4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0036f6   0e3c     movlw	0x3c               	MOVLW	0x3c
0036f8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0036fa   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0036fc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0036fe   5000     movf	0, 0, 0             	MOVF	r0x00, W
003700   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003702   ec96     call	0x312c, 0           	CALL	__modsint
003704   f018
003706   6e00     movwf	0, 0               	MOVWF	r0x00
003708   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
00370a   f001
00370c   0e04     movlw	0x4                	MOVLW	0x04
00370e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
003710   5000     movf	0, 0, 0             	MOVF	r0x00, W
003712   010f     movlb	0xf                	BANKSEL	_amin
003714   6f4a     movwf	0x4a, 0x1          	MOVWF	_amin, B
003716   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
003718   f003
00371a   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00371c   f002
00371e   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
003720   f001
003722   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
003724   f000
003726   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
003728   ffd9
00372a   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_lena__inc_ahour	code
                                           _inc_ahour:
                                           ;	.line	175; lena.c	void inc_ahour(BYTE val)
00393e   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
003940   ffe5
003942   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
003944   ffd9
003946   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
003948   ffe5
00394a   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00394c   ffe5
00394e   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
003950   ffe5
003952   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
003954   ffe5
003956   0e02     movlw	0x2                	MOVLW	0x02
003958   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
00395a   f000
                                           ;	.line	177; lena.c	ahour = (ahour + val) % 24;
00395c   cf49     movff	0xf49, 0x1         	MOVFF	_ahour, r0x01
00395e   f001
003960   6a02     clrf	0x2, 0              	CLRF	r0x02
003962   6a03     clrf	0x3, 0              	CLRF	r0x03
003964   5000     movf	0, 0, 0             	MOVF	r0x00, W
003966   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
003968   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00396a   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
00396c   0e00     movlw	0                  	MOVLW	0x00
00396e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003970   0e18     movlw	0x18               	MOVLW	0x18
003972   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003974   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
003976   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003978   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00397a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00397c   ec96     call	0x312c, 0           	CALL	__modsint
00397e   f018
003980   6e00     movwf	0, 0               	MOVWF	r0x00
003982   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
003984   f001
003986   0e04     movlw	0x4                	MOVLW	0x04
003988   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00398a   5000     movf	0, 0, 0             	MOVF	r0x00, W
00398c   010f     movlb	0xf                	BANKSEL	_ahour
00398e   6f49     movwf	0x49, 0x1          	MOVWF	_ahour, B
003990   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
003992   f003
003994   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
003996   f002
003998   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00399a   f001
00399c   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00399e   f000
0039a0   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0039a2   ffd9
0039a4   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_lena__low_isr	code
                                           _low_isr:
                                           ;	.line	109; lena.c	void low_isr (void) interrupt 2
0038ce   cfe8     movff	0xfe8, 0xfe5       	MOVFF	WREG, POSTDEC1
0038d0   ffe5
0038d2   cfd8     movff	0xfd8, 0xfe5       	MOVFF	STATUS, POSTDEC1
0038d4   ffe5
0038d6   cfe0     movff	0xfe0, 0xfe5       	MOVFF	BSR, POSTDEC1
0038d8   ffe5
0038da   cff3     movff	0xff3, 0xfe5       	MOVFF	PRODL, POSTDEC1
0038dc   ffe5
0038de   cff4     movff	0xff4, 0xfe5       	MOVFF	PRODH, POSTDEC1
0038e0   ffe5
0038e2   cfe9     movff	0xfe9, 0xfe5       	MOVFF	FSR0L, POSTDEC1
0038e4   ffe5
0038e6   cfea     movff	0xfea, 0xfe5       	MOVFF	FSR0H, POSTDEC1
0038e8   ffe5
0038ea   cffa     movff	0xffa, 0xfe5       	MOVFF	PCLATH, POSTDEC1
0038ec   ffe5
0038ee   cffb     movff	0xffb, 0xfe5       	MOVFF	PCLATU, POSTDEC1
0038f0   ffe5
0038f2   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0038f4   ffe5
0038f6   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0038f8   ffd9
                                           ;	.line	112; lena.c	if(INTCON3bits.INT3F) {
0038fa   a4f0     btfss	0xf0, 0x2, 0       	BTFSS	_INTCON3bits, 2
0038fc   d005     bra	0x3908               	BRA	_00115_DS_
                                           ;	.line	113; lena.c	button1 = 1;
0038fe   0e01     movlw	0x1                	MOVLW	0x01
003900   010f     movlb	0xf                	BANKSEL	_button1
003902   6f52     movwf	0x52, 0x1          	MOVWF	_button1, B
                                           ;	.line	114; lena.c	INTCON3bits.INT3F = 0;
003904   94f0     bcf	0xf0, 0x2, 0         	BCF	_INTCON3bits, 2
003906   d006     bra	0x3914               	BRA	_00117_DS_
                                           _00115_DS_:
                                           ;	.line	117; lena.c	} else if(INTCON3bits.INT1F) {
003908   a0f0     btfss	0xf0, 0, 0         	BTFSS	_INTCON3bits, 0
00390a   d004     bra	0x3914               	BRA	_00117_DS_
                                           ;	.line	118; lena.c	button2 = 1;
00390c   0e01     movlw	0x1                	MOVLW	0x01
00390e   010f     movlb	0xf                	BANKSEL	_button2
003910   6f53     movwf	0x53, 0x1          	MOVWF	_button2, B
                                           ;	.line	119; lena.c	INTCON3bits.INT1F = 0;
003912   90f0     bcf	0xf0, 0, 0           	BCF	_INTCON3bits, 0
                                           _00117_DS_:
003914   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
003916   ffd9
003918   cfe4     movff	0xfe4, 0xffb       	MOVFF	PREINC1, PCLATU
00391a   fffb
00391c   cfe4     movff	0xfe4, 0xffa       	MOVFF	PREINC1, PCLATH
00391e   fffa
003920   cfe4     movff	0xfe4, 0xfea       	MOVFF	PREINC1, FSR0H
003922   ffea
003924   cfe4     movff	0xfe4, 0xfe9       	MOVFF	PREINC1, FSR0L
003926   ffe9
003928   cfe4     movff	0xfe4, 0xff4       	MOVFF	PREINC1, PRODH
00392a   fff4
00392c   cfe4     movff	0xfe4, 0xff3       	MOVFF	PREINC1, PRODL
00392e   fff3
003930   cfe4     movff	0xfe4, 0xfe0       	MOVFF	PREINC1, BSR
003932   ffe0
003934   cfe4     movff	0xfe4, 0xfd8       	MOVFF	PREINC1, STATUS
003936   ffd8
003938   cfe4     movff	0xfe4, 0xfe8       	MOVFF	PREINC1, WREG
00393a   ffe8
00393c   0010     retfie	0                 	RETFIE	
                                           
                                           ; ; Starting pCode block
                                           S_lena__high_isr	code
                                           _high_isr:
                                           ;	.line	98; lena.c	void high_isr (void) interrupt 1
001c62   cfe8     movff	0xfe8, 0xfe5       	MOVFF	WREG, POSTDEC1
001c64   ffe5
001c66   cfd8     movff	0xfd8, 0xfe5       	MOVFF	STATUS, POSTDEC1
001c68   ffe5
001c6a   cfe0     movff	0xfe0, 0xfe5       	MOVFF	BSR, POSTDEC1
001c6c   ffe5
001c6e   cff3     movff	0xff3, 0xfe5       	MOVFF	PRODL, POSTDEC1
001c70   ffe5
001c72   cff4     movff	0xff4, 0xfe5       	MOVFF	PRODH, POSTDEC1
001c74   ffe5
001c76   cfe9     movff	0xfe9, 0xfe5       	MOVFF	FSR0L, POSTDEC1
001c78   ffe5
001c7a   cfea     movff	0xfea, 0xfe5       	MOVFF	FSR0H, POSTDEC1
001c7c   ffe5
001c7e   cffa     movff	0xffa, 0xfe5       	MOVFF	PCLATH, POSTDEC1
001c80   ffe5
001c82   cffb     movff	0xffb, 0xfe5       	MOVFF	PCLATU, POSTDEC1
001c84   ffe5
001c86   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
001c88   ffe5
001c8a   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001c8c   ffd9
                                           ;	.line	101; lena.c	if (INTCONbits.T0IF) {
001c8e   a4f2     btfss	0xf2, 0x2, 0       	BTFSS	_INTCONbits, 2
001c90   d00c     bra	0x1caa               	BRA	_00107_DS_
001c92   010f     movlb	0xf                	BANKSEL	_overflows
                                           ;	.line	102; lena.c	overflows++;
001c94   2b42     incf	0x42, 0x1, 0x1      	INCF	_overflows, F, B
001c96   e302     bnc	0x1c9c               	BNC	_10347_DS_
001c98   010f     movlb	0xf                	BANKSEL	(_overflows + 1)
001c9a   2b43     incf	0x43, 0x1, 0x1      	INCF	(_overflows + 1), F, B
                                           _10347_DS_:
001c9c   e302     bnc	0x1ca2               	BNC	_20348_DS_
001c9e   010f     movlb	0xf                	BANKSEL	(_overflows + 2)
001ca0   2b44     incf	0x44, 0x1, 0x1      	INCF	(_overflows + 2), F, B
                                           _20348_DS_:
001ca2   e302     bnc	0x1ca8               	BNC	_30349_DS_
001ca4   010f     movlb	0xf                	BANKSEL	(_overflows + 3)
001ca6   2b45     incf	0x45, 0x1, 0x1      	INCF	(_overflows + 3), F, B
                                           _30349_DS_:
                                           ;	.line	103; lena.c	INTCONbits.T0IF = 0;
001ca8   94f2     bcf	0xf2, 0x2, 0         	BCF	_INTCONbits, 2
                                           _00107_DS_:
001caa   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001cac   ffd9
001cae   cfe4     movff	0xfe4, 0xffb       	MOVFF	PREINC1, PCLATU
001cb0   fffb
001cb2   cfe4     movff	0xfe4, 0xffa       	MOVFF	PREINC1, PCLATH
001cb4   fffa
001cb6   cfe4     movff	0xfe4, 0xfea       	MOVFF	PREINC1, FSR0H
001cb8   ffea
001cba   cfe4     movff	0xfe4, 0xfe9       	MOVFF	PREINC1, FSR0L
001cbc   ffe9
001cbe   cfe4     movff	0xfe4, 0xff4       	MOVFF	PREINC1, PRODH
001cc0   fff4
001cc2   cfe4     movff	0xfe4, 0xff3       	MOVFF	PREINC1, PRODL
001cc4   fff3
001cc6   cfe4     movff	0xfe4, 0xfe0       	MOVFF	PREINC1, BSR
001cc8   ffe0
001cca   cfe4     movff	0xfe4, 0xfd8       	MOVFF	PREINC1, STATUS
001ccc   ffd8
001cce   cfe4     movff	0xfe4, 0xfe8       	MOVFF	PREINC1, WREG
001cd0   ffe8
001cd2   0010     retfie	0                 	RETFIE	
                                           
                                           ; ; Starting pCode block
                                           __str_0:
001cd4   6f44     movwf	0x44, 0x1          	DB	0x44, 0x6f, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x77, 0x61, 0x6e, 0x74, 0x20
001cd6   7920     btg	0x20, 0x4, 0x1       
001cd8   756f     btg	0x6f, 0x2, 0x1       
001cda   7720     btg	0x20, 0x3, 0x1       
001cdc   6e61     movwf	0x61, 0            
001cde   2074     addwfc	0x74, 0, 0        
001ce0   6f74     movwf	0x74, 0x1          	DB	0x74, 0x6f, 0x20, 0x20, 0x73, 0x65, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20
001ce2   2020     addwfc	0x20, 0, 0        
001ce4   6573     cpfsgt	0x73, 0x1         
001ce6   2074     addwfc	0x74, 0, 0        
001ce8   6874     setf	0x74, 0             
001cea   2065     addwfc	0x65, 0, 0        
001cec   6974     setf	0x74, 0x1           	DB	0x74, 0x69, 0x6d, 0x65, 0x20, 0x3f, 0x20, 0x20, 0x00
001cee   656d     cpfsgt	0x6d, 0x1         
001cf0   3f20     incfsz	0x20, 0x1, 0x1    
001cf2   2020     addwfc	0x20, 0, 0        
001cf4   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_1:
001cf6   5b20     subwfb	0x20, 0x1, 0x1    	DB	0x20, 0x5b, 0x25, 0x30, 0x32, 0x75, 0x5d, 0x3a, 0x20, 0x25, 0x30, 0x32
001cf8   3025     rrcf	0x25, 0, 0          
001cfa   7532     btg	0x32, 0x2, 0x1       
001cfc   3a5d     swapf	0x5d, 0x1, 0       
001cfe   2520     addwf	0x20, 0, 0x1       
001d00   3230     rrcf	0x30, 0x1, 0        
001d02   2075     addwfc	0x75, 0, 0        	DB	0x75, 0x20, 0x3a, 0x20, 0x25, 0x30, 0x32, 0x75, 0x20, 0x20, 0x20, 0x20
001d04   203a     addwfc	0x3a, 0, 0        
001d06   3025     rrcf	0x25, 0, 0          
001d08   7532     btg	0x32, 0x2, 0x1       
001d0a   2020     addwfc	0x20, 0, 0        
001d0c   2020     addwfc	0x20, 0, 0        
001d0e   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
001d10   2020     addwfc	0x20, 0, 0        
001d12   2020     addwfc	0x20, 0, 0        
001d14   2020     addwfc	0x20, 0, 0        
001d16   2020     addwfc	0x20, 0, 0        
001d18   2020     addwfc	0x20, 0, 0        
001d1a   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x00
001d1c   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_2:
001d1e   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x25, 0x30, 0x32, 0x75, 0x20, 0x3a, 0x5b, 0x25, 0x30, 0x32
001d20   3025     rrcf	0x25, 0, 0          
001d22   7532     btg	0x32, 0x2, 0x1       
001d24   3a20     swapf	0x20, 0x1, 0       
001d26   255b     addwf	0x5b, 0, 0x1       
001d28   3230     rrcf	0x30, 0x1, 0        
001d2a   5d75     subwf	0x75, 0, 0x1       	DB	0x75, 0x5d, 0x3a, 0x20, 0x25, 0x30, 0x32, 0x75, 0x20, 0x20, 0x20, 0x20
001d2c   203a     addwfc	0x3a, 0, 0        
001d2e   3025     rrcf	0x25, 0, 0          
001d30   7532     btg	0x32, 0x2, 0x1       
001d32   2020     addwfc	0x20, 0, 0        
001d34   2020     addwfc	0x20, 0, 0        
001d36   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
001d38   2020     addwfc	0x20, 0, 0        
001d3a   2020     addwfc	0x20, 0, 0        
001d3c   2020     addwfc	0x20, 0, 0        
001d3e   2020     addwfc	0x20, 0, 0        
001d40   2020     addwfc	0x20, 0, 0        
001d42   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x00
001d44   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_3:
001d46   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x25, 0x30, 0x32, 0x75, 0x20, 0x3a, 0x20, 0x25, 0x30, 0x32
001d48   3025     rrcf	0x25, 0, 0          
001d4a   7532     btg	0x32, 0x2, 0x1       
001d4c   3a20     swapf	0x20, 0x1, 0       
001d4e   2520     addwf	0x20, 0, 0x1       
001d50   3230     rrcf	0x30, 0x1, 0        
001d52   2075     addwfc	0x75, 0, 0        	DB	0x75, 0x20, 0x3a, 0x5b, 0x25, 0x30, 0x32, 0x75, 0x5d, 0x20, 0x20, 0x20
001d54   5b3a     subwfb	0x3a, 0x1, 0x1    
001d56   3025     rrcf	0x25, 0, 0          
001d58   7532     btg	0x32, 0x2, 0x1       
001d5a   205d     addwfc	0x5d, 0, 0        
001d5c   2020     addwfc	0x20, 0, 0        
001d5e   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
001d60   2020     addwfc	0x20, 0, 0        
001d62   2020     addwfc	0x20, 0, 0        
001d64   2020     addwfc	0x20, 0, 0        
001d66   2020     addwfc	0x20, 0, 0        
001d68   2020     addwfc	0x20, 0, 0        
001d6a   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x00
001d6c   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_4:
001d6e   6f44     movwf	0x44, 0x1          	DB	0x44, 0x6f, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x77, 0x61, 0x6e, 0x74, 0x20
001d70   7920     btg	0x20, 0x4, 0x1       
001d72   756f     btg	0x6f, 0x2, 0x1       
001d74   7720     btg	0x20, 0x3, 0x1       
001d76   6e61     movwf	0x61, 0            
001d78   2074     addwfc	0x74, 0, 0        
001d7a   6f74     movwf	0x74, 0x1          	DB	0x74, 0x6f, 0x20, 0x20, 0x73, 0x65, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20
001d7c   2020     addwfc	0x20, 0, 0        
001d7e   6573     cpfsgt	0x73, 0x1         
001d80   2074     addwfc	0x74, 0, 0        
001d82   6874     setf	0x74, 0             
001d84   2065     addwfc	0x65, 0, 0        
001d86   6c61     negf	0x61, 0             	DB	0x61, 0x6c, 0x61, 0x72, 0x6d, 0x20, 0x3f, 0x20, 0x00
001d88   7261     btg	0x61, 0x1, 0         
001d8a   206d     addwfc	0x6d, 0, 0        
001d8c   203f     addwfc	0x3f, 0, 0        
001d8e   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_5:
001d90   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x20, 0x5b, 0x4f, 0x4e, 0x20
001d92   6c41     negf	0x41, 0             
001d94   7261     btg	0x61, 0x1, 0         
001d96   206d     addwfc	0x6d, 0, 0        
001d98   4f5b     dcfsnz	0x5b, 0x1, 0x1    
001d9a   204e     addwfc	0x4e, 0, 0        
001d9c   205d     addwfc	0x5d, 0, 0        	DB	0x5d, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
001d9e   2020     addwfc	0x20, 0, 0        
001da0   2020     addwfc	0x20, 0, 0        
001da2   2020     addwfc	0x20, 0, 0        
001da4   2020     addwfc	0x20, 0, 0        
001da6   2020     addwfc	0x20, 0, 0        
001da8   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00
001daa   2020     addwfc	0x20, 0, 0        
001dac   2020     addwfc	0x20, 0, 0        
001dae   2020     addwfc	0x20, 0, 0        
001db0   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_6:
001db2   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x20, 0x5b, 0x4f, 0x46, 0x46
001db4   6c41     negf	0x41, 0             
001db6   7261     btg	0x61, 0x1, 0         
001db8   206d     addwfc	0x6d, 0, 0        
001dba   4f5b     dcfsnz	0x5b, 0x1, 0x1    
001dbc   4646     rlncf	0x46, 0x1, 0       
001dbe   205d     addwfc	0x5d, 0, 0        	DB	0x5d, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
001dc0   2020     addwfc	0x20, 0, 0        
001dc2   2020     addwfc	0x20, 0, 0        
001dc4   2020     addwfc	0x20, 0, 0        
001dc6   2020     addwfc	0x20, 0, 0        
001dc8   2020     addwfc	0x20, 0, 0        
001dca   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00
001dcc   2020     addwfc	0x20, 0, 0        
001dce   2020     addwfc	0x20, 0, 0        
001dd0   2020     addwfc	0x20, 0, 0        
001dd2   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_7:
001dd4   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x20, 0x61, 0x74
001dd6   2020     addwfc	0x20, 0, 0        
001dd8   6c41     negf	0x41, 0             
001dda   7261     btg	0x61, 0x1, 0         
001ddc   206d     addwfc	0x6d, 0, 0        
001dde   7461     btg	0x61, 0x2, 0         
001de0   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5b, 0x25, 0x30, 0x32
001de2   2020     addwfc	0x20, 0, 0        
001de4   2020     addwfc	0x20, 0, 0        
001de6   2020     addwfc	0x20, 0, 0        
001de8   255b     addwf	0x5b, 0, 0x1       
001dea   3230     rrcf	0x30, 0x1, 0        
001dec   5d75     subwf	0x75, 0, 0x1       	DB	0x75, 0x5d, 0x3a, 0x20, 0x25, 0x30, 0x32, 0x75, 0x20, 0x20, 0x20, 0x20
001dee   203a     addwfc	0x3a, 0, 0        
001df0   3025     rrcf	0x25, 0, 0          
001df2   7532     btg	0x32, 0x2, 0x1       
001df4   2020     addwfc	0x20, 0, 0        
001df6   2020     addwfc	0x20, 0, 0        
001df8   0000     nop                      	DB	0x00
                                           ; ; Starting pCode block
                                           __str_8:
001dfa   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x20, 0x61, 0x74
001dfc   2020     addwfc	0x20, 0, 0        
001dfe   6c41     negf	0x41, 0             
001e00   7261     btg	0x61, 0x1, 0         
001e02   206d     addwfc	0x6d, 0, 0        
001e04   7461     btg	0x61, 0x2, 0         
001e06   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x25, 0x30, 0x32
001e08   2020     addwfc	0x20, 0, 0        
001e0a   2020     addwfc	0x20, 0, 0        
001e0c   2020     addwfc	0x20, 0, 0        
001e0e   2520     addwf	0x20, 0, 0x1       
001e10   3230     rrcf	0x30, 0x1, 0        
001e12   2075     addwfc	0x75, 0, 0        	DB	0x75, 0x20, 0x3a, 0x5b, 0x25, 0x30, 0x32, 0x75, 0x5d, 0x20, 0x20, 0x20
001e14   5b3a     subwfb	0x3a, 0x1, 0x1    
001e16   3025     rrcf	0x25, 0, 0          
001e18   7532     btg	0x32, 0x2, 0x1       
001e1a   205d     addwfc	0x5d, 0, 0        
001e1c   2020     addwfc	0x20, 0, 0        
001e1e   0000     nop                      	DB	0x00
                                           ; ; Starting pCode block
                                           __str_9:
001e20   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x25, 0x30, 0x32, 0x75, 0x3a, 0x25, 0x30, 0x32
001e22   2020     addwfc	0x20, 0, 0        
001e24   3025     rrcf	0x25, 0, 0          
001e26   7532     btg	0x32, 0x2, 0x1       
001e28   253a     addwf	0x3a, 0, 0x1       
001e2a   3230     rrcf	0x30, 0x1, 0        
001e2c   3a75     swapf	0x75, 0x1, 0       	DB	0x75, 0x3a, 0x25, 0x30, 0x32, 0x75, 0x20, 0x20, 0x20, 0x20, 0x41, 0x6c
001e2e   3025     rrcf	0x25, 0, 0          
001e30   7532     btg	0x32, 0x2, 0x1       
001e32   2020     addwfc	0x20, 0, 0        
001e34   2020     addwfc	0x20, 0, 0        
001e36   6c41     negf	0x41, 0             
001e38   7261     btg	0x61, 0x1, 0         	DB	0x61, 0x72, 0x6d, 0x20, 0x4f, 0x4e, 0x20, 0x20, 0x25, 0x30, 0x32, 0x75
001e3a   206d     addwfc	0x6d, 0, 0        
001e3c   4e4f     dcfsnz	0x4f, 0x1, 0      
001e3e   2020     addwfc	0x20, 0, 0        
001e40   3025     rrcf	0x25, 0, 0          
001e42   7532     btg	0x32, 0x2, 0x1       
001e44   253a     addwf	0x3a, 0, 0x1       	DB	0x3a, 0x25, 0x30, 0x32, 0x75, 0x20, 0x00
001e46   3230     rrcf	0x30, 0x1, 0        
001e48   2075     addwfc	0x75, 0, 0        
001e4a   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_10:
001e4c   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x25, 0x30, 0x32, 0x75, 0x3a, 0x25, 0x30, 0x32
001e4e   2020     addwfc	0x20, 0, 0        
001e50   3025     rrcf	0x25, 0, 0          
001e52   7532     btg	0x32, 0x2, 0x1       
001e54   253a     addwf	0x3a, 0, 0x1       
001e56   3230     rrcf	0x30, 0x1, 0        
001e58   3a75     swapf	0x75, 0x1, 0       	DB	0x75, 0x3a, 0x25, 0x30, 0x32, 0x75, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
001e5a   3025     rrcf	0x25, 0, 0          
001e5c   7532     btg	0x32, 0x2, 0x1       
001e5e   2020     addwfc	0x20, 0, 0        
001e60   2020     addwfc	0x20, 0, 0        
001e62   2020     addwfc	0x20, 0, 0        
001e64   4120     rrncf	0x20, 0, 0x1       	DB	0x20, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x20, 0x20, 0x4f, 0x46, 0x46, 0x20
001e66   616c     cpfslt	0x6c, 0x1         
001e68   6d72     negf	0x72, 0x1           
001e6a   2020     addwfc	0x20, 0, 0        
001e6c   464f     rlncf	0x4f, 0x1, 0       
001e6e   2046     addwfc	0x46, 0, 0        
001e70   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x00
001e72   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_11:
001e74   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x25, 0x30, 0x32, 0x75, 0x3a, 0x25, 0x30, 0x32
001e76   2020     addwfc	0x20, 0, 0        
001e78   3025     rrcf	0x25, 0, 0          
001e7a   7532     btg	0x32, 0x2, 0x1       
001e7c   253a     addwf	0x3a, 0, 0x1       
001e7e   3230     rrcf	0x30, 0x1, 0        
001e80   3a75     swapf	0x75, 0x1, 0       	DB	0x75, 0x3a, 0x25, 0x30, 0x32, 0x75, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
001e82   3025     rrcf	0x25, 0, 0          
001e84   7532     btg	0x32, 0x2, 0x1       
001e86   2020     addwfc	0x20, 0, 0        
001e88   2020     addwfc	0x20, 0, 0        
001e8a   2020     addwfc	0x20, 0, 0        
001e8c   2049     addwfc	0x49, 0, 0        	DB	0x49, 0x20, 0x61, 0x6d, 0x20, 0x72, 0x69, 0x6e, 0x67, 0x69, 0x6e, 0x67
001e8e   6d61     negf	0x61, 0x1           
001e90   7220     btg	0x20, 0x1, 0         
001e92   6e69     movwf	0x69, 0            
001e94   6967     setf	0x67, 0x1           
001e96   676e     tstfsz	0x6e, 0x1         
001e98   2021     addwfc	0x21, 0, 0        	DB	0x21, 0x20, 0x00
001e9a   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_12:
001e9c   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x25, 0x30, 0x32, 0x75, 0x3a, 0x25, 0x30, 0x32
001e9e   2020     addwfc	0x20, 0, 0        
001ea0   3025     rrcf	0x25, 0, 0          
001ea2   7532     btg	0x32, 0x2, 0x1       
001ea4   253a     addwf	0x3a, 0, 0x1       
001ea6   3230     rrcf	0x30, 0x1, 0        
001ea8   3a75     swapf	0x75, 0x1, 0       	DB	0x75, 0x3a, 0x25, 0x30, 0x32, 0x75, 0x20, 0x20, 0x20, 0x20, 0x53, 0x6e
001eaa   3025     rrcf	0x25, 0, 0          
001eac   7532     btg	0x32, 0x2, 0x1       
001eae   2020     addwfc	0x20, 0, 0        
001eb0   2020     addwfc	0x20, 0, 0        
001eb2   6e53     movwf	0x53, 0            
001eb4   6f6f     movwf	0x6f, 0x1          	DB	0x6f, 0x6f, 0x7a, 0x65, 0x20, 0x25, 0x75, 0x20, 0x20, 0x25, 0x30, 0x32
001eb6   657a     cpfsgt	0x7a, 0x1         
001eb8   2520     addwf	0x20, 0, 0x1       
001eba   2075     addwfc	0x75, 0, 0        
001ebc   2520     addwf	0x20, 0, 0x1       
001ebe   3230     rrcf	0x30, 0x1, 0        
001ec0   3a75     swapf	0x75, 0x1, 0       	DB	0x75, 0x3a, 0x25, 0x30, 0x32, 0x75, 0x20, 0x00
001ec2   3025     rrcf	0x25, 0, 0          
001ec4   7532     btg	0x32, 0x2, 0x1       
001ec6   0020     dw	0x20  ;unknown opcode 
                                           ; ; Starting pCode block
                                           __str_13:
001ec8   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x25, 0x30, 0x32, 0x75, 0x3a, 0x25, 0x30, 0x32
001eca   2020     addwfc	0x20, 0, 0        
001ecc   3025     rrcf	0x25, 0, 0          
001ece   7532     btg	0x32, 0x2, 0x1       
001ed0   253a     addwf	0x3a, 0, 0x1       
001ed2   3230     rrcf	0x30, 0x1, 0        
001ed4   3a75     swapf	0x75, 0x1, 0       	DB	0x75, 0x3a, 0x25, 0x30, 0x32, 0x75, 0x20, 0x20, 0x20, 0x20, 0x53, 0x6e
001ed6   3025     rrcf	0x25, 0, 0          
001ed8   7532     btg	0x32, 0x2, 0x1       
001eda   2020     addwfc	0x20, 0, 0        
001edc   2020     addwfc	0x20, 0, 0        
001ede   6e53     movwf	0x53, 0            
001ee0   6f6f     movwf	0x6f, 0x1          	DB	0x6f, 0x6f, 0x7a, 0x65, 0x20, 0x25, 0x75, 0x20, 0x25, 0x30, 0x32, 0x75
001ee2   657a     cpfsgt	0x7a, 0x1         
001ee4   2520     addwf	0x20, 0, 0x1       
001ee6   2075     addwfc	0x75, 0, 0        
001ee8   3025     rrcf	0x25, 0, 0          
001eea   7532     btg	0x32, 0x2, 0x1       
001eec   253a     addwf	0x3a, 0, 0x1       	DB	0x3a, 0x25, 0x30, 0x32, 0x75, 0x20, 0x00
001eee   3230     rrcf	0x30, 0x1, 0        
001ef0   2075     addwfc	0x75, 0, 0        
001ef2   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_14:
001ef4   2a2a     incf	0x2a, 0x1, 0        	DB	0x2a, 0x2a, 0x2a, 0x2a, 0x20, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x20, 0x2a
001ef6   2a2a     incf	0x2a, 0x1, 0        
001ef8   4520     rlncf	0x20, 0, 0x1       
001efa   5252     movf	0x52, 0x1, 0        
001efc   524f     movf	0x4f, 0x1, 0        
001efe   2a20     incf	0x20, 0x1, 0        
001f00   2a2a     incf	0x2a, 0x1, 0        	DB	0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x20, 0x45, 0x52, 0x52
001f02   2a2a     incf	0x2a, 0x1, 0        
001f04   2a2a     incf	0x2a, 0x1, 0        
001f06   2a2a     incf	0x2a, 0x1, 0        
001f08   4520     rlncf	0x20, 0, 0x1       
001f0a   5252     movf	0x52, 0x1, 0        
001f0c   524f     movf	0x4f, 0x1, 0        	DB	0x4f, 0x52, 0x20, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x00
001f0e   2a20     incf	0x20, 0x1, 0        
001f10   2a2a     incf	0x2a, 0x1, 0        
001f12   2a2a     incf	0x2a, 0x1, 0        
001f14   0000     nop                      
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 4962 (0x1362) bytes ( 3.79%)
                                           ;           	 2481 (0x09b1) words
                                           ; udata size:	   44 (0x002c) bytes ( 1.15%)
                                           ; access size:	   22 (0x0016) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Oct 15 2013) (Mac OS X ppc)
                                           ; This file was generated Sat Oct 26 16:23:24 2013
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _LCDInit
                                           	global _LCDUpdate
                                           	global _LCDErase
                                           	global _LCDText
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _AN0String
                                           	extern _AppConfig
                                           	extern _activeUDPSocket
                                           	extern _UDPSocketInfo
                                           	extern _UDPTxCount
                                           	extern _UDPRxCount
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _memset
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODH	equ	0xff4
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           
                                           udata_LCDBlocking_0	udata
                                           _LCDText	res	33
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDErase	code
                                           _LCDErase:
                                           ;	.line	392; TCPIP_Stack/LCDBlocking.c	void LCDErase(void)
003530   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
003532   ffe5
003534   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
003536   ffd9
003538   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00353a   ffe5
00353c   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00353e   ffe5
003540   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
003542   ffe5
003544   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
003546   ffe5
003548   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00354a   ffe5
00354c   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
00354e   ffe5
003550   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
003552   ffe5
003554   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
003556   ffe5
                                           ;	.line	395; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0x01);
003558   0e01     movlw	0x1                	MOVLW	0x01
00355a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00355c   0e00     movlw	0                  	MOVLW	0x00
00355e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003560   ecd3     call	0x39a6, 0           	CALL	_LCDWrite
003562   f01c
003564   0e02     movlw	0x2                	MOVLW	0x02
003566   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	396; TCPIP_Stack/LCDBlocking.c	DelayMs(2);
003568   0e48     movlw	0x48               	MOVLW	0x48
00356a   6e00     movwf	0, 0               	MOVWF	r0x00
00356c   0e0d     movlw	0xd                	MOVLW	0x0d
00356e   6e01     movwf	0x1, 0             	MOVWF	r0x01
003570   6a02     clrf	0x2, 0              	CLRF	r0x02
003572   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00305_DS_:
003574   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
003576   f004
003578   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
00357a   f005
00357c   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
00357e   f006
003580   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
003582   f007
003584   0eff     movlw	0xff               	MOVLW	0xff
003586   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
003588   0eff     movlw	0xff               	MOVLW	0xff
00358a   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
00358c   0eff     movlw	0xff               	MOVLW	0xff
00358e   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
003590   0eff     movlw	0xff               	MOVLW	0xff
003592   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
003594   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
003596   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
003598   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
00359a   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
00359c   e1eb     bnz	0x3574               	BNZ	_00305_DS_
                                           ;	.line	399; TCPIP_Stack/LCDBlocking.c	memset(LCDText, ' ', 32);
00359e   0e00     movlw	0                  	MOVLW	0x00
0035a0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0035a2   0e20     movlw	0x20               	MOVLW	0x20
0035a4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0035a6   0e20     movlw	0x20               	MOVLW	0x20
0035a8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0035aa   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
0035ac   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0035ae   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
0035b0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0035b2   ec73     call	0x32e6, 0           	CALL	_memset
0035b4   f019
0035b6   0e05     movlw	0x5                	MOVLW	0x05
0035b8   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0035ba   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
0035bc   f007
0035be   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0035c0   f006
0035c2   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0035c4   f005
0035c6   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0035c8   f004
0035ca   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0035cc   f003
0035ce   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0035d0   f002
0035d2   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0035d4   f001
0035d6   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0035d8   f000
0035da   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0035dc   ffd9
0035de   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDUpdate	code
                                           _LCDUpdate:
                                           ;	.line	332; TCPIP_Stack/LCDBlocking.c	void LCDUpdate(void)
001f16   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
001f18   ffe5
001f1a   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001f1c   ffd9
001f1e   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
001f20   ffe5
001f22   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
001f24   ffe5
001f26   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
001f28   ffe5
001f2a   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
001f2c   ffe5
001f2e   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
001f30   ffe5
001f32   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
001f34   ffe5
001f36   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
001f38   ffe5
001f3a   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
001f3c   ffe5
001f3e   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
001f40   ffe5
                                           ;	.line	337; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0x02);
001f42   0e02     movlw	0x2                	MOVLW	0x02
001f44   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001f46   0e00     movlw	0                  	MOVLW	0x00
001f48   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001f4a   ecd3     call	0x39a6, 0           	CALL	_LCDWrite
001f4c   f01c
001f4e   0e02     movlw	0x2                	MOVLW	0x02
001f50   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	338; TCPIP_Stack/LCDBlocking.c	DelayMs(2);
001f52   0e48     movlw	0x48               	MOVLW	0x48
001f54   6e00     movwf	0, 0               	MOVWF	r0x00
001f56   0e0d     movlw	0xd                	MOVLW	0x0d
001f58   6e01     movwf	0x1, 0             	MOVWF	r0x01
001f5a   6a02     clrf	0x2, 0              	CLRF	r0x02
001f5c   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00225_DS_:
001f5e   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
001f60   f004
001f62   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
001f64   f005
001f66   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
001f68   f006
001f6a   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
001f6c   f007
001f6e   0eff     movlw	0xff               	MOVLW	0xff
001f70   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
001f72   0eff     movlw	0xff               	MOVLW	0xff
001f74   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
001f76   0eff     movlw	0xff               	MOVLW	0xff
001f78   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
001f7a   0eff     movlw	0xff               	MOVLW	0xff
001f7c   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
001f7e   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001f80   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
001f82   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
001f84   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
001f86   e1eb     bnz	0x1f5e               	BNZ	_00225_DS_
                                           ;	.line	341; TCPIP_Stack/LCDBlocking.c	for(i = 0; i < 16u; i++)
001f88   6a00     clrf	0, 0                	CLRF	r0x00
                                           _00257_DS_:
001f8a   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
001f8c   f001
001f8e   6a02     clrf	0x2, 0              	CLRF	r0x02
001f90   0e00     movlw	0                  	MOVLW	0x00
001f92   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
001f94   e102     bnz	0x1f9a               	BNZ	_00297_DS_
001f96   0e10     movlw	0x10               	MOVLW	0x10
001f98   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00297_DS_:
001f9a   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001f9c   d057     bra	0x204c               	BRA	_00260_DS_
                                           ;	.line	345; TCPIP_Stack/LCDBlocking.c	if(LCDText[i] == 0u)
001f9e   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
001fa0   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
001fa2   6e01     movwf	0x1, 0             	MOVWF	r0x01
001fa4   6a02     clrf	0x2, 0              	CLRF	r0x02
001fa6   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
001fa8   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
001faa   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
001fac   ffe9
001fae   c002     movff	0x2, 0xfea         	MOVFF	r0x02, FSR0H
001fb0   ffea
001fb2   cfef     movff	0xfef, 0x1         	MOVFF	INDF0, r0x01
001fb4   f001
001fb6   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001fb8   e119     bnz	0x1fec               	BNZ	_00232_DS_
                                           ;	.line	347; TCPIP_Stack/LCDBlocking.c	for(j=i; j < 16u; j++)
001fba   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
001fbc   f001
                                           _00253_DS_:
001fbe   c001     movff	0x1, 0x2           	MOVFF	r0x01, r0x02
001fc0   f002
001fc2   6a03     clrf	0x3, 0              	CLRF	r0x03
001fc4   0e00     movlw	0                  	MOVLW	0x00
001fc6   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
001fc8   e102     bnz	0x1fce               	BNZ	_00298_DS_
001fca   0e10     movlw	0x10               	MOVLW	0x10
001fcc   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
                                           _00298_DS_:
001fce   e20e     bc	0x1fec                	BC	_00232_DS_
                                           ;	.line	349; TCPIP_Stack/LCDBlocking.c	LCDText[j] = ' ';
001fd0   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
001fd2   2401     addwf	0x1, 0, 0          	ADDWF	r0x01, W
001fd4   6e02     movwf	0x2, 0             	MOVWF	r0x02
001fd6   6a03     clrf	0x3, 0              	CLRF	r0x03
001fd8   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
001fda   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
001fdc   c002     movff	0x2, 0xfe9         	MOVFF	r0x02, FSR0L
001fde   ffe9
001fe0   c003     movff	0x3, 0xfea         	MOVFF	r0x03, FSR0H
001fe2   ffea
001fe4   0e20     movlw	0x20               	MOVLW	0x20
001fe6   6eef     movwf	0xef, 0            	MOVWF	INDF0
                                           ;	.line	347; TCPIP_Stack/LCDBlocking.c	for(j=i; j < 16u; j++)
001fe8   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
001fea   d7e9     bra	0x1fbe               	BRA	_00253_DS_
                                           _00232_DS_:
                                           ;	.line	352; TCPIP_Stack/LCDBlocking.c	LCDWrite(1, LCDText[i]);
001fec   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
001fee   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
001ff0   6e01     movwf	0x1, 0             	MOVWF	r0x01
001ff2   6a02     clrf	0x2, 0              	CLRF	r0x02
001ff4   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
001ff6   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
001ff8   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
001ffa   ffe9
001ffc   c002     movff	0x2, 0xfea         	MOVFF	r0x02, FSR0H
001ffe   ffea
002000   cfef     movff	0xfef, 0x1         	MOVFF	INDF0, r0x01
002002   f001
002004   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002006   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002008   0e01     movlw	0x1                	MOVLW	0x01
00200a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00200c   ecd3     call	0x39a6, 0           	CALL	_LCDWrite
00200e   f01c
002010   0e02     movlw	0x2                	MOVLW	0x02
002012   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	353; TCPIP_Stack/LCDBlocking.c	Delay10us(5);
002014   0e55     movlw	0x55               	MOVLW	0x55
002016   6e01     movwf	0x1, 0             	MOVWF	r0x01
002018   6a02     clrf	0x2, 0              	CLRF	r0x02
00201a   6a03     clrf	0x3, 0              	CLRF	r0x03
00201c   6a04     clrf	0x4, 0              	CLRF	r0x04
                                           _00233_DS_:
00201e   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
002020   f005
002022   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
002024   f006
002026   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
002028   f007
00202a   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
00202c   f008
00202e   0eff     movlw	0xff               	MOVLW	0xff
002030   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
002032   0eff     movlw	0xff               	MOVLW	0xff
002034   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
002036   0eff     movlw	0xff               	MOVLW	0xff
002038   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
00203a   0eff     movlw	0xff               	MOVLW	0xff
00203c   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
00203e   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
002040   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
002042   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
002044   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
002046   e1eb     bnz	0x201e               	BNZ	_00233_DS_
                                           ;	.line	341; TCPIP_Stack/LCDBlocking.c	for(i = 0; i < 16u; i++)
002048   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
00204a   d79f     bra	0x1f8a               	BRA	_00257_DS_
                                           _00260_DS_:
                                           ;	.line	357; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0xC0);
00204c   0ec0     movlw	0xc0               	MOVLW	0xc0
00204e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002050   0e00     movlw	0                  	MOVLW	0x00
002052   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002054   ecd3     call	0x39a6, 0           	CALL	_LCDWrite
002056   f01c
002058   0e02     movlw	0x2                	MOVLW	0x02
00205a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	358; TCPIP_Stack/LCDBlocking.c	Delay10us(5);
00205c   0e55     movlw	0x55               	MOVLW	0x55
00205e   6e00     movwf	0, 0               	MOVWF	r0x00
002060   6a01     clrf	0x1, 0              	CLRF	r0x01
002062   6a02     clrf	0x2, 0              	CLRF	r0x02
002064   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00239_DS_:
002066   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
002068   f004
00206a   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
00206c   f005
00206e   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
002070   f006
002072   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
002074   f007
002076   0eff     movlw	0xff               	MOVLW	0xff
002078   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
00207a   0eff     movlw	0xff               	MOVLW	0xff
00207c   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
00207e   0eff     movlw	0xff               	MOVLW	0xff
002080   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
002082   0eff     movlw	0xff               	MOVLW	0xff
002084   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
002086   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002088   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
00208a   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
00208c   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
00208e   e1eb     bnz	0x2066               	BNZ	_00239_DS_
                                           ;	.line	361; TCPIP_Stack/LCDBlocking.c	for(i = 16; i < 32u; i++)
002090   0e10     movlw	0x10               	MOVLW	0x10
002092   6e00     movwf	0, 0               	MOVWF	r0x00
                                           _00265_DS_:
002094   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
002096   f001
002098   6a02     clrf	0x2, 0              	CLRF	r0x02
00209a   0e00     movlw	0                  	MOVLW	0x00
00209c   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
00209e   e102     bnz	0x20a4               	BNZ	_00299_DS_
0020a0   0e20     movlw	0x20               	MOVLW	0x20
0020a2   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00299_DS_:
0020a4   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0020a6   d057     bra	0x2156               	BRA	_00269_DS_
                                           ;	.line	365; TCPIP_Stack/LCDBlocking.c	if(LCDText[i] == 0u)
0020a8   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
0020aa   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
0020ac   6e01     movwf	0x1, 0             	MOVWF	r0x01
0020ae   6a02     clrf	0x2, 0              	CLRF	r0x02
0020b0   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
0020b2   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0020b4   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
0020b6   ffe9
0020b8   c002     movff	0x2, 0xfea         	MOVFF	r0x02, FSR0H
0020ba   ffea
0020bc   cfef     movff	0xfef, 0x1         	MOVFF	INDF0, r0x01
0020be   f001
0020c0   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0020c2   e119     bnz	0x20f6               	BNZ	_00246_DS_
                                           ;	.line	367; TCPIP_Stack/LCDBlocking.c	for(j=i; j < 32u; j++)
0020c4   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
0020c6   f001
                                           _00261_DS_:
0020c8   c001     movff	0x1, 0x2           	MOVFF	r0x01, r0x02
0020ca   f002
0020cc   6a03     clrf	0x3, 0              	CLRF	r0x03
0020ce   0e00     movlw	0                  	MOVLW	0x00
0020d0   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
0020d2   e102     bnz	0x20d8               	BNZ	_00300_DS_
0020d4   0e20     movlw	0x20               	MOVLW	0x20
0020d6   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
                                           _00300_DS_:
0020d8   e20e     bc	0x20f6                	BC	_00246_DS_
                                           ;	.line	369; TCPIP_Stack/LCDBlocking.c	LCDText[j] = ' ';
0020da   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
0020dc   2401     addwf	0x1, 0, 0          	ADDWF	r0x01, W
0020de   6e02     movwf	0x2, 0             	MOVWF	r0x02
0020e0   6a03     clrf	0x3, 0              	CLRF	r0x03
0020e2   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
0020e4   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
0020e6   c002     movff	0x2, 0xfe9         	MOVFF	r0x02, FSR0L
0020e8   ffe9
0020ea   c003     movff	0x3, 0xfea         	MOVFF	r0x03, FSR0H
0020ec   ffea
0020ee   0e20     movlw	0x20               	MOVLW	0x20
0020f0   6eef     movwf	0xef, 0            	MOVWF	INDF0
                                           ;	.line	367; TCPIP_Stack/LCDBlocking.c	for(j=i; j < 32u; j++)
0020f2   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
0020f4   d7e9     bra	0x20c8               	BRA	_00261_DS_
                                           _00246_DS_:
                                           ;	.line	372; TCPIP_Stack/LCDBlocking.c	LCDWrite(1, LCDText[i]);
0020f6   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
0020f8   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
0020fa   6e01     movwf	0x1, 0             	MOVWF	r0x01
0020fc   6a02     clrf	0x2, 0              	CLRF	r0x02
0020fe   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
002100   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
002102   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
002104   ffe9
002106   c002     movff	0x2, 0xfea         	MOVFF	r0x02, FSR0H
002108   ffea
00210a   cfef     movff	0xfef, 0x1         	MOVFF	INDF0, r0x01
00210c   f001
00210e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002110   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002112   0e01     movlw	0x1                	MOVLW	0x01
002114   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002116   ecd3     call	0x39a6, 0           	CALL	_LCDWrite
002118   f01c
00211a   0e02     movlw	0x2                	MOVLW	0x02
00211c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	373; TCPIP_Stack/LCDBlocking.c	Delay10us(5);
00211e   0e55     movlw	0x55               	MOVLW	0x55
002120   6e01     movwf	0x1, 0             	MOVWF	r0x01
002122   6a02     clrf	0x2, 0              	CLRF	r0x02
002124   6a03     clrf	0x3, 0              	CLRF	r0x03
002126   6a04     clrf	0x4, 0              	CLRF	r0x04
                                           _00247_DS_:
002128   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
00212a   f005
00212c   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
00212e   f006
002130   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
002132   f007
002134   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
002136   f008
002138   0eff     movlw	0xff               	MOVLW	0xff
00213a   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
00213c   0eff     movlw	0xff               	MOVLW	0xff
00213e   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
002140   0eff     movlw	0xff               	MOVLW	0xff
002142   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
002144   0eff     movlw	0xff               	MOVLW	0xff
002146   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
002148   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00214a   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
00214c   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
00214e   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
002150   e1eb     bnz	0x2128               	BNZ	_00247_DS_
                                           ;	.line	361; TCPIP_Stack/LCDBlocking.c	for(i = 16; i < 32u; i++)
002152   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
002154   d79f     bra	0x2094               	BRA	_00265_DS_
                                           _00269_DS_:
002156   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
002158   f008
00215a   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
00215c   f007
00215e   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
002160   f006
002162   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
002164   f005
002166   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
002168   f004
00216a   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00216c   f003
00216e   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
002170   f002
002172   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
002174   f001
002176   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002178   f000
00217a   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00217c   ffd9
00217e   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDInit	code
                                           _LCDInit:
                                           ;	.line	207; TCPIP_Stack/LCDBlocking.c	void LCDInit(void)
002180   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002182   ffe5
002184   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002186   ffd9
002188   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00218a   ffe5
00218c   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00218e   ffe5
002190   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
002192   ffe5
002194   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002196   ffe5
002198   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00219a   ffe5
00219c   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
00219e   ffe5
0021a0   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0021a2   ffe5
0021a4   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
0021a6   ffe5
0021a8   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
0021aa   ffe5
                                           ;	.line	211; TCPIP_Stack/LCDBlocking.c	memset(LCDText, ' ', sizeof(LCDText)-1);
0021ac   0e00     movlw	0                  	MOVLW	0x00
0021ae   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0021b0   0e20     movlw	0x20               	MOVLW	0x20
0021b2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0021b4   0e20     movlw	0x20               	MOVLW	0x20
0021b6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0021b8   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
0021ba   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0021bc   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
0021be   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0021c0   ec73     call	0x32e6, 0           	CALL	_memset
0021c2   f019
0021c4   0e05     movlw	0x5                	MOVLW	0x05
0021c6   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0021c8   010f     movlb	0xf                	BANKSEL	(_LCDText + 32)
                                           ;	.line	212; TCPIP_Stack/LCDBlocking.c	LCDText[sizeof(LCDText)-1] = 0;
0021ca   6b20     clrf	0x20, 0x1           	CLRF	(_LCDText + 32), B
                                           ;	.line	215; TCPIP_Stack/LCDBlocking.c	LCD_E_IO = 0;
0021cc   9090     bcf	0x90, 0, 0           	BCF	_LATHbits, 0
                                           ;	.line	216; TCPIP_Stack/LCDBlocking.c	LCD_RD_WR_IO = 0;
0021ce   9290     bcf	0x90, 0x1, 0         	BCF	_LATHbits, 1
                                           ;	.line	220; TCPIP_Stack/LCDBlocking.c	LCD_DATA_TRIS = 0x00;
0021d0   6a96     clrf	0x96, 0             	CLRF	_TRISE
                                           ;	.line	233; TCPIP_Stack/LCDBlocking.c	LCD_RD_WR_TRIS = 0;
0021d2   9299     bcf	0x99, 0x1, 0         	BCF	_TRISHbits, 1
                                           ;	.line	234; TCPIP_Stack/LCDBlocking.c	LCD_RS_TRIS = 0;
0021d4   9499     bcf	0x99, 0x2, 0         	BCF	_TRISHbits, 2
                                           ;	.line	235; TCPIP_Stack/LCDBlocking.c	LCD_E_TRIS = 0;
0021d6   9099     bcf	0x99, 0, 0           	BCF	_TRISHbits, 0
                                           ;	.line	239; TCPIP_Stack/LCDBlocking.c	DelayMs(40);
0021d8   0ea0     movlw	0xa0               	MOVLW	0xa0
0021da   6e00     movwf	0, 0               	MOVWF	r0x00
0021dc   0e09     movlw	0x9                	MOVLW	0x09
0021de   6e01     movwf	0x1, 0             	MOVWF	r0x01
0021e0   0e01     movlw	0x1                	MOVLW	0x01
0021e2   6e02     movwf	0x2, 0             	MOVWF	r0x02
0021e4   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00143_DS_:
0021e6   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
0021e8   f004
0021ea   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
0021ec   f005
0021ee   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
0021f0   f006
0021f2   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
0021f4   f007
0021f6   0eff     movlw	0xff               	MOVLW	0xff
0021f8   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0021fa   0eff     movlw	0xff               	MOVLW	0xff
0021fc   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
0021fe   0eff     movlw	0xff               	MOVLW	0xff
002200   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
002202   0eff     movlw	0xff               	MOVLW	0xff
002204   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
002206   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002208   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
00220a   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
00220c   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
00220e   e1eb     bnz	0x21e6               	BNZ	_00143_DS_
                                           ;	.line	247; TCPIP_Stack/LCDBlocking.c	LCD_RS_IO = 0;
002210   9490     bcf	0x90, 0x2, 0         	BCF	_LATHbits, 2
                                           ;	.line	249; TCPIP_Stack/LCDBlocking.c	LCD_DATA_IO = 0x03;
002212   0e03     movlw	0x3                	MOVLW	0x03
002214   6e8d     movwf	0x8d, 0            	MOVWF	_LATE
002216   0000     nop                      	nop 
002218   0000     nop                      	nop 
                                           ;	.line	264; TCPIP_Stack/LCDBlocking.c	for(i = 0; i < 3u; i++)
00221a   6a00     clrf	0, 0                	CLRF	r0x00
                                           _00191_DS_:
00221c   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
00221e   f001
002220   6a02     clrf	0x2, 0              	CLRF	r0x02
002222   0e00     movlw	0                  	MOVLW	0x00
002224   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
002226   e102     bnz	0x222c               	BNZ	_00220_DS_
002228   0e03     movlw	0x3                	MOVLW	0x03
00222a   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00220_DS_:
00222c   e239     bc	0x22a0                	BC	_00194_DS_
                                           ;	.line	266; TCPIP_Stack/LCDBlocking.c	LCD_E_IO = 1;
00222e   8090     bsf	0x90, 0, 0           	BSF	_LATHbits, 0
                                           ;	.line	267; TCPIP_Stack/LCDBlocking.c	Delay10us(1);	       	// Wait E Pulse width time (min 230ns)
002230   0e11     movlw	0x11               	MOVLW	0x11
002232   6e01     movwf	0x1, 0             	MOVWF	r0x01
002234   6a02     clrf	0x2, 0              	CLRF	r0x02
002236   6a03     clrf	0x3, 0              	CLRF	r0x03
002238   6a04     clrf	0x4, 0              	CLRF	r0x04
                                           _00155_DS_:
00223a   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
00223c   f005
00223e   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
002240   f006
002242   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
002244   f007
002246   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
002248   f008
00224a   0eff     movlw	0xff               	MOVLW	0xff
00224c   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
00224e   0eff     movlw	0xff               	MOVLW	0xff
002250   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
002252   0eff     movlw	0xff               	MOVLW	0xff
002254   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
002256   0eff     movlw	0xff               	MOVLW	0xff
002258   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
00225a   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00225c   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
00225e   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
002260   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
002262   e1eb     bnz	0x223a               	BNZ	_00155_DS_
                                           ;	.line	268; TCPIP_Stack/LCDBlocking.c	LCD_E_IO = 0;
002264   9090     bcf	0x90, 0, 0           	BCF	_LATHbits, 0
                                           ;	.line	269; TCPIP_Stack/LCDBlocking.c	DelayMs(2);
002266   0e48     movlw	0x48               	MOVLW	0x48
002268   6e01     movwf	0x1, 0             	MOVWF	r0x01
00226a   0e0d     movlw	0xd                	MOVLW	0x0d
00226c   6e02     movwf	0x2, 0             	MOVWF	r0x02
00226e   6a03     clrf	0x3, 0              	CLRF	r0x03
002270   6a04     clrf	0x4, 0              	CLRF	r0x04
                                           _00161_DS_:
002272   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
002274   f005
002276   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
002278   f006
00227a   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
00227c   f007
00227e   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
002280   f008
002282   0eff     movlw	0xff               	MOVLW	0xff
002284   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
002286   0eff     movlw	0xff               	MOVLW	0xff
002288   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
00228a   0eff     movlw	0xff               	MOVLW	0xff
00228c   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
00228e   0eff     movlw	0xff               	MOVLW	0xff
002290   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
002292   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
002294   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
002296   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
002298   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
00229a   e1eb     bnz	0x2272               	BNZ	_00161_DS_
                                           ;	.line	264; TCPIP_Stack/LCDBlocking.c	for(i = 0; i < 3u; i++)
00229c   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
00229e   d7be     bra	0x221c               	BRA	_00191_DS_
                                           _00194_DS_:
                                           ;	.line	295; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0x38);
0022a0   0e38     movlw	0x38               	MOVLW	0x38
0022a2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0022a4   0e00     movlw	0                  	MOVLW	0x00
0022a6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0022a8   ecd3     call	0x39a6, 0           	CALL	_LCDWrite
0022aa   f01c
0022ac   0e02     movlw	0x2                	MOVLW	0x02
0022ae   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	297; TCPIP_Stack/LCDBlocking.c	Delay10us(5);
0022b0   0e55     movlw	0x55               	MOVLW	0x55
0022b2   6e00     movwf	0, 0               	MOVWF	r0x00
0022b4   6a01     clrf	0x1, 0              	CLRF	r0x01
0022b6   6a02     clrf	0x2, 0              	CLRF	r0x02
0022b8   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00167_DS_:
0022ba   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
0022bc   f004
0022be   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
0022c0   f005
0022c2   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
0022c4   f006
0022c6   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
0022c8   f007
0022ca   0eff     movlw	0xff               	MOVLW	0xff
0022cc   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0022ce   0eff     movlw	0xff               	MOVLW	0xff
0022d0   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
0022d2   0eff     movlw	0xff               	MOVLW	0xff
0022d4   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0022d6   0eff     movlw	0xff               	MOVLW	0xff
0022d8   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
0022da   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0022dc   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
0022de   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
0022e0   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
0022e2   e1eb     bnz	0x22ba               	BNZ	_00167_DS_
                                           ;	.line	300; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0x06);	// Increment after each write, do not shift
0022e4   0e06     movlw	0x6                	MOVLW	0x06
0022e6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0022e8   0e00     movlw	0                  	MOVLW	0x00
0022ea   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0022ec   ecd3     call	0x39a6, 0           	CALL	_LCDWrite
0022ee   f01c
0022f0   0e02     movlw	0x2                	MOVLW	0x02
0022f2   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	301; TCPIP_Stack/LCDBlocking.c	Delay10us(5);
0022f4   0e55     movlw	0x55               	MOVLW	0x55
0022f6   6e00     movwf	0, 0               	MOVWF	r0x00
0022f8   6a01     clrf	0x1, 0              	CLRF	r0x01
0022fa   6a02     clrf	0x2, 0              	CLRF	r0x02
0022fc   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00173_DS_:
0022fe   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
002300   f004
002302   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
002304   f005
002306   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
002308   f006
00230a   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
00230c   f007
00230e   0eff     movlw	0xff               	MOVLW	0xff
002310   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
002312   0eff     movlw	0xff               	MOVLW	0xff
002314   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
002316   0eff     movlw	0xff               	MOVLW	0xff
002318   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
00231a   0eff     movlw	0xff               	MOVLW	0xff
00231c   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
00231e   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002320   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
002322   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
002324   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
002326   e1eb     bnz	0x22fe               	BNZ	_00173_DS_
                                           ;	.line	304; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0x0C);	// Turn display on, no cusor, no cursor blink
002328   0e0c     movlw	0xc                	MOVLW	0x0c
00232a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00232c   0e00     movlw	0                  	MOVLW	0x00
00232e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002330   ecd3     call	0x39a6, 0           	CALL	_LCDWrite
002332   f01c
002334   0e02     movlw	0x2                	MOVLW	0x02
002336   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	305; TCPIP_Stack/LCDBlocking.c	Delay10us(5);
002338   0e55     movlw	0x55               	MOVLW	0x55
00233a   6e00     movwf	0, 0               	MOVWF	r0x00
00233c   6a01     clrf	0x1, 0              	CLRF	r0x01
00233e   6a02     clrf	0x2, 0              	CLRF	r0x02
002340   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00179_DS_:
002342   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
002344   f004
002346   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
002348   f005
00234a   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
00234c   f006
00234e   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
002350   f007
002352   0eff     movlw	0xff               	MOVLW	0xff
002354   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
002356   0eff     movlw	0xff               	MOVLW	0xff
002358   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
00235a   0eff     movlw	0xff               	MOVLW	0xff
00235c   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
00235e   0eff     movlw	0xff               	MOVLW	0xff
002360   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
002362   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002364   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
002366   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
002368   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
00236a   e1eb     bnz	0x2342               	BNZ	_00179_DS_
                                           ;	.line	308; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0x01);	
00236c   0e01     movlw	0x1                	MOVLW	0x01
00236e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002370   0e00     movlw	0                  	MOVLW	0x00
002372   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002374   ecd3     call	0x39a6, 0           	CALL	_LCDWrite
002376   f01c
002378   0e02     movlw	0x2                	MOVLW	0x02
00237a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	309; TCPIP_Stack/LCDBlocking.c	DelayMs(2);
00237c   0e48     movlw	0x48               	MOVLW	0x48
00237e   6e00     movwf	0, 0               	MOVWF	r0x00
002380   0e0d     movlw	0xd                	MOVLW	0x0d
002382   6e01     movwf	0x1, 0             	MOVWF	r0x01
002384   6a02     clrf	0x2, 0              	CLRF	r0x02
002386   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00185_DS_:
002388   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
00238a   f004
00238c   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
00238e   f005
002390   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
002392   f006
002394   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
002396   f007
002398   0eff     movlw	0xff               	MOVLW	0xff
00239a   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
00239c   0eff     movlw	0xff               	MOVLW	0xff
00239e   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
0023a0   0eff     movlw	0xff               	MOVLW	0xff
0023a2   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0023a4   0eff     movlw	0xff               	MOVLW	0xff
0023a6   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
0023a8   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0023aa   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
0023ac   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
0023ae   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
0023b0   e1eb     bnz	0x2388               	BNZ	_00185_DS_
0023b2   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
0023b4   f008
0023b6   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
0023b8   f007
0023ba   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0023bc   f006
0023be   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0023c0   f005
0023c2   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0023c4   f004
0023c6   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0023c8   f003
0023ca   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0023cc   f002
0023ce   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0023d0   f001
0023d2   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0023d4   f000
0023d6   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0023d8   ffd9
0023da   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDWrite	code
                                           _LCDWrite:
                                           ;	.line	94; TCPIP_Stack/LCDBlocking.c	static void LCDWrite(BYTE RS, BYTE Data)
0039a6   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0039a8   ffe5
0039aa   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0039ac   ffd9
0039ae   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0039b0   ffe5
0039b2   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0039b4   ffe5
0039b6   0e02     movlw	0x2                	MOVLW	0x02
0039b8   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0039ba   f000
0039bc   0e03     movlw	0x3                	MOVLW	0x03
0039be   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0039c0   f001
                                           ;	.line	97; TCPIP_Stack/LCDBlocking.c	LCD_DATA_TRIS = 0x00;
0039c2   6a96     clrf	0x96, 0             	CLRF	_TRISE
                                           ;	.line	110; TCPIP_Stack/LCDBlocking.c	LCD_RS_TRIS = 0;
0039c4   9499     bcf	0x99, 0x2, 0         	BCF	_TRISHbits, 2
                                           ;	.line	111; TCPIP_Stack/LCDBlocking.c	LCD_RD_WR_TRIS = 0;
0039c6   9299     bcf	0x99, 0x1, 0         	BCF	_TRISHbits, 1
                                           ;	.line	112; TCPIP_Stack/LCDBlocking.c	LCD_RD_WR_IO = 0;
0039c8   9290     bcf	0x90, 0x1, 0         	BCF	_LATHbits, 1
                                           ;	.line	113; TCPIP_Stack/LCDBlocking.c	LCD_RS_IO = RS;
0039ca   5000     movf	0, 0, 0             	MOVF	r0x00, W
0039cc   0b01     andlw	0x1                	ANDLW	0x01
0039ce   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
0039d0   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
0039d2   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
0039d4   5090     movf	0x90, 0, 0          	MOVF	_LATHbits, W
0039d6   0bfb     andlw	0xfb               	ANDLW	0xfb
0039d8   10f4     iorwf	0xf4, 0, 0         	IORWF	PRODH, W
0039da   6e90     movwf	0x90, 0            	MOVWF	_LATHbits
                                           ;	.line	140; TCPIP_Stack/LCDBlocking.c	LCD_DATA_IO = Data;
0039dc   c001     movff	0x1, 0xf8d         	MOVFF	r0x01, _LATE
0039de   ff8d
0039e0   0000     nop                      	nop 
0039e2   0000     nop                      	nop 
                                           ;	.line	155; TCPIP_Stack/LCDBlocking.c	LCD_E_IO = 1;
0039e4   8090     bsf	0x90, 0, 0           	BSF	_LATHbits, 0
0039e6   0000     nop                      	nop 
0039e8   0000     nop                      	nop 
0039ea   0000     nop                      	nop 
0039ec   0000     nop                      	nop 
0039ee   0000     nop                      	nop 
0039f0   0000     nop                      	nop 
0039f2   0000     nop                      	nop 
0039f4   0000     nop                      	nop 
0039f6   0000     nop                      	nop 
                                           ;	.line	165; TCPIP_Stack/LCDBlocking.c	LCD_E_IO = 0;
0039f8   9090     bcf	0x90, 0, 0           	BCF	_LATHbits, 0
0039fa   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0039fc   f001
0039fe   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
003a00   f000
003a02   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
003a04   ffd9
003a06   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 1496 (0x05d8) bytes ( 1.14%)
                                           ;           	  748 (0x02ec) words
                                           ; udata size:	   33 (0x0021) bytes ( 0.86%)
                                           ; access size:	    9 (0x0009) bytes
                                           
                                           
                                           	end
