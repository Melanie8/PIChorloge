gplink-1.2.0 #980 (Oct 17 2013)
Copyright (c) 1998-2013 gputils project
Listing File Generated: 10-25-2013  17:07:08
 
 
Address  Value    Disassembly              Source
-------  -----    -----------              ------
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Oct 17 2013) (Mac OS X ppc)
                                           ; This file was generated Fri Oct 25 17:07:08 2013
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _inc_tsec
                                           	global _inc_amin
                                           	global _time
                                           	global _manageseconds
                                           	global _button
                                           	global _refresh_lcd
                                           	global _DisplayString
                                           	global _strlcpy
                                           	global _chandelle
                                           	global _thour
                                           	global _tmin
                                           	global _tsec
                                           	global _alarm_set
                                           	global _ahour
                                           	global _amin
                                           	global _ahour_o
                                           	global _amin_o
                                           	global _snooze
                                           	global _stop_ringing
                                           	global _whereami
                                           	global _new_time
                                           	global _halfsecond
                                           	global _button1
                                           	global _button2
                                           	global _overflows
                                           	global _pseudoseconds
                                           	global _high_isr
                                           	global _low_isr
                                           	global _main
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern __gptrget1
                                           	extern __gptrput1
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _LCDText
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _sprintf
                                           	extern _strlen
                                           	extern _LCDInit
                                           	extern _LCDUpdate
                                           	extern __divsint
                                           	extern __modsint
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           PCL	equ	0xff9
                                           PCLATH	equ	0xffa
                                           PCLATU	equ	0xffb
                                           WREG	equ	0xfe8
                                           BSR	equ	0xfe0
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           	idata
                                           _chandelle	db	0x01
                                           _thour	db	0x00
                                           _tmin	db	0x00
                                           _tsec	db	0x00
                                           _alarm_set	db	0x00
                                           _ahour	db	0x00
                                           _amin	db	0x00
                                           _ahour_o	db	0x00
                                           _amin_o	db	0x00
                                           _snooze	db	0x00
                                           _stop_ringing	db	0x00
                                           _whereami	db	0x00
                                           _new_time	db	0x00
                                           _halfsecond	db	0x00
                                           _button1	db	0x00
                                           _button2	db	0x00
                                           _overflows	db	0x00, 0x00
                                           _pseudoseconds	db	0x00, 0x00
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           r0x0a	res	1
                                           r0x0b	res	1
                                           r0x0c	res	1
                                           r0x0d	res	1
                                           r0x0e	res	1
                                           r0x0f	res	1
                                           r0x10	res	1
                                           r0x11	res	1
                                           r0x12	res	1
                                           r0x13	res	1
                                           r0x14	res	1
                                           r0x15	res	1
                                           
                                           udata_lena_0	udata
                                           _refresh_lcd_display_1_1	res	32
                                           
                                           ;--------------------------------------------------------
                                           ; interrupt vector 
                                           ;--------------------------------------------------------
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; ; Starting pCode block for absolute section
                                           ; ;-----------------------------------------
                                           S_lena_ivec_0x1_high_isr	code	0X000008
                                           ivec_0x1_high_isr:
000008   ef1f     goto    0xe3e            	GOTO	_high_isr
00000a   f007
                                           
                                           ; ; Starting pCode block for absolute section
                                           ; ;-----------------------------------------
                                           S_lena_ivec_0x2_low_isr	code	0X000018
                                           ivec_0x2_low_isr:
000018   ef61     goto    0x2ac2           	GOTO	_low_isr
00001a   f015
                                           
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_lena__main	code
                                           _main:
                                           ;	.line	142; lena.c	RCONbits.IPEN       = 1; //enable interrupts priority levels
002b94   8ed0     bsf     0xd0, 0x7, 0     	BSF	_RCONbits, 7
                                           ;	.line	143; lena.c	INTCONbits.GIE      = 1; //enables all high-priority interrupts
002b96   8ef2     bsf     0xf2, 0x7, 0     	BSF	_INTCONbits, 7
                                           ;	.line	144; lena.c	INTCONbits.PEIE     = 1; //enables all low-priority peripheral interrupts
002b98   8cf2     bsf     0xf2, 0x6, 0     	BSF	_INTCONbits, 6
                                           ;	.line	147; lena.c	T0CONbits.TMR0ON    = 1; //enables Timer0
002b9a   8ed5     bsf     0xd5, 0x7, 0     	BSF	_T0CONbits, 7
                                           ;	.line	148; lena.c	INTCONbits.TMR0IE   = 1; //enables the TMR0 overflow interrupt
002b9c   8af2     bsf     0xf2, 0x5, 0     	BSF	_INTCONbits, 5
                                           ;	.line	149; lena.c	INTCONbits.TMR0IF   = 0; //clear Timer0 overflow bit
002b9e   94f2     bcf     0xf2, 0x2, 0     	BCF	_INTCONbits, 2
                                           ;	.line	150; lena.c	INTCON2bits.TMR0IP  = 1; //high priority
002ba0   84f1     bsf     0xf1, 0x2, 0     	BSF	_INTCON2bits, 2
                                           ;	.line	151; lena.c	T0CONbits.T08BIT    = 0; //timer0 is configured as a 16-bit timer/counter
002ba2   9cd5     bcf     0xd5, 0x6, 0     	BCF	_T0CONbits, 6
                                           ;	.line	152; lena.c	T0CONbits.T0CS      = 0; //internal instruction cycle clock (CLKO)
002ba4   9ad5     bcf     0xd5, 0x5, 0     	BCF	_T0CONbits, 5
                                           ;	.line	153; lena.c	T0CONbits.PSA       = 1; //timer0 prescaler is not assigned
002ba6   86d5     bsf     0xd5, 0x3, 0     	BSF	_T0CONbits, 3
                                           ;	.line	154; lena.c	TMR0L = 0;    TMR0H = 0;
002ba8   6ad6     clrf    0xd6, 0          	CLRF	_TMR0L
002baa   6ad7     clrf    0xd7, 0          	CLRF	_TMR0H
                                           ;	.line	157; lena.c	LED0_TRIS = 0; //configure 1st led pin as output (yellow)
002bac   909a     bcf     0x9a, 0, 0       	BCF	_TRISJbits, 0
                                           ;	.line	158; lena.c	LED1_TRIS = 0; //configure 2nd led pin as output (red)
002bae   929a     bcf     0x9a, 0x1, 0     	BCF	_TRISJbits, 1
                                           ;	.line	159; lena.c	LED2_TRIS = 0; //configure 3rd led pin as output (red)
002bb0   949a     bcf     0x9a, 0x2, 0     	BCF	_TRISJbits, 2
                                           ;	.line	160; lena.c	LATJbits.LATJ0 = 0; // switch LED 1 off
002bb2   9091     bcf     0x91, 0, 0       	BCF	_LATJbits, 0
                                           ;	.line	161; lena.c	LATJbits.LATJ1 = 0; // switch LED 2 off
002bb4   9291     bcf     0x91, 0x1, 0     	BCF	_LATJbits, 1
                                           ;	.line	162; lena.c	LATJbits.LATJ2 = 0; // switch LED 3 off
002bb6   9491     bcf     0x91, 0x2, 0     	BCF	_LATJbits, 2
                                           ;	.line	165; lena.c	BUTTON0_TRIS        = 1; //configure 1st button as input
002bb8   8693     bsf     0x93, 0x3, 0     	BSF	_TRISBbits, 3
                                           ;	.line	166; lena.c	BUTTON1_TRIS        = 1; //configure 2nd button as input
002bba   8293     bsf     0x93, 0x1, 0     	BSF	_TRISBbits, 1
                                           ;	.line	167; lena.c	INTCON3bits.INT3E   = 1; //enable INT3 interrupt (button 1)
002bbc   8af0     bsf     0xf0, 0x5, 0     	BSF	_INTCON3bits, 5
                                           ;	.line	168; lena.c	INTCON3bits.INT3F   = 0; //clear INT3 flag
002bbe   94f0     bcf     0xf0, 0x2, 0     	BCF	_INTCON3bits, 2
                                           ;	.line	169; lena.c	INTCON3bits.INT1E   = 1; //enable INT1 interrupt (button 2)
002bc0   86f0     bsf     0xf0, 0x3, 0     	BSF	_INTCON3bits, 3
                                           ;	.line	170; lena.c	INTCON3bits.INT1F   = 0; //clear INT1 flag
002bc2   90f0     bcf     0xf0, 0, 0       	BCF	_INTCON3bits, 0
                                           ;	.line	171; lena.c	INTCON3bits.INT1IP  = 0; //low priority
002bc4   9cf0     bcf     0xf0, 0x6, 0     	BCF	_INTCON3bits, 6
                                           ;	.line	172; lena.c	INTCON2bits.INT3IP  = 0; //low priority
002bc6   92f1     bcf     0xf1, 0x1, 0     	BCF	_INTCON2bits, 1
                                           ;	.line	176; lena.c	LCDInit();
002bc8   ecf4     call    0x15e8, 0        	CALL	_LCDInit
002bca   f00a
                                           ;	.line	177; lena.c	whereami = TIME_MENU;
002bcc   0e01     movlw   0x1              	MOVLW	0x01
002bce   010f     movlb   0xf              	BANKSEL	_whereami
002bd0   6f4c     movwf   0x4c, 0x1        	MOVWF	_whereami, B
002bd2   010f     movlb   0xf              	BANKSEL	_chandelle
                                           ;	.line	179; lena.c	chandelle++; // ##### BIZARRE ####
002bd4   2b41     incf    0x41, 0x1, 0x1   	INCF	_chandelle, F, B
                                           ;	.line	181; lena.c	T0CONbits.TMR0ON = 1; // start timer0
002bd6   8ed5     bsf     0xd5, 0x7, 0     	BSF	_T0CONbits, 7
                                           _00135_DS_:
                                           ;	.line	183; lena.c	time();
002bd8   ec9d     call    0x1d3a, 0        	CALL	_time
002bda   f00e
                                           ;	.line	184; lena.c	manageseconds();
002bdc   ec16     call    0x2c2c, 0        	CALL	_manageseconds
002bde   f016
                                           ;	.line	185; lena.c	button();
002be0   ecc6     call    0x138c, 0        	CALL	_button
002be2   f009
                                           ;	.line	186; lena.c	refresh_lcd();
002be4   ec29     call    0x852, 0         	CALL	_refresh_lcd
002be6   f004
002be8   d7f7     bra     0x2bd8           	BRA	_00135_DS_
002bea   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_lena__strlcpy	code
                                           _strlcpy:
                                           ;	.line	530; lena.c	strlcpy(char *dst, const char *src, size_t siz)
001844   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
001846   ffe5
001848   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
00184a   ffd9
00184c   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
00184e   ffe5
001850   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
001852   ffe5
001854   c002     movff   0x2, 0xfe5       	MOVFF	r0x02, POSTDEC1
001856   ffe5
001858   c003     movff   0x3, 0xfe5       	MOVFF	r0x03, POSTDEC1
00185a   ffe5
00185c   c004     movff   0x4, 0xfe5       	MOVFF	r0x04, POSTDEC1
00185e   ffe5
001860   c005     movff   0x5, 0xfe5       	MOVFF	r0x05, POSTDEC1
001862   ffe5
001864   c006     movff   0x6, 0xfe5       	MOVFF	r0x06, POSTDEC1
001866   ffe5
001868   c007     movff   0x7, 0xfe5       	MOVFF	r0x07, POSTDEC1
00186a   ffe5
00186c   c008     movff   0x8, 0xfe5       	MOVFF	r0x08, POSTDEC1
00186e   ffe5
001870   c009     movff   0x9, 0xfe5       	MOVFF	r0x09, POSTDEC1
001872   ffe5
001874   c00a     movff   0xa, 0xfe5       	MOVFF	r0x0a, POSTDEC1
001876   ffe5
001878   c00b     movff   0xb, 0xfe5       	MOVFF	r0x0b, POSTDEC1
00187a   ffe5
00187c   c00c     movff   0xc, 0xfe5       	MOVFF	r0x0c, POSTDEC1
00187e   ffe5
001880   c00d     movff   0xd, 0xfe5       	MOVFF	r0x0d, POSTDEC1
001882   ffe5
001884   c00e     movff   0xe, 0xfe5       	MOVFF	r0x0e, POSTDEC1
001886   ffe5
001888   c00f     movff   0xf, 0xfe5       	MOVFF	r0x0f, POSTDEC1
00188a   ffe5
00188c   c010     movff   0x10, 0xfe5      	MOVFF	r0x10, POSTDEC1
00188e   ffe5
001890   c011     movff   0x11, 0xfe5      	MOVFF	r0x11, POSTDEC1
001892   ffe5
001894   c012     movff   0x12, 0xfe5      	MOVFF	r0x12, POSTDEC1
001896   ffe5
001898   c013     movff   0x13, 0xfe5      	MOVFF	r0x13, POSTDEC1
00189a   ffe5
00189c   c014     movff   0x14, 0xfe5      	MOVFF	r0x14, POSTDEC1
00189e   ffe5
0018a0   c015     movff   0x15, 0xfe5      	MOVFF	r0x15, POSTDEC1
0018a2   ffe5
0018a4   0e02     movlw   0x2              	MOVLW	0x02
0018a6   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
0018a8   f000
0018aa   0e03     movlw   0x3              	MOVLW	0x03
0018ac   cfdb     movff   0xfdb, 0x1       	MOVFF	PLUSW2, r0x01
0018ae   f001
0018b0   0e04     movlw   0x4              	MOVLW	0x04
0018b2   cfdb     movff   0xfdb, 0x2       	MOVFF	PLUSW2, r0x02
0018b4   f002
0018b6   0e05     movlw   0x5              	MOVLW	0x05
0018b8   cfdb     movff   0xfdb, 0x3       	MOVFF	PLUSW2, r0x03
0018ba   f003
0018bc   0e06     movlw   0x6              	MOVLW	0x06
0018be   cfdb     movff   0xfdb, 0x4       	MOVFF	PLUSW2, r0x04
0018c0   f004
0018c2   0e07     movlw   0x7              	MOVLW	0x07
0018c4   cfdb     movff   0xfdb, 0x5       	MOVFF	PLUSW2, r0x05
0018c6   f005
0018c8   0e08     movlw   0x8              	MOVLW	0x08
0018ca   cfdb     movff   0xfdb, 0x6       	MOVFF	PLUSW2, r0x06
0018cc   f006
0018ce   0e09     movlw   0x9              	MOVLW	0x09
0018d0   cfdb     movff   0xfdb, 0x7       	MOVFF	PLUSW2, r0x07
0018d2   f007
                                           ;	.line	532; lena.c	char       *d = dst;
0018d4   c000     movff   0, 0x8           	MOVFF	r0x00, r0x08
0018d6   f008
0018d8   c001     movff   0x1, 0x9         	MOVFF	r0x01, r0x09
0018da   f009
0018dc   c002     movff   0x2, 0xa         	MOVFF	r0x02, r0x0a
0018de   f00a
                                           ;	.line	533; lena.c	const char *s = src;
0018e0   c003     movff   0x3, 0xb         	MOVFF	r0x03, r0x0b
0018e2   f00b
0018e4   c004     movff   0x4, 0xc         	MOVFF	r0x04, r0x0c
0018e6   f00c
0018e8   c005     movff   0x5, 0xd         	MOVFF	r0x05, r0x0d
0018ea   f00d
                                           ;	.line	534; lena.c	size_t      n = siz;
0018ec   c006     movff   0x6, 0xe         	MOVFF	r0x06, r0x0e
0018ee   f00e
0018f0   c007     movff   0x7, 0xf         	MOVFF	r0x07, r0x0f
0018f2   f00f
                                           ;	.line	537; lena.c	if (n != 0)
0018f4   5006     movf    0x6, 0, 0        	MOVF	r0x06, W
0018f6   1007     iorwf   0x7, 0, 0        	IORWF	r0x07, W
0018f8   b4d8     btfsc   0xd8, 0x2, 0     	BTFSC	STATUS, 2
0018fa   d03e     bra     0x1978           	BRA	_00368_DS_
                                           ;	.line	539; lena.c	while (--n != 0)
0018fc   c003     movff   0x3, 0x10        	MOVFF	r0x03, r0x10
0018fe   f010
001900   c004     movff   0x4, 0x11        	MOVFF	r0x04, r0x11
001902   f011
001904   c005     movff   0x5, 0x12        	MOVFF	r0x05, r0x12
001906   f012
001908   c006     movff   0x6, 0x13        	MOVFF	r0x06, r0x13
00190a   f013
00190c   c007     movff   0x7, 0x14        	MOVFF	r0x07, r0x14
00190e   f014
                                           _00364_DS_:
001910   0eff     movlw   0xff             	MOVLW	0xff
001912   2613     addwf   0x13, 0x1, 0     	ADDWF	r0x13, F
001914   a0d8     btfss   0xd8, 0, 0       	BTFSS	STATUS, 0
001916   0614     decf    0x14, 0x1, 0     	DECF	r0x14, F
001918   5013     movf    0x13, 0, 0       	MOVF	r0x13, W
00191a   1014     iorwf   0x14, 0, 0       	IORWF	r0x14, W
00191c   e01d     bz      0x1958           	BZ	_00383_DS_
                                           ;	.line	541; lena.c	if ((*d++ = *s++) == '\0')
00191e   c010     movff   0x10, 0xfe9      	MOVFF	r0x10, FSR0L
001920   ffe9
001922   c011     movff   0x11, 0xff3      	MOVFF	r0x11, PRODL
001924   fff3
001926   5012     movf    0x12, 0, 0       	MOVF	r0x12, W
001928   ec7a     call    0x2cf4, 0        	CALL	__gptrget1
00192a   f016
00192c   6e15     movwf   0x15, 0          	MOVWF	r0x15
00192e   2a10     incf    0x10, 0x1, 0     	INCF	r0x10, F
001930   b0d8     btfsc   0xd8, 0, 0       	BTFSC	STATUS, 0
001932   2a11     incf    0x11, 0x1, 0     	INCF	r0x11, F
001934   b0d8     btfsc   0xd8, 0, 0       	BTFSC	STATUS, 0
001936   2a12     incf    0x12, 0x1, 0     	INCF	r0x12, F
001938   c015     movff   0x15, 0xfe5      	MOVFF	r0x15, POSTDEC1
00193a   ffe5
00193c   c000     movff   0, 0xfe9         	MOVFF	r0x00, FSR0L
00193e   ffe9
001940   c001     movff   0x1, 0xff3       	MOVFF	r0x01, PRODL
001942   fff3
001944   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
001946   ecb0     call    0x2d60, 0        	CALL	__gptrput1
001948   f016
00194a   2a00     incf    0, 0x1, 0        	INCF	r0x00, F
00194c   b0d8     btfsc   0xd8, 0, 0       	BTFSC	STATUS, 0
00194e   2a01     incf    0x1, 0x1, 0      	INCF	r0x01, F
001950   b0d8     btfsc   0xd8, 0, 0       	BTFSC	STATUS, 0
001952   2a02     incf    0x2, 0x1, 0      	INCF	r0x02, F
001954   5015     movf    0x15, 0, 0       	MOVF	r0x15, W
001956   e1dc     bnz     0x1910           	BNZ	_00364_DS_
                                           _00383_DS_:
                                           ;	.line	542; lena.c	break;
001958   c010     movff   0x10, 0xb        	MOVFF	r0x10, r0x0b
00195a   f00b
00195c   c011     movff   0x11, 0xc        	MOVFF	r0x11, r0x0c
00195e   f00c
001960   c012     movff   0x12, 0xd        	MOVFF	r0x12, r0x0d
001962   f00d
001964   c000     movff   0, 0x8           	MOVFF	r0x00, r0x08
001966   f008
001968   c001     movff   0x1, 0x9         	MOVFF	r0x01, r0x09
00196a   f009
00196c   c002     movff   0x2, 0xa         	MOVFF	r0x02, r0x0a
00196e   f00a
001970   c013     movff   0x13, 0xe        	MOVFF	r0x13, r0x0e
001972   f00e
001974   c014     movff   0x14, 0xf        	MOVFF	r0x14, r0x0f
001976   f00f
                                           _00368_DS_:
                                           ;	.line	547; lena.c	if (n == 0)
001978   500e     movf    0xe, 0, 0        	MOVF	r0x0e, W
00197a   100f     iorwf   0xf, 0, 0        	IORWF	r0x0f, W
00197c   e127     bnz     0x19cc           	BNZ	_00375_DS_
                                           ;	.line	549; lena.c	if (siz != 0)
00197e   5006     movf    0x6, 0, 0        	MOVF	r0x06, W
001980   1007     iorwf   0x7, 0, 0        	IORWF	r0x07, W
001982   e009     bz      0x1996           	BZ	_00382_DS_
                                           ;	.line	550; lena.c	*d = '\0';          /* NUL-terminate dst */
001984   0e00     movlw   0                	MOVLW	0x00
001986   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001988   c008     movff   0x8, 0xfe9       	MOVFF	r0x08, FSR0L
00198a   ffe9
00198c   c009     movff   0x9, 0xff3       	MOVFF	r0x09, PRODL
00198e   fff3
001990   500a     movf    0xa, 0, 0        	MOVF	r0x0a, W
001992   ecb0     call    0x2d60, 0        	CALL	__gptrput1
001994   f016
                                           _00382_DS_:
                                           ;	.line	551; lena.c	while (*s++)
001996   c00b     movff   0xb, 0           	MOVFF	r0x0b, r0x00
001998   f000
00199a   c00c     movff   0xc, 0x1         	MOVFF	r0x0c, r0x01
00199c   f001
00199e   c00d     movff   0xd, 0x2         	MOVFF	r0x0d, r0x02
0019a0   f002
                                           _00371_DS_:
0019a2   c000     movff   0, 0xfe9         	MOVFF	r0x00, FSR0L
0019a4   ffe9
0019a6   c001     movff   0x1, 0xff3       	MOVFF	r0x01, PRODL
0019a8   fff3
0019aa   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
0019ac   ec7a     call    0x2cf4, 0        	CALL	__gptrget1
0019ae   f016
0019b0   6e06     movwf   0x6, 0           	MOVWF	r0x06
0019b2   2a00     incf    0, 0x1, 0        	INCF	r0x00, F
0019b4   b0d8     btfsc   0xd8, 0, 0       	BTFSC	STATUS, 0
0019b6   2a01     incf    0x1, 0x1, 0      	INCF	r0x01, F
0019b8   b0d8     btfsc   0xd8, 0, 0       	BTFSC	STATUS, 0
0019ba   2a02     incf    0x2, 0x1, 0      	INCF	r0x02, F
0019bc   5006     movf    0x6, 0, 0        	MOVF	r0x06, W
0019be   e1f1     bnz     0x19a2           	BNZ	_00371_DS_
0019c0   c000     movff   0, 0xb           	MOVFF	r0x00, r0x0b
0019c2   f00b
0019c4   c001     movff   0x1, 0xc         	MOVFF	r0x01, r0x0c
0019c6   f00c
0019c8   c002     movff   0x2, 0xd         	MOVFF	r0x02, r0x0d
0019ca   f00d
                                           _00375_DS_:
                                           ;	.line	557; lena.c	return (s - src - 1);       /* count does not include NUL */
0019cc   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
0019ce   5c0b     subwf   0xb, 0, 0        	SUBWF	r0x0b, W
0019d0   6e03     movwf   0x3, 0           	MOVWF	r0x03
0019d2   5004     movf    0x4, 0, 0        	MOVF	r0x04, W
0019d4   580c     subwfb  0xc, 0, 0        	SUBWFB	r0x0c, W
0019d6   6e04     movwf   0x4, 0           	MOVWF	r0x04
0019d8   0eff     movlw   0xff             	MOVLW	0xff
0019da   2603     addwf   0x3, 0x1, 0      	ADDWF	r0x03, F
0019dc   a0d8     btfss   0xd8, 0, 0       	BTFSS	STATUS, 0
0019de   0604     decf    0x4, 0x1, 0      	DECF	r0x04, F
0019e0   c004     movff   0x4, 0xff3       	MOVFF	r0x04, PRODL
0019e2   fff3
0019e4   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
0019e6   cfe4     movff   0xfe4, 0x15      	MOVFF	PREINC1, r0x15
0019e8   f015
0019ea   cfe4     movff   0xfe4, 0x14      	MOVFF	PREINC1, r0x14
0019ec   f014
0019ee   cfe4     movff   0xfe4, 0x13      	MOVFF	PREINC1, r0x13
0019f0   f013
0019f2   cfe4     movff   0xfe4, 0x12      	MOVFF	PREINC1, r0x12
0019f4   f012
0019f6   cfe4     movff   0xfe4, 0x11      	MOVFF	PREINC1, r0x11
0019f8   f011
0019fa   cfe4     movff   0xfe4, 0x10      	MOVFF	PREINC1, r0x10
0019fc   f010
0019fe   cfe4     movff   0xfe4, 0xf       	MOVFF	PREINC1, r0x0f
001a00   f00f
001a02   cfe4     movff   0xfe4, 0xe       	MOVFF	PREINC1, r0x0e
001a04   f00e
001a06   cfe4     movff   0xfe4, 0xd       	MOVFF	PREINC1, r0x0d
001a08   f00d
001a0a   cfe4     movff   0xfe4, 0xc       	MOVFF	PREINC1, r0x0c
001a0c   f00c
001a0e   cfe4     movff   0xfe4, 0xb       	MOVFF	PREINC1, r0x0b
001a10   f00b
001a12   cfe4     movff   0xfe4, 0xa       	MOVFF	PREINC1, r0x0a
001a14   f00a
001a16   cfe4     movff   0xfe4, 0x9       	MOVFF	PREINC1, r0x09
001a18   f009
001a1a   cfe4     movff   0xfe4, 0x8       	MOVFF	PREINC1, r0x08
001a1c   f008
001a1e   cfe4     movff   0xfe4, 0x7       	MOVFF	PREINC1, r0x07
001a20   f007
001a22   cfe4     movff   0xfe4, 0x6       	MOVFF	PREINC1, r0x06
001a24   f006
001a26   cfe4     movff   0xfe4, 0x5       	MOVFF	PREINC1, r0x05
001a28   f005
001a2a   cfe4     movff   0xfe4, 0x4       	MOVFF	PREINC1, r0x04
001a2c   f004
001a2e   cfe4     movff   0xfe4, 0x3       	MOVFF	PREINC1, r0x03
001a30   f003
001a32   cfe4     movff   0xfe4, 0x2       	MOVFF	PREINC1, r0x02
001a34   f002
001a36   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
001a38   f001
001a3a   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
001a3c   f000
001a3e   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
001a40   ffd9
001a42   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_lena__DisplayString	code
                                           _DisplayString:
                                           ;	.line	484; lena.c	void DisplayString(BYTE pos, char* text)
00245e   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002460   ffe5
002462   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002464   ffd9
002466   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
002468   ffe5
00246a   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
00246c   ffe5
00246e   c002     movff   0x2, 0xfe5       	MOVFF	r0x02, POSTDEC1
002470   ffe5
002472   c003     movff   0x3, 0xfe5       	MOVFF	r0x03, POSTDEC1
002474   ffe5
002476   c004     movff   0x4, 0xfe5       	MOVFF	r0x04, POSTDEC1
002478   ffe5
00247a   c005     movff   0x5, 0xfe5       	MOVFF	r0x05, POSTDEC1
00247c   ffe5
00247e   c006     movff   0x6, 0xfe5       	MOVFF	r0x06, POSTDEC1
002480   ffe5
002482   c007     movff   0x7, 0xfe5       	MOVFF	r0x07, POSTDEC1
002484   ffe5
002486   0e02     movlw   0x2              	MOVLW	0x02
002488   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
00248a   f000
00248c   0e03     movlw   0x3              	MOVLW	0x03
00248e   cfdb     movff   0xfdb, 0x1       	MOVFF	PLUSW2, r0x01
002490   f001
002492   0e04     movlw   0x4              	MOVLW	0x04
002494   cfdb     movff   0xfdb, 0x2       	MOVFF	PLUSW2, r0x02
002496   f002
002498   0e05     movlw   0x5              	MOVLW	0x05
00249a   cfdb     movff   0xfdb, 0x3       	MOVFF	PLUSW2, r0x03
00249c   f003
                                           ;	.line	486; lena.c	BYTE l= strlen(text)+1;
00249e   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
0024a0   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0024a2   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
0024a4   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0024a6   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
0024a8   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0024aa   ec21     call    0x2a42, 0        	CALL	_strlen
0024ac   f015
0024ae   6e04     movwf   0x4, 0           	MOVWF	r0x04
0024b0   cff3     movff   0xff3, 0x5       	MOVFF	PRODL, r0x05
0024b2   f005
0024b4   0e03     movlw   0x3              	MOVLW	0x03
0024b6   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
0024b8   2a04     incf    0x4, 0x1, 0      	INCF	r0x04, F
                                           ;	.line	487; lena.c	BYTE max= 32-pos;
0024ba   5000     movf    0, 0, 0          	MOVF	r0x00, W
0024bc   0820     sublw   0x20             	SUBLW	0x20
0024be   6e05     movwf   0x5, 0           	MOVWF	r0x05
                                           ;	.line	488; lena.c	strlcpy((char*)&LCDText[pos], text,(l<max)?l:max );
0024c0   6a06     clrf    0x6, 0           	CLRF	r0x06
0024c2   0e00     movlw   0                	MOVLW	LOW(_LCDText)
0024c4   2600     addwf   0, 0x1, 0        	ADDWF	r0x00, F
0024c6   0e0f     movlw   0xf              	MOVLW	HIGH(_LCDText)
0024c8   2206     addwfc  0x6, 0x1, 0      	ADDWFC	r0x06, F
0024ca   5006     movf    0x6, 0, 0        	MOVF	r0x06, W
0024cc   6e06     movwf   0x6, 0           	MOVWF	r0x06
0024ce   5000     movf    0, 0, 0          	MOVF	r0x00, W
0024d0   6e00     movwf   0, 0             	MOVWF	r0x00
0024d2   0e80     movlw   0x80             	MOVLW	0x80
0024d4   6e07     movwf   0x7, 0           	MOVWF	r0x07
0024d6   5005     movf    0x5, 0, 0        	MOVF	r0x05, W
0024d8   5c04     subwf   0x4, 0, 0        	SUBWF	r0x04, W
0024da   e302     bnc     0x24e0           	BNC	_00355_DS_
0024dc   c005     movff   0x5, 0x4         	MOVFF	r0x05, r0x04
0024de   f004
                                           _00355_DS_:
0024e0   6a05     clrf    0x5, 0           	CLRF	r0x05
0024e2   5005     movf    0x5, 0, 0        	MOVF	r0x05, W
0024e4   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0024e6   5004     movf    0x4, 0, 0        	MOVF	r0x04, W
0024e8   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0024ea   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
0024ec   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0024ee   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
0024f0   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0024f2   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
0024f4   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0024f6   5007     movf    0x7, 0, 0        	MOVF	r0x07, W
0024f8   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0024fa   5006     movf    0x6, 0, 0        	MOVF	r0x06, W
0024fc   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0024fe   5000     movf    0, 0, 0          	MOVF	r0x00, W
002500   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002502   ec22     call    0x1844, 0        	CALL	_strlcpy
002504   f00c
002506   0e08     movlw   0x8              	MOVLW	0x08
002508   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	489; lena.c	LCDUpdate();
00250a   ec91     call    0x1122, 0        	CALL	_LCDUpdate
00250c   f008
00250e   cfe4     movff   0xfe4, 0x7       	MOVFF	PREINC1, r0x07
002510   f007
002512   cfe4     movff   0xfe4, 0x6       	MOVFF	PREINC1, r0x06
002514   f006
002516   cfe4     movff   0xfe4, 0x5       	MOVFF	PREINC1, r0x05
002518   f005
00251a   cfe4     movff   0xfe4, 0x4       	MOVFF	PREINC1, r0x04
00251c   f004
00251e   cfe4     movff   0xfe4, 0x3       	MOVFF	PREINC1, r0x03
002520   f003
002522   cfe4     movff   0xfe4, 0x2       	MOVFF	PREINC1, r0x02
002524   f002
002526   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
002528   f001
00252a   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
00252c   f000
00252e   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002530   ffd9
002532   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_lena__refresh_lcd	code
                                           _refresh_lcd:
                                           ;	.line	410; lena.c	void refresh_lcd(void)
000852   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
000854   ffe5
000856   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
000858   ffd9
00085a   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
00085c   ffe5
00085e   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
000860   ffe5
000862   c002     movff   0x2, 0xfe5       	MOVFF	r0x02, POSTDEC1
000864   ffe5
000866   c003     movff   0x3, 0xfe5       	MOVFF	r0x03, POSTDEC1
000868   ffe5
00086a   c004     movff   0x4, 0xfe5       	MOVFF	r0x04, POSTDEC1
00086c   ffe5
00086e   c005     movff   0x5, 0xfe5       	MOVFF	r0x05, POSTDEC1
000870   ffe5
000872   c006     movff   0x6, 0xfe5       	MOVFF	r0x06, POSTDEC1
000874   ffe5
000876   c007     movff   0x7, 0xfe5       	MOVFF	r0x07, POSTDEC1
000878   ffe5
00087a   c008     movff   0x8, 0xfe5       	MOVFF	r0x08, POSTDEC1
00087c   ffe5
00087e   c009     movff   0x9, 0xfe5       	MOVFF	r0x09, POSTDEC1
000880   ffe5
000882   c00a     movff   0xa, 0xfe5       	MOVFF	r0x0a, POSTDEC1
000884   ffe5
000886   c00b     movff   0xb, 0xfe5       	MOVFF	r0x0b, POSTDEC1
000888   ffe5
00088a   c00c     movff   0xc, 0xfe5       	MOVFF	r0x0c, POSTDEC1
00088c   ffe5
00088e   c00d     movff   0xd, 0xfe5       	MOVFF	r0x0d, POSTDEC1
000890   ffe5
000892   c00e     movff   0xe, 0xfe5       	MOVFF	r0x0e, POSTDEC1
000894   ffe5
                                           ;	.line	414; lena.c	switch (whereami) {
000896   0e01     movlw   0x1              	MOVLW	0x01
000898   010f     movlb   0xf              	BANKSEL	_whereami
00089a   5d4c     subwf   0x4c, 0, 0x1     	SUBWF	_whereami, W, B
00089c   a0d8     btfss   0xd8, 0, 0       	BTFSS	STATUS, 0
00089e   efd6     goto    0xdac            	GOTO	_00335_DS_
0008a0   f006
0008a2   0e0c     movlw   0xc              	MOVLW	0x0c
0008a4   010f     movlb   0xf              	BANKSEL	_whereami
0008a6   5d4c     subwf   0x4c, 0, 0x1     	SUBWF	_whereami, W, B
0008a8   b0d8     btfsc   0xd8, 0, 0       	BTFSC	STATUS, 0
0008aa   efd6     goto    0xdac            	GOTO	_00335_DS_
0008ac   f006
0008ae   010f     movlb   0xf              	BANKSEL	_whereami
0008b0   054c     decf    0x4c, 0, 0x1     	DECF	_whereami, W, B
0008b2   6e00     movwf   0, 0             	MOVWF	r0x00
0008b4   c00f     movff   0xf, 0xfe5       	MOVFF	r0x0f, POSTDEC1
0008b6   ffe5
0008b8   c010     movff   0x10, 0xfe5      	MOVFF	r0x10, POSTDEC1
0008ba   ffe5
0008bc   6a10     clrf    0x10, 0          	CLRF	r0x10
0008be   3400     rlcf    0, 0, 0          	RLCF	r0x00, W
0008c0   3610     rlcf    0x10, 0x1, 0     	RLCF	r0x10, F
0008c2   34e8     rlcf    0xe8, 0, 0       	RLCF	WREG, W
0008c4   3610     rlcf    0x10, 0x1, 0     	RLCF	r0x10, F
0008c6   0bfc     andlw   0xfc             	ANDLW	0xfc
0008c8   6e0f     movwf   0xf, 0           	MOVWF	r0x0f
0008ca   0e00     movlw   0                	MOVLW	UPPER(_00346_DS_)
0008cc   6efb     movwf   0xfb, 0          	MOVWF	PCLATU
0008ce   0e08     movlw   0x8              	MOVLW	HIGH(_00346_DS_)
0008d0   6efa     movwf   0xfa, 0          	MOVWF	PCLATH
0008d2   0eea     movlw   0xea             	MOVLW	LOW(_00346_DS_)
0008d4   260f     addwf   0xf, 0x1, 0      	ADDWF	r0x0f, F
0008d6   5010     movf    0x10, 0, 0       	MOVF	r0x10, W
0008d8   22fa     addwfc  0xfa, 0x1, 0     	ADDWFC	PCLATH, F
0008da   b0d8     btfsc   0xd8, 0, 0       	BTFSC	STATUS, 0
0008dc   2afb     incf    0xfb, 0x1, 0     	INCF	PCLATU, F
0008de   500f     movf    0xf, 0, 0        	MOVF	r0x0f, W
0008e0   cfe4     movff   0xfe4, 0x10      	MOVFF	PREINC1, r0x10
0008e2   f010
0008e4   cfe4     movff   0xfe4, 0xf       	MOVFF	PREINC1, r0x0f
0008e6   f00f
0008e8   6ef9     movwf   0xf9, 0          	MOVWF	PCL
                                           _00346_DS_:
0008ea   ef8b     goto    0x916            	GOTO	_00315_DS_
0008ec   f004
0008ee   efa3     goto    0x946            	GOTO	_00316_DS_
0008f0   f004
0008f2   efd0     goto    0x9a0            	GOTO	_00317_DS_
0008f4   f004
0008f6   effc     goto    0x9f8            	GOTO	_00318_DS_
0008f8   f004
0008fa   ef28     goto    0xa50            	GOTO	_00319_DS_
0008fc   f005
0008fe   ef3f     goto    0xa7e            	GOTO	_00320_DS_
000900   f005
000902   ef70     goto    0xae0            	GOTO	_00324_DS_
000904   f005
000906   ef95     goto    0xb2a            	GOTO	_00325_DS_
000908   f005
00090a   efba     goto    0xb74            	GOTO	_00326_DS_
00090c   f005
00090e   ef23     goto    0xc46            	GOTO	_00330_DS_
000910   f006
000912   ef4f     goto    0xc9e            	GOTO	_00331_DS_
000914   f006
                                           _00315_DS_:
                                           ;	.line	416; lena.c	sprintf(display, "Do you want to  set the time ?  ");
000916   0e0f     movlw   0xf              	MOVLW	HIGH(_refresh_lcd_display_1_1)
000918   6e01     movwf   0x1, 0           	MOVWF	r0x01
00091a   0e21     movlw   0x21             	MOVLW	LOW(_refresh_lcd_display_1_1)
00091c   6e00     movwf   0, 0             	MOVWF	r0x00
00091e   0e80     movlw   0x80             	MOVLW	0x80
000920   6e02     movwf   0x2, 0           	MOVWF	r0x02
000922   0e00     movlw   0                	MOVLW	UPPER(__str_0)
000924   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000926   0e0e     movlw   0xe              	MOVLW	HIGH(__str_0)
000928   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00092a   0ee0     movlw   0xe0             	MOVLW	LOW(__str_0)
00092c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00092e   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
000930   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000932   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
000934   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000936   5000     movf    0, 0, 0          	MOVF	r0x00, W
000938   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00093a   ec48     call    0x2290, 0        	CALL	_sprintf
00093c   f011
00093e   0e06     movlw   0x6              	MOVLW	0x06
000940   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	417; lena.c	break;
000942   efec     goto    0xdd8            	GOTO	_00336_DS_
000944   f006
                                           _00316_DS_:
                                           ;	.line	420; lena.c	thour, tmin, tsec);
000946   cf44     movff   0xf44, 0         	MOVFF	_tsec, r0x00
000948   f000
00094a   6a01     clrf    0x1, 0           	CLRF	r0x01
00094c   cf43     movff   0xf43, 0x2       	MOVFF	_tmin, r0x02
00094e   f002
000950   6a03     clrf    0x3, 0           	CLRF	r0x03
000952   cf42     movff   0xf42, 0x4       	MOVFF	_thour, r0x04
000954   f004
000956   6a05     clrf    0x5, 0           	CLRF	r0x05
                                           ;	.line	419; lena.c	sprintf(display, " [%02u]: %02u : %02u                  ",
000958   0e0f     movlw   0xf              	MOVLW	HIGH(_refresh_lcd_display_1_1)
00095a   6e07     movwf   0x7, 0           	MOVWF	r0x07
00095c   0e21     movlw   0x21             	MOVLW	LOW(_refresh_lcd_display_1_1)
00095e   6e06     movwf   0x6, 0           	MOVWF	r0x06
000960   0e80     movlw   0x80             	MOVLW	0x80
000962   6e08     movwf   0x8, 0           	MOVWF	r0x08
000964   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
000966   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000968   5000     movf    0, 0, 0          	MOVF	r0x00, W
00096a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00096c   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
00096e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000970   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
000972   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000974   5005     movf    0x5, 0, 0        	MOVF	r0x05, W
000976   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000978   5004     movf    0x4, 0, 0        	MOVF	r0x04, W
00097a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00097c   0e00     movlw   0                	MOVLW	UPPER(__str_1)
00097e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000980   0e0f     movlw   0xf              	MOVLW	HIGH(__str_1)
000982   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000984   0e02     movlw   0x2              	MOVLW	LOW(__str_1)
000986   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000988   5008     movf    0x8, 0, 0        	MOVF	r0x08, W
00098a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00098c   5007     movf    0x7, 0, 0        	MOVF	r0x07, W
00098e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000990   5006     movf    0x6, 0, 0        	MOVF	r0x06, W
000992   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000994   ec48     call    0x2290, 0        	CALL	_sprintf
000996   f011
000998   0e0c     movlw   0xc              	MOVLW	0x0c
00099a   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	421; lena.c	break;
00099c   efec     goto    0xdd8            	GOTO	_00336_DS_
00099e   f006
                                           _00317_DS_:
                                           ;	.line	424; lena.c	thour, tmin, tsec);
0009a0   cf44     movff   0xf44, 0         	MOVFF	_tsec, r0x00
0009a2   f000
0009a4   6a01     clrf    0x1, 0           	CLRF	r0x01
0009a6   cf43     movff   0xf43, 0x2       	MOVFF	_tmin, r0x02
0009a8   f002
0009aa   6a03     clrf    0x3, 0           	CLRF	r0x03
0009ac   cf42     movff   0xf42, 0x4       	MOVFF	_thour, r0x04
0009ae   f004
0009b0   6a05     clrf    0x5, 0           	CLRF	r0x05
                                           ;	.line	423; lena.c	sprintf(display, "  %02u :[%02u]: %02u                  ",
0009b2   0e0f     movlw   0xf              	MOVLW	HIGH(_refresh_lcd_display_1_1)
0009b4   6e07     movwf   0x7, 0           	MOVWF	r0x07
0009b6   0e21     movlw   0x21             	MOVLW	LOW(_refresh_lcd_display_1_1)
0009b8   6e06     movwf   0x6, 0           	MOVWF	r0x06
0009ba   0e80     movlw   0x80             	MOVLW	0x80
0009bc   6e08     movwf   0x8, 0           	MOVWF	r0x08
0009be   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
0009c0   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0009c2   5000     movf    0, 0, 0          	MOVF	r0x00, W
0009c4   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0009c6   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
0009c8   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0009ca   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
0009cc   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0009ce   5005     movf    0x5, 0, 0        	MOVF	r0x05, W
0009d0   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0009d2   5004     movf    0x4, 0, 0        	MOVF	r0x04, W
0009d4   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0009d6   0e00     movlw   0                	MOVLW	UPPER(__str_2)
0009d8   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0009da   0e0f     movlw   0xf              	MOVLW	HIGH(__str_2)
0009dc   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0009de   0e2a     movlw   0x2a             	MOVLW	LOW(__str_2)
0009e0   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0009e2   5008     movf    0x8, 0, 0        	MOVF	r0x08, W
0009e4   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0009e6   5007     movf    0x7, 0, 0        	MOVF	r0x07, W
0009e8   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0009ea   5006     movf    0x6, 0, 0        	MOVF	r0x06, W
0009ec   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0009ee   ec48     call    0x2290, 0        	CALL	_sprintf
0009f0   f011
0009f2   0e0c     movlw   0xc              	MOVLW	0x0c
0009f4   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	425; lena.c	break;
0009f6   d1f0     bra     0xdd8            	BRA	_00336_DS_
                                           _00318_DS_:
                                           ;	.line	428; lena.c	thour, tmin, tsec);
0009f8   cf44     movff   0xf44, 0         	MOVFF	_tsec, r0x00
0009fa   f000
0009fc   6a01     clrf    0x1, 0           	CLRF	r0x01
0009fe   cf43     movff   0xf43, 0x2       	MOVFF	_tmin, r0x02
000a00   f002
000a02   6a03     clrf    0x3, 0           	CLRF	r0x03
000a04   cf42     movff   0xf42, 0x4       	MOVFF	_thour, r0x04
000a06   f004
000a08   6a05     clrf    0x5, 0           	CLRF	r0x05
                                           ;	.line	427; lena.c	sprintf(display, "  %02u : %02u :[%02u]                 ",
000a0a   0e0f     movlw   0xf              	MOVLW	HIGH(_refresh_lcd_display_1_1)
000a0c   6e07     movwf   0x7, 0           	MOVWF	r0x07
000a0e   0e21     movlw   0x21             	MOVLW	LOW(_refresh_lcd_display_1_1)
000a10   6e06     movwf   0x6, 0           	MOVWF	r0x06
000a12   0e80     movlw   0x80             	MOVLW	0x80
000a14   6e08     movwf   0x8, 0           	MOVWF	r0x08
000a16   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
000a18   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a1a   5000     movf    0, 0, 0          	MOVF	r0x00, W
000a1c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a1e   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
000a20   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a22   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
000a24   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a26   5005     movf    0x5, 0, 0        	MOVF	r0x05, W
000a28   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a2a   5004     movf    0x4, 0, 0        	MOVF	r0x04, W
000a2c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a2e   0e00     movlw   0                	MOVLW	UPPER(__str_3)
000a30   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a32   0e0f     movlw   0xf              	MOVLW	HIGH(__str_3)
000a34   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a36   0e52     movlw   0x52             	MOVLW	LOW(__str_3)
000a38   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a3a   5008     movf    0x8, 0, 0        	MOVF	r0x08, W
000a3c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a3e   5007     movf    0x7, 0, 0        	MOVF	r0x07, W
000a40   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a42   5006     movf    0x6, 0, 0        	MOVF	r0x06, W
000a44   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a46   ec48     call    0x2290, 0        	CALL	_sprintf
000a48   f011
000a4a   0e0c     movlw   0xc              	MOVLW	0x0c
000a4c   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	429; lena.c	break;
000a4e   d1c4     bra     0xdd8            	BRA	_00336_DS_
                                           _00319_DS_:
                                           ;	.line	431; lena.c	sprintf(display, "Do you want to  set the alarm ? ");
000a50   0e0f     movlw   0xf              	MOVLW	HIGH(_refresh_lcd_display_1_1)
000a52   6e01     movwf   0x1, 0           	MOVWF	r0x01
000a54   0e21     movlw   0x21             	MOVLW	LOW(_refresh_lcd_display_1_1)
000a56   6e00     movwf   0, 0             	MOVWF	r0x00
000a58   0e80     movlw   0x80             	MOVLW	0x80
000a5a   6e02     movwf   0x2, 0           	MOVWF	r0x02
000a5c   0e00     movlw   0                	MOVLW	UPPER(__str_4)
000a5e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a60   0e0f     movlw   0xf              	MOVLW	HIGH(__str_4)
000a62   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a64   0e7a     movlw   0x7a             	MOVLW	LOW(__str_4)
000a66   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a68   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
000a6a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a6c   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
000a6e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a70   5000     movf    0, 0, 0          	MOVF	r0x00, W
000a72   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a74   ec48     call    0x2290, 0        	CALL	_sprintf
000a76   f011
000a78   0e06     movlw   0x6              	MOVLW	0x06
000a7a   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	432; lena.c	break;
000a7c   d1ad     bra     0xdd8            	BRA	_00336_DS_
                                           _00320_DS_:
000a7e   010f     movlb   0xf              	BANKSEL	_alarm_set
                                           ;	.line	434; lena.c	if (alarm_set) {
000a80   5145     movf    0x45, 0, 0x1     	MOVF	_alarm_set, W, B
000a82   e017     bz      0xab2            	BZ	_00322_DS_
                                           ;	.line	435; lena.c	sprintf(display, "  Alarm [ON ]                   ");
000a84   0e0f     movlw   0xf              	MOVLW	HIGH(_refresh_lcd_display_1_1)
000a86   6e01     movwf   0x1, 0           	MOVWF	r0x01
000a88   0e21     movlw   0x21             	MOVLW	LOW(_refresh_lcd_display_1_1)
000a8a   6e00     movwf   0, 0             	MOVWF	r0x00
000a8c   0e80     movlw   0x80             	MOVLW	0x80
000a8e   6e02     movwf   0x2, 0           	MOVWF	r0x02
000a90   0e00     movlw   0                	MOVLW	UPPER(__str_5)
000a92   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a94   0e0f     movlw   0xf              	MOVLW	HIGH(__str_5)
000a96   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a98   0e9c     movlw   0x9c             	MOVLW	LOW(__str_5)
000a9a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a9c   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
000a9e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000aa0   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
000aa2   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000aa4   5000     movf    0, 0, 0          	MOVF	r0x00, W
000aa6   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000aa8   ec48     call    0x2290, 0        	CALL	_sprintf
000aaa   f011
000aac   0e06     movlw   0x6              	MOVLW	0x06
000aae   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
000ab0   d193     bra     0xdd8            	BRA	_00336_DS_
                                           _00322_DS_:
                                           ;	.line	437; lena.c	sprintf(display, "  Alarm [OFF]                   ");
000ab2   0e0f     movlw   0xf              	MOVLW	HIGH(_refresh_lcd_display_1_1)
000ab4   6e01     movwf   0x1, 0           	MOVWF	r0x01
000ab6   0e21     movlw   0x21             	MOVLW	LOW(_refresh_lcd_display_1_1)
000ab8   6e00     movwf   0, 0             	MOVWF	r0x00
000aba   0e80     movlw   0x80             	MOVLW	0x80
000abc   6e02     movwf   0x2, 0           	MOVWF	r0x02
000abe   0e00     movlw   0                	MOVLW	UPPER(__str_6)
000ac0   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000ac2   0e0f     movlw   0xf              	MOVLW	HIGH(__str_6)
000ac4   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000ac6   0ebe     movlw   0xbe             	MOVLW	LOW(__str_6)
000ac8   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000aca   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
000acc   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000ace   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
000ad0   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000ad2   5000     movf    0, 0, 0          	MOVF	r0x00, W
000ad4   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000ad6   ec48     call    0x2290, 0        	CALL	_sprintf
000ad8   f011
000ada   0e06     movlw   0x6              	MOVLW	0x06
000adc   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	439; lena.c	break;
000ade   d17c     bra     0xdd8            	BRA	_00336_DS_
                                           _00324_DS_:
                                           ;	.line	442; lena.c	ahour, amin);
000ae0   cf47     movff   0xf47, 0         	MOVFF	_amin, r0x00
000ae2   f000
000ae4   6a01     clrf    0x1, 0           	CLRF	r0x01
000ae6   cf46     movff   0xf46, 0x2       	MOVFF	_ahour, r0x02
000ae8   f002
000aea   6a03     clrf    0x3, 0           	CLRF	r0x03
                                           ;	.line	441; lena.c	sprintf(display, "    Alarm at        [%02u]: %02u    ",
000aec   0e0f     movlw   0xf              	MOVLW	HIGH(_refresh_lcd_display_1_1)
000aee   6e05     movwf   0x5, 0           	MOVWF	r0x05
000af0   0e21     movlw   0x21             	MOVLW	LOW(_refresh_lcd_display_1_1)
000af2   6e04     movwf   0x4, 0           	MOVWF	r0x04
000af4   0e80     movlw   0x80             	MOVLW	0x80
000af6   6e06     movwf   0x6, 0           	MOVWF	r0x06
000af8   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
000afa   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000afc   5000     movf    0, 0, 0          	MOVF	r0x00, W
000afe   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000b00   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
000b02   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000b04   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
000b06   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000b08   0e00     movlw   0                	MOVLW	UPPER(__str_7)
000b0a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000b0c   0e0f     movlw   0xf              	MOVLW	HIGH(__str_7)
000b0e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000b10   0ee0     movlw   0xe0             	MOVLW	LOW(__str_7)
000b12   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000b14   5006     movf    0x6, 0, 0        	MOVF	r0x06, W
000b16   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000b18   5005     movf    0x5, 0, 0        	MOVF	r0x05, W
000b1a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000b1c   5004     movf    0x4, 0, 0        	MOVF	r0x04, W
000b1e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000b20   ec48     call    0x2290, 0        	CALL	_sprintf
000b22   f011
000b24   0e0a     movlw   0xa              	MOVLW	0x0a
000b26   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	443; lena.c	break;
000b28   d157     bra     0xdd8            	BRA	_00336_DS_
                                           _00325_DS_:
                                           ;	.line	446; lena.c	ahour, amin);
000b2a   cf47     movff   0xf47, 0         	MOVFF	_amin, r0x00
000b2c   f000
000b2e   6a01     clrf    0x1, 0           	CLRF	r0x01
000b30   cf46     movff   0xf46, 0x2       	MOVFF	_ahour, r0x02
000b32   f002
000b34   6a03     clrf    0x3, 0           	CLRF	r0x03
                                           ;	.line	445; lena.c	sprintf(display, "    Alarm at         %02u :[%02u]   ",
000b36   0e0f     movlw   0xf              	MOVLW	HIGH(_refresh_lcd_display_1_1)
000b38   6e05     movwf   0x5, 0           	MOVWF	r0x05
000b3a   0e21     movlw   0x21             	MOVLW	LOW(_refresh_lcd_display_1_1)
000b3c   6e04     movwf   0x4, 0           	MOVWF	r0x04
000b3e   0e80     movlw   0x80             	MOVLW	0x80
000b40   6e06     movwf   0x6, 0           	MOVWF	r0x06
000b42   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
000b44   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000b46   5000     movf    0, 0, 0          	MOVF	r0x00, W
000b48   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000b4a   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
000b4c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000b4e   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
000b50   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000b52   0e00     movlw   0                	MOVLW	UPPER(__str_8)
000b54   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000b56   0e10     movlw   0x10             	MOVLW	HIGH(__str_8)
000b58   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000b5a   0e06     movlw   0x6              	MOVLW	LOW(__str_8)
000b5c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000b5e   5006     movf    0x6, 0, 0        	MOVF	r0x06, W
000b60   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000b62   5005     movf    0x5, 0, 0        	MOVF	r0x05, W
000b64   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000b66   5004     movf    0x4, 0, 0        	MOVF	r0x04, W
000b68   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000b6a   ec48     call    0x2290, 0        	CALL	_sprintf
000b6c   f011
000b6e   0e0a     movlw   0xa              	MOVLW	0x0a
000b70   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	447; lena.c	break;
000b72   d132     bra     0xdd8            	BRA	_00336_DS_
                                           _00326_DS_:
000b74   010f     movlb   0xf              	BANKSEL	_alarm_set
                                           ;	.line	449; lena.c	if (alarm_set) {
000b76   5145     movf    0x45, 0, 0x1     	MOVF	_alarm_set, W, B
000b78   e03a     bz      0xbee            	BZ	_00328_DS_
                                           ;	.line	451; lena.c	thour, tmin, tsec, ahour, amin);
000b7a   cf47     movff   0xf47, 0         	MOVFF	_amin, r0x00
000b7c   f000
000b7e   6a01     clrf    0x1, 0           	CLRF	r0x01
000b80   cf46     movff   0xf46, 0x2       	MOVFF	_ahour, r0x02
000b82   f002
000b84   6a03     clrf    0x3, 0           	CLRF	r0x03
000b86   cf44     movff   0xf44, 0x4       	MOVFF	_tsec, r0x04
000b88   f004
000b8a   6a05     clrf    0x5, 0           	CLRF	r0x05
000b8c   cf43     movff   0xf43, 0x6       	MOVFF	_tmin, r0x06
000b8e   f006
000b90   6a07     clrf    0x7, 0           	CLRF	r0x07
000b92   cf42     movff   0xf42, 0x8       	MOVFF	_thour, r0x08
000b94   f008
000b96   6a09     clrf    0x9, 0           	CLRF	r0x09
                                           ;	.line	450; lena.c	sprintf(display, "    %02u:%02u:%02u    Alarm ON  %02u:%02u ",
000b98   0e0f     movlw   0xf              	MOVLW	HIGH(_refresh_lcd_display_1_1)
000b9a   6e0b     movwf   0xb, 0           	MOVWF	r0x0b
000b9c   0e21     movlw   0x21             	MOVLW	LOW(_refresh_lcd_display_1_1)
000b9e   6e0a     movwf   0xa, 0           	MOVWF	r0x0a
000ba0   0e80     movlw   0x80             	MOVLW	0x80
000ba2   6e0c     movwf   0xc, 0           	MOVWF	r0x0c
000ba4   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
000ba6   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000ba8   5000     movf    0, 0, 0          	MOVF	r0x00, W
000baa   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000bac   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
000bae   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000bb0   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
000bb2   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000bb4   5005     movf    0x5, 0, 0        	MOVF	r0x05, W
000bb6   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000bb8   5004     movf    0x4, 0, 0        	MOVF	r0x04, W
000bba   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000bbc   5007     movf    0x7, 0, 0        	MOVF	r0x07, W
000bbe   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000bc0   5006     movf    0x6, 0, 0        	MOVF	r0x06, W
000bc2   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000bc4   5009     movf    0x9, 0, 0        	MOVF	r0x09, W
000bc6   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000bc8   5008     movf    0x8, 0, 0        	MOVF	r0x08, W
000bca   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000bcc   0e00     movlw   0                	MOVLW	UPPER(__str_9)
000bce   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000bd0   0e10     movlw   0x10             	MOVLW	HIGH(__str_9)
000bd2   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000bd4   0e2c     movlw   0x2c             	MOVLW	LOW(__str_9)
000bd6   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000bd8   500c     movf    0xc, 0, 0        	MOVF	r0x0c, W
000bda   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000bdc   500b     movf    0xb, 0, 0        	MOVF	r0x0b, W
000bde   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000be0   500a     movf    0xa, 0, 0        	MOVF	r0x0a, W
000be2   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000be4   ec48     call    0x2290, 0        	CALL	_sprintf
000be6   f011
000be8   0e10     movlw   0x10             	MOVLW	0x10
000bea   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
000bec   d0f5     bra     0xdd8            	BRA	_00336_DS_
                                           _00328_DS_:
                                           ;	.line	454; lena.c	thour, tmin, tsec);
000bee   cf44     movff   0xf44, 0         	MOVFF	_tsec, r0x00
000bf0   f000
000bf2   6a01     clrf    0x1, 0           	CLRF	r0x01
000bf4   cf43     movff   0xf43, 0x2       	MOVFF	_tmin, r0x02
000bf6   f002
000bf8   6a03     clrf    0x3, 0           	CLRF	r0x03
000bfa   cf42     movff   0xf42, 0x4       	MOVFF	_thour, r0x04
000bfc   f004
000bfe   6a05     clrf    0x5, 0           	CLRF	r0x05
                                           ;	.line	453; lena.c	sprintf(display, "    %02u:%02u:%02u       Alarm  OFF   ",
000c00   0e0f     movlw   0xf              	MOVLW	HIGH(_refresh_lcd_display_1_1)
000c02   6e07     movwf   0x7, 0           	MOVWF	r0x07
000c04   0e21     movlw   0x21             	MOVLW	LOW(_refresh_lcd_display_1_1)
000c06   6e06     movwf   0x6, 0           	MOVWF	r0x06
000c08   0e80     movlw   0x80             	MOVLW	0x80
000c0a   6e08     movwf   0x8, 0           	MOVWF	r0x08
000c0c   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
000c0e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000c10   5000     movf    0, 0, 0          	MOVF	r0x00, W
000c12   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000c14   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
000c16   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000c18   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
000c1a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000c1c   5005     movf    0x5, 0, 0        	MOVF	r0x05, W
000c1e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000c20   5004     movf    0x4, 0, 0        	MOVF	r0x04, W
000c22   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000c24   0e00     movlw   0                	MOVLW	UPPER(__str_10)
000c26   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000c28   0e10     movlw   0x10             	MOVLW	HIGH(__str_10)
000c2a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000c2c   0e58     movlw   0x58             	MOVLW	LOW(__str_10)
000c2e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000c30   5008     movf    0x8, 0, 0        	MOVF	r0x08, W
000c32   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000c34   5007     movf    0x7, 0, 0        	MOVF	r0x07, W
000c36   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000c38   5006     movf    0x6, 0, 0        	MOVF	r0x06, W
000c3a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000c3c   ec48     call    0x2290, 0        	CALL	_sprintf
000c3e   f011
000c40   0e0c     movlw   0xc              	MOVLW	0x0c
000c42   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	456; lena.c	break;
000c44   d0c9     bra     0xdd8            	BRA	_00336_DS_
                                           _00330_DS_:
                                           ;	.line	459; lena.c	thour, tmin, tsec); // ***blink***
000c46   cf44     movff   0xf44, 0         	MOVFF	_tsec, r0x00
000c48   f000
000c4a   6a01     clrf    0x1, 0           	CLRF	r0x01
000c4c   cf43     movff   0xf43, 0x2       	MOVFF	_tmin, r0x02
000c4e   f002
000c50   6a03     clrf    0x3, 0           	CLRF	r0x03
000c52   cf42     movff   0xf42, 0x4       	MOVFF	_thour, r0x04
000c54   f004
000c56   6a05     clrf    0x5, 0           	CLRF	r0x05
                                           ;	.line	458; lena.c	sprintf(display, "    %02u:%02u:%02u      I am ringing! ",
000c58   0e0f     movlw   0xf              	MOVLW	HIGH(_refresh_lcd_display_1_1)
000c5a   6e07     movwf   0x7, 0           	MOVWF	r0x07
000c5c   0e21     movlw   0x21             	MOVLW	LOW(_refresh_lcd_display_1_1)
000c5e   6e06     movwf   0x6, 0           	MOVWF	r0x06
000c60   0e80     movlw   0x80             	MOVLW	0x80
000c62   6e08     movwf   0x8, 0           	MOVWF	r0x08
000c64   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
000c66   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000c68   5000     movf    0, 0, 0          	MOVF	r0x00, W
000c6a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000c6c   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
000c6e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000c70   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
000c72   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000c74   5005     movf    0x5, 0, 0        	MOVF	r0x05, W
000c76   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000c78   5004     movf    0x4, 0, 0        	MOVF	r0x04, W
000c7a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000c7c   0e00     movlw   0                	MOVLW	UPPER(__str_11)
000c7e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000c80   0e10     movlw   0x10             	MOVLW	HIGH(__str_11)
000c82   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000c84   0e80     movlw   0x80             	MOVLW	LOW(__str_11)
000c86   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000c88   5008     movf    0x8, 0, 0        	MOVF	r0x08, W
000c8a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000c8c   5007     movf    0x7, 0, 0        	MOVF	r0x07, W
000c8e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000c90   5006     movf    0x6, 0, 0        	MOVF	r0x06, W
000c92   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000c94   ec48     call    0x2290, 0        	CALL	_sprintf
000c96   f011
000c98   0e0c     movlw   0xc              	MOVLW	0x0c
000c9a   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	460; lena.c	break;
000c9c   d09d     bra     0xdd8            	BRA	_00336_DS_
                                           _00331_DS_:
                                           ;	.line	462; lena.c	if (snooze < 10) {
000c9e   0e0a     movlw   0xa              	MOVLW	0x0a
000ca0   010f     movlb   0xf              	BANKSEL	_snooze
000ca2   5d4a     subwf   0x4a, 0, 0x1     	SUBWF	_snooze, W, B
000ca4   b0d8     btfsc   0xd8, 0, 0       	BTFSC	STATUS, 0
000ca6   d041     bra     0xd2a            	BRA	_00333_DS_
                                           ;	.line	464; lena.c	thour, tmin, tsec, snooze, ahour_o, amin_o);
000ca8   cf49     movff   0xf49, 0         	MOVFF	_amin_o, r0x00
000caa   f000
000cac   6a01     clrf    0x1, 0           	CLRF	r0x01
000cae   cf48     movff   0xf48, 0x2       	MOVFF	_ahour_o, r0x02
000cb0   f002
000cb2   6a03     clrf    0x3, 0           	CLRF	r0x03
000cb4   cf4a     movff   0xf4a, 0x4       	MOVFF	_snooze, r0x04
000cb6   f004
000cb8   6a05     clrf    0x5, 0           	CLRF	r0x05
000cba   cf44     movff   0xf44, 0x6       	MOVFF	_tsec, r0x06
000cbc   f006
000cbe   6a07     clrf    0x7, 0           	CLRF	r0x07
000cc0   cf43     movff   0xf43, 0x8       	MOVFF	_tmin, r0x08
000cc2   f008
000cc4   6a09     clrf    0x9, 0           	CLRF	r0x09
000cc6   cf42     movff   0xf42, 0xa       	MOVFF	_thour, r0x0a
000cc8   f00a
000cca   6a0b     clrf    0xb, 0           	CLRF	r0x0b
                                           ;	.line	463; lena.c	sprintf(display, "    %02u:%02u:%02u    Snooze %u  %02u:%02u ",
000ccc   0e0f     movlw   0xf              	MOVLW	HIGH(_refresh_lcd_display_1_1)
000cce   6e0d     movwf   0xd, 0           	MOVWF	r0x0d
000cd0   0e21     movlw   0x21             	MOVLW	LOW(_refresh_lcd_display_1_1)
000cd2   6e0c     movwf   0xc, 0           	MOVWF	r0x0c
000cd4   0e80     movlw   0x80             	MOVLW	0x80
000cd6   6e0e     movwf   0xe, 0           	MOVWF	r0x0e
000cd8   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
000cda   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000cdc   5000     movf    0, 0, 0          	MOVF	r0x00, W
000cde   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000ce0   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
000ce2   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000ce4   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
000ce6   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000ce8   5005     movf    0x5, 0, 0        	MOVF	r0x05, W
000cea   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000cec   5004     movf    0x4, 0, 0        	MOVF	r0x04, W
000cee   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000cf0   5007     movf    0x7, 0, 0        	MOVF	r0x07, W
000cf2   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000cf4   5006     movf    0x6, 0, 0        	MOVF	r0x06, W
000cf6   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000cf8   5009     movf    0x9, 0, 0        	MOVF	r0x09, W
000cfa   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000cfc   5008     movf    0x8, 0, 0        	MOVF	r0x08, W
000cfe   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000d00   500b     movf    0xb, 0, 0        	MOVF	r0x0b, W
000d02   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000d04   500a     movf    0xa, 0, 0        	MOVF	r0x0a, W
000d06   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000d08   0e00     movlw   0                	MOVLW	UPPER(__str_12)
000d0a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000d0c   0e10     movlw   0x10             	MOVLW	HIGH(__str_12)
000d0e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000d10   0ea8     movlw   0xa8             	MOVLW	LOW(__str_12)
000d12   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000d14   500e     movf    0xe, 0, 0        	MOVF	r0x0e, W
000d16   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000d18   500d     movf    0xd, 0, 0        	MOVF	r0x0d, W
000d1a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000d1c   500c     movf    0xc, 0, 0        	MOVF	r0x0c, W
000d1e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000d20   ec48     call    0x2290, 0        	CALL	_sprintf
000d22   f011
000d24   0e12     movlw   0x12             	MOVLW	0x12
000d26   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
000d28   d057     bra     0xdd8            	BRA	_00336_DS_
                                           _00333_DS_:
                                           ;	.line	467; lena.c	thour, tmin, tsec, snooze, ahour_o, amin_o);
000d2a   cf49     movff   0xf49, 0         	MOVFF	_amin_o, r0x00
000d2c   f000
000d2e   6a01     clrf    0x1, 0           	CLRF	r0x01
000d30   cf48     movff   0xf48, 0x2       	MOVFF	_ahour_o, r0x02
000d32   f002
000d34   6a03     clrf    0x3, 0           	CLRF	r0x03
000d36   cf4a     movff   0xf4a, 0x4       	MOVFF	_snooze, r0x04
000d38   f004
000d3a   6a05     clrf    0x5, 0           	CLRF	r0x05
000d3c   cf44     movff   0xf44, 0x6       	MOVFF	_tsec, r0x06
000d3e   f006
000d40   6a07     clrf    0x7, 0           	CLRF	r0x07
000d42   cf43     movff   0xf43, 0x8       	MOVFF	_tmin, r0x08
000d44   f008
000d46   6a09     clrf    0x9, 0           	CLRF	r0x09
000d48   cf42     movff   0xf42, 0xa       	MOVFF	_thour, r0x0a
000d4a   f00a
000d4c   6a0b     clrf    0xb, 0           	CLRF	r0x0b
                                           ;	.line	466; lena.c	sprintf(display, "    %02u:%02u:%02u    Snooze %u %02u:%02u ",
000d4e   0e0f     movlw   0xf              	MOVLW	HIGH(_refresh_lcd_display_1_1)
000d50   6e0d     movwf   0xd, 0           	MOVWF	r0x0d
000d52   0e21     movlw   0x21             	MOVLW	LOW(_refresh_lcd_display_1_1)
000d54   6e0c     movwf   0xc, 0           	MOVWF	r0x0c
000d56   0e80     movlw   0x80             	MOVLW	0x80
000d58   6e0e     movwf   0xe, 0           	MOVWF	r0x0e
000d5a   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
000d5c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000d5e   5000     movf    0, 0, 0          	MOVF	r0x00, W
000d60   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000d62   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
000d64   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000d66   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
000d68   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000d6a   5005     movf    0x5, 0, 0        	MOVF	r0x05, W
000d6c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000d6e   5004     movf    0x4, 0, 0        	MOVF	r0x04, W
000d70   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000d72   5007     movf    0x7, 0, 0        	MOVF	r0x07, W
000d74   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000d76   5006     movf    0x6, 0, 0        	MOVF	r0x06, W
000d78   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000d7a   5009     movf    0x9, 0, 0        	MOVF	r0x09, W
000d7c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000d7e   5008     movf    0x8, 0, 0        	MOVF	r0x08, W
000d80   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000d82   500b     movf    0xb, 0, 0        	MOVF	r0x0b, W
000d84   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000d86   500a     movf    0xa, 0, 0        	MOVF	r0x0a, W
000d88   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000d8a   0e00     movlw   0                	MOVLW	UPPER(__str_13)
000d8c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000d8e   0e10     movlw   0x10             	MOVLW	HIGH(__str_13)
000d90   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000d92   0ed4     movlw   0xd4             	MOVLW	LOW(__str_13)
000d94   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000d96   500e     movf    0xe, 0, 0        	MOVF	r0x0e, W
000d98   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000d9a   500d     movf    0xd, 0, 0        	MOVF	r0x0d, W
000d9c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000d9e   500c     movf    0xc, 0, 0        	MOVF	r0x0c, W
000da0   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000da2   ec48     call    0x2290, 0        	CALL	_sprintf
000da4   f011
000da6   0e12     movlw   0x12             	MOVLW	0x12
000da8   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	470; lena.c	break;
000daa   d016     bra     0xdd8            	BRA	_00336_DS_
                                           _00335_DS_:
                                           ;	.line	472; lena.c	sprintf(display, "**** ERROR ********* ERROR *****");
000dac   0e0f     movlw   0xf              	MOVLW	HIGH(_refresh_lcd_display_1_1)
000dae   6e01     movwf   0x1, 0           	MOVWF	r0x01
000db0   0e21     movlw   0x21             	MOVLW	LOW(_refresh_lcd_display_1_1)
000db2   6e00     movwf   0, 0             	MOVWF	r0x00
000db4   0e80     movlw   0x80             	MOVLW	0x80
000db6   6e02     movwf   0x2, 0           	MOVWF	r0x02
000db8   0e00     movlw   0                	MOVLW	UPPER(__str_14)
000dba   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000dbc   0e11     movlw   0x11             	MOVLW	HIGH(__str_14)
000dbe   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000dc0   0e00     movlw   0                	MOVLW	LOW(__str_14)
000dc2   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000dc4   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
000dc6   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000dc8   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
000dca   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000dcc   5000     movf    0, 0, 0          	MOVF	r0x00, W
000dce   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000dd0   ec48     call    0x2290, 0        	CALL	_sprintf
000dd2   f011
000dd4   0e06     movlw   0x6              	MOVLW	0x06
000dd6   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           _00336_DS_:
                                           ;	.line	475; lena.c	DisplayString(0, display);
000dd8   0e0f     movlw   0xf              	MOVLW	HIGH(_refresh_lcd_display_1_1)
000dda   6e01     movwf   0x1, 0           	MOVWF	r0x01
000ddc   0e21     movlw   0x21             	MOVLW	LOW(_refresh_lcd_display_1_1)
000dde   6e00     movwf   0, 0             	MOVWF	r0x00
000de0   0e80     movlw   0x80             	MOVLW	0x80
000de2   6e02     movwf   0x2, 0           	MOVWF	r0x02
000de4   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
000de6   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000de8   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
000dea   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000dec   5000     movf    0, 0, 0          	MOVF	r0x00, W
000dee   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000df0   0e00     movlw   0                	MOVLW	0x00
000df2   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000df4   ec2f     call    0x245e, 0        	CALL	_DisplayString
000df6   f012
000df8   0e04     movlw   0x4              	MOVLW	0x04
000dfa   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
000dfc   cfe4     movff   0xfe4, 0xe       	MOVFF	PREINC1, r0x0e
000dfe   f00e
000e00   cfe4     movff   0xfe4, 0xd       	MOVFF	PREINC1, r0x0d
000e02   f00d
000e04   cfe4     movff   0xfe4, 0xc       	MOVFF	PREINC1, r0x0c
000e06   f00c
000e08   cfe4     movff   0xfe4, 0xb       	MOVFF	PREINC1, r0x0b
000e0a   f00b
000e0c   cfe4     movff   0xfe4, 0xa       	MOVFF	PREINC1, r0x0a
000e0e   f00a
000e10   cfe4     movff   0xfe4, 0x9       	MOVFF	PREINC1, r0x09
000e12   f009
000e14   cfe4     movff   0xfe4, 0x8       	MOVFF	PREINC1, r0x08
000e16   f008
000e18   cfe4     movff   0xfe4, 0x7       	MOVFF	PREINC1, r0x07
000e1a   f007
000e1c   cfe4     movff   0xfe4, 0x6       	MOVFF	PREINC1, r0x06
000e1e   f006
000e20   cfe4     movff   0xfe4, 0x5       	MOVFF	PREINC1, r0x05
000e22   f005
000e24   cfe4     movff   0xfe4, 0x4       	MOVFF	PREINC1, r0x04
000e26   f004
000e28   cfe4     movff   0xfe4, 0x3       	MOVFF	PREINC1, r0x03
000e2a   f003
000e2c   cfe4     movff   0xfe4, 0x2       	MOVFF	PREINC1, r0x02
000e2e   f002
000e30   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
000e32   f001
000e34   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
000e36   f000
000e38   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
000e3a   ffd9
000e3c   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_lena__button	code
                                           _button:
                                           ;	.line	281; lena.c	void button(void)
00138c   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
00138e   ffe5
001390   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
001392   ffd9
001394   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
001396   ffe5
001398   010f     movlb   0xf              	BANKSEL	_button1
                                           ;	.line	284; lena.c	if (button1) {
00139a   514f     movf    0x4f, 0, 0x1     	MOVF	_button1, W, B
00139c   b4d8     btfsc   0xd8, 0x2, 0     	BTFSC	STATUS, 2
00139e   d07c     bra     0x1498           	BRA	_00275_DS_
                                           ;	.line	285; lena.c	switch (whereami) {
0013a0   0e01     movlw   0x1              	MOVLW	0x01
0013a2   010f     movlb   0xf              	BANKSEL	_whereami
0013a4   5d4c     subwf   0x4c, 0, 0x1     	SUBWF	_whereami, W, B
0013a6   a0d8     btfss   0xd8, 0, 0       	BTFSS	STATUS, 0
0013a8   d074     bra     0x1492           	BRA	_00240_DS_
0013aa   0e0c     movlw   0xc              	MOVLW	0x0c
0013ac   010f     movlb   0xf              	BANKSEL	_whereami
0013ae   5d4c     subwf   0x4c, 0, 0x1     	SUBWF	_whereami, W, B
0013b0   b0d8     btfsc   0xd8, 0, 0       	BTFSC	STATUS, 0
0013b2   d06f     bra     0x1492           	BRA	_00240_DS_
0013b4   010f     movlb   0xf              	BANKSEL	_whereami
0013b6   054c     decf    0x4c, 0, 0x1     	DECF	_whereami, W, B
0013b8   6e00     movwf   0, 0             	MOVWF	r0x00
0013ba   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
0013bc   ffe5
0013be   c002     movff   0x2, 0xfe5       	MOVFF	r0x02, POSTDEC1
0013c0   ffe5
0013c2   6a02     clrf    0x2, 0           	CLRF	r0x02
0013c4   3400     rlcf    0, 0, 0          	RLCF	r0x00, W
0013c6   3602     rlcf    0x2, 0x1, 0      	RLCF	r0x02, F
0013c8   34e8     rlcf    0xe8, 0, 0       	RLCF	WREG, W
0013ca   3602     rlcf    0x2, 0x1, 0      	RLCF	r0x02, F
0013cc   0bfc     andlw   0xfc             	ANDLW	0xfc
0013ce   6e01     movwf   0x1, 0           	MOVWF	r0x01
0013d0   0e00     movlw   0                	MOVLW	UPPER(_00294_DS_)
0013d2   6efb     movwf   0xfb, 0          	MOVWF	PCLATU
0013d4   0e13     movlw   0x13             	MOVLW	HIGH(_00294_DS_)
0013d6   6efa     movwf   0xfa, 0          	MOVWF	PCLATH
0013d8   0ef0     movlw   0xf0             	MOVLW	LOW(_00294_DS_)
0013da   2601     addwf   0x1, 0x1, 0      	ADDWF	r0x01, F
0013dc   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
0013de   22fa     addwfc  0xfa, 0x1, 0     	ADDWFC	PCLATH, F
0013e0   b0d8     btfsc   0xd8, 0, 0       	BTFSC	STATUS, 0
0013e2   2afb     incf    0xfb, 0x1, 0     	INCF	PCLATU, F
0013e4   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
0013e6   cfe4     movff   0xfe4, 0x2       	MOVFF	PREINC1, r0x02
0013e8   f002
0013ea   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
0013ec   f001
0013ee   6ef9     movwf   0xf9, 0          	MOVWF	PCL
                                           _00294_DS_:
0013f0   ef0e     goto    0x141c           	GOTO	_00228_DS_
0013f2   f00a
0013f4   ef12     goto    0x1424           	GOTO	_00229_DS_
0013f6   f00a
0013f8   ef16     goto    0x142c           	GOTO	_00230_DS_
0013fa   f00a
0013fc   ef1a     goto    0x1434           	GOTO	_00231_DS_
0013fe   f00a
001400   ef1e     goto    0x143c           	GOTO	_00232_DS_
001402   f00a
001404   ef22     goto    0x1444           	GOTO	_00233_DS_
001406   f00a
001408   ef26     goto    0x144c           	GOTO	_00234_DS_
00140a   f00a
00140c   ef2a     goto    0x1454           	GOTO	_00235_DS_
00140e   f00a
001410   ef2e     goto    0x145c           	GOTO	_00236_DS_
001412   f00a
001414   ef32     goto    0x1464           	GOTO	_00237_DS_
001416   f00a
001418   ef3b     goto    0x1476           	GOTO	_00238_DS_
00141a   f00a
                                           _00228_DS_:
                                           ;	.line	287; lena.c	whereami = ALARM_MENU;
00141c   0e05     movlw   0x5              	MOVLW	0x05
00141e   010f     movlb   0xf              	BANKSEL	_whereami
001420   6f4c     movwf   0x4c, 0x1        	MOVWF	_whereami, B
                                           ;	.line	288; lena.c	break;
001422   d037     bra     0x1492           	BRA	_00240_DS_
                                           _00229_DS_:
                                           ;	.line	290; lena.c	whereami = SET_MINUTE;
001424   0e03     movlw   0x3              	MOVLW	0x03
001426   010f     movlb   0xf              	BANKSEL	_whereami
001428   6f4c     movwf   0x4c, 0x1        	MOVWF	_whereami, B
                                           ;	.line	291; lena.c	break;
00142a   d033     bra     0x1492           	BRA	_00240_DS_
                                           _00230_DS_:
                                           ;	.line	293; lena.c	whereami = SET_SECOND;
00142c   0e04     movlw   0x4              	MOVLW	0x04
00142e   010f     movlb   0xf              	BANKSEL	_whereami
001430   6f4c     movwf   0x4c, 0x1        	MOVWF	_whereami, B
                                           ;	.line	294; lena.c	break;
001432   d02f     bra     0x1492           	BRA	_00240_DS_
                                           _00231_DS_:
                                           ;	.line	296; lena.c	whereami = ALARM_MENU;
001434   0e05     movlw   0x5              	MOVLW	0x05
001436   010f     movlb   0xf              	BANKSEL	_whereami
001438   6f4c     movwf   0x4c, 0x1        	MOVWF	_whereami, B
                                           ;	.line	297; lena.c	break;
00143a   d02b     bra     0x1492           	BRA	_00240_DS_
                                           _00232_DS_:
                                           ;	.line	299; lena.c	whereami = DISPLAY;
00143c   0e09     movlw   0x9              	MOVLW	0x09
00143e   010f     movlb   0xf              	BANKSEL	_whereami
001440   6f4c     movwf   0x4c, 0x1        	MOVWF	_whereami, B
                                           ;	.line	300; lena.c	break;
001442   d027     bra     0x1492           	BRA	_00240_DS_
                                           _00233_DS_:
                                           ;	.line	302; lena.c	whereami = SET_A_HOUR;
001444   0e07     movlw   0x7              	MOVLW	0x07
001446   010f     movlb   0xf              	BANKSEL	_whereami
001448   6f4c     movwf   0x4c, 0x1        	MOVWF	_whereami, B
                                           ;	.line	303; lena.c	break;
00144a   d023     bra     0x1492           	BRA	_00240_DS_
                                           _00234_DS_:
                                           ;	.line	305; lena.c	whereami = SET_A_MIN;
00144c   0e08     movlw   0x8              	MOVLW	0x08
00144e   010f     movlb   0xf              	BANKSEL	_whereami
001450   6f4c     movwf   0x4c, 0x1        	MOVWF	_whereami, B
                                           ;	.line	306; lena.c	break;
001452   d01f     bra     0x1492           	BRA	_00240_DS_
                                           _00235_DS_:
                                           ;	.line	308; lena.c	whereami = DISPLAY;
001454   0e09     movlw   0x9              	MOVLW	0x09
001456   010f     movlb   0xf              	BANKSEL	_whereami
001458   6f4c     movwf   0x4c, 0x1        	MOVWF	_whereami, B
                                           ;	.line	309; lena.c	break;
00145a   d01b     bra     0x1492           	BRA	_00240_DS_
                                           _00236_DS_:
                                           ;	.line	311; lena.c	whereami = TIME_MENU;
00145c   0e01     movlw   0x1              	MOVLW	0x01
00145e   010f     movlb   0xf              	BANKSEL	_whereami
001460   6f4c     movwf   0x4c, 0x1        	MOVWF	_whereami, B
                                           ;	.line	312; lena.c	break;
001462   d017     bra     0x1492           	BRA	_00240_DS_
                                           _00237_DS_:
                                           ;	.line	314; lena.c	stop_ringing = 1;
001464   0e01     movlw   0x1              	MOVLW	0x01
001466   010f     movlb   0xf              	BANKSEL	_stop_ringing
001468   6f4b     movwf   0x4b, 0x1        	MOVWF	_stop_ringing, B
                                           ;	.line	315; lena.c	LATJbits.LATJ1 = 0; // switch LED 2 off
00146a   9291     bcf     0x91, 0x1, 0     	BCF	_LATJbits, 1
                                           ;	.line	316; lena.c	LATJbits.LATJ2 = 0; // switch LED 3 off
00146c   9491     bcf     0x91, 0x2, 0     	BCF	_LATJbits, 2
                                           ;	.line	317; lena.c	whereami = DISPLAY;
00146e   0e09     movlw   0x9              	MOVLW	0x09
001470   010f     movlb   0xf              	BANKSEL	_whereami
001472   6f4c     movwf   0x4c, 0x1        	MOVWF	_whereami, B
                                           ;	.line	318; lena.c	break;
001474   d00e     bra     0x1492           	BRA	_00240_DS_
                                           _00238_DS_:
                                           ;	.line	320; lena.c	stop_ringing = 1; // le réveil ne doit plus sonner
001476   0e01     movlw   0x1              	MOVLW	0x01
001478   010f     movlb   0xf              	BANKSEL	_stop_ringing
00147a   6f4b     movwf   0x4b, 0x1        	MOVWF	_stop_ringing, B
                                           ;	.line	321; lena.c	amin = amin_o; // remet le réveil
00147c   cf49     movff   0xf49, 0xf47     	MOVFF	_amin_o, _amin
00147e   ff47
                                           ;	.line	322; lena.c	ahour = ahour_o;
001480   cf48     movff   0xf48, 0xf46     	MOVFF	_ahour_o, _ahour
001482   ff46
001484   010f     movlb   0xf              	BANKSEL	_snooze
                                           ;	.line	323; lena.c	snooze = 0;
001486   6b4a     clrf    0x4a, 0x1        	CLRF	_snooze, B
                                           ;	.line	324; lena.c	LATJbits.LATJ1 = 0; // switch LED 2 off
001488   9291     bcf     0x91, 0x1, 0     	BCF	_LATJbits, 1
                                           ;	.line	325; lena.c	LATJbits.LATJ2 = 0; // switch LED 3 off
00148a   9491     bcf     0x91, 0x2, 0     	BCF	_LATJbits, 2
                                           ;	.line	326; lena.c	whereami = DISPLAY;
00148c   0e09     movlw   0x9              	MOVLW	0x09
00148e   010f     movlb   0xf              	BANKSEL	_whereami
001490   6f4c     movwf   0x4c, 0x1        	MOVWF	_whereami, B
                                           _00240_DS_:
001492   010f     movlb   0xf              	BANKSEL	_button1
                                           ;	.line	331; lena.c	button1 = 0; // remet le flag du boutton 1 à 0
001494   6b4f     clrf    0x4f, 0x1        	CLRF	_button1, B
001496   d0a3     bra     0x15de           	BRA	_00277_DS_
                                           _00275_DS_:
001498   010f     movlb   0xf              	BANKSEL	_button2
                                           ;	.line	334; lena.c	} else if (button2) {
00149a   5150     movf    0x50, 0, 0x1     	MOVF	_button2, W, B
00149c   b4d8     btfsc   0xd8, 0x2, 0     	BTFSC	STATUS, 2
00149e   d09f     bra     0x15de           	BRA	_00277_DS_
                                           ;	.line	335; lena.c	switch (whereami) {
0014a0   0e01     movlw   0x1              	MOVLW	0x01
0014a2   010f     movlb   0xf              	BANKSEL	_whereami
0014a4   5d4c     subwf   0x4c, 0, 0x1     	SUBWF	_whereami, W, B
0014a6   a0d8     btfss   0xd8, 0, 0       	BTFSS	STATUS, 0
0014a8   d098     bra     0x15da           	BRA	_00271_DS_
0014aa   0e0c     movlw   0xc              	MOVLW	0x0c
0014ac   010f     movlb   0xf              	BANKSEL	_whereami
0014ae   5d4c     subwf   0x4c, 0, 0x1     	SUBWF	_whereami, W, B
0014b0   b0d8     btfsc   0xd8, 0, 0       	BTFSC	STATUS, 0
0014b2   d093     bra     0x15da           	BRA	_00271_DS_
0014b4   010f     movlb   0xf              	BANKSEL	_whereami
0014b6   054c     decf    0x4c, 0, 0x1     	DECF	_whereami, W, B
0014b8   6e00     movwf   0, 0             	MOVWF	r0x00
0014ba   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
0014bc   ffe5
0014be   c002     movff   0x2, 0xfe5       	MOVFF	r0x02, POSTDEC1
0014c0   ffe5
0014c2   6a02     clrf    0x2, 0           	CLRF	r0x02
0014c4   3400     rlcf    0, 0, 0          	RLCF	r0x00, W
0014c6   3602     rlcf    0x2, 0x1, 0      	RLCF	r0x02, F
0014c8   34e8     rlcf    0xe8, 0, 0       	RLCF	WREG, W
0014ca   3602     rlcf    0x2, 0x1, 0      	RLCF	r0x02, F
0014cc   0bfc     andlw   0xfc             	ANDLW	0xfc
0014ce   6e01     movwf   0x1, 0           	MOVWF	r0x01
0014d0   0e00     movlw   0                	MOVLW	UPPER(_00297_DS_)
0014d2   6efb     movwf   0xfb, 0          	MOVWF	PCLATU
0014d4   0e14     movlw   0x14             	MOVLW	HIGH(_00297_DS_)
0014d6   6efa     movwf   0xfa, 0          	MOVWF	PCLATH
0014d8   0ef0     movlw   0xf0             	MOVLW	LOW(_00297_DS_)
0014da   2601     addwf   0x1, 0x1, 0      	ADDWF	r0x01, F
0014dc   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
0014de   22fa     addwfc  0xfa, 0x1, 0     	ADDWFC	PCLATH, F
0014e0   b0d8     btfsc   0xd8, 0, 0       	BTFSC	STATUS, 0
0014e2   2afb     incf    0xfb, 0x1, 0     	INCF	PCLATU, F
0014e4   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
0014e6   cfe4     movff   0xfe4, 0x2       	MOVFF	PREINC1, r0x02
0014e8   f002
0014ea   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
0014ec   f001
0014ee   6ef9     movwf   0xf9, 0          	MOVWF	PCL
                                           _00297_DS_:
0014f0   ef8e     goto    0x151c           	GOTO	_00241_DS_
0014f2   f00a
0014f4   ef92     goto    0x1524           	GOTO	_00242_DS_
0014f6   f00a
0014f8   ef9c     goto    0x1538           	GOTO	_00245_DS_
0014fa   f00a
0014fc   efa6     goto    0x154c           	GOTO	_00249_DS_
0014fe   f00a
001500   efb0     goto    0x1560           	GOTO	_00253_DS_
001502   f00a
001504   efb4     goto    0x1568           	GOTO	_00254_DS_
001506   f00a
001508   efb8     goto    0x1570           	GOTO	_00255_DS_
00150a   f00a
00150c   efc4     goto    0x1588           	GOTO	_00259_DS_
00150e   f00a
001510   efd0     goto    0x15a0           	GOTO	_00263_DS_
001512   f00a
001514   efd1     goto    0x15a2           	GOTO	_00264_DS_
001516   f00a
001518   efe2     goto    0x15c4           	GOTO	_00267_DS_
00151a   f00a
                                           _00241_DS_:
                                           ;	.line	337; lena.c	whereami = SET_HOUR;
00151c   0e02     movlw   0x2              	MOVLW	0x02
00151e   010f     movlb   0xf              	BANKSEL	_whereami
001520   6f4c     movwf   0x4c, 0x1        	MOVWF	_whereami, B
                                           ;	.line	338; lena.c	break;
001522   d05b     bra     0x15da           	BRA	_00271_DS_
                                           _00242_DS_:
001524   010f     movlb   0xf              	BANKSEL	_thour
                                           ;	.line	340; lena.c	thour++;
001526   2b42     incf    0x42, 0x1, 0x1   	INCF	_thour, F, B
001528   010f     movlb   0xf              	BANKSEL	_thour
                                           ;	.line	341; lena.c	if (thour == 24) {
00152a   5142     movf    0x42, 0, 0x1     	MOVF	_thour, W, B
00152c   0a18     xorlw   0x18             	XORLW	0x18
00152e   e001     bz      0x1532           	BZ	_00299_DS_
001530   d054     bra     0x15da           	BRA	_00271_DS_
                                           _00299_DS_:
001532   010f     movlb   0xf              	BANKSEL	_thour
                                           ;	.line	342; lena.c	thour = 0;
001534   6b42     clrf    0x42, 0x1        	CLRF	_thour, B
                                           ;	.line	344; lena.c	break;
001536   d051     bra     0x15da           	BRA	_00271_DS_
                                           _00245_DS_:
001538   010f     movlb   0xf              	BANKSEL	_tmin
                                           ;	.line	346; lena.c	if (tmin == 59) {
00153a   5143     movf    0x43, 0, 0x1     	MOVF	_tmin, W, B
00153c   0a3b     xorlw   0x3b             	XORLW	0x3b
00153e   e103     bnz     0x1546           	BNZ	_00247_DS_
                                           _00301_DS_:
001540   010f     movlb   0xf              	BANKSEL	_tmin
                                           ;	.line	347; lena.c	tmin = 0;
001542   6b43     clrf    0x43, 0x1        	CLRF	_tmin, B
001544   d04a     bra     0x15da           	BRA	_00271_DS_
                                           _00247_DS_:
001546   010f     movlb   0xf              	BANKSEL	_tmin
                                           ;	.line	349; lena.c	tmin++;
001548   2b43     incf    0x43, 0x1, 0x1   	INCF	_tmin, F, B
                                           ;	.line	351; lena.c	break;
00154a   d047     bra     0x15da           	BRA	_00271_DS_
                                           _00249_DS_:
00154c   010f     movlb   0xf              	BANKSEL	_tsec
                                           ;	.line	353; lena.c	if (tsec == 59) {
00154e   5144     movf    0x44, 0, 0x1     	MOVF	_tsec, W, B
001550   0a3b     xorlw   0x3b             	XORLW	0x3b
001552   e103     bnz     0x155a           	BNZ	_00251_DS_
                                           _00303_DS_:
001554   010f     movlb   0xf              	BANKSEL	_tsec
                                           ;	.line	354; lena.c	tsec = 0;
001556   6b44     clrf    0x44, 0x1        	CLRF	_tsec, B
001558   d040     bra     0x15da           	BRA	_00271_DS_
                                           _00251_DS_:
00155a   010f     movlb   0xf              	BANKSEL	_tsec
                                           ;	.line	356; lena.c	tsec++;
00155c   2b44     incf    0x44, 0x1, 0x1   	INCF	_tsec, F, B
                                           ;	.line	358; lena.c	break;
00155e   d03d     bra     0x15da           	BRA	_00271_DS_
                                           _00253_DS_:
                                           ;	.line	360; lena.c	whereami = SET_ALARM;
001560   0e06     movlw   0x6              	MOVLW	0x06
001562   010f     movlb   0xf              	BANKSEL	_whereami
001564   6f4c     movwf   0x4c, 0x1        	MOVWF	_whereami, B
                                           ;	.line	361; lena.c	break;
001566   d039     bra     0x15da           	BRA	_00271_DS_
                                           _00254_DS_:
                                           ;	.line	363; lena.c	alarm_set ^= 1;
001568   0e01     movlw   0x1              	MOVLW	0x01
00156a   010f     movlb   0xf              	BANKSEL	_alarm_set
00156c   1b45     xorwf   0x45, 0x1, 0x1   	XORWF	_alarm_set, F, B
                                           ;	.line	364; lena.c	break;
00156e   d035     bra     0x15da           	BRA	_00271_DS_
                                           _00255_DS_:
001570   010f     movlb   0xf              	BANKSEL	_ahour
                                           ;	.line	366; lena.c	if (ahour == 23) {
001572   5146     movf    0x46, 0, 0x1     	MOVF	_ahour, W, B
001574   0a17     xorlw   0x17             	XORLW	0x17
001576   e103     bnz     0x157e           	BNZ	_00257_DS_
                                           _00306_DS_:
001578   010f     movlb   0xf              	BANKSEL	_ahour
                                           ;	.line	367; lena.c	ahour = 0;
00157a   6b46     clrf    0x46, 0x1        	CLRF	_ahour, B
00157c   d002     bra     0x1582           	BRA	_00258_DS_
                                           _00257_DS_:
00157e   010f     movlb   0xf              	BANKSEL	_ahour
                                           ;	.line	369; lena.c	ahour++;
001580   2b46     incf    0x46, 0x1, 0x1   	INCF	_ahour, F, B
                                           _00258_DS_:
                                           ;	.line	371; lena.c	ahour_o = ahour;
001582   cf46     movff   0xf46, 0xf48     	MOVFF	_ahour, _ahour_o
001584   ff48
                                           ;	.line	372; lena.c	break;
001586   d029     bra     0x15da           	BRA	_00271_DS_
                                           _00259_DS_:
001588   010f     movlb   0xf              	BANKSEL	_amin
                                           ;	.line	374; lena.c	if (amin == 59) {
00158a   5147     movf    0x47, 0, 0x1     	MOVF	_amin, W, B
00158c   0a3b     xorlw   0x3b             	XORLW	0x3b
00158e   e103     bnz     0x1596           	BNZ	_00261_DS_
                                           _00308_DS_:
001590   010f     movlb   0xf              	BANKSEL	_amin
                                           ;	.line	375; lena.c	amin = 0;
001592   6b47     clrf    0x47, 0x1        	CLRF	_amin, B
001594   d002     bra     0x159a           	BRA	_00262_DS_
                                           _00261_DS_:
001596   010f     movlb   0xf              	BANKSEL	_amin
                                           ;	.line	377; lena.c	amin++;
001598   2b47     incf    0x47, 0x1, 0x1   	INCF	_amin, F, B
                                           _00262_DS_:
                                           ;	.line	379; lena.c	amin_o = amin;
00159a   cf47     movff   0xf47, 0xf49     	MOVFF	_amin, _amin_o
00159c   ff49
                                           ;	.line	380; lena.c	break;
00159e   d01d     bra     0x15da           	BRA	_00271_DS_
                                           _00263_DS_:
                                           ;	.line	383; lena.c	break;
0015a0   d01c     bra     0x15da           	BRA	_00271_DS_
                                           _00264_DS_:
                                           ;	.line	386; lena.c	if (snooze < SNOOZE_MAX) {
0015a2   0e0c     movlw   0xc              	MOVLW	0x0c
0015a4   010f     movlb   0xf              	BANKSEL	_snooze
0015a6   5d4a     subwf   0x4a, 0, 0x1     	SUBWF	_snooze, W, B
0015a8   e218     bc      0x15da           	BC	_00271_DS_
                                           ;	.line	387; lena.c	inc_amin(SNOOZE_MINUTE); // modifie le réveil
0015aa   0e05     movlw   0x5              	MOVLW	0x05
0015ac   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0015ae   ec9a     call    0x2534, 0        	CALL	_inc_amin
0015b0   f012
0015b2   2ae1     incf    0xe1, 0x1, 0     	INCF	FSR1L, F
0015b4   010f     movlb   0xf              	BANKSEL	_snooze
                                           ;	.line	388; lena.c	snooze++; // augmente le compteur de snooze
0015b6   2b4a     incf    0x4a, 0x1, 0x1   	INCF	_snooze, F, B
                                           ;	.line	389; lena.c	LATJbits.LATJ1 = 0; // switch LED 2 off
0015b8   9291     bcf     0x91, 0x1, 0     	BCF	_LATJbits, 1
                                           ;	.line	390; lena.c	LATJbits.LATJ2 = 0; // switch LED 3 off
0015ba   9491     bcf     0x91, 0x2, 0     	BCF	_LATJbits, 2
                                           ;	.line	391; lena.c	whereami = SNOOZE;
0015bc   0e0b     movlw   0xb              	MOVLW	0x0b
0015be   010f     movlb   0xf              	BANKSEL	_whereami
0015c0   6f4c     movwf   0x4c, 0x1        	MOVWF	_whereami, B
                                           ;	.line	394; lena.c	break;
0015c2   d00b     bra     0x15da           	BRA	_00271_DS_
                                           _00267_DS_:
                                           ;	.line	397; lena.c	if (snooze < SNOOZE_MAX) {
0015c4   0e0c     movlw   0xc              	MOVLW	0x0c
0015c6   010f     movlb   0xf              	BANKSEL	_snooze
0015c8   5d4a     subwf   0x4a, 0, 0x1     	SUBWF	_snooze, W, B
0015ca   e207     bc      0x15da           	BC	_00271_DS_
                                           ;	.line	398; lena.c	inc_amin(SNOOZE_MINUTE); // modifie le réveil
0015cc   0e05     movlw   0x5              	MOVLW	0x05
0015ce   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0015d0   ec9a     call    0x2534, 0        	CALL	_inc_amin
0015d2   f012
0015d4   2ae1     incf    0xe1, 0x1, 0     	INCF	FSR1L, F
0015d6   010f     movlb   0xf              	BANKSEL	_snooze
                                           ;	.line	399; lena.c	snooze++; // augmente le compteur de snooze
0015d8   2b4a     incf    0x4a, 0x1, 0x1   	INCF	_snooze, F, B
                                           _00271_DS_:
0015da   010f     movlb   0xf              	BANKSEL	_button2
                                           ;	.line	406; lena.c	button2 = 0; // remet le flag du boutton 2 à 0
0015dc   6b50     clrf    0x50, 0x1        	CLRF	_button2, B
                                           _00277_DS_:
0015de   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
0015e0   f000
0015e2   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0015e4   ffd9
0015e6   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_lena__manageseconds	code
                                           _manageseconds:
                                           ;	.line	273; lena.c	void manageseconds() {
002c2c   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002c2e   ffe5
002c30   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002c32   ffd9
002c34   010f     movlb   0xf              	BANKSEL	(_pseudoseconds + 1)
                                           ;	.line	274; lena.c	if (pseudoseconds >= PER) {
002c36   5154     movf    0x54, 0, 0x1     	MOVF	(_pseudoseconds + 1), W, B
002c38   0f80     addlw   0x80             	ADDLW	0x80
002c3a   0f80     addlw   0x80             	ADDLW	0x80
002c3c   e103     bnz     0x2c44           	BNZ	_00223_DS_
002c3e   0e05     movlw   0x5              	MOVLW	0x05
002c40   010f     movlb   0xf              	BANKSEL	_pseudoseconds
002c42   5d53     subwf   0x53, 0, 0x1     	SUBWF	_pseudoseconds, W, B
                                           _00223_DS_:
002c44   e30c     bnc     0x2c5e           	BNC	_00220_DS_
                                           ;	.line	275; lena.c	overflows = overflows - CUT;
002c46   0efe     movlw   0xfe             	MOVLW	0xfe
002c48   010f     movlb   0xf              	BANKSEL	_overflows
002c4a   2751     addwf   0x51, 0x1, 0x1   	ADDWF	_overflows, F, B
002c4c   e202     bc      0x2c52           	BC	_10362_DS_
002c4e   010f     movlb   0xf              	BANKSEL	(_overflows + 1)
002c50   0752     decf    0x52, 0x1, 0x1   	DECF	(_overflows + 1), F, B
                                           _10362_DS_:
                                           ;	.line	276; lena.c	pseudoseconds = pseudoseconds - PER;
002c52   0efb     movlw   0xfb             	MOVLW	0xfb
002c54   010f     movlb   0xf              	BANKSEL	_pseudoseconds
002c56   2753     addwf   0x53, 0x1, 0x1   	ADDWF	_pseudoseconds, F, B
002c58   e202     bc      0x2c5e           	BC	_20363_DS_
002c5a   010f     movlb   0xf              	BANKSEL	(_pseudoseconds + 1)
002c5c   0754     decf    0x54, 0x1, 0x1   	DECF	(_pseudoseconds + 1), F, B
                                           _20363_DS_:
                                           _00220_DS_:
002c5e   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002c60   ffd9
002c62   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_lena__time	code
                                           _time:
                                           ;	.line	225; lena.c	void time(void)
001d3a   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
001d3c   ffe5
001d3e   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
001d40   ffd9
001d42   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
001d44   ffe5
001d46   010f     movlb   0xf              	BANKSEL	_halfsecond
                                           ;	.line	228; lena.c	if (halfsecond) {
001d48   514e     movf    0x4e, 0, 0x1     	MOVF	_halfsecond, W, B
001d4a   e00e     bz      0x1d68           	BZ	_00159_DS_
                                           ;	.line	229; lena.c	LED0_IO ^= 1;
001d4c   6a00     clrf    0, 0             	CLRF	r0x00
001d4e   b091     btfsc   0x91, 0, 0       	BTFSC	_LATJbits, 0
001d50   2a00     incf    0, 0x1, 0        	INCF	r0x00, F
001d52   0e01     movlw   0x1              	MOVLW	0x01
001d54   1a00     xorwf   0, 0x1, 0        	XORWF	r0x00, F
001d56   5000     movf    0, 0, 0          	MOVF	r0x00, W
001d58   0b01     andlw   0x1              	ANDLW	0x01
001d5a   6ef4     movwf   0xf4, 0          	MOVWF	PRODH
001d5c   5091     movf    0x91, 0, 0       	MOVF	_LATJbits, W
001d5e   0bfe     andlw   0xfe             	ANDLW	0xfe
001d60   10f4     iorwf   0xf4, 0, 0       	IORWF	PRODH, W
001d62   6e91     movwf   0x91, 0          	MOVWF	_LATJbits
001d64   010f     movlb   0xf              	BANKSEL	_halfsecond
                                           ;	.line	230; lena.c	halfsecond = 0;
001d66   6b4e     clrf    0x4e, 0x1        	CLRF	_halfsecond, B
                                           _00159_DS_:
001d68   010f     movlb   0xf              	BANKSEL	_new_time
                                           ;	.line	234; lena.c	if (new_time) {
001d6a   514d     movf    0x4d, 0, 0x1     	MOVF	_new_time, W, B
001d6c   e014     bz      0x1d96           	BZ	_00161_DS_
001d6e   010f     movlb   0xf              	BANKSEL	_new_time
                                           ;	.line	235; lena.c	inc_tsec(new_time);
001d70   514d     movf    0x4d, 0, 0x1     	MOVF	_new_time, W, B
001d72   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001d74   ecfe     call    0x1bfc, 0        	CALL	_inc_tsec
001d76   f00d
001d78   2ae1     incf    0xe1, 0x1, 0     	INCF	FSR1L, F
001d7a   010f     movlb   0xf              	BANKSEL	_new_time
                                           ;	.line	236; lena.c	new_time = 0;
001d7c   6b4d     clrf    0x4d, 0x1        	CLRF	_new_time, B
                                           ;	.line	238; lena.c	LED0_IO ^= 1;
001d7e   6a00     clrf    0, 0             	CLRF	r0x00
001d80   b091     btfsc   0x91, 0, 0       	BTFSC	_LATJbits, 0
001d82   2a00     incf    0, 0x1, 0        	INCF	r0x00, F
001d84   0e01     movlw   0x1              	MOVLW	0x01
001d86   1a00     xorwf   0, 0x1, 0        	XORWF	r0x00, F
001d88   5000     movf    0, 0, 0          	MOVF	r0x00, W
001d8a   0b01     andlw   0x1              	ANDLW	0x01
001d8c   6ef4     movwf   0xf4, 0          	MOVWF	PRODH
001d8e   5091     movf    0x91, 0, 0       	MOVF	_LATJbits, W
001d90   0bfe     andlw   0xfe             	ANDLW	0xfe
001d92   10f4     iorwf   0xf4, 0, 0       	IORWF	PRODH, W
001d94   6e91     movwf   0x91, 0          	MOVWF	_LATJbits
                                           _00161_DS_:
001d96   010f     movlb   0xf              	BANKSEL	_thour
                                           ;	.line	242; lena.c	if ((thour == ahour) && (tmin == amin) && alarm_set) {
001d98   5142     movf    0x42, 0, 0x1     	MOVF	_thour, W, B
001d9a   010f     movlb   0xf              	BANKSEL	_ahour
001d9c   1946     xorwf   0x46, 0, 0x1     	XORWF	_ahour, W, B
001d9e   e001     bz      0x1da2           	BZ	_00199_DS_
001da0   d059     bra     0x1e54           	BRA	_00182_DS_
                                           _00199_DS_:
001da2   010f     movlb   0xf              	BANKSEL	_tmin
001da4   5143     movf    0x43, 0, 0x1     	MOVF	_tmin, W, B
001da6   010f     movlb   0xf              	BANKSEL	_amin
001da8   1947     xorwf   0x47, 0, 0x1     	XORWF	_amin, W, B
001daa   e001     bz      0x1dae           	BZ	_00201_DS_
001dac   d053     bra     0x1e54           	BRA	_00182_DS_
                                           _00201_DS_:
001dae   010f     movlb   0xf              	BANKSEL	_alarm_set
001db0   5145     movf    0x45, 0, 0x1     	MOVF	_alarm_set, W, B
001db2   b4d8     btfsc   0xd8, 0x2, 0     	BTFSC	STATUS, 2
001db4   d04f     bra     0x1e54           	BRA	_00182_DS_
                                           ;	.line	245; lena.c	if ((tsec < 31) && (stop_ringing == 0)) {
001db6   0e1f     movlw   0x1f             	MOVLW	0x1f
001db8   010f     movlb   0xf              	BANKSEL	_tsec
001dba   5d44     subwf   0x44, 0, 0x1     	SUBWF	_tsec, W, B
001dbc   e22f     bc      0x1e1c           	BC	_00175_DS_
001dbe   010f     movlb   0xf              	BANKSEL	_stop_ringing
001dc0   514b     movf    0x4b, 0, 0x1     	MOVF	_stop_ringing, W, B
001dc2   e12c     bnz     0x1e1c           	BNZ	_00175_DS_
001dc4   010f     movlb   0xf              	BANKSEL	_whereami
                                           ;	.line	246; lena.c	if ((whereami == DISPLAY) || (whereami == SNOOZE)) {
001dc6   514c     movf    0x4c, 0, 0x1     	MOVF	_whereami, W, B
001dc8   0a09     xorlw   0x9              	XORLW	0x09
001dca   e004     bz      0x1dd4           	BZ	_00162_DS_
                                           _00204_DS_:
001dcc   010f     movlb   0xf              	BANKSEL	_whereami
001dce   514c     movf    0x4c, 0, 0x1     	MOVF	_whereami, W, B
001dd0   0a0b     xorlw   0xb              	XORLW	0x0b
001dd2   e103     bnz     0x1dda           	BNZ	_00163_DS_
                                           _00162_DS_:
                                           ;	.line	247; lena.c	whereami = ALARM;
001dd4   0e0a     movlw   0xa              	MOVLW	0x0a
001dd6   010f     movlb   0xf              	BANKSEL	_whereami
001dd8   6f4c     movwf   0x4c, 0x1        	MOVWF	_whereami, B
                                           _00163_DS_:
001dda   010f     movlb   0xf              	BANKSEL	_whereami
                                           ;	.line	249; lena.c	if (whereami == ALARM) {
001ddc   514c     movf    0x4c, 0, 0x1     	MOVF	_whereami, W, B
001dde   0a0a     xorlw   0xa              	XORLW	0x0a
001de0   e001     bz      0x1de4           	BZ	_00208_DS_
001de2   d038     bra     0x1e54           	BRA	_00182_DS_
                                           _00208_DS_:
                                           ;	.line	250; lena.c	LED1_IO ^= 1; //change state of red leds
001de4   6a00     clrf    0, 0             	CLRF	r0x00
001de6   b291     btfsc   0x91, 0x1, 0     	BTFSC	_LATJbits, 1
001de8   2a00     incf    0, 0x1, 0        	INCF	r0x00, F
001dea   0e01     movlw   0x1              	MOVLW	0x01
001dec   1a00     xorwf   0, 0x1, 0        	XORWF	r0x00, F
001dee   5000     movf    0, 0, 0          	MOVF	r0x00, W
001df0   0b01     andlw   0x1              	ANDLW	0x01
001df2   44e8     rlncf   0xe8, 0, 0       	RLNCF	WREG, W
001df4   6ef4     movwf   0xf4, 0          	MOVWF	PRODH
001df6   5091     movf    0x91, 0, 0       	MOVF	_LATJbits, W
001df8   0bfd     andlw   0xfd             	ANDLW	0xfd
001dfa   10f4     iorwf   0xf4, 0, 0       	IORWF	PRODH, W
001dfc   6e91     movwf   0x91, 0          	MOVWF	_LATJbits
                                           ;	.line	251; lena.c	LED2_IO ^= 1; //change state of red leds
001dfe   6a00     clrf    0, 0             	CLRF	r0x00
001e00   b491     btfsc   0x91, 0x2, 0     	BTFSC	_LATJbits, 2
001e02   2a00     incf    0, 0x1, 0        	INCF	r0x00, F
001e04   0e01     movlw   0x1              	MOVLW	0x01
001e06   1a00     xorwf   0, 0x1, 0        	XORWF	r0x00, F
001e08   5000     movf    0, 0, 0          	MOVF	r0x00, W
001e0a   0b01     andlw   0x1              	ANDLW	0x01
001e0c   44e8     rlncf   0xe8, 0, 0       	RLNCF	WREG, W
001e0e   44e8     rlncf   0xe8, 0, 0       	RLNCF	WREG, W
001e10   6ef4     movwf   0xf4, 0          	MOVWF	PRODH
001e12   5091     movf    0x91, 0, 0       	MOVF	_LATJbits, W
001e14   0bfb     andlw   0xfb             	ANDLW	0xfb
001e16   10f4     iorwf   0xf4, 0, 0       	IORWF	PRODH, W
001e18   6e91     movwf   0x91, 0          	MOVWF	_LATJbits
001e1a   d01c     bra     0x1e54           	BRA	_00182_DS_
                                           _00175_DS_:
                                           ;	.line	254; lena.c	} else if (tsec > 30) {
001e1c   0e1f     movlw   0x1f             	MOVLW	0x1f
001e1e   010f     movlb   0xf              	BANKSEL	_tsec
001e20   5d44     subwf   0x44, 0, 0x1     	SUBWF	_tsec, W, B
001e22   e318     bnc     0x1e54           	BNC	_00182_DS_
001e24   010f     movlb   0xf              	BANKSEL	_stop_ringing
                                           ;	.line	255; lena.c	stop_ringing = 0; // remet à 0 si l'alarme a été éteinte à la main
001e26   6b4b     clrf    0x4b, 0x1        	CLRF	_stop_ringing, B
                                           ;	.line	256; lena.c	LATJbits.LATJ1 = 0; // switch LED 2 off
001e28   9291     bcf     0x91, 0x1, 0     	BCF	_LATJbits, 1
                                           ;	.line	257; lena.c	LATJbits.LATJ2 = 0; // switch LED 3 off
001e2a   9491     bcf     0x91, 0x2, 0     	BCF	_LATJbits, 2
001e2c   010f     movlb   0xf              	BANKSEL	_snooze
                                           ;	.line	259; lena.c	if (snooze) {
001e2e   514a     movf    0x4a, 0, 0x1     	MOVF	_snooze, W, B
001e30   e00a     bz      0x1e46           	BZ	_00170_DS_
                                           ;	.line	260; lena.c	ahour = ahour_o; // remet le réveil
001e32   cf48     movff   0xf48, 0xf46     	MOVFF	_ahour_o, _ahour
001e34   ff46
                                           ;	.line	261; lena.c	amin = amin_o;
001e36   cf49     movff   0xf49, 0xf47     	MOVFF	_amin_o, _amin
001e38   ff47
001e3a   010f     movlb   0xf              	BANKSEL	_snooze
                                           ;	.line	262; lena.c	snooze = 0;
001e3c   6b4a     clrf    0x4a, 0x1        	CLRF	_snooze, B
                                           ;	.line	263; lena.c	whereami = DISPLAY;
001e3e   0e09     movlw   0x9              	MOVLW	0x09
001e40   010f     movlb   0xf              	BANKSEL	_whereami
001e42   6f4c     movwf   0x4c, 0x1        	MOVWF	_whereami, B
001e44   d007     bra     0x1e54           	BRA	_00182_DS_
                                           _00170_DS_:
001e46   010f     movlb   0xf              	BANKSEL	_whereami
                                           ;	.line	264; lena.c	} else if (whereami == ALARM) { // si l'alarme sonnait toujours, on
001e48   514c     movf    0x4c, 0, 0x1     	MOVF	_whereami, W, B
001e4a   0a0a     xorlw   0xa              	XORLW	0x0a
001e4c   e103     bnz     0x1e54           	BNZ	_00182_DS_
                                           ;	.line	265; lena.c	whereami = DISPLAY;         // revient à l'affichage de l'heure
001e4e   0e09     movlw   0x9              	MOVLW	0x09
001e50   010f     movlb   0xf              	BANKSEL	_whereami
001e52   6f4c     movwf   0x4c, 0x1        	MOVWF	_whereami, B
                                           _00182_DS_:
001e54   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
001e56   f000
001e58   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
001e5a   ffd9
001e5c   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_lena__inc_amin	code
                                           _inc_amin:
                                           ;	.line	212; lena.c	void inc_amin(BYTE val)
002534   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002536   ffe5
002538   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
00253a   ffd9
00253c   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
00253e   ffe5
002540   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
002542   ffe5
002544   c002     movff   0x2, 0xfe5       	MOVFF	r0x02, POSTDEC1
002546   ffe5
002548   c003     movff   0x3, 0xfe5       	MOVFF	r0x03, POSTDEC1
00254a   ffe5
00254c   c004     movff   0x4, 0xfe5       	MOVFF	r0x04, POSTDEC1
00254e   ffe5
002550   c005     movff   0x5, 0xfe5       	MOVFF	r0x05, POSTDEC1
002552   ffe5
002554   0e02     movlw   0x2              	MOVLW	0x02
002556   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
002558   f000
                                           ;	.line	216; lena.c	mod_amin = (amin + val) / 60;
00255a   cf47     movff   0xf47, 0x1       	MOVFF	_amin, r0x01
00255c   f001
00255e   6a02     clrf    0x2, 0           	CLRF	r0x02
002560   6a03     clrf    0x3, 0           	CLRF	r0x03
002562   5000     movf    0, 0, 0          	MOVF	r0x00, W
002564   2401     addwf   0x1, 0, 0        	ADDWF	r0x01, W
002566   6e00     movwf   0, 0             	MOVWF	r0x00
002568   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
00256a   2002     addwfc  0x2, 0, 0        	ADDWFC	r0x02, W
00256c   6e01     movwf   0x1, 0           	MOVWF	r0x01
00256e   0e00     movlw   0                	MOVLW	0x00
002570   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002572   0e3c     movlw   0x3c             	MOVLW	0x3c
002574   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002576   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
002578   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00257a   5000     movf    0, 0, 0          	MOVF	r0x00, W
00257c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00257e   eccd     call    0x219a, 0        	CALL	__divsint
002580   f010
002582   6e02     movwf   0x2, 0           	MOVWF	r0x02
002584   cff3     movff   0xff3, 0x3       	MOVFF	PRODL, r0x03
002586   f003
002588   0e04     movlw   0x4              	MOVLW	0x04
00258a   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	217; lena.c	if (mod_amin) {
00258c   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
00258e   e01a     bz      0x25c4           	BZ	_00152_DS_
                                           ;	.line	218; lena.c	ahour = (ahour + mod_amin) % 24;
002590   cf46     movff   0xf46, 0x3       	MOVFF	_ahour, r0x03
002592   f003
002594   6a04     clrf    0x4, 0           	CLRF	r0x04
002596   6a05     clrf    0x5, 0           	CLRF	r0x05
002598   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
00259a   2603     addwf   0x3, 0x1, 0      	ADDWF	r0x03, F
00259c   5005     movf    0x5, 0, 0        	MOVF	r0x05, W
00259e   2204     addwfc  0x4, 0x1, 0      	ADDWFC	r0x04, F
0025a0   0e00     movlw   0                	MOVLW	0x00
0025a2   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0025a4   0e18     movlw   0x18             	MOVLW	0x18
0025a6   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0025a8   5004     movf    0x4, 0, 0        	MOVF	r0x04, W
0025aa   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0025ac   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
0025ae   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0025b0   ecbd     call    0x237a, 0        	CALL	__modsint
0025b2   f011
0025b4   6e02     movwf   0x2, 0           	MOVWF	r0x02
0025b6   cff3     movff   0xff3, 0x3       	MOVFF	PRODL, r0x03
0025b8   f003
0025ba   0e04     movlw   0x4              	MOVLW	0x04
0025bc   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
0025be   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
0025c0   010f     movlb   0xf              	BANKSEL	_ahour
0025c2   6f46     movwf   0x46, 0x1        	MOVWF	_ahour, B
                                           _00152_DS_:
                                           ;	.line	221; lena.c	amin = (amin + val) % 60;
0025c4   0e00     movlw   0                	MOVLW	0x00
0025c6   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0025c8   0e3c     movlw   0x3c             	MOVLW	0x3c
0025ca   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0025cc   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
0025ce   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0025d0   5000     movf    0, 0, 0          	MOVF	r0x00, W
0025d2   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0025d4   ecbd     call    0x237a, 0        	CALL	__modsint
0025d6   f011
0025d8   6e00     movwf   0, 0             	MOVWF	r0x00
0025da   cff3     movff   0xff3, 0x1       	MOVFF	PRODL, r0x01
0025dc   f001
0025de   0e04     movlw   0x4              	MOVLW	0x04
0025e0   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
0025e2   5000     movf    0, 0, 0          	MOVF	r0x00, W
0025e4   010f     movlb   0xf              	BANKSEL	_amin
0025e6   6f47     movwf   0x47, 0x1        	MOVWF	_amin, B
0025e8   cfe4     movff   0xfe4, 0x5       	MOVFF	PREINC1, r0x05
0025ea   f005
0025ec   cfe4     movff   0xfe4, 0x4       	MOVFF	PREINC1, r0x04
0025ee   f004
0025f0   cfe4     movff   0xfe4, 0x3       	MOVFF	PREINC1, r0x03
0025f2   f003
0025f4   cfe4     movff   0xfe4, 0x2       	MOVFF	PREINC1, r0x02
0025f6   f002
0025f8   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
0025fa   f001
0025fc   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
0025fe   f000
002600   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002602   ffd9
002604   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_lena__inc_tsec	code
                                           _inc_tsec:
                                           ;	.line	192; lena.c	void inc_tsec(BYTE val)
001bfc   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
001bfe   ffe5
001c00   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
001c02   ffd9
001c04   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
001c06   ffe5
001c08   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
001c0a   ffe5
001c0c   c002     movff   0x2, 0xfe5       	MOVFF	r0x02, POSTDEC1
001c0e   ffe5
001c10   c003     movff   0x3, 0xfe5       	MOVFF	r0x03, POSTDEC1
001c12   ffe5
001c14   c004     movff   0x4, 0xfe5       	MOVFF	r0x04, POSTDEC1
001c16   ffe5
001c18   c005     movff   0x5, 0xfe5       	MOVFF	r0x05, POSTDEC1
001c1a   ffe5
001c1c   c006     movff   0x6, 0xfe5       	MOVFF	r0x06, POSTDEC1
001c1e   ffe5
001c20   c007     movff   0x7, 0xfe5       	MOVFF	r0x07, POSTDEC1
001c22   ffe5
001c24   0e02     movlw   0x2              	MOVLW	0x02
001c26   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
001c28   f000
                                           ;	.line	197; lena.c	mod_tsec = (tsec + val) / 60;
001c2a   cf44     movff   0xf44, 0x1       	MOVFF	_tsec, r0x01
001c2c   f001
001c2e   6a02     clrf    0x2, 0           	CLRF	r0x02
001c30   6a03     clrf    0x3, 0           	CLRF	r0x03
001c32   5000     movf    0, 0, 0          	MOVF	r0x00, W
001c34   2401     addwf   0x1, 0, 0        	ADDWF	r0x01, W
001c36   6e00     movwf   0, 0             	MOVWF	r0x00
001c38   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
001c3a   2002     addwfc  0x2, 0, 0        	ADDWFC	r0x02, W
001c3c   6e01     movwf   0x1, 0           	MOVWF	r0x01
001c3e   0e00     movlw   0                	MOVLW	0x00
001c40   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001c42   0e3c     movlw   0x3c             	MOVLW	0x3c
001c44   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001c46   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
001c48   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001c4a   5000     movf    0, 0, 0          	MOVF	r0x00, W
001c4c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001c4e   eccd     call    0x219a, 0        	CALL	__divsint
001c50   f010
001c52   6e02     movwf   0x2, 0           	MOVWF	r0x02
001c54   cff3     movff   0xff3, 0x3       	MOVFF	PRODL, r0x03
001c56   f003
001c58   0e04     movlw   0x4              	MOVLW	0x04
001c5a   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	198; lena.c	if (mod_tsec) {
001c5c   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
001c5e   b4d8     btfsc   0xd8, 0x2, 0     	BTFSC	STATUS, 2
001c60   d047     bra     0x1cf0           	BRA	_00145_DS_
                                           ;	.line	200; lena.c	mod_tmin = (tmin + mod_tsec) / 60;
001c62   cf43     movff   0xf43, 0x3       	MOVFF	_tmin, r0x03
001c64   f003
001c66   6a04     clrf    0x4, 0           	CLRF	r0x04
001c68   6a05     clrf    0x5, 0           	CLRF	r0x05
001c6a   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
001c6c   2403     addwf   0x3, 0, 0        	ADDWF	r0x03, W
001c6e   6e02     movwf   0x2, 0           	MOVWF	r0x02
001c70   5005     movf    0x5, 0, 0        	MOVF	r0x05, W
001c72   2004     addwfc  0x4, 0, 0        	ADDWFC	r0x04, W
001c74   6e03     movwf   0x3, 0           	MOVWF	r0x03
001c76   0e00     movlw   0                	MOVLW	0x00
001c78   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001c7a   0e3c     movlw   0x3c             	MOVLW	0x3c
001c7c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001c7e   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
001c80   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001c82   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
001c84   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001c86   eccd     call    0x219a, 0        	CALL	__divsint
001c88   f010
001c8a   6e04     movwf   0x4, 0           	MOVWF	r0x04
001c8c   cff3     movff   0xff3, 0x5       	MOVFF	PRODL, r0x05
001c8e   f005
001c90   0e04     movlw   0x4              	MOVLW	0x04
001c92   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	201; lena.c	if (mod_tmin) {
001c94   5004     movf    0x4, 0, 0        	MOVF	r0x04, W
001c96   e01a     bz      0x1ccc           	BZ	_00143_DS_
                                           ;	.line	202; lena.c	thour = (thour + mod_tmin) % 24;
001c98   cf42     movff   0xf42, 0x5       	MOVFF	_thour, r0x05
001c9a   f005
001c9c   6a06     clrf    0x6, 0           	CLRF	r0x06
001c9e   6a07     clrf    0x7, 0           	CLRF	r0x07
001ca0   5004     movf    0x4, 0, 0        	MOVF	r0x04, W
001ca2   2605     addwf   0x5, 0x1, 0      	ADDWF	r0x05, F
001ca4   5007     movf    0x7, 0, 0        	MOVF	r0x07, W
001ca6   2206     addwfc  0x6, 0x1, 0      	ADDWFC	r0x06, F
001ca8   0e00     movlw   0                	MOVLW	0x00
001caa   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001cac   0e18     movlw   0x18             	MOVLW	0x18
001cae   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001cb0   5006     movf    0x6, 0, 0        	MOVF	r0x06, W
001cb2   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001cb4   5005     movf    0x5, 0, 0        	MOVF	r0x05, W
001cb6   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001cb8   ecbd     call    0x237a, 0        	CALL	__modsint
001cba   f011
001cbc   6e04     movwf   0x4, 0           	MOVWF	r0x04
001cbe   cff3     movff   0xff3, 0x5       	MOVFF	PRODL, r0x05
001cc0   f005
001cc2   0e04     movlw   0x4              	MOVLW	0x04
001cc4   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
001cc6   5004     movf    0x4, 0, 0        	MOVF	r0x04, W
001cc8   010f     movlb   0xf              	BANKSEL	_thour
001cca   6f42     movwf   0x42, 0x1        	MOVWF	_thour, B
                                           _00143_DS_:
                                           ;	.line	205; lena.c	tmin = (tmin + mod_tsec) % 60;
001ccc   0e00     movlw   0                	MOVLW	0x00
001cce   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001cd0   0e3c     movlw   0x3c             	MOVLW	0x3c
001cd2   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001cd4   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
001cd6   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001cd8   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
001cda   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001cdc   ecbd     call    0x237a, 0        	CALL	__modsint
001cde   f011
001ce0   6e02     movwf   0x2, 0           	MOVWF	r0x02
001ce2   cff3     movff   0xff3, 0x3       	MOVFF	PRODL, r0x03
001ce4   f003
001ce6   0e04     movlw   0x4              	MOVLW	0x04
001ce8   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
001cea   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
001cec   010f     movlb   0xf              	BANKSEL	_tmin
001cee   6f43     movwf   0x43, 0x1        	MOVWF	_tmin, B
                                           _00145_DS_:
                                           ;	.line	208; lena.c	tsec = (tsec + val) % 60;
001cf0   0e00     movlw   0                	MOVLW	0x00
001cf2   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001cf4   0e3c     movlw   0x3c             	MOVLW	0x3c
001cf6   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001cf8   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
001cfa   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001cfc   5000     movf    0, 0, 0          	MOVF	r0x00, W
001cfe   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001d00   ecbd     call    0x237a, 0        	CALL	__modsint
001d02   f011
001d04   6e00     movwf   0, 0             	MOVWF	r0x00
001d06   cff3     movff   0xff3, 0x1       	MOVFF	PRODL, r0x01
001d08   f001
001d0a   0e04     movlw   0x4              	MOVLW	0x04
001d0c   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
001d0e   5000     movf    0, 0, 0          	MOVF	r0x00, W
001d10   010f     movlb   0xf              	BANKSEL	_tsec
001d12   6f44     movwf   0x44, 0x1        	MOVWF	_tsec, B
001d14   cfe4     movff   0xfe4, 0x7       	MOVFF	PREINC1, r0x07
001d16   f007
001d18   cfe4     movff   0xfe4, 0x6       	MOVFF	PREINC1, r0x06
001d1a   f006
001d1c   cfe4     movff   0xfe4, 0x5       	MOVFF	PREINC1, r0x05
001d1e   f005
001d20   cfe4     movff   0xfe4, 0x4       	MOVFF	PREINC1, r0x04
001d22   f004
001d24   cfe4     movff   0xfe4, 0x3       	MOVFF	PREINC1, r0x03
001d26   f003
001d28   cfe4     movff   0xfe4, 0x2       	MOVFF	PREINC1, r0x02
001d2a   f002
001d2c   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
001d2e   f001
001d30   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
001d32   f000
001d34   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
001d36   ffd9
001d38   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_lena__low_isr	code
                                           _low_isr:
                                           ;	.line	124; lena.c	void low_isr (void) interrupt 2
002ac2   cfe8     movff   0xfe8, 0xfe5     	MOVFF	WREG, POSTDEC1
002ac4   ffe5
002ac6   cfd8     movff   0xfd8, 0xfe5     	MOVFF	STATUS, POSTDEC1
002ac8   ffe5
002aca   cfe0     movff   0xfe0, 0xfe5     	MOVFF	BSR, POSTDEC1
002acc   ffe5
002ace   cff3     movff   0xff3, 0xfe5     	MOVFF	PRODL, POSTDEC1
002ad0   ffe5
002ad2   cff4     movff   0xff4, 0xfe5     	MOVFF	PRODH, POSTDEC1
002ad4   ffe5
002ad6   cfe9     movff   0xfe9, 0xfe5     	MOVFF	FSR0L, POSTDEC1
002ad8   ffe5
002ada   cfea     movff   0xfea, 0xfe5     	MOVFF	FSR0H, POSTDEC1
002adc   ffe5
002ade   cffa     movff   0xffa, 0xfe5     	MOVFF	PCLATH, POSTDEC1
002ae0   ffe5
002ae2   cffb     movff   0xffb, 0xfe5     	MOVFF	PCLATU, POSTDEC1
002ae4   ffe5
002ae6   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002ae8   ffe5
002aea   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002aec   ffd9
                                           ;	.line	127; lena.c	if(INTCON3bits.INT3F) {
002aee   a4f0     btfss   0xf0, 0x2, 0     	BTFSS	_INTCON3bits, 2
002af0   d005     bra     0x2afc           	BRA	_00127_DS_
                                           ;	.line	128; lena.c	button1 = 1;
002af2   0e01     movlw   0x1              	MOVLW	0x01
002af4   010f     movlb   0xf              	BANKSEL	_button1
002af6   6f4f     movwf   0x4f, 0x1        	MOVWF	_button1, B
                                           ;	.line	129; lena.c	INTCON3bits.INT3F = 0;   //clear INT1 flag
002af8   94f0     bcf     0xf0, 0x2, 0     	BCF	_INTCON3bits, 2
002afa   d006     bra     0x2b08           	BRA	_00129_DS_
                                           _00127_DS_:
                                           ;	.line	132; lena.c	} else if(INTCON3bits.INT1F) {
002afc   a0f0     btfss   0xf0, 0, 0       	BTFSS	_INTCON3bits, 0
002afe   d004     bra     0x2b08           	BRA	_00129_DS_
                                           ;	.line	133; lena.c	button2 = 1;
002b00   0e01     movlw   0x1              	MOVLW	0x01
002b02   010f     movlb   0xf              	BANKSEL	_button2
002b04   6f50     movwf   0x50, 0x1        	MOVWF	_button2, B
                                           ;	.line	134; lena.c	INTCON3bits.INT1F = 0;
002b06   90f0     bcf     0xf0, 0, 0       	BCF	_INTCON3bits, 0
                                           _00129_DS_:
002b08   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002b0a   ffd9
002b0c   cfe4     movff   0xfe4, 0xffb     	MOVFF	PREINC1, PCLATU
002b0e   fffb
002b10   cfe4     movff   0xfe4, 0xffa     	MOVFF	PREINC1, PCLATH
002b12   fffa
002b14   cfe4     movff   0xfe4, 0xfea     	MOVFF	PREINC1, FSR0H
002b16   ffea
002b18   cfe4     movff   0xfe4, 0xfe9     	MOVFF	PREINC1, FSR0L
002b1a   ffe9
002b1c   cfe4     movff   0xfe4, 0xff4     	MOVFF	PREINC1, PRODH
002b1e   fff4
002b20   cfe4     movff   0xfe4, 0xff3     	MOVFF	PREINC1, PRODL
002b22   fff3
002b24   cfe4     movff   0xfe4, 0xfe0     	MOVFF	PREINC1, BSR
002b26   ffe0
002b28   cfe4     movff   0xfe4, 0xfd8     	MOVFF	PREINC1, STATUS
002b2a   ffd8
002b2c   cfe4     movff   0xfe4, 0xfe8     	MOVFF	PREINC1, WREG
002b2e   ffe8
002b30   0010     retfie  0                	RETFIE	
                                           
                                           ; ; Starting pCode block
                                           S_lena__high_isr	code
                                           _high_isr:
                                           ;	.line	103; lena.c	void high_isr (void) interrupt 1
000e3e   cfe8     movff   0xfe8, 0xfe5     	MOVFF	WREG, POSTDEC1
000e40   ffe5
000e42   cfd8     movff   0xfd8, 0xfe5     	MOVFF	STATUS, POSTDEC1
000e44   ffe5
000e46   cfe0     movff   0xfe0, 0xfe5     	MOVFF	BSR, POSTDEC1
000e48   ffe5
000e4a   cff3     movff   0xff3, 0xfe5     	MOVFF	PRODL, POSTDEC1
000e4c   ffe5
000e4e   cff4     movff   0xff4, 0xfe5     	MOVFF	PRODH, POSTDEC1
000e50   ffe5
000e52   cfe9     movff   0xfe9, 0xfe5     	MOVFF	FSR0L, POSTDEC1
000e54   ffe5
000e56   cfea     movff   0xfea, 0xfe5     	MOVFF	FSR0H, POSTDEC1
000e58   ffe5
000e5a   cffa     movff   0xffa, 0xfe5     	MOVFF	PCLATH, POSTDEC1
000e5c   ffe5
000e5e   cffb     movff   0xffb, 0xfe5     	MOVFF	PCLATU, POSTDEC1
000e60   ffe5
000e62   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
000e64   ffe5
000e66   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
000e68   ffd9
                                           ;	.line	106; lena.c	if (INTCONbits.T0IF) {
000e6a   a4f2     btfss   0xf2, 0x2, 0     	BTFSS	_INTCONbits, 2
000e6c   d024     bra     0xeb6            	BRA	_00111_DS_
000e6e   010f     movlb   0xf              	BANKSEL	_overflows
                                           ;	.line	107; lena.c	overflows++;
000e70   2b51     incf    0x51, 0x1, 0x1   	INCF	_overflows, F, B
000e72   e302     bnc     0xe78            	BNC	_30364_DS_
000e74   010f     movlb   0xf              	BANKSEL	(_overflows + 1)
000e76   2b52     incf    0x52, 0x1, 0x1   	INCF	(_overflows + 1), F, B
                                           _30364_DS_:
000e78   010f     movlb   0xf              	BANKSEL	_overflows
                                           ;	.line	109; lena.c	if (overflows == OPS/2) {
000e7a   5151     movf    0x51, 0, 0x1     	MOVF	_overflows, W, B
000e7c   0a2f     xorlw   0x2f             	XORLW	0x2f
000e7e   e103     bnz     0xe86            	BNZ	_00116_DS_
000e80   010f     movlb   0xf              	BANKSEL	(_overflows + 1)
000e82   5152     movf    0x52, 0, 0x1     	MOVF	(_overflows + 1), W, B
000e84   e001     bz      0xe88            	BZ	_00117_DS_
                                           _00116_DS_:
000e86   d003     bra     0xe8e            	BRA	_00106_DS_
                                           _00117_DS_:
                                           ;	.line	110; lena.c	halfsecond = 1;
000e88   0e01     movlw   0x1              	MOVLW	0x01
000e8a   010f     movlb   0xf              	BANKSEL	_halfsecond
000e8c   6f4e     movwf   0x4e, 0x1        	MOVWF	_halfsecond, B
                                           _00106_DS_:
000e8e   010f     movlb   0xf              	BANKSEL	_overflows
                                           ;	.line	113; lena.c	if (overflows == OPS) {
000e90   5151     movf    0x51, 0, 0x1     	MOVF	_overflows, W, B
000e92   0a5f     xorlw   0x5f             	XORLW	0x5f
000e94   e103     bnz     0xe9c            	BNZ	_00118_DS_
000e96   010f     movlb   0xf              	BANKSEL	(_overflows + 1)
000e98   5152     movf    0x52, 0, 0x1     	MOVF	(_overflows + 1), W, B
000e9a   e001     bz      0xe9e            	BZ	_00119_DS_
                                           _00118_DS_:
000e9c   d00b     bra     0xeb4            	BRA	_00108_DS_
                                           _00119_DS_:
000e9e   010f     movlb   0xf              	BANKSEL	_pseudoseconds
                                           ;	.line	114; lena.c	pseudoseconds++;
000ea0   2b53     incf    0x53, 0x1, 0x1   	INCF	_pseudoseconds, F, B
000ea2   e302     bnc     0xea8            	BNC	_40365_DS_
000ea4   010f     movlb   0xf              	BANKSEL	(_pseudoseconds + 1)
000ea6   2b54     incf    0x54, 0x1, 0x1   	INCF	(_pseudoseconds + 1), F, B
                                           _40365_DS_:
000ea8   010f     movlb   0xf              	BANKSEL	_new_time
                                           ;	.line	115; lena.c	new_time++;
000eaa   2b4d     incf    0x4d, 0x1, 0x1   	INCF	_new_time, F, B
000eac   010f     movlb   0xf              	BANKSEL	_overflows
                                           ;	.line	116; lena.c	overflows = 0;
000eae   6b51     clrf    0x51, 0x1        	CLRF	_overflows, B
000eb0   010f     movlb   0xf              	BANKSEL	(_overflows + 1)
000eb2   6b52     clrf    0x52, 0x1        	CLRF	(_overflows + 1), B
                                           _00108_DS_:
                                           ;	.line	118; lena.c	INTCONbits.T0IF = 0;
000eb4   94f2     bcf     0xf2, 0x2, 0     	BCF	_INTCONbits, 2
                                           _00111_DS_:
000eb6   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
000eb8   ffd9
000eba   cfe4     movff   0xfe4, 0xffb     	MOVFF	PREINC1, PCLATU
000ebc   fffb
000ebe   cfe4     movff   0xfe4, 0xffa     	MOVFF	PREINC1, PCLATH
000ec0   fffa
000ec2   cfe4     movff   0xfe4, 0xfea     	MOVFF	PREINC1, FSR0H
000ec4   ffea
000ec6   cfe4     movff   0xfe4, 0xfe9     	MOVFF	PREINC1, FSR0L
000ec8   ffe9
000eca   cfe4     movff   0xfe4, 0xff4     	MOVFF	PREINC1, PRODH
000ecc   fff4
000ece   cfe4     movff   0xfe4, 0xff3     	MOVFF	PREINC1, PRODL
000ed0   fff3
000ed2   cfe4     movff   0xfe4, 0xfe0     	MOVFF	PREINC1, BSR
000ed4   ffe0
000ed6   cfe4     movff   0xfe4, 0xfd8     	MOVFF	PREINC1, STATUS
000ed8   ffd8
000eda   cfe4     movff   0xfe4, 0xfe8     	MOVFF	PREINC1, WREG
000edc   ffe8
000ede   0010     retfie  0                	RETFIE	
                                           
                                           ; ; Starting pCode block
                                           __str_0:
000ee0   6f44     movwf   0x44, 0x1        	DB	0x44, 0x6f, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x77, 0x61, 0x6e, 0x74, 0x20
000ee2   7920     btg     0x20, 0x4, 0x1   
000ee4   756f     btg     0x6f, 0x2, 0x1   
000ee6   7720     btg     0x20, 0x3, 0x1   
000ee8   6e61     movwf   0x61, 0          
000eea   2074     addwfc  0x74, 0, 0       
000eec   6f74     movwf   0x74, 0x1        	DB	0x74, 0x6f, 0x20, 0x20, 0x73, 0x65, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20
000eee   2020     addwfc  0x20, 0, 0       
000ef0   6573     cpfsgt  0x73, 0x1        
000ef2   2074     addwfc  0x74, 0, 0       
000ef4   6874     setf    0x74, 0          
000ef6   2065     addwfc  0x65, 0, 0       
000ef8   6974     setf    0x74, 0x1        	DB	0x74, 0x69, 0x6d, 0x65, 0x20, 0x3f, 0x20, 0x20, 0x00
000efa   656d     cpfsgt  0x6d, 0x1        
000efc   3f20     incfsz  0x20, 0x1, 0x1   
000efe   2020     addwfc  0x20, 0, 0       
000f00   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_1:
000f02   5b20     subwfb  0x20, 0x1, 0x1   	DB	0x20, 0x5b, 0x25, 0x30, 0x32, 0x75, 0x5d, 0x3a, 0x20, 0x25, 0x30, 0x32
000f04   3025     rrcf    0x25, 0, 0       
000f06   7532     btg     0x32, 0x2, 0x1   
000f08   3a5d     swapf   0x5d, 0x1, 0     
000f0a   2520     addwf   0x20, 0, 0x1     
000f0c   3230     rrcf    0x30, 0x1, 0     
000f0e   2075     addwfc  0x75, 0, 0       	DB	0x75, 0x20, 0x3a, 0x20, 0x25, 0x30, 0x32, 0x75, 0x20, 0x20, 0x20, 0x20
000f10   203a     addwfc  0x3a, 0, 0       
000f12   3025     rrcf    0x25, 0, 0       
000f14   7532     btg     0x32, 0x2, 0x1   
000f16   2020     addwfc  0x20, 0, 0       
000f18   2020     addwfc  0x20, 0, 0       
000f1a   2020     addwfc  0x20, 0, 0       	DB	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
000f1c   2020     addwfc  0x20, 0, 0       
000f1e   2020     addwfc  0x20, 0, 0       
000f20   2020     addwfc  0x20, 0, 0       
000f22   2020     addwfc  0x20, 0, 0       
000f24   2020     addwfc  0x20, 0, 0       
000f26   2020     addwfc  0x20, 0, 0       	DB	0x20, 0x20, 0x00
000f28   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_2:
000f2a   2020     addwfc  0x20, 0, 0       	DB	0x20, 0x20, 0x25, 0x30, 0x32, 0x75, 0x20, 0x3a, 0x5b, 0x25, 0x30, 0x32
000f2c   3025     rrcf    0x25, 0, 0       
000f2e   7532     btg     0x32, 0x2, 0x1   
000f30   3a20     swapf   0x20, 0x1, 0     
000f32   255b     addwf   0x5b, 0, 0x1     
000f34   3230     rrcf    0x30, 0x1, 0     
000f36   5d75     subwf   0x75, 0, 0x1     	DB	0x75, 0x5d, 0x3a, 0x20, 0x25, 0x30, 0x32, 0x75, 0x20, 0x20, 0x20, 0x20
000f38   203a     addwfc  0x3a, 0, 0       
000f3a   3025     rrcf    0x25, 0, 0       
000f3c   7532     btg     0x32, 0x2, 0x1   
000f3e   2020     addwfc  0x20, 0, 0       
000f40   2020     addwfc  0x20, 0, 0       
000f42   2020     addwfc  0x20, 0, 0       	DB	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
000f44   2020     addwfc  0x20, 0, 0       
000f46   2020     addwfc  0x20, 0, 0       
000f48   2020     addwfc  0x20, 0, 0       
000f4a   2020     addwfc  0x20, 0, 0       
000f4c   2020     addwfc  0x20, 0, 0       
000f4e   2020     addwfc  0x20, 0, 0       	DB	0x20, 0x20, 0x00
000f50   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_3:
000f52   2020     addwfc  0x20, 0, 0       	DB	0x20, 0x20, 0x25, 0x30, 0x32, 0x75, 0x20, 0x3a, 0x20, 0x25, 0x30, 0x32
000f54   3025     rrcf    0x25, 0, 0       
000f56   7532     btg     0x32, 0x2, 0x1   
000f58   3a20     swapf   0x20, 0x1, 0     
000f5a   2520     addwf   0x20, 0, 0x1     
000f5c   3230     rrcf    0x30, 0x1, 0     
000f5e   2075     addwfc  0x75, 0, 0       	DB	0x75, 0x20, 0x3a, 0x5b, 0x25, 0x30, 0x32, 0x75, 0x5d, 0x20, 0x20, 0x20
000f60   5b3a     subwfb  0x3a, 0x1, 0x1   
000f62   3025     rrcf    0x25, 0, 0       
000f64   7532     btg     0x32, 0x2, 0x1   
000f66   205d     addwfc  0x5d, 0, 0       
000f68   2020     addwfc  0x20, 0, 0       
000f6a   2020     addwfc  0x20, 0, 0       	DB	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
000f6c   2020     addwfc  0x20, 0, 0       
000f6e   2020     addwfc  0x20, 0, 0       
000f70   2020     addwfc  0x20, 0, 0       
000f72   2020     addwfc  0x20, 0, 0       
000f74   2020     addwfc  0x20, 0, 0       
000f76   2020     addwfc  0x20, 0, 0       	DB	0x20, 0x20, 0x00
000f78   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_4:
000f7a   6f44     movwf   0x44, 0x1        	DB	0x44, 0x6f, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x77, 0x61, 0x6e, 0x74, 0x20
000f7c   7920     btg     0x20, 0x4, 0x1   
000f7e   756f     btg     0x6f, 0x2, 0x1   
000f80   7720     btg     0x20, 0x3, 0x1   
000f82   6e61     movwf   0x61, 0          
000f84   2074     addwfc  0x74, 0, 0       
000f86   6f74     movwf   0x74, 0x1        	DB	0x74, 0x6f, 0x20, 0x20, 0x73, 0x65, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20
000f88   2020     addwfc  0x20, 0, 0       
000f8a   6573     cpfsgt  0x73, 0x1        
000f8c   2074     addwfc  0x74, 0, 0       
000f8e   6874     setf    0x74, 0          
000f90   2065     addwfc  0x65, 0, 0       
000f92   6c61     negf    0x61, 0          	DB	0x61, 0x6c, 0x61, 0x72, 0x6d, 0x20, 0x3f, 0x20, 0x00
000f94   7261     btg     0x61, 0x1, 0     
000f96   206d     addwfc  0x6d, 0, 0       
000f98   203f     addwfc  0x3f, 0, 0       
000f9a   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_5:
000f9c   2020     addwfc  0x20, 0, 0       	DB	0x20, 0x20, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x20, 0x5b, 0x4f, 0x4e, 0x20
000f9e   6c41     negf    0x41, 0          
000fa0   7261     btg     0x61, 0x1, 0     
000fa2   206d     addwfc  0x6d, 0, 0       
000fa4   4f5b     dcfsnz  0x5b, 0x1, 0x1   
000fa6   204e     addwfc  0x4e, 0, 0       
000fa8   205d     addwfc  0x5d, 0, 0       	DB	0x5d, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
000faa   2020     addwfc  0x20, 0, 0       
000fac   2020     addwfc  0x20, 0, 0       
000fae   2020     addwfc  0x20, 0, 0       
000fb0   2020     addwfc  0x20, 0, 0       
000fb2   2020     addwfc  0x20, 0, 0       
000fb4   2020     addwfc  0x20, 0, 0       	DB	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00
000fb6   2020     addwfc  0x20, 0, 0       
000fb8   2020     addwfc  0x20, 0, 0       
000fba   2020     addwfc  0x20, 0, 0       
000fbc   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_6:
000fbe   2020     addwfc  0x20, 0, 0       	DB	0x20, 0x20, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x20, 0x5b, 0x4f, 0x46, 0x46
000fc0   6c41     negf    0x41, 0          
000fc2   7261     btg     0x61, 0x1, 0     
000fc4   206d     addwfc  0x6d, 0, 0       
000fc6   4f5b     dcfsnz  0x5b, 0x1, 0x1   
000fc8   4646     rlncf   0x46, 0x1, 0     
000fca   205d     addwfc  0x5d, 0, 0       	DB	0x5d, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
000fcc   2020     addwfc  0x20, 0, 0       
000fce   2020     addwfc  0x20, 0, 0       
000fd0   2020     addwfc  0x20, 0, 0       
000fd2   2020     addwfc  0x20, 0, 0       
000fd4   2020     addwfc  0x20, 0, 0       
000fd6   2020     addwfc  0x20, 0, 0       	DB	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00
000fd8   2020     addwfc  0x20, 0, 0       
000fda   2020     addwfc  0x20, 0, 0       
000fdc   2020     addwfc  0x20, 0, 0       
000fde   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_7:
000fe0   2020     addwfc  0x20, 0, 0       	DB	0x20, 0x20, 0x20, 0x20, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x20, 0x61, 0x74
000fe2   2020     addwfc  0x20, 0, 0       
000fe4   6c41     negf    0x41, 0          
000fe6   7261     btg     0x61, 0x1, 0     
000fe8   206d     addwfc  0x6d, 0, 0       
000fea   7461     btg     0x61, 0x2, 0     
000fec   2020     addwfc  0x20, 0, 0       	DB	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5b, 0x25, 0x30, 0x32
000fee   2020     addwfc  0x20, 0, 0       
000ff0   2020     addwfc  0x20, 0, 0       
000ff2   2020     addwfc  0x20, 0, 0       
000ff4   255b     addwf   0x5b, 0, 0x1     
000ff6   3230     rrcf    0x30, 0x1, 0     
000ff8   5d75     subwf   0x75, 0, 0x1     	DB	0x75, 0x5d, 0x3a, 0x20, 0x25, 0x30, 0x32, 0x75, 0x20, 0x20, 0x20, 0x20
000ffa   203a     addwfc  0x3a, 0, 0       
000ffc   3025     rrcf    0x25, 0, 0       
000ffe   7532     btg     0x32, 0x2, 0x1   
001000   2020     addwfc  0x20, 0, 0       
001002   2020     addwfc  0x20, 0, 0       
001004   0000     nop                      	DB	0x00
                                           ; ; Starting pCode block
                                           __str_8:
001006   2020     addwfc  0x20, 0, 0       	DB	0x20, 0x20, 0x20, 0x20, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x20, 0x61, 0x74
001008   2020     addwfc  0x20, 0, 0       
00100a   6c41     negf    0x41, 0          
00100c   7261     btg     0x61, 0x1, 0     
00100e   206d     addwfc  0x6d, 0, 0       
001010   7461     btg     0x61, 0x2, 0     
001012   2020     addwfc  0x20, 0, 0       	DB	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x25, 0x30, 0x32
001014   2020     addwfc  0x20, 0, 0       
001016   2020     addwfc  0x20, 0, 0       
001018   2020     addwfc  0x20, 0, 0       
00101a   2520     addwf   0x20, 0, 0x1     
00101c   3230     rrcf    0x30, 0x1, 0     
00101e   2075     addwfc  0x75, 0, 0       	DB	0x75, 0x20, 0x3a, 0x5b, 0x25, 0x30, 0x32, 0x75, 0x5d, 0x20, 0x20, 0x20
001020   5b3a     subwfb  0x3a, 0x1, 0x1   
001022   3025     rrcf    0x25, 0, 0       
001024   7532     btg     0x32, 0x2, 0x1   
001026   205d     addwfc  0x5d, 0, 0       
001028   2020     addwfc  0x20, 0, 0       
00102a   0000     nop                      	DB	0x00
                                           ; ; Starting pCode block
                                           __str_9:
00102c   2020     addwfc  0x20, 0, 0       	DB	0x20, 0x20, 0x20, 0x20, 0x25, 0x30, 0x32, 0x75, 0x3a, 0x25, 0x30, 0x32
00102e   2020     addwfc  0x20, 0, 0       
001030   3025     rrcf    0x25, 0, 0       
001032   7532     btg     0x32, 0x2, 0x1   
001034   253a     addwf   0x3a, 0, 0x1     
001036   3230     rrcf    0x30, 0x1, 0     
001038   3a75     swapf   0x75, 0x1, 0     	DB	0x75, 0x3a, 0x25, 0x30, 0x32, 0x75, 0x20, 0x20, 0x20, 0x20, 0x41, 0x6c
00103a   3025     rrcf    0x25, 0, 0       
00103c   7532     btg     0x32, 0x2, 0x1   
00103e   2020     addwfc  0x20, 0, 0       
001040   2020     addwfc  0x20, 0, 0       
001042   6c41     negf    0x41, 0          
001044   7261     btg     0x61, 0x1, 0     	DB	0x61, 0x72, 0x6d, 0x20, 0x4f, 0x4e, 0x20, 0x20, 0x25, 0x30, 0x32, 0x75
001046   206d     addwfc  0x6d, 0, 0       
001048   4e4f     dcfsnz  0x4f, 0x1, 0     
00104a   2020     addwfc  0x20, 0, 0       
00104c   3025     rrcf    0x25, 0, 0       
00104e   7532     btg     0x32, 0x2, 0x1   
001050   253a     addwf   0x3a, 0, 0x1     	DB	0x3a, 0x25, 0x30, 0x32, 0x75, 0x20, 0x00
001052   3230     rrcf    0x30, 0x1, 0     
001054   2075     addwfc  0x75, 0, 0       
001056   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_10:
001058   2020     addwfc  0x20, 0, 0       	DB	0x20, 0x20, 0x20, 0x20, 0x25, 0x30, 0x32, 0x75, 0x3a, 0x25, 0x30, 0x32
00105a   2020     addwfc  0x20, 0, 0       
00105c   3025     rrcf    0x25, 0, 0       
00105e   7532     btg     0x32, 0x2, 0x1   
001060   253a     addwf   0x3a, 0, 0x1     
001062   3230     rrcf    0x30, 0x1, 0     
001064   3a75     swapf   0x75, 0x1, 0     	DB	0x75, 0x3a, 0x25, 0x30, 0x32, 0x75, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
001066   3025     rrcf    0x25, 0, 0       
001068   7532     btg     0x32, 0x2, 0x1   
00106a   2020     addwfc  0x20, 0, 0       
00106c   2020     addwfc  0x20, 0, 0       
00106e   2020     addwfc  0x20, 0, 0       
001070   4120     rrncf   0x20, 0, 0x1     	DB	0x20, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x20, 0x20, 0x4f, 0x46, 0x46, 0x20
001072   616c     cpfslt  0x6c, 0x1        
001074   6d72     negf    0x72, 0x1        
001076   2020     addwfc  0x20, 0, 0       
001078   464f     rlncf   0x4f, 0x1, 0     
00107a   2046     addwfc  0x46, 0, 0       
00107c   2020     addwfc  0x20, 0, 0       	DB	0x20, 0x20, 0x00
00107e   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_11:
001080   2020     addwfc  0x20, 0, 0       	DB	0x20, 0x20, 0x20, 0x20, 0x25, 0x30, 0x32, 0x75, 0x3a, 0x25, 0x30, 0x32
001082   2020     addwfc  0x20, 0, 0       
001084   3025     rrcf    0x25, 0, 0       
001086   7532     btg     0x32, 0x2, 0x1   
001088   253a     addwf   0x3a, 0, 0x1     
00108a   3230     rrcf    0x30, 0x1, 0     
00108c   3a75     swapf   0x75, 0x1, 0     	DB	0x75, 0x3a, 0x25, 0x30, 0x32, 0x75, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
00108e   3025     rrcf    0x25, 0, 0       
001090   7532     btg     0x32, 0x2, 0x1   
001092   2020     addwfc  0x20, 0, 0       
001094   2020     addwfc  0x20, 0, 0       
001096   2020     addwfc  0x20, 0, 0       
001098   2049     addwfc  0x49, 0, 0       	DB	0x49, 0x20, 0x61, 0x6d, 0x20, 0x72, 0x69, 0x6e, 0x67, 0x69, 0x6e, 0x67
00109a   6d61     negf    0x61, 0x1        
00109c   7220     btg     0x20, 0x1, 0     
00109e   6e69     movwf   0x69, 0          
0010a0   6967     setf    0x67, 0x1        
0010a2   676e     tstfsz  0x6e, 0x1        
0010a4   2021     addwfc  0x21, 0, 0       	DB	0x21, 0x20, 0x00
0010a6   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_12:
0010a8   2020     addwfc  0x20, 0, 0       	DB	0x20, 0x20, 0x20, 0x20, 0x25, 0x30, 0x32, 0x75, 0x3a, 0x25, 0x30, 0x32
0010aa   2020     addwfc  0x20, 0, 0       
0010ac   3025     rrcf    0x25, 0, 0       
0010ae   7532     btg     0x32, 0x2, 0x1   
0010b0   253a     addwf   0x3a, 0, 0x1     
0010b2   3230     rrcf    0x30, 0x1, 0     
0010b4   3a75     swapf   0x75, 0x1, 0     	DB	0x75, 0x3a, 0x25, 0x30, 0x32, 0x75, 0x20, 0x20, 0x20, 0x20, 0x53, 0x6e
0010b6   3025     rrcf    0x25, 0, 0       
0010b8   7532     btg     0x32, 0x2, 0x1   
0010ba   2020     addwfc  0x20, 0, 0       
0010bc   2020     addwfc  0x20, 0, 0       
0010be   6e53     movwf   0x53, 0          
0010c0   6f6f     movwf   0x6f, 0x1        	DB	0x6f, 0x6f, 0x7a, 0x65, 0x20, 0x25, 0x75, 0x20, 0x20, 0x25, 0x30, 0x32
0010c2   657a     cpfsgt  0x7a, 0x1        
0010c4   2520     addwf   0x20, 0, 0x1     
0010c6   2075     addwfc  0x75, 0, 0       
0010c8   2520     addwf   0x20, 0, 0x1     
0010ca   3230     rrcf    0x30, 0x1, 0     
0010cc   3a75     swapf   0x75, 0x1, 0     	DB	0x75, 0x3a, 0x25, 0x30, 0x32, 0x75, 0x20, 0x00
0010ce   3025     rrcf    0x25, 0, 0       
0010d0   7532     btg     0x32, 0x2, 0x1   
0010d2   0020     dw      0x20             
                                           ; ; Starting pCode block
                                           __str_13:
0010d4   2020     addwfc  0x20, 0, 0       	DB	0x20, 0x20, 0x20, 0x20, 0x25, 0x30, 0x32, 0x75, 0x3a, 0x25, 0x30, 0x32
0010d6   2020     addwfc  0x20, 0, 0       
0010d8   3025     rrcf    0x25, 0, 0       
0010da   7532     btg     0x32, 0x2, 0x1   
0010dc   253a     addwf   0x3a, 0, 0x1     
0010de   3230     rrcf    0x30, 0x1, 0     
0010e0   3a75     swapf   0x75, 0x1, 0     	DB	0x75, 0x3a, 0x25, 0x30, 0x32, 0x75, 0x20, 0x20, 0x20, 0x20, 0x53, 0x6e
0010e2   3025     rrcf    0x25, 0, 0       
0010e4   7532     btg     0x32, 0x2, 0x1   
0010e6   2020     addwfc  0x20, 0, 0       
0010e8   2020     addwfc  0x20, 0, 0       
0010ea   6e53     movwf   0x53, 0          
0010ec   6f6f     movwf   0x6f, 0x1        	DB	0x6f, 0x6f, 0x7a, 0x65, 0x20, 0x25, 0x75, 0x20, 0x25, 0x30, 0x32, 0x75
0010ee   657a     cpfsgt  0x7a, 0x1        
0010f0   2520     addwf   0x20, 0, 0x1     
0010f2   2075     addwfc  0x75, 0, 0       
0010f4   3025     rrcf    0x25, 0, 0       
0010f6   7532     btg     0x32, 0x2, 0x1   
0010f8   253a     addwf   0x3a, 0, 0x1     	DB	0x3a, 0x25, 0x30, 0x32, 0x75, 0x20, 0x00
0010fa   3230     rrcf    0x30, 0x1, 0     
0010fc   2075     addwfc  0x75, 0, 0       
0010fe   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_14:
001100   2a2a     incf    0x2a, 0x1, 0     	DB	0x2a, 0x2a, 0x2a, 0x2a, 0x20, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x20, 0x2a
001102   2a2a     incf    0x2a, 0x1, 0     
001104   4520     rlncf   0x20, 0, 0x1     
001106   5252     movf    0x52, 0x1, 0     
001108   524f     movf    0x4f, 0x1, 0     
00110a   2a20     incf    0x20, 0x1, 0     
00110c   2a2a     incf    0x2a, 0x1, 0     	DB	0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x20, 0x45, 0x52, 0x52
00110e   2a2a     incf    0x2a, 0x1, 0     
001110   2a2a     incf    0x2a, 0x1, 0     
001112   2a2a     incf    0x2a, 0x1, 0     
001114   4520     rlncf   0x20, 0, 0x1     
001116   5252     movf    0x52, 0x1, 0     
001118   524f     movf    0x4f, 0x1, 0     	DB	0x4f, 0x52, 0x20, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x00
00111a   2a20     incf    0x20, 0x1, 0     
00111c   2a2a     incf    0x2a, 0x1, 0     
00111e   2a2a     incf    0x2a, 0x1, 0     
001120   0000     nop                      
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 4198 (0x1066) bytes ( 3.20%)
                                           ;           	 2099 (0x0833) words
                                           ; udata size:	   32 (0x0020) bytes ( 0.83%)
                                           ; access size:	   22 (0x0016) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Oct 17 2013) (Mac OS X ppc)
                                           ; This file was generated Fri Oct 25 14:19:33 2013
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _LCDInit
                                           	global _LCDUpdate
                                           	global _LCDErase
                                           	global _LCDText
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _AN0String
                                           	extern _AppConfig
                                           	extern _activeUDPSocket
                                           	extern _UDPSocketInfo
                                           	extern _UDPTxCount
                                           	extern _UDPRxCount
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _memset
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODH	equ	0xff4
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           
                                           udata_LCDBlocking_0	udata
                                           _LCDText	res	33
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDErase	code
                                           _LCDErase:
                                           ;	.line	392; TCPIP_Stack/LCDBlocking.c	void LCDErase(void)
002850   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002852   ffe5
002854   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002856   ffd9
002858   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
00285a   ffe5
00285c   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
00285e   ffe5
002860   c002     movff   0x2, 0xfe5       	MOVFF	r0x02, POSTDEC1
002862   ffe5
002864   c003     movff   0x3, 0xfe5       	MOVFF	r0x03, POSTDEC1
002866   ffe5
002868   c004     movff   0x4, 0xfe5       	MOVFF	r0x04, POSTDEC1
00286a   ffe5
00286c   c005     movff   0x5, 0xfe5       	MOVFF	r0x05, POSTDEC1
00286e   ffe5
002870   c006     movff   0x6, 0xfe5       	MOVFF	r0x06, POSTDEC1
002872   ffe5
002874   c007     movff   0x7, 0xfe5       	MOVFF	r0x07, POSTDEC1
002876   ffe5
                                           ;	.line	395; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0x01);
002878   0e01     movlw   0x1              	MOVLW	0x01
00287a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00287c   0e00     movlw   0                	MOVLW	0x00
00287e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002880   ec99     call    0x2b32, 0        	CALL	_LCDWrite
002882   f015
002884   0e02     movlw   0x2              	MOVLW	0x02
002886   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	396; TCPIP_Stack/LCDBlocking.c	DelayMs(2);
002888   0e48     movlw   0x48             	MOVLW	0x48
00288a   6e00     movwf   0, 0             	MOVWF	r0x00
00288c   0e0d     movlw   0xd              	MOVLW	0x0d
00288e   6e01     movwf   0x1, 0           	MOVWF	r0x01
002890   6a02     clrf    0x2, 0           	CLRF	r0x02
002892   6a03     clrf    0x3, 0           	CLRF	r0x03
                                           _00305_DS_:
002894   c000     movff   0, 0x4           	MOVFF	r0x00, r0x04
002896   f004
002898   c001     movff   0x1, 0x5         	MOVFF	r0x01, r0x05
00289a   f005
00289c   c002     movff   0x2, 0x6         	MOVFF	r0x02, r0x06
00289e   f006
0028a0   c003     movff   0x3, 0x7         	MOVFF	r0x03, r0x07
0028a2   f007
0028a4   0eff     movlw   0xff             	MOVLW	0xff
0028a6   2600     addwf   0, 0x1, 0        	ADDWF	r0x00, F
0028a8   0eff     movlw   0xff             	MOVLW	0xff
0028aa   2201     addwfc  0x1, 0x1, 0      	ADDWFC	r0x01, F
0028ac   0eff     movlw   0xff             	MOVLW	0xff
0028ae   2202     addwfc  0x2, 0x1, 0      	ADDWFC	r0x02, F
0028b0   0eff     movlw   0xff             	MOVLW	0xff
0028b2   2203     addwfc  0x3, 0x1, 0      	ADDWFC	r0x03, F
0028b4   5004     movf    0x4, 0, 0        	MOVF	r0x04, W
0028b6   1005     iorwf   0x5, 0, 0        	IORWF	r0x05, W
0028b8   1006     iorwf   0x6, 0, 0        	IORWF	r0x06, W
0028ba   1007     iorwf   0x7, 0, 0        	IORWF	r0x07, W
0028bc   e1eb     bnz     0x2894           	BNZ	_00305_DS_
                                           ;	.line	399; TCPIP_Stack/LCDBlocking.c	memset(LCDText, ' ', 32);
0028be   0e00     movlw   0                	MOVLW	0x00
0028c0   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0028c2   0e20     movlw   0x20             	MOVLW	0x20
0028c4   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0028c6   0e20     movlw   0x20             	MOVLW	0x20
0028c8   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0028ca   0e0f     movlw   0xf              	MOVLW	HIGH(_LCDText)
0028cc   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0028ce   0e00     movlw   0                	MOVLW	LOW(_LCDText)
0028d0   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0028d2   ec03     call    0x2606, 0        	CALL	_memset
0028d4   f013
0028d6   0e05     movlw   0x5              	MOVLW	0x05
0028d8   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
0028da   cfe4     movff   0xfe4, 0x7       	MOVFF	PREINC1, r0x07
0028dc   f007
0028de   cfe4     movff   0xfe4, 0x6       	MOVFF	PREINC1, r0x06
0028e0   f006
0028e2   cfe4     movff   0xfe4, 0x5       	MOVFF	PREINC1, r0x05
0028e4   f005
0028e6   cfe4     movff   0xfe4, 0x4       	MOVFF	PREINC1, r0x04
0028e8   f004
0028ea   cfe4     movff   0xfe4, 0x3       	MOVFF	PREINC1, r0x03
0028ec   f003
0028ee   cfe4     movff   0xfe4, 0x2       	MOVFF	PREINC1, r0x02
0028f0   f002
0028f2   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
0028f4   f001
0028f6   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
0028f8   f000
0028fa   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0028fc   ffd9
0028fe   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDUpdate	code
                                           _LCDUpdate:
                                           ;	.line	332; TCPIP_Stack/LCDBlocking.c	void LCDUpdate(void)
001122   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
001124   ffe5
001126   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
001128   ffd9
00112a   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
00112c   ffe5
00112e   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
001130   ffe5
001132   c002     movff   0x2, 0xfe5       	MOVFF	r0x02, POSTDEC1
001134   ffe5
001136   c003     movff   0x3, 0xfe5       	MOVFF	r0x03, POSTDEC1
001138   ffe5
00113a   c004     movff   0x4, 0xfe5       	MOVFF	r0x04, POSTDEC1
00113c   ffe5
00113e   c005     movff   0x5, 0xfe5       	MOVFF	r0x05, POSTDEC1
001140   ffe5
001142   c006     movff   0x6, 0xfe5       	MOVFF	r0x06, POSTDEC1
001144   ffe5
001146   c007     movff   0x7, 0xfe5       	MOVFF	r0x07, POSTDEC1
001148   ffe5
00114a   c008     movff   0x8, 0xfe5       	MOVFF	r0x08, POSTDEC1
00114c   ffe5
                                           ;	.line	337; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0x02);
00114e   0e02     movlw   0x2              	MOVLW	0x02
001150   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001152   0e00     movlw   0                	MOVLW	0x00
001154   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001156   ec99     call    0x2b32, 0        	CALL	_LCDWrite
001158   f015
00115a   0e02     movlw   0x2              	MOVLW	0x02
00115c   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	338; TCPIP_Stack/LCDBlocking.c	DelayMs(2);
00115e   0e48     movlw   0x48             	MOVLW	0x48
001160   6e00     movwf   0, 0             	MOVWF	r0x00
001162   0e0d     movlw   0xd              	MOVLW	0x0d
001164   6e01     movwf   0x1, 0           	MOVWF	r0x01
001166   6a02     clrf    0x2, 0           	CLRF	r0x02
001168   6a03     clrf    0x3, 0           	CLRF	r0x03
                                           _00225_DS_:
00116a   c000     movff   0, 0x4           	MOVFF	r0x00, r0x04
00116c   f004
00116e   c001     movff   0x1, 0x5         	MOVFF	r0x01, r0x05
001170   f005
001172   c002     movff   0x2, 0x6         	MOVFF	r0x02, r0x06
001174   f006
001176   c003     movff   0x3, 0x7         	MOVFF	r0x03, r0x07
001178   f007
00117a   0eff     movlw   0xff             	MOVLW	0xff
00117c   2600     addwf   0, 0x1, 0        	ADDWF	r0x00, F
00117e   0eff     movlw   0xff             	MOVLW	0xff
001180   2201     addwfc  0x1, 0x1, 0      	ADDWFC	r0x01, F
001182   0eff     movlw   0xff             	MOVLW	0xff
001184   2202     addwfc  0x2, 0x1, 0      	ADDWFC	r0x02, F
001186   0eff     movlw   0xff             	MOVLW	0xff
001188   2203     addwfc  0x3, 0x1, 0      	ADDWFC	r0x03, F
00118a   5004     movf    0x4, 0, 0        	MOVF	r0x04, W
00118c   1005     iorwf   0x5, 0, 0        	IORWF	r0x05, W
00118e   1006     iorwf   0x6, 0, 0        	IORWF	r0x06, W
001190   1007     iorwf   0x7, 0, 0        	IORWF	r0x07, W
001192   e1eb     bnz     0x116a           	BNZ	_00225_DS_
                                           ;	.line	341; TCPIP_Stack/LCDBlocking.c	for(i = 0; i < 16u; i++)
001194   6a00     clrf    0, 0             	CLRF	r0x00
                                           _00257_DS_:
001196   c000     movff   0, 0x1           	MOVFF	r0x00, r0x01
001198   f001
00119a   6a02     clrf    0x2, 0           	CLRF	r0x02
00119c   0e00     movlw   0                	MOVLW	0x00
00119e   5c02     subwf   0x2, 0, 0        	SUBWF	r0x02, W
0011a0   e102     bnz     0x11a6           	BNZ	_00297_DS_
0011a2   0e10     movlw   0x10             	MOVLW	0x10
0011a4   5c01     subwf   0x1, 0, 0        	SUBWF	r0x01, W
                                           _00297_DS_:
0011a6   b0d8     btfsc   0xd8, 0, 0       	BTFSC	STATUS, 0
0011a8   d057     bra     0x1258           	BRA	_00260_DS_
                                           ;	.line	345; TCPIP_Stack/LCDBlocking.c	if(LCDText[i] == 0u)
0011aa   0e00     movlw   0                	MOVLW	LOW(_LCDText)
0011ac   2400     addwf   0, 0, 0          	ADDWF	r0x00, W
0011ae   6e01     movwf   0x1, 0           	MOVWF	r0x01
0011b0   6a02     clrf    0x2, 0           	CLRF	r0x02
0011b2   0e0f     movlw   0xf              	MOVLW	HIGH(_LCDText)
0011b4   2202     addwfc  0x2, 0x1, 0      	ADDWFC	r0x02, F
0011b6   c001     movff   0x1, 0xfe9       	MOVFF	r0x01, FSR0L
0011b8   ffe9
0011ba   c002     movff   0x2, 0xfea       	MOVFF	r0x02, FSR0H
0011bc   ffea
0011be   cfef     movff   0xfef, 0x1       	MOVFF	INDF0, r0x01
0011c0   f001
0011c2   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
0011c4   e119     bnz     0x11f8           	BNZ	_00232_DS_
                                           ;	.line	347; TCPIP_Stack/LCDBlocking.c	for(j=i; j < 16u; j++)
0011c6   c000     movff   0, 0x1           	MOVFF	r0x00, r0x01
0011c8   f001
                                           _00253_DS_:
0011ca   c001     movff   0x1, 0x2         	MOVFF	r0x01, r0x02
0011cc   f002
0011ce   6a03     clrf    0x3, 0           	CLRF	r0x03
0011d0   0e00     movlw   0                	MOVLW	0x00
0011d2   5c03     subwf   0x3, 0, 0        	SUBWF	r0x03, W
0011d4   e102     bnz     0x11da           	BNZ	_00298_DS_
0011d6   0e10     movlw   0x10             	MOVLW	0x10
0011d8   5c02     subwf   0x2, 0, 0        	SUBWF	r0x02, W
                                           _00298_DS_:
0011da   e20e     bc      0x11f8           	BC	_00232_DS_
                                           ;	.line	349; TCPIP_Stack/LCDBlocking.c	LCDText[j] = ' ';
0011dc   0e00     movlw   0                	MOVLW	LOW(_LCDText)
0011de   2401     addwf   0x1, 0, 0        	ADDWF	r0x01, W
0011e0   6e02     movwf   0x2, 0           	MOVWF	r0x02
0011e2   6a03     clrf    0x3, 0           	CLRF	r0x03
0011e4   0e0f     movlw   0xf              	MOVLW	HIGH(_LCDText)
0011e6   2203     addwfc  0x3, 0x1, 0      	ADDWFC	r0x03, F
0011e8   c002     movff   0x2, 0xfe9       	MOVFF	r0x02, FSR0L
0011ea   ffe9
0011ec   c003     movff   0x3, 0xfea       	MOVFF	r0x03, FSR0H
0011ee   ffea
0011f0   0e20     movlw   0x20             	MOVLW	0x20
0011f2   6eef     movwf   0xef, 0          	MOVWF	INDF0
                                           ;	.line	347; TCPIP_Stack/LCDBlocking.c	for(j=i; j < 16u; j++)
0011f4   2a01     incf    0x1, 0x1, 0      	INCF	r0x01, F
0011f6   d7e9     bra     0x11ca           	BRA	_00253_DS_
                                           _00232_DS_:
                                           ;	.line	352; TCPIP_Stack/LCDBlocking.c	LCDWrite(1, LCDText[i]);
0011f8   0e00     movlw   0                	MOVLW	LOW(_LCDText)
0011fa   2400     addwf   0, 0, 0          	ADDWF	r0x00, W
0011fc   6e01     movwf   0x1, 0           	MOVWF	r0x01
0011fe   6a02     clrf    0x2, 0           	CLRF	r0x02
001200   0e0f     movlw   0xf              	MOVLW	HIGH(_LCDText)
001202   2202     addwfc  0x2, 0x1, 0      	ADDWFC	r0x02, F
001204   c001     movff   0x1, 0xfe9       	MOVFF	r0x01, FSR0L
001206   ffe9
001208   c002     movff   0x2, 0xfea       	MOVFF	r0x02, FSR0H
00120a   ffea
00120c   cfef     movff   0xfef, 0x1       	MOVFF	INDF0, r0x01
00120e   f001
001210   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
001212   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001214   0e01     movlw   0x1              	MOVLW	0x01
001216   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001218   ec99     call    0x2b32, 0        	CALL	_LCDWrite
00121a   f015
00121c   0e02     movlw   0x2              	MOVLW	0x02
00121e   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	353; TCPIP_Stack/LCDBlocking.c	Delay10us(5);
001220   0e55     movlw   0x55             	MOVLW	0x55
001222   6e01     movwf   0x1, 0           	MOVWF	r0x01
001224   6a02     clrf    0x2, 0           	CLRF	r0x02
001226   6a03     clrf    0x3, 0           	CLRF	r0x03
001228   6a04     clrf    0x4, 0           	CLRF	r0x04
                                           _00233_DS_:
00122a   c001     movff   0x1, 0x5         	MOVFF	r0x01, r0x05
00122c   f005
00122e   c002     movff   0x2, 0x6         	MOVFF	r0x02, r0x06
001230   f006
001232   c003     movff   0x3, 0x7         	MOVFF	r0x03, r0x07
001234   f007
001236   c004     movff   0x4, 0x8         	MOVFF	r0x04, r0x08
001238   f008
00123a   0eff     movlw   0xff             	MOVLW	0xff
00123c   2601     addwf   0x1, 0x1, 0      	ADDWF	r0x01, F
00123e   0eff     movlw   0xff             	MOVLW	0xff
001240   2202     addwfc  0x2, 0x1, 0      	ADDWFC	r0x02, F
001242   0eff     movlw   0xff             	MOVLW	0xff
001244   2203     addwfc  0x3, 0x1, 0      	ADDWFC	r0x03, F
001246   0eff     movlw   0xff             	MOVLW	0xff
001248   2204     addwfc  0x4, 0x1, 0      	ADDWFC	r0x04, F
00124a   5005     movf    0x5, 0, 0        	MOVF	r0x05, W
00124c   1006     iorwf   0x6, 0, 0        	IORWF	r0x06, W
00124e   1007     iorwf   0x7, 0, 0        	IORWF	r0x07, W
001250   1008     iorwf   0x8, 0, 0        	IORWF	r0x08, W
001252   e1eb     bnz     0x122a           	BNZ	_00233_DS_
                                           ;	.line	341; TCPIP_Stack/LCDBlocking.c	for(i = 0; i < 16u; i++)
001254   2a00     incf    0, 0x1, 0        	INCF	r0x00, F
001256   d79f     bra     0x1196           	BRA	_00257_DS_
                                           _00260_DS_:
                                           ;	.line	357; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0xC0);
001258   0ec0     movlw   0xc0             	MOVLW	0xc0
00125a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00125c   0e00     movlw   0                	MOVLW	0x00
00125e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001260   ec99     call    0x2b32, 0        	CALL	_LCDWrite
001262   f015
001264   0e02     movlw   0x2              	MOVLW	0x02
001266   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	358; TCPIP_Stack/LCDBlocking.c	Delay10us(5);
001268   0e55     movlw   0x55             	MOVLW	0x55
00126a   6e00     movwf   0, 0             	MOVWF	r0x00
00126c   6a01     clrf    0x1, 0           	CLRF	r0x01
00126e   6a02     clrf    0x2, 0           	CLRF	r0x02
001270   6a03     clrf    0x3, 0           	CLRF	r0x03
                                           _00239_DS_:
001272   c000     movff   0, 0x4           	MOVFF	r0x00, r0x04
001274   f004
001276   c001     movff   0x1, 0x5         	MOVFF	r0x01, r0x05
001278   f005
00127a   c002     movff   0x2, 0x6         	MOVFF	r0x02, r0x06
00127c   f006
00127e   c003     movff   0x3, 0x7         	MOVFF	r0x03, r0x07
001280   f007
001282   0eff     movlw   0xff             	MOVLW	0xff
001284   2600     addwf   0, 0x1, 0        	ADDWF	r0x00, F
001286   0eff     movlw   0xff             	MOVLW	0xff
001288   2201     addwfc  0x1, 0x1, 0      	ADDWFC	r0x01, F
00128a   0eff     movlw   0xff             	MOVLW	0xff
00128c   2202     addwfc  0x2, 0x1, 0      	ADDWFC	r0x02, F
00128e   0eff     movlw   0xff             	MOVLW	0xff
001290   2203     addwfc  0x3, 0x1, 0      	ADDWFC	r0x03, F
001292   5004     movf    0x4, 0, 0        	MOVF	r0x04, W
001294   1005     iorwf   0x5, 0, 0        	IORWF	r0x05, W
001296   1006     iorwf   0x6, 0, 0        	IORWF	r0x06, W
001298   1007     iorwf   0x7, 0, 0        	IORWF	r0x07, W
00129a   e1eb     bnz     0x1272           	BNZ	_00239_DS_
                                           ;	.line	361; TCPIP_Stack/LCDBlocking.c	for(i = 16; i < 32u; i++)
00129c   0e10     movlw   0x10             	MOVLW	0x10
00129e   6e00     movwf   0, 0             	MOVWF	r0x00
                                           _00265_DS_:
0012a0   c000     movff   0, 0x1           	MOVFF	r0x00, r0x01
0012a2   f001
0012a4   6a02     clrf    0x2, 0           	CLRF	r0x02
0012a6   0e00     movlw   0                	MOVLW	0x00
0012a8   5c02     subwf   0x2, 0, 0        	SUBWF	r0x02, W
0012aa   e102     bnz     0x12b0           	BNZ	_00299_DS_
0012ac   0e20     movlw   0x20             	MOVLW	0x20
0012ae   5c01     subwf   0x1, 0, 0        	SUBWF	r0x01, W
                                           _00299_DS_:
0012b0   b0d8     btfsc   0xd8, 0, 0       	BTFSC	STATUS, 0
0012b2   d057     bra     0x1362           	BRA	_00269_DS_
                                           ;	.line	365; TCPIP_Stack/LCDBlocking.c	if(LCDText[i] == 0u)
0012b4   0e00     movlw   0                	MOVLW	LOW(_LCDText)
0012b6   2400     addwf   0, 0, 0          	ADDWF	r0x00, W
0012b8   6e01     movwf   0x1, 0           	MOVWF	r0x01
0012ba   6a02     clrf    0x2, 0           	CLRF	r0x02
0012bc   0e0f     movlw   0xf              	MOVLW	HIGH(_LCDText)
0012be   2202     addwfc  0x2, 0x1, 0      	ADDWFC	r0x02, F
0012c0   c001     movff   0x1, 0xfe9       	MOVFF	r0x01, FSR0L
0012c2   ffe9
0012c4   c002     movff   0x2, 0xfea       	MOVFF	r0x02, FSR0H
0012c6   ffea
0012c8   cfef     movff   0xfef, 0x1       	MOVFF	INDF0, r0x01
0012ca   f001
0012cc   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
0012ce   e119     bnz     0x1302           	BNZ	_00246_DS_
                                           ;	.line	367; TCPIP_Stack/LCDBlocking.c	for(j=i; j < 32u; j++)
0012d0   c000     movff   0, 0x1           	MOVFF	r0x00, r0x01
0012d2   f001
                                           _00261_DS_:
0012d4   c001     movff   0x1, 0x2         	MOVFF	r0x01, r0x02
0012d6   f002
0012d8   6a03     clrf    0x3, 0           	CLRF	r0x03
0012da   0e00     movlw   0                	MOVLW	0x00
0012dc   5c03     subwf   0x3, 0, 0        	SUBWF	r0x03, W
0012de   e102     bnz     0x12e4           	BNZ	_00300_DS_
0012e0   0e20     movlw   0x20             	MOVLW	0x20
0012e2   5c02     subwf   0x2, 0, 0        	SUBWF	r0x02, W
                                           _00300_DS_:
0012e4   e20e     bc      0x1302           	BC	_00246_DS_
                                           ;	.line	369; TCPIP_Stack/LCDBlocking.c	LCDText[j] = ' ';
0012e6   0e00     movlw   0                	MOVLW	LOW(_LCDText)
0012e8   2401     addwf   0x1, 0, 0        	ADDWF	r0x01, W
0012ea   6e02     movwf   0x2, 0           	MOVWF	r0x02
0012ec   6a03     clrf    0x3, 0           	CLRF	r0x03
0012ee   0e0f     movlw   0xf              	MOVLW	HIGH(_LCDText)
0012f0   2203     addwfc  0x3, 0x1, 0      	ADDWFC	r0x03, F
0012f2   c002     movff   0x2, 0xfe9       	MOVFF	r0x02, FSR0L
0012f4   ffe9
0012f6   c003     movff   0x3, 0xfea       	MOVFF	r0x03, FSR0H
0012f8   ffea
0012fa   0e20     movlw   0x20             	MOVLW	0x20
0012fc   6eef     movwf   0xef, 0          	MOVWF	INDF0
                                           ;	.line	367; TCPIP_Stack/LCDBlocking.c	for(j=i; j < 32u; j++)
0012fe   2a01     incf    0x1, 0x1, 0      	INCF	r0x01, F
001300   d7e9     bra     0x12d4           	BRA	_00261_DS_
                                           _00246_DS_:
                                           ;	.line	372; TCPIP_Stack/LCDBlocking.c	LCDWrite(1, LCDText[i]);
001302   0e00     movlw   0                	MOVLW	LOW(_LCDText)
001304   2400     addwf   0, 0, 0          	ADDWF	r0x00, W
001306   6e01     movwf   0x1, 0           	MOVWF	r0x01
001308   6a02     clrf    0x2, 0           	CLRF	r0x02
00130a   0e0f     movlw   0xf              	MOVLW	HIGH(_LCDText)
00130c   2202     addwfc  0x2, 0x1, 0      	ADDWFC	r0x02, F
00130e   c001     movff   0x1, 0xfe9       	MOVFF	r0x01, FSR0L
001310   ffe9
001312   c002     movff   0x2, 0xfea       	MOVFF	r0x02, FSR0H
001314   ffea
001316   cfef     movff   0xfef, 0x1       	MOVFF	INDF0, r0x01
001318   f001
00131a   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
00131c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00131e   0e01     movlw   0x1              	MOVLW	0x01
001320   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001322   ec99     call    0x2b32, 0        	CALL	_LCDWrite
001324   f015
001326   0e02     movlw   0x2              	MOVLW	0x02
001328   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	373; TCPIP_Stack/LCDBlocking.c	Delay10us(5);
00132a   0e55     movlw   0x55             	MOVLW	0x55
00132c   6e01     movwf   0x1, 0           	MOVWF	r0x01
00132e   6a02     clrf    0x2, 0           	CLRF	r0x02
001330   6a03     clrf    0x3, 0           	CLRF	r0x03
001332   6a04     clrf    0x4, 0           	CLRF	r0x04
                                           _00247_DS_:
001334   c001     movff   0x1, 0x5         	MOVFF	r0x01, r0x05
001336   f005
001338   c002     movff   0x2, 0x6         	MOVFF	r0x02, r0x06
00133a   f006
00133c   c003     movff   0x3, 0x7         	MOVFF	r0x03, r0x07
00133e   f007
001340   c004     movff   0x4, 0x8         	MOVFF	r0x04, r0x08
001342   f008
001344   0eff     movlw   0xff             	MOVLW	0xff
001346   2601     addwf   0x1, 0x1, 0      	ADDWF	r0x01, F
001348   0eff     movlw   0xff             	MOVLW	0xff
00134a   2202     addwfc  0x2, 0x1, 0      	ADDWFC	r0x02, F
00134c   0eff     movlw   0xff             	MOVLW	0xff
00134e   2203     addwfc  0x3, 0x1, 0      	ADDWFC	r0x03, F
001350   0eff     movlw   0xff             	MOVLW	0xff
001352   2204     addwfc  0x4, 0x1, 0      	ADDWFC	r0x04, F
001354   5005     movf    0x5, 0, 0        	MOVF	r0x05, W
001356   1006     iorwf   0x6, 0, 0        	IORWF	r0x06, W
001358   1007     iorwf   0x7, 0, 0        	IORWF	r0x07, W
00135a   1008     iorwf   0x8, 0, 0        	IORWF	r0x08, W
00135c   e1eb     bnz     0x1334           	BNZ	_00247_DS_
                                           ;	.line	361; TCPIP_Stack/LCDBlocking.c	for(i = 16; i < 32u; i++)
00135e   2a00     incf    0, 0x1, 0        	INCF	r0x00, F
001360   d79f     bra     0x12a0           	BRA	_00265_DS_
                                           _00269_DS_:
001362   cfe4     movff   0xfe4, 0x8       	MOVFF	PREINC1, r0x08
001364   f008
001366   cfe4     movff   0xfe4, 0x7       	MOVFF	PREINC1, r0x07
001368   f007
00136a   cfe4     movff   0xfe4, 0x6       	MOVFF	PREINC1, r0x06
00136c   f006
00136e   cfe4     movff   0xfe4, 0x5       	MOVFF	PREINC1, r0x05
001370   f005
001372   cfe4     movff   0xfe4, 0x4       	MOVFF	PREINC1, r0x04
001374   f004
001376   cfe4     movff   0xfe4, 0x3       	MOVFF	PREINC1, r0x03
001378   f003
00137a   cfe4     movff   0xfe4, 0x2       	MOVFF	PREINC1, r0x02
00137c   f002
00137e   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
001380   f001
001382   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
001384   f000
001386   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
001388   ffd9
00138a   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDInit	code
                                           _LCDInit:
                                           ;	.line	207; TCPIP_Stack/LCDBlocking.c	void LCDInit(void)
0015e8   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0015ea   ffe5
0015ec   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0015ee   ffd9
0015f0   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
0015f2   ffe5
0015f4   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
0015f6   ffe5
0015f8   c002     movff   0x2, 0xfe5       	MOVFF	r0x02, POSTDEC1
0015fa   ffe5
0015fc   c003     movff   0x3, 0xfe5       	MOVFF	r0x03, POSTDEC1
0015fe   ffe5
001600   c004     movff   0x4, 0xfe5       	MOVFF	r0x04, POSTDEC1
001602   ffe5
001604   c005     movff   0x5, 0xfe5       	MOVFF	r0x05, POSTDEC1
001606   ffe5
001608   c006     movff   0x6, 0xfe5       	MOVFF	r0x06, POSTDEC1
00160a   ffe5
00160c   c007     movff   0x7, 0xfe5       	MOVFF	r0x07, POSTDEC1
00160e   ffe5
001610   c008     movff   0x8, 0xfe5       	MOVFF	r0x08, POSTDEC1
001612   ffe5
                                           ;	.line	211; TCPIP_Stack/LCDBlocking.c	memset(LCDText, ' ', sizeof(LCDText)-1);
001614   0e00     movlw   0                	MOVLW	0x00
001616   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001618   0e20     movlw   0x20             	MOVLW	0x20
00161a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00161c   0e20     movlw   0x20             	MOVLW	0x20
00161e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001620   0e0f     movlw   0xf              	MOVLW	HIGH(_LCDText)
001622   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001624   0e00     movlw   0                	MOVLW	LOW(_LCDText)
001626   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001628   ec03     call    0x2606, 0        	CALL	_memset
00162a   f013
00162c   0e05     movlw   0x5              	MOVLW	0x05
00162e   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
001630   010f     movlb   0xf              	BANKSEL	(_LCDText + 32)
                                           ;	.line	212; TCPIP_Stack/LCDBlocking.c	LCDText[sizeof(LCDText)-1] = 0;
001632   6b20     clrf    0x20, 0x1        	CLRF	(_LCDText + 32), B
                                           ;	.line	215; TCPIP_Stack/LCDBlocking.c	LCD_E_IO = 0;
001634   9090     bcf     0x90, 0, 0       	BCF	_LATHbits, 0
                                           ;	.line	216; TCPIP_Stack/LCDBlocking.c	LCD_RD_WR_IO = 0;
001636   9290     bcf     0x90, 0x1, 0     	BCF	_LATHbits, 1
                                           ;	.line	220; TCPIP_Stack/LCDBlocking.c	LCD_DATA_TRIS = 0x00;
001638   6a96     clrf    0x96, 0          	CLRF	_TRISE
                                           ;	.line	233; TCPIP_Stack/LCDBlocking.c	LCD_RD_WR_TRIS = 0;
00163a   9299     bcf     0x99, 0x1, 0     	BCF	_TRISHbits, 1
                                           ;	.line	234; TCPIP_Stack/LCDBlocking.c	LCD_RS_TRIS = 0;
00163c   9499     bcf     0x99, 0x2, 0     	BCF	_TRISHbits, 2
                                           ;	.line	235; TCPIP_Stack/LCDBlocking.c	LCD_E_TRIS = 0;
00163e   9099     bcf     0x99, 0, 0       	BCF	_TRISHbits, 0
                                           ;	.line	239; TCPIP_Stack/LCDBlocking.c	DelayMs(40);
001640   0ea0     movlw   0xa0             	MOVLW	0xa0
001642   6e00     movwf   0, 0             	MOVWF	r0x00
001644   0e09     movlw   0x9              	MOVLW	0x09
001646   6e01     movwf   0x1, 0           	MOVWF	r0x01
001648   0e01     movlw   0x1              	MOVLW	0x01
00164a   6e02     movwf   0x2, 0           	MOVWF	r0x02
00164c   6a03     clrf    0x3, 0           	CLRF	r0x03
                                           _00143_DS_:
00164e   c000     movff   0, 0x4           	MOVFF	r0x00, r0x04
001650   f004
001652   c001     movff   0x1, 0x5         	MOVFF	r0x01, r0x05
001654   f005
001656   c002     movff   0x2, 0x6         	MOVFF	r0x02, r0x06
001658   f006
00165a   c003     movff   0x3, 0x7         	MOVFF	r0x03, r0x07
00165c   f007
00165e   0eff     movlw   0xff             	MOVLW	0xff
001660   2600     addwf   0, 0x1, 0        	ADDWF	r0x00, F
001662   0eff     movlw   0xff             	MOVLW	0xff
001664   2201     addwfc  0x1, 0x1, 0      	ADDWFC	r0x01, F
001666   0eff     movlw   0xff             	MOVLW	0xff
001668   2202     addwfc  0x2, 0x1, 0      	ADDWFC	r0x02, F
00166a   0eff     movlw   0xff             	MOVLW	0xff
00166c   2203     addwfc  0x3, 0x1, 0      	ADDWFC	r0x03, F
00166e   5004     movf    0x4, 0, 0        	MOVF	r0x04, W
001670   1005     iorwf   0x5, 0, 0        	IORWF	r0x05, W
001672   1006     iorwf   0x6, 0, 0        	IORWF	r0x06, W
001674   1007     iorwf   0x7, 0, 0        	IORWF	r0x07, W
001676   e1eb     bnz     0x164e           	BNZ	_00143_DS_
                                           ;	.line	247; TCPIP_Stack/LCDBlocking.c	LCD_RS_IO = 0;
001678   9490     bcf     0x90, 0x2, 0     	BCF	_LATHbits, 2
                                           ;	.line	249; TCPIP_Stack/LCDBlocking.c	LCD_DATA_IO = 0x03;
00167a   0e03     movlw   0x3              	MOVLW	0x03
00167c   6e8d     movwf   0x8d, 0          	MOVWF	_LATE
00167e   0000     nop                      	nop 
001680   0000     nop                      	nop 
                                           ;	.line	264; TCPIP_Stack/LCDBlocking.c	for(i = 0; i < 3u; i++)
001682   6a00     clrf    0, 0             	CLRF	r0x00
                                           _00191_DS_:
001684   c000     movff   0, 0x1           	MOVFF	r0x00, r0x01
001686   f001
001688   6a02     clrf    0x2, 0           	CLRF	r0x02
00168a   0e00     movlw   0                	MOVLW	0x00
00168c   5c02     subwf   0x2, 0, 0        	SUBWF	r0x02, W
00168e   e102     bnz     0x1694           	BNZ	_00220_DS_
001690   0e03     movlw   0x3              	MOVLW	0x03
001692   5c01     subwf   0x1, 0, 0        	SUBWF	r0x01, W
                                           _00220_DS_:
001694   e239     bc      0x1708           	BC	_00194_DS_
                                           ;	.line	266; TCPIP_Stack/LCDBlocking.c	LCD_E_IO = 1;
001696   8090     bsf     0x90, 0, 0       	BSF	_LATHbits, 0
                                           ;	.line	267; TCPIP_Stack/LCDBlocking.c	Delay10us(1);	       	// Wait E Pulse width time (min 230ns)
001698   0e11     movlw   0x11             	MOVLW	0x11
00169a   6e01     movwf   0x1, 0           	MOVWF	r0x01
00169c   6a02     clrf    0x2, 0           	CLRF	r0x02
00169e   6a03     clrf    0x3, 0           	CLRF	r0x03
0016a0   6a04     clrf    0x4, 0           	CLRF	r0x04
                                           _00155_DS_:
0016a2   c001     movff   0x1, 0x5         	MOVFF	r0x01, r0x05
0016a4   f005
0016a6   c002     movff   0x2, 0x6         	MOVFF	r0x02, r0x06
0016a8   f006
0016aa   c003     movff   0x3, 0x7         	MOVFF	r0x03, r0x07
0016ac   f007
0016ae   c004     movff   0x4, 0x8         	MOVFF	r0x04, r0x08
0016b0   f008
0016b2   0eff     movlw   0xff             	MOVLW	0xff
0016b4   2601     addwf   0x1, 0x1, 0      	ADDWF	r0x01, F
0016b6   0eff     movlw   0xff             	MOVLW	0xff
0016b8   2202     addwfc  0x2, 0x1, 0      	ADDWFC	r0x02, F
0016ba   0eff     movlw   0xff             	MOVLW	0xff
0016bc   2203     addwfc  0x3, 0x1, 0      	ADDWFC	r0x03, F
0016be   0eff     movlw   0xff             	MOVLW	0xff
0016c0   2204     addwfc  0x4, 0x1, 0      	ADDWFC	r0x04, F
0016c2   5005     movf    0x5, 0, 0        	MOVF	r0x05, W
0016c4   1006     iorwf   0x6, 0, 0        	IORWF	r0x06, W
0016c6   1007     iorwf   0x7, 0, 0        	IORWF	r0x07, W
0016c8   1008     iorwf   0x8, 0, 0        	IORWF	r0x08, W
0016ca   e1eb     bnz     0x16a2           	BNZ	_00155_DS_
                                           ;	.line	268; TCPIP_Stack/LCDBlocking.c	LCD_E_IO = 0;
0016cc   9090     bcf     0x90, 0, 0       	BCF	_LATHbits, 0
                                           ;	.line	269; TCPIP_Stack/LCDBlocking.c	DelayMs(2);
0016ce   0e48     movlw   0x48             	MOVLW	0x48
0016d0   6e01     movwf   0x1, 0           	MOVWF	r0x01
0016d2   0e0d     movlw   0xd              	MOVLW	0x0d
0016d4   6e02     movwf   0x2, 0           	MOVWF	r0x02
0016d6   6a03     clrf    0x3, 0           	CLRF	r0x03
0016d8   6a04     clrf    0x4, 0           	CLRF	r0x04
                                           _00161_DS_:
0016da   c001     movff   0x1, 0x5         	MOVFF	r0x01, r0x05
0016dc   f005
0016de   c002     movff   0x2, 0x6         	MOVFF	r0x02, r0x06
0016e0   f006
0016e2   c003     movff   0x3, 0x7         	MOVFF	r0x03, r0x07
0016e4   f007
0016e6   c004     movff   0x4, 0x8         	MOVFF	r0x04, r0x08
0016e8   f008
0016ea   0eff     movlw   0xff             	MOVLW	0xff
0016ec   2601     addwf   0x1, 0x1, 0      	ADDWF	r0x01, F
0016ee   0eff     movlw   0xff             	MOVLW	0xff
0016f0   2202     addwfc  0x2, 0x1, 0      	ADDWFC	r0x02, F
0016f2   0eff     movlw   0xff             	MOVLW	0xff
0016f4   2203     addwfc  0x3, 0x1, 0      	ADDWFC	r0x03, F
0016f6   0eff     movlw   0xff             	MOVLW	0xff
0016f8   2204     addwfc  0x4, 0x1, 0      	ADDWFC	r0x04, F
0016fa   5005     movf    0x5, 0, 0        	MOVF	r0x05, W
0016fc   1006     iorwf   0x6, 0, 0        	IORWF	r0x06, W
0016fe   1007     iorwf   0x7, 0, 0        	IORWF	r0x07, W
001700   1008     iorwf   0x8, 0, 0        	IORWF	r0x08, W
001702   e1eb     bnz     0x16da           	BNZ	_00161_DS_
                                           ;	.line	264; TCPIP_Stack/LCDBlocking.c	for(i = 0; i < 3u; i++)
001704   2a00     incf    0, 0x1, 0        	INCF	r0x00, F
001706   d7be     bra     0x1684           	BRA	_00191_DS_
                                           _00194_DS_:
                                           ;	.line	295; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0x38);
001708   0e38     movlw   0x38             	MOVLW	0x38
00170a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00170c   0e00     movlw   0                	MOVLW	0x00
00170e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001710   ec99     call    0x2b32, 0        	CALL	_LCDWrite
001712   f015
001714   0e02     movlw   0x2              	MOVLW	0x02
001716   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	297; TCPIP_Stack/LCDBlocking.c	Delay10us(5);
001718   0e55     movlw   0x55             	MOVLW	0x55
00171a   6e00     movwf   0, 0             	MOVWF	r0x00
00171c   6a01     clrf    0x1, 0           	CLRF	r0x01
00171e   6a02     clrf    0x2, 0           	CLRF	r0x02
001720   6a03     clrf    0x3, 0           	CLRF	r0x03
                                           _00167_DS_:
001722   c000     movff   0, 0x4           	MOVFF	r0x00, r0x04
001724   f004
001726   c001     movff   0x1, 0x5         	MOVFF	r0x01, r0x05
001728   f005
00172a   c002     movff   0x2, 0x6         	MOVFF	r0x02, r0x06
00172c   f006
00172e   c003     movff   0x3, 0x7         	MOVFF	r0x03, r0x07
001730   f007
001732   0eff     movlw   0xff             	MOVLW	0xff
001734   2600     addwf   0, 0x1, 0        	ADDWF	r0x00, F
001736   0eff     movlw   0xff             	MOVLW	0xff
001738   2201     addwfc  0x1, 0x1, 0      	ADDWFC	r0x01, F
00173a   0eff     movlw   0xff             	MOVLW	0xff
00173c   2202     addwfc  0x2, 0x1, 0      	ADDWFC	r0x02, F
00173e   0eff     movlw   0xff             	MOVLW	0xff
001740   2203     addwfc  0x3, 0x1, 0      	ADDWFC	r0x03, F
001742   5004     movf    0x4, 0, 0        	MOVF	r0x04, W
001744   1005     iorwf   0x5, 0, 0        	IORWF	r0x05, W
001746   1006     iorwf   0x6, 0, 0        	IORWF	r0x06, W
001748   1007     iorwf   0x7, 0, 0        	IORWF	r0x07, W
00174a   e1eb     bnz     0x1722           	BNZ	_00167_DS_
                                           ;	.line	300; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0x06);	// Increment after each write, do not shift
00174c   0e06     movlw   0x6              	MOVLW	0x06
00174e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001750   0e00     movlw   0                	MOVLW	0x00
001752   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001754   ec99     call    0x2b32, 0        	CALL	_LCDWrite
001756   f015
001758   0e02     movlw   0x2              	MOVLW	0x02
00175a   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	301; TCPIP_Stack/LCDBlocking.c	Delay10us(5);
00175c   0e55     movlw   0x55             	MOVLW	0x55
00175e   6e00     movwf   0, 0             	MOVWF	r0x00
001760   6a01     clrf    0x1, 0           	CLRF	r0x01
001762   6a02     clrf    0x2, 0           	CLRF	r0x02
001764   6a03     clrf    0x3, 0           	CLRF	r0x03
                                           _00173_DS_:
001766   c000     movff   0, 0x4           	MOVFF	r0x00, r0x04
001768   f004
00176a   c001     movff   0x1, 0x5         	MOVFF	r0x01, r0x05
00176c   f005
00176e   c002     movff   0x2, 0x6         	MOVFF	r0x02, r0x06
001770   f006
001772   c003     movff   0x3, 0x7         	MOVFF	r0x03, r0x07
001774   f007
001776   0eff     movlw   0xff             	MOVLW	0xff
001778   2600     addwf   0, 0x1, 0        	ADDWF	r0x00, F
00177a   0eff     movlw   0xff             	MOVLW	0xff
00177c   2201     addwfc  0x1, 0x1, 0      	ADDWFC	r0x01, F
00177e   0eff     movlw   0xff             	MOVLW	0xff
001780   2202     addwfc  0x2, 0x1, 0      	ADDWFC	r0x02, F
001782   0eff     movlw   0xff             	MOVLW	0xff
001784   2203     addwfc  0x3, 0x1, 0      	ADDWFC	r0x03, F
001786   5004     movf    0x4, 0, 0        	MOVF	r0x04, W
001788   1005     iorwf   0x5, 0, 0        	IORWF	r0x05, W
00178a   1006     iorwf   0x6, 0, 0        	IORWF	r0x06, W
00178c   1007     iorwf   0x7, 0, 0        	IORWF	r0x07, W
00178e   e1eb     bnz     0x1766           	BNZ	_00173_DS_
                                           ;	.line	304; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0x0C);	// Turn display on, no cusor, no cursor blink
001790   0e0c     movlw   0xc              	MOVLW	0x0c
001792   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001794   0e00     movlw   0                	MOVLW	0x00
001796   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001798   ec99     call    0x2b32, 0        	CALL	_LCDWrite
00179a   f015
00179c   0e02     movlw   0x2              	MOVLW	0x02
00179e   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	305; TCPIP_Stack/LCDBlocking.c	Delay10us(5);
0017a0   0e55     movlw   0x55             	MOVLW	0x55
0017a2   6e00     movwf   0, 0             	MOVWF	r0x00
0017a4   6a01     clrf    0x1, 0           	CLRF	r0x01
0017a6   6a02     clrf    0x2, 0           	CLRF	r0x02
0017a8   6a03     clrf    0x3, 0           	CLRF	r0x03
                                           _00179_DS_:
0017aa   c000     movff   0, 0x4           	MOVFF	r0x00, r0x04
0017ac   f004
0017ae   c001     movff   0x1, 0x5         	MOVFF	r0x01, r0x05
0017b0   f005
0017b2   c002     movff   0x2, 0x6         	MOVFF	r0x02, r0x06
0017b4   f006
0017b6   c003     movff   0x3, 0x7         	MOVFF	r0x03, r0x07
0017b8   f007
0017ba   0eff     movlw   0xff             	MOVLW	0xff
0017bc   2600     addwf   0, 0x1, 0        	ADDWF	r0x00, F
0017be   0eff     movlw   0xff             	MOVLW	0xff
0017c0   2201     addwfc  0x1, 0x1, 0      	ADDWFC	r0x01, F
0017c2   0eff     movlw   0xff             	MOVLW	0xff
0017c4   2202     addwfc  0x2, 0x1, 0      	ADDWFC	r0x02, F
0017c6   0eff     movlw   0xff             	MOVLW	0xff
0017c8   2203     addwfc  0x3, 0x1, 0      	ADDWFC	r0x03, F
0017ca   5004     movf    0x4, 0, 0        	MOVF	r0x04, W
0017cc   1005     iorwf   0x5, 0, 0        	IORWF	r0x05, W
0017ce   1006     iorwf   0x6, 0, 0        	IORWF	r0x06, W
0017d0   1007     iorwf   0x7, 0, 0        	IORWF	r0x07, W
0017d2   e1eb     bnz     0x17aa           	BNZ	_00179_DS_
                                           ;	.line	308; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0x01);	
0017d4   0e01     movlw   0x1              	MOVLW	0x01
0017d6   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0017d8   0e00     movlw   0                	MOVLW	0x00
0017da   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0017dc   ec99     call    0x2b32, 0        	CALL	_LCDWrite
0017de   f015
0017e0   0e02     movlw   0x2              	MOVLW	0x02
0017e2   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	309; TCPIP_Stack/LCDBlocking.c	DelayMs(2);
0017e4   0e48     movlw   0x48             	MOVLW	0x48
0017e6   6e00     movwf   0, 0             	MOVWF	r0x00
0017e8   0e0d     movlw   0xd              	MOVLW	0x0d
0017ea   6e01     movwf   0x1, 0           	MOVWF	r0x01
0017ec   6a02     clrf    0x2, 0           	CLRF	r0x02
0017ee   6a03     clrf    0x3, 0           	CLRF	r0x03
                                           _00185_DS_:
0017f0   c000     movff   0, 0x4           	MOVFF	r0x00, r0x04
0017f2   f004
0017f4   c001     movff   0x1, 0x5         	MOVFF	r0x01, r0x05
0017f6   f005
0017f8   c002     movff   0x2, 0x6         	MOVFF	r0x02, r0x06
0017fa   f006
0017fc   c003     movff   0x3, 0x7         	MOVFF	r0x03, r0x07
0017fe   f007
001800   0eff     movlw   0xff             	MOVLW	0xff
001802   2600     addwf   0, 0x1, 0        	ADDWF	r0x00, F
001804   0eff     movlw   0xff             	MOVLW	0xff
001806   2201     addwfc  0x1, 0x1, 0      	ADDWFC	r0x01, F
001808   0eff     movlw   0xff             	MOVLW	0xff
00180a   2202     addwfc  0x2, 0x1, 0      	ADDWFC	r0x02, F
00180c   0eff     movlw   0xff             	MOVLW	0xff
00180e   2203     addwfc  0x3, 0x1, 0      	ADDWFC	r0x03, F
001810   5004     movf    0x4, 0, 0        	MOVF	r0x04, W
001812   1005     iorwf   0x5, 0, 0        	IORWF	r0x05, W
001814   1006     iorwf   0x6, 0, 0        	IORWF	r0x06, W
001816   1007     iorwf   0x7, 0, 0        	IORWF	r0x07, W
001818   e1eb     bnz     0x17f0           	BNZ	_00185_DS_
00181a   cfe4     movff   0xfe4, 0x8       	MOVFF	PREINC1, r0x08
00181c   f008
00181e   cfe4     movff   0xfe4, 0x7       	MOVFF	PREINC1, r0x07
001820   f007
001822   cfe4     movff   0xfe4, 0x6       	MOVFF	PREINC1, r0x06
001824   f006
001826   cfe4     movff   0xfe4, 0x5       	MOVFF	PREINC1, r0x05
001828   f005
00182a   cfe4     movff   0xfe4, 0x4       	MOVFF	PREINC1, r0x04
00182c   f004
00182e   cfe4     movff   0xfe4, 0x3       	MOVFF	PREINC1, r0x03
001830   f003
001832   cfe4     movff   0xfe4, 0x2       	MOVFF	PREINC1, r0x02
001834   f002
001836   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
001838   f001
00183a   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
00183c   f000
00183e   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
001840   ffd9
001842   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDWrite	code
                                           _LCDWrite:
                                           ;	.line	94; TCPIP_Stack/LCDBlocking.c	static void LCDWrite(BYTE RS, BYTE Data)
002b32   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002b34   ffe5
002b36   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002b38   ffd9
002b3a   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
002b3c   ffe5
002b3e   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
002b40   ffe5
002b42   0e02     movlw   0x2              	MOVLW	0x02
002b44   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
002b46   f000
002b48   0e03     movlw   0x3              	MOVLW	0x03
002b4a   cfdb     movff   0xfdb, 0x1       	MOVFF	PLUSW2, r0x01
002b4c   f001
                                           ;	.line	97; TCPIP_Stack/LCDBlocking.c	LCD_DATA_TRIS = 0x00;
002b4e   6a96     clrf    0x96, 0          	CLRF	_TRISE
                                           ;	.line	110; TCPIP_Stack/LCDBlocking.c	LCD_RS_TRIS = 0;
002b50   9499     bcf     0x99, 0x2, 0     	BCF	_TRISHbits, 2
                                           ;	.line	111; TCPIP_Stack/LCDBlocking.c	LCD_RD_WR_TRIS = 0;
002b52   9299     bcf     0x99, 0x1, 0     	BCF	_TRISHbits, 1
                                           ;	.line	112; TCPIP_Stack/LCDBlocking.c	LCD_RD_WR_IO = 0;
002b54   9290     bcf     0x90, 0x1, 0     	BCF	_LATHbits, 1
                                           ;	.line	113; TCPIP_Stack/LCDBlocking.c	LCD_RS_IO = RS;
002b56   5000     movf    0, 0, 0          	MOVF	r0x00, W
002b58   0b01     andlw   0x1              	ANDLW	0x01
002b5a   44e8     rlncf   0xe8, 0, 0       	RLNCF	WREG, W
002b5c   44e8     rlncf   0xe8, 0, 0       	RLNCF	WREG, W
002b5e   6ef4     movwf   0xf4, 0          	MOVWF	PRODH
002b60   5090     movf    0x90, 0, 0       	MOVF	_LATHbits, W
002b62   0bfb     andlw   0xfb             	ANDLW	0xfb
002b64   10f4     iorwf   0xf4, 0, 0       	IORWF	PRODH, W
002b66   6e90     movwf   0x90, 0          	MOVWF	_LATHbits
                                           ;	.line	140; TCPIP_Stack/LCDBlocking.c	LCD_DATA_IO = Data;
002b68   c001     movff   0x1, 0xf8d       	MOVFF	r0x01, _LATE
002b6a   ff8d
002b6c   0000     nop                      	nop 
002b6e   0000     nop                      	nop 
                                           ;	.line	155; TCPIP_Stack/LCDBlocking.c	LCD_E_IO = 1;
002b70   8090     bsf     0x90, 0, 0       	BSF	_LATHbits, 0
002b72   0000     nop                      	nop 
002b74   0000     nop                      	nop 
002b76   0000     nop                      	nop 
002b78   0000     nop                      	nop 
002b7a   0000     nop                      	nop 
002b7c   0000     nop                      	nop 
002b7e   0000     nop                      	nop 
002b80   0000     nop                      	nop 
002b82   0000     nop                      	nop 
                                           ;	.line	165; TCPIP_Stack/LCDBlocking.c	LCD_E_IO = 0;
002b84   9090     bcf     0x90, 0, 0       	BCF	_LATHbits, 0
002b86   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
002b88   f001
002b8a   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
002b8c   f000
002b8e   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002b90   ffd9
002b92   0012     return  0                	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 1496 (0x05d8) bytes ( 1.14%)
                                           ;           	  748 (0x02ec) words
                                           ; udata size:	   33 (0x0021) bytes ( 0.86%)
                                           ; access size:	    9 (0x0009) bytes
                                           
                                           
                                           	end
